
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000036f6  0000378a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000675  0080011c  0080011c  00003846  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006a4  00000000  00000000  00003866  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ee2  00000000  00000000  00003f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f3  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028b1  00000000  00000000  000061df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  00008a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ae  00000000  00000000  00008f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c2a  00000000  00000000  000095ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 15 	call	0x2afe	; 0x2afe <main>
      8a:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     18e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     286:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 1c 01 	sts	0x011C, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 1c 01 	lds	r24, 0x011C
     300:	82 2b       	or	r24, r18
     302:	80 93 1c 01 	sts	0x011C, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 41 07 	sts	0x0741, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 42 07 	sts	0x0742, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 43 07 	sts	0x0743, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 44 07 	sts	0x0744, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 85 07 	sts	0x0785, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 86 07 	sts	0x0786, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 87 07 	sts	0x0787, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 88 07 	sts	0x0788, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 22 1b 	call	0x3644	; 0x3644 <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 22 1b 	call	0x3644	; 0x3644 <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
int path_array[15][2];
int special_flag = 0, repeat=0;
int right;
int ipl = 0;
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 1c 01 	lds	r24, 0x011C
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 1e 01 	sts	0x011E, r25
     778:	80 93 1d 01 	sts	0x011D, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 29 01 	lds	r24, 0x0129
     780:	90 91 2a 01 	lds	r25, 0x012A
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 1e 01 	sts	0x011E, r1
     78c:	10 92 1d 01 	sts	0x011D, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 1e 01 	sts	0x011E, r25
     7a0:	80 93 1d 01 	sts	0x011D, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 1d 01 	lds	r22, 0x011D
     7a8:	70 91 1e 01 	lds	r23, 0x011E
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 89 07 	lds	r22, 0x0789
     7c0:	70 91 8a 07 	lds	r23, 0x078A
     7c4:	80 91 8b 07 	lds	r24, 0x078B
     7c8:	90 91 8c 07 	lds	r25, 0x078C
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 07 19 	call	0x320e	; 0x320e <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 8d 07 	sts	0x078D, r22
     7dc:	70 93 8e 07 	sts	0x078E, r23
     7e0:	80 93 8f 07 	sts	0x078F, r24
     7e4:	90 93 90 07 	sts	0x0790, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 0d 01 	lds	r18, 0x010D
     7f0:	30 91 0e 01 	lds	r19, 0x010E
     7f4:	40 91 0f 01 	lds	r20, 0x010F
     7f8:	50 91 10 01 	lds	r21, 0x0110
     7fc:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 11 01 	lds	r18, 0x0111
     80c:	30 91 12 01 	lds	r19, 0x0112
     810:	40 91 13 01 	lds	r20, 0x0113
     814:	50 91 14 01 	lds	r21, 0x0114
     818:	0e 94 bf 1a 	call	0x357e	; 0x357e <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 07 19 	call	0x320e	; 0x320e <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 3b 01 	sts	0x013B, r22
     830:	70 93 3c 01 	sts	0x013C, r23
     834:	80 93 3d 01 	sts	0x013D, r24
     838:	90 93 3e 01 	sts	0x013E, r25
	prev_error = mpos ;
     83c:	a0 92 89 07 	sts	0x0789, r10
     840:	b0 92 8a 07 	sts	0x078A, r11
     844:	c0 92 8b 07 	sts	0x078B, r12
     848:	d0 92 8c 07 	sts	0x078C, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 0b 01 	lds	r22, 0x010B
     850:	70 91 0c 01 	lds	r23, 0x010C
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 09 1a 	call	0x3412	; 0x3412 <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 07 19 	call	0x320e	; 0x320e <__subsf3>
     868:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 08 19 	call	0x3210	; 0x3210 <__addsf3>
     87c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 15 01 	sts	0x0115, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
		//left_count();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     92a:	82 e3       	ldi	r24, 0x32	; 50
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
	//delay_sec(2);
}
     932:	08 95       	ret

00000934 <left_count>:
	delay_millisec(50);
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     934:	cc 99       	sbic	0x19, 4	; 25
     936:	16 c0       	rjmp	.+44     	; 0x964 <left_count+0x30>
	{
		if(l==0)
     938:	80 91 21 01 	lds	r24, 0x0121
     93c:	90 91 22 01 	lds	r25, 0x0122
     940:	89 2b       	or	r24, r25
     942:	a1 f4       	brne	.+40     	; 0x96c <left_count+0x38>
		{
			lcount++;
     944:	80 91 23 01 	lds	r24, 0x0123
     948:	90 91 24 01 	lds	r25, 0x0124
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	90 93 24 01 	sts	0x0124, r25
     952:	80 93 23 01 	sts	0x0123, r24
			l = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 22 01 	sts	0x0122, r25
     95e:	80 93 21 01 	sts	0x0121, r24
     962:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     964:	10 92 22 01 	sts	0x0122, r1
     968:	10 92 21 01 	sts	0x0121, r1
     96c:	08 95       	ret

0000096e <special_case_check>:
	}
	
}
void special_case_check()         ////called inside left_junc_check
{
	if(bit_is_clear(PINA,5) || flag1 == 1)
     96e:	cd 9b       	sbis	0x19, 5	; 25
     970:	06 c0       	rjmp	.+12     	; 0x97e <special_case_check+0x10>
     972:	80 91 29 01 	lds	r24, 0x0129
     976:	90 91 2a 01 	lds	r25, 0x012A
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	79 f5       	brne	.+94     	; 0x9dc <special_case_check+0x6e>
	{
		flag1 = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 2a 01 	sts	0x012A, r25
     986:	80 93 29 01 	sts	0x0129, r24
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
     98a:	cc 99       	sbic	0x19, 4	; 25
     98c:	27 c0       	rjmp	.+78     	; 0x9dc <special_case_check+0x6e>
     98e:	86 9b       	sbis	0x10, 6	; 16
     990:	14 c0       	rjmp	.+40     	; 0x9ba <special_case_check+0x4c>
     992:	ce 9b       	sbis	0x19, 6	; 25
     994:	12 c0       	rjmp	.+36     	; 0x9ba <special_case_check+0x4c>
     996:	08 95       	ret
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     998:	3b bd       	out	0x2b, r19	; 43
     99a:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     99c:	39 bd       	out	0x29, r19	; 41
     99e:	28 bd       	out	0x28, r18	; 40
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9a0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9a2:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9a4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9a6:	af 98       	cbi	0x15, 7	; 21
			{
				set_pwm1a(240);
				set_pwm1b(240);
				bot_forward();
				flag1 = 0;
				if(bit_is_clear(PIND, 7))
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	87 99       	sbic	0x10, 7	; 16
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <special_case_check+0x54>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9b0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9b2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9b4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9b6:	af 9a       	sbi	0x15, 7	; 21
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <special_case_check+0x54>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9be:	20 ef       	ldi	r18, 0xF0	; 240
     9c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		flag1 = 1;
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
		{
			while(bit_is_clear(PINA,4) && bit_is_set(PIND, 7)) 
     9c2:	cc 9b       	sbis	0x19, 4	; 25
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <special_case_check+0x62>
     9c6:	90 93 2a 01 	sts	0x012A, r25
     9ca:	80 93 29 01 	sts	0x0129, r24
     9ce:	08 95       	ret
     9d0:	87 99       	sbic	0x10, 7	; 16
     9d2:	e2 cf       	rjmp	.-60     	; 0x998 <special_case_check+0x2a>
     9d4:	90 93 2a 01 	sts	0x012A, r25
     9d8:	80 93 29 01 	sts	0x0129, r24
     9dc:	08 95       	ret

000009de <line_track_new>:
	
}

void line_track_new()
{
	check_sensors();
     9de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9e2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9e4:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9e6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9e8:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     9ea:	ce 9b       	sbis	0x19, 6	; 25
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <line_track_new+0x26>
     9ee:	86 99       	sbic	0x10, 6	; 16
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <line_track_new+0x26>
	{
		set_pwm1a(opt-30);
     9f2:	80 91 0b 01 	lds	r24, 0x010B
     9f6:	90 91 0c 01 	lds	r25, 0x010C
     9fa:	4e 97       	sbiw	r24, 0x1e	; 30
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9fc:	9b bd       	out	0x2b, r25	; 43
     9fe:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt+30);
     a00:	cc 96       	adiw	r24, 0x3c	; 60
     a02:	1e c0       	rjmp	.+60     	; 0xa40 <line_track_new+0x62>

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     a04:	86 9b       	sbis	0x10, 6	; 16
     a06:	0b c0       	rjmp	.+22     	; 0xa1e <line_track_new+0x40>
     a08:	ce 99       	sbic	0x19, 6	; 25
     a0a:	09 c0       	rjmp	.+18     	; 0xa1e <line_track_new+0x40>
	{
		set_pwm1a(opt+30);
     a0c:	80 91 0b 01 	lds	r24, 0x010B
     a10:	90 91 0c 01 	lds	r25, 0x010C
     a14:	4e 96       	adiw	r24, 0x1e	; 30
     a16:	9b bd       	out	0x2b, r25	; 43
     a18:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt-30);
     a1a:	cc 97       	sbiw	r24, 0x3c	; 60
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <line_track_new+0x62>
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     a1e:	86 9b       	sbis	0x10, 6	; 16
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <line_track_new+0x4e>
     a22:	ce 9b       	sbis	0x19, 6	; 25
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <line_track_new+0x4e>
	{
		line_track();
     a26:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <line_track_new+0x66>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     a2c:	86 99       	sbic	0x10, 6	; 16
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <line_track_new+0x66>
     a30:	ce 99       	sbic	0x19, 6	; 25
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <line_track_new+0x66>
	{
		set_pwm1a(opt);
     a34:	80 91 0b 01 	lds	r24, 0x010B
     a38:	90 91 0c 01 	lds	r25, 0x010C
     a3c:	9b bd       	out	0x2b, r25	; 43
     a3e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a40:	99 bd       	out	0x29, r25	; 41
     a42:	88 bd       	out	0x28, r24	; 40
		set_pwm1b(opt);
	}
		delay_microsec(10);
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     a4c:	08 95       	ret

00000a4e <end_zone_uturn>:
	
}

void end_zone_uturn()
{
	turn = 'u';
     a4e:	85 e7       	ldi	r24, 0x75	; 117
     a50:	80 93 15 01 	sts	0x0115, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a54:	24 e0       	ldi	r18, 0x04	; 4
     a56:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a58:	88 e1       	ldi	r24, 0x18	; 24
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <end_zone_uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a5e:	3b bd       	out	0x2b, r19	; 43
     a60:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a62:	99 bd       	out	0x29, r25	; 41
     a64:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a66:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a68:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a6a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a6c:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_clear(PINA,5))
     a6e:	cd 9b       	sbis	0x19, 5	; 25
     a70:	f6 cf       	rjmp	.-20     	; 0xa5e <end_zone_uturn+0x10>
	{
		set_pwm1a(260);
		set_pwm1b(280);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,6) || bit_is_clear(PIND,6));
     a72:	ce 9b       	sbis	0x19, 6	; 25
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <end_zone_uturn+0x24>
     a76:	86 9b       	sbis	0x10, 6	; 16
     a78:	fc cf       	rjmp	.-8      	; 0xa72 <end_zone_uturn+0x24>
	while(bit_is_set(PINA,5));
     a7a:	cd 99       	sbic	0x19, 5	; 25
     a7c:	fe cf       	rjmp	.-4      	; 0xa7a <end_zone_uturn+0x2c>
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <end_zone_uturn+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a80:	9b bd       	out	0x2b, r25	; 43
     a82:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a84:	99 bd       	out	0x29, r25	; 41
     a86:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a88:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a8a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a8c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a8e:	af 98       	cbi	0x15, 7	; 21
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <end_zone_uturn+0x48>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a92:	82 ed       	ldi	r24, 0xD2	; 210
     a94:	90 e0       	ldi	r25, 0x00	; 0
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a96:	ce 9b       	sbis	0x19, 6	; 25
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <end_zone_uturn+0x50>
     a9a:	86 99       	sbic	0x10, 6	; 16
     a9c:	f1 cf       	rjmp	.-30     	; 0xa80 <end_zone_uturn+0x32>
     a9e:	8f e8       	ldi	r24, 0x8F	; 143
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	9b bd       	out	0x2b, r25	; 43
     aa4:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     aa6:	99 bd       	out	0x29, r25	; 41
     aa8:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     aaa:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     aac:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     aae:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     ab0:	af 9a       	sbi	0x15, 7	; 21
		bot_spot_left();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     ab2:	82 e3       	ldi	r24, 0x32	; 50
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <end_zone_uturn+0x72>
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     abc:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     ac0:	cc 9b       	sbis	0x19, 4	; 25
     ac2:	fc cf       	rjmp	.-8      	; 0xabc <end_zone_uturn+0x6e>
     ac4:	87 9b       	sbis	0x10, 7	; 16
     ac6:	fa cf       	rjmp	.-12     	; 0xabc <end_zone_uturn+0x6e>
	{
		line_track_new();
	}
	
}
     ac8:	08 95       	ret

00000aca <turn_left>:
	delay_millisec(50);
}

void turn_left()
{	
	turn = 'l';
     aca:	8c e6       	ldi	r24, 0x6C	; 108
     acc:	80 93 15 01 	sts	0x0115, r24
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <turn_left+0xc>
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
	{
		line_track_new();
     ad2:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
}

void turn_left()
{	
	turn = 'l';
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
     ad6:	87 9b       	sbis	0x10, 7	; 16
     ad8:	fc cf       	rjmp	.-8      	; 0xad2 <turn_left+0x8>
     ada:	cc 9b       	sbis	0x19, 4	; 25
     adc:	fa cf       	rjmp	.-12     	; 0xad2 <turn_left+0x8>
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <turn_left+0x28>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ae0:	9b bd       	out	0x2b, r25	; 43
     ae2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ae4:	99 bd       	out	0x29, r25	; 41
     ae6:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=1;
 MOTOR2B=0;
}
void bot_backward(void)
{
 MOTOR1A=0;
     ae8:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     aea:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     aec:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     aee:	af 9a       	sbi	0x15, 7	; 21
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <turn_left+0x2c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     af2:	85 ef       	ldi	r24, 0xF5	; 245
     af4:	90 e0       	ldi	r25, 0x00	; 0
	{
		line_track_new();
	}
	while(bit_is_set(PIND, 7) && bit_is_set(PINA, 4))
     af6:	87 9b       	sbis	0x10, 7	; 16
     af8:	0c c0       	rjmp	.+24     	; 0xb12 <turn_left+0x48>
     afa:	cc 99       	sbic	0x19, 4	; 25
     afc:	f1 cf       	rjmp	.-30     	; 0xae0 <turn_left+0x16>
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <turn_left+0x48>
     b00:	9b bd       	out	0x2b, r25	; 43
     b02:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b04:	99 bd       	out	0x29, r25	; 41
     b06:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     b08:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     b0a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b0c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     b0e:	af 98       	cbi	0x15, 7	; 21
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <turn_left+0x4c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b12:	85 ef       	ldi	r24, 0xF5	; 245
     b14:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_backward();
	}
	while(bit_is_set(PINA,5))
     b16:	cd 99       	sbic	0x19, 5	; 25
     b18:	f3 cf       	rjmp	.-26     	; 0xb00 <turn_left+0x36>
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <turn_left+0x64>
     b1c:	9b bd       	out	0x2b, r25	; 43
     b1e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b20:	99 bd       	out	0x29, r25	; 41
     b22:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     b24:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     b26:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b28:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     b2a:	af 98       	cbi	0x15, 7	; 21
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <turn_left+0x68>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b2e:	8c ed       	ldi	r24, 0xDC	; 220
     b30:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     b32:	ce 9b       	sbis	0x19, 6	; 25
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <turn_left+0x76>
     b36:	86 99       	sbic	0x10, 6	; 16
     b38:	f1 cf       	rjmp	.-30     	; 0xb1c <turn_left+0x52>
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <turn_left+0x76>
		set_pwm1b(220);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b3c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	{
		set_pwm1a(220);
		set_pwm1b(220);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b40:	cc 9b       	sbis	0x19, 4	; 25
     b42:	fc cf       	rjmp	.-8      	; 0xb3c <turn_left+0x72>
     b44:	87 9b       	sbis	0x10, 7	; 16
     b46:	fa cf       	rjmp	.-12     	; 0xb3c <turn_left+0x72>
     b48:	8f e8       	ldi	r24, 0x8F	; 143
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	9b bd       	out	0x2b, r25	; 43
     b4e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b50:	99 bd       	out	0x29, r25	; 41
     b52:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b54:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b56:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b58:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b5a:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b5c:	82 e3       	ldi	r24, 0x32	; 50
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     b64:	08 95       	ret

00000b66 <turn_right>:
	delay_millisec(50);
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
     b66:	82 e7       	ldi	r24, 0x72	; 114
     b68:	80 93 15 01 	sts	0x0115, r24
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <turn_right+0x10>
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
	{
		line_track_new();
     b6e:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		left_count();
     b72:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
     b76:	87 9b       	sbis	0x10, 7	; 16
     b78:	fa cf       	rjmp	.-12     	; 0xb6e <turn_right+0x8>
     b7a:	cc 9b       	sbis	0x19, 4	; 25
     b7c:	f8 cf       	rjmp	.-16     	; 0xb6e <turn_right+0x8>
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <turn_right+0x2c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b80:	9b bd       	out	0x2b, r25	; 43
     b82:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b84:	99 bd       	out	0x29, r25	; 41
     b86:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=1;
 MOTOR2B=0;
}
void bot_backward(void)
{
 MOTOR1A=0;
     b88:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     b8a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     b8c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b8e:	af 9a       	sbi	0x15, 7	; 21
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <turn_right+0x30>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b92:	85 ef       	ldi	r24, 0xF5	; 245
     b94:	90 e0       	ldi	r25, 0x00	; 0
	{
		line_track_new();
		left_count();
	}
	while(bit_is_set(PIND, 7) && bit_is_set(PINA, 4))
     b96:	87 9b       	sbis	0x10, 7	; 16
     b98:	0c c0       	rjmp	.+24     	; 0xbb2 <turn_right+0x4c>
     b9a:	cc 99       	sbic	0x19, 4	; 25
     b9c:	f1 cf       	rjmp	.-30     	; 0xb80 <turn_right+0x1a>
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <turn_right+0x4c>
     ba0:	9b bd       	out	0x2b, r25	; 43
     ba2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ba4:	99 bd       	out	0x29, r25	; 41
     ba6:	88 bd       	out	0x28, r24	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     ba8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     baa:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     bac:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     bae:	af 9a       	sbi	0x15, 7	; 21
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <turn_right+0x50>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bb2:	85 ef       	ldi	r24, 0xF5	; 245
     bb4:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_backward();
	}
	while(bit_is_set(PINA,7))
     bb6:	cf 99       	sbic	0x19, 7	; 25
     bb8:	f3 cf       	rjmp	.-26     	; 0xba0 <turn_right+0x3a>
     bba:	09 c0       	rjmp	.+18     	; 0xbce <turn_right+0x68>
     bbc:	9b bd       	out	0x2b, r25	; 43
     bbe:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bc0:	99 bd       	out	0x29, r25	; 41
     bc2:	88 bd       	out	0x28, r24	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     bc4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     bc6:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     bc8:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     bca:	af 9a       	sbi	0x15, 7	; 21
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <turn_right+0x6c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bce:	8c ed       	ldi	r24, 0xDC	; 220
     bd0:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1b(245);
		bot_spot_right();
		//left_count();
	}
	
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     bd2:	ce 9b       	sbis	0x19, 6	; 25
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <turn_right+0x7a>
     bd6:	86 99       	sbic	0x10, 6	; 16
     bd8:	f1 cf       	rjmp	.-30     	; 0xbbc <turn_right+0x56>
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <turn_right+0x7a>
		bot_spot_right();
		//left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     bdc:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		set_pwm1a(220);
		set_pwm1b(220);
		bot_spot_right();
		//left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     be0:	cc 9b       	sbis	0x19, 4	; 25
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <turn_right+0x76>
     be4:	87 9b       	sbis	0x10, 7	; 16
     be6:	fa cf       	rjmp	.-12     	; 0xbdc <turn_right+0x76>
     be8:	8f e8       	ldi	r24, 0x8F	; 143
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9b bd       	out	0x2b, r25	; 43
     bee:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bf0:	99 bd       	out	0x29, r25	; 41
     bf2:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     bf4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     bf6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     bf8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     bfa:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     bfc:	82 e3       	ldi	r24, 0x32	; 50
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     c04:	08 95       	ret

00000c06 <sense_of_directon>:
}


void sense_of_directon(void)
{
	if(turn == 'r')	
     c06:	80 91 15 01 	lds	r24, 0x0115
     c0a:	82 37       	cpi	r24, 0x72	; 114
     c0c:	d1 f4       	brne	.+52     	; 0xc42 <sense_of_directon+0x3c>
	{
		switch(dir)
     c0e:	80 91 16 01 	lds	r24, 0x0116
     c12:	90 91 17 01 	lds	r25, 0x0117
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	8f 3f       	cpi	r24, 0xFF	; 255
     c1a:	92 07       	cpc	r25, r18
     c1c:	59 f1       	breq	.+86     	; 0xc74 <sense_of_directon+0x6e>
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	8f 3f       	cpi	r24, 0xFF	; 255
     c22:	92 07       	cpc	r25, r18
     c24:	09 f0       	breq	.+2      	; 0xc28 <sense_of_directon+0x22>
     c26:	2c f4       	brge	.+10     	; 0xc32 <sense_of_directon+0x2c>
     c28:	8e 5f       	subi	r24, 0xFE	; 254
     c2a:	9f 4f       	sbci	r25, 0xFF	; 255
     c2c:	09 f0       	breq	.+2      	; 0xc30 <sense_of_directon+0x2a>
     c2e:	51 c0       	rjmp	.+162    	; 0xcd2 <sense_of_directon+0xcc>
     c30:	3d c0       	rjmp	.+122    	; 0xcac <sense_of_directon+0xa6>
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <sense_of_directon+0x34>
     c38:	3f c0       	rjmp	.+126    	; 0xcb8 <sense_of_directon+0xb2>
     c3a:	02 97       	sbiw	r24, 0x02	; 2
     c3c:	09 f0       	breq	.+2      	; 0xc40 <sense_of_directon+0x3a>
     c3e:	49 c0       	rjmp	.+146    	; 0xcd2 <sense_of_directon+0xcc>
     c40:	38 c0       	rjmp	.+112    	; 0xcb2 <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     c42:	8c 36       	cpi	r24, 0x6C	; 108
     c44:	d1 f4       	brne	.+52     	; 0xc7a <sense_of_directon+0x74>
	{
		switch(dir)
     c46:	80 91 16 01 	lds	r24, 0x0116
     c4a:	90 91 17 01 	lds	r25, 0x0117
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	8f 3f       	cpi	r24, 0xFF	; 255
     c52:	92 07       	cpc	r25, r18
     c54:	89 f1       	breq	.+98     	; 0xcb8 <sense_of_directon+0xb2>
     c56:	2f ef       	ldi	r18, 0xFF	; 255
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	92 07       	cpc	r25, r18
     c5c:	09 f0       	breq	.+2      	; 0xc60 <sense_of_directon+0x5a>
     c5e:	24 f4       	brge	.+8      	; 0xc68 <sense_of_directon+0x62>
     c60:	8e 5f       	subi	r24, 0xFE	; 254
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	b1 f5       	brne	.+108    	; 0xcd2 <sense_of_directon+0xcc>
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <sense_of_directon+0xac>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	91 05       	cpc	r25, r1
     c6c:	19 f0       	breq	.+6      	; 0xc74 <sense_of_directon+0x6e>
     c6e:	02 97       	sbiw	r24, 0x02	; 2
     c70:	81 f5       	brne	.+96     	; 0xcd2 <sense_of_directon+0xcc>
     c72:	1c c0       	rjmp	.+56     	; 0xcac <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	21 c0       	rjmp	.+66     	; 0xcbc <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     c7a:	85 37       	cpi	r24, 0x75	; 117
     c7c:	51 f5       	brne	.+84     	; 0xcd2 <sense_of_directon+0xcc>
	{
		switch(dir)
     c7e:	80 91 16 01 	lds	r24, 0x0116
     c82:	90 91 17 01 	lds	r25, 0x0117
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	92 07       	cpc	r25, r18
     c8c:	91 f0       	breq	.+36     	; 0xcb2 <sense_of_directon+0xac>
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	8f 3f       	cpi	r24, 0xFF	; 255
     c92:	92 07       	cpc	r25, r18
     c94:	09 f0       	breq	.+2      	; 0xc98 <sense_of_directon+0x92>
     c96:	24 f4       	brge	.+8      	; 0xca0 <sense_of_directon+0x9a>
     c98:	8e 5f       	subi	r24, 0xFE	; 254
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	d1 f4       	brne	.+52     	; 0xcd2 <sense_of_directon+0xcc>
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <sense_of_directon+0xc0>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	91 05       	cpc	r25, r1
     ca4:	19 f0       	breq	.+6      	; 0xcac <sense_of_directon+0xa6>
     ca6:	02 97       	sbiw	r24, 0x02	; 2
     ca8:	a1 f4       	brne	.+40     	; 0xcd2 <sense_of_directon+0xcc>
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     cb8:	8e ef       	ldi	r24, 0xFE	; 254
     cba:	9f ef       	ldi	r25, 0xFF	; 255
     cbc:	90 93 17 01 	sts	0x0117, r25
     cc0:	80 93 16 01 	sts	0x0116, r24
     cc4:	08 95       	ret
			case -2: dir = +2; break;	
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 17 01 	sts	0x0117, r25
     cce:	80 93 16 01 	sts	0x0116, r24
     cd2:	08 95       	ret

00000cd4 <is_coordinate_null>:
	
}

int is_coordinate_null(int x,int y)
{
	if(dir_array[x][y][0]=='F' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='F')
     cd4:	fc 01       	movw	r30, r24
     cd6:	a4 e0       	ldi	r26, 0x04	; 4
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	aa 95       	dec	r26
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <is_coordinate_null+0x4>
     ce0:	e6 0f       	add	r30, r22
     ce2:	f7 1f       	adc	r31, r23
     ce4:	df 01       	movw	r26, r30
     ce6:	aa 0f       	add	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	aa 0f       	add	r26, r26
     cec:	bb 1f       	adc	r27, r27
     cee:	a1 5c       	subi	r26, 0xC1	; 193
     cf0:	bc 4f       	sbci	r27, 0xFC	; 252
     cf2:	8c 91       	ld	r24, X
     cf4:	86 34       	cpi	r24, 0x46	; 70
     cf6:	c9 f4       	brne	.+50     	; 0xd2a <is_coordinate_null+0x56>
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	8c 91       	ld	r24, X
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	86 34       	cpi	r24, 0x46	; 70
     d00:	a1 f4       	brne	.+40     	; 0xd2a <is_coordinate_null+0x56>
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ef 5b       	subi	r30, 0xBF	; 191
     d0c:	fc 4f       	sbci	r31, 0xFC	; 252
     d0e:	80 81       	ld	r24, Z
     d10:	86 34       	cpi	r24, 0x46	; 70
     d12:	59 f4       	brne	.+22     	; 0xd2a <is_coordinate_null+0x56>
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	8c 91       	ld	r24, X
     d1a:	86 34       	cpi	r24, 0x46	; 70
     d1c:	09 f0       	breq	.+2      	; 0xd20 <is_coordinate_null+0x4c>
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	98 27       	eor	r25, r24
     d24:	29 2f       	mov	r18, r25
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <is_coordinate_null+0x5a>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     d2e:	c9 01       	movw	r24, r18
     d30:	08 95       	ret

00000d32 <update_array>:
	}
	
}

void update_array(char y,char x,char ny,char nx)
{
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	f8 2e       	mov	r15, r24
     d44:	e6 2e       	mov	r14, r22
     d46:	d4 2e       	mov	r13, r20
     d48:	c2 2e       	mov	r12, r18
	////checking if the path is already traversed before i.e(if all 4 values is zero)
	if(is_coordinate_null(x_coordinate,y_coordinate))
     d4a:	c0 91 18 01 	lds	r28, 0x0118
     d4e:	d0 91 19 01 	lds	r29, 0x0119
     d52:	00 91 1a 01 	lds	r16, 0x011A
     d56:	10 91 1b 01 	lds	r17, 0x011B
     d5a:	ce 01       	movw	r24, r28
     d5c:	b8 01       	movw	r22, r16
     d5e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     d62:	89 2b       	or	r24, r25
     d64:	09 f4       	brne	.+2      	; 0xd68 <update_array+0x36>
     d66:	7a c0       	rjmp	.+244    	; 0xe5c <update_array+0x12a>
	{	
		switch(dir)
     d68:	80 91 16 01 	lds	r24, 0x0116
     d6c:	90 91 17 01 	lds	r25, 0x0117
     d70:	2f ef       	ldi	r18, 0xFF	; 255
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	92 07       	cpc	r25, r18
     d76:	09 f4       	brne	.+2      	; 0xd7a <update_array+0x48>
     d78:	59 c0       	rjmp	.+178    	; 0xe2c <update_array+0xfa>
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	92 07       	cpc	r25, r18
     d80:	09 f0       	breq	.+2      	; 0xd84 <update_array+0x52>
     d82:	2c f4       	brge	.+10     	; 0xd8e <update_array+0x5c>
     d84:	8e 5f       	subi	r24, 0xFE	; 254
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	09 f0       	breq	.+2      	; 0xd8c <update_array+0x5a>
     d8a:	68 c0       	rjmp	.+208    	; 0xe5c <update_array+0x12a>
     d8c:	39 c0       	rjmp	.+114    	; 0xe00 <update_array+0xce>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	91 05       	cpc	r25, r1
     d92:	e1 f0       	breq	.+56     	; 0xdcc <update_array+0x9a>
     d94:	02 97       	sbiw	r24, 0x02	; 2
     d96:	09 f0       	breq	.+2      	; 0xd9a <update_array+0x68>
     d98:	61 c0       	rjmp	.+194    	; 0xe5c <update_array+0x12a>
		{
			case 2:
			dir_array[x_coordinate][y_coordinate][0] = y;
     d9a:	fe 01       	movw	r30, r28
     d9c:	b4 e0       	ldi	r27, 0x04	; 4
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	ba 95       	dec	r27
     da4:	e1 f7       	brne	.-8      	; 0xd9e <update_array+0x6c>
     da6:	e0 0f       	add	r30, r16
     da8:	f1 1f       	adc	r31, r17
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	df 01       	movw	r26, r30
     db4:	a1 5c       	subi	r26, 0xC1	; 193
     db6:	bc 4f       	sbci	r27, 0xFC	; 252
     db8:	fc 92       	st	X, r15
			dir_array[x_coordinate][y_coordinate][1] = x;
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	ec 92       	st	X, r14
     dbe:	11 97       	sbiw	r26, 0x01	; 1
			dir_array[x_coordinate][y_coordinate][2] = ny;
     dc0:	ef 5b       	subi	r30, 0xBF	; 191
     dc2:	fc 4f       	sbci	r31, 0xFC	; 252
     dc4:	d0 82       	st	Z, r13
			dir_array[x_coordinate][y_coordinate][3] = nx;
     dc6:	13 96       	adiw	r26, 0x03	; 3
     dc8:	cc 92       	st	X, r12
     dca:	48 c0       	rjmp	.+144    	; 0xe5c <update_array+0x12a>
			break;
			case 1:
			dir_array[x_coordinate][y_coordinate][1] = y;
     dcc:	fe 01       	movw	r30, r28
     dce:	64 e0       	ldi	r22, 0x04	; 4
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	6a 95       	dec	r22
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <update_array+0x9e>
     dd8:	e0 0f       	add	r30, r16
     dda:	f1 1f       	adc	r31, r17
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	df 01       	movw	r26, r30
     de6:	a1 5c       	subi	r26, 0xC1	; 193
     de8:	bc 4f       	sbci	r27, 0xFC	; 252
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	fc 92       	st	X, r15
     dee:	11 97       	sbiw	r26, 0x01	; 1
			dir_array[x_coordinate][y_coordinate][2] = x;
     df0:	ef 5b       	subi	r30, 0xBF	; 191
     df2:	fc 4f       	sbci	r31, 0xFC	; 252
     df4:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][3] = ny;
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	dc 92       	st	X, r13
     dfa:	13 97       	sbiw	r26, 0x03	; 3
			dir_array[x_coordinate][y_coordinate][0] = nx;
     dfc:	cc 92       	st	X, r12
     dfe:	2e c0       	rjmp	.+92     	; 0xe5c <update_array+0x12a>
			break;
			case -2:
			dir_array[x_coordinate][y_coordinate][2] = y;
     e00:	fe 01       	movw	r30, r28
     e02:	34 e0       	ldi	r19, 0x04	; 4
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	3a 95       	dec	r19
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <update_array+0xd2>
     e0c:	e0 0f       	add	r30, r16
     e0e:	f1 1f       	adc	r31, r17
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	df 01       	movw	r26, r30
     e1a:	af 5b       	subi	r26, 0xBF	; 191
     e1c:	bc 4f       	sbci	r27, 0xFC	; 252
     e1e:	fc 92       	st	X, r15
			dir_array[x_coordinate][y_coordinate][3] = x;
     e20:	e1 5c       	subi	r30, 0xC1	; 193
     e22:	fc 4f       	sbci	r31, 0xFC	; 252
     e24:	e3 82       	std	Z+3, r14	; 0x03
			dir_array[x_coordinate][y_coordinate][0] = ny;
     e26:	d0 82       	st	Z, r13
			dir_array[x_coordinate][y_coordinate][1] = nx;
     e28:	c1 82       	std	Z+1, r12	; 0x01
     e2a:	18 c0       	rjmp	.+48     	; 0xe5c <update_array+0x12a>
			break;
			case -1:
			dir_array[x_coordinate][y_coordinate][3] = y;
     e2c:	fe 01       	movw	r30, r28
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	8a 95       	dec	r24
     e36:	e1 f7       	brne	.-8      	; 0xe30 <update_array+0xfe>
     e38:	e0 0f       	add	r30, r16
     e3a:	f1 1f       	adc	r31, r17
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	df 01       	movw	r26, r30
     e46:	a1 5c       	subi	r26, 0xC1	; 193
     e48:	bc 4f       	sbci	r27, 0xFC	; 252
     e4a:	13 96       	adiw	r26, 0x03	; 3
     e4c:	fc 92       	st	X, r15
     e4e:	13 97       	sbiw	r26, 0x03	; 3
			dir_array[x_coordinate][y_coordinate][0] = x;
     e50:	ec 92       	st	X, r14
			dir_array[x_coordinate][y_coordinate][1] = ny;
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	dc 92       	st	X, r13
			dir_array[x_coordinate][y_coordinate][2] = nx;
     e56:	ef 5b       	subi	r30, 0xBF	; 191
     e58:	fc 4f       	sbci	r31, 0xFC	; 252
     e5a:	c0 82       	st	Z, r12
			break;
		}
	}
	
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	08 95       	ret

00000e6e <update_coordinates>:
}


void update_coordinates(void)
{	
	int value = Coordinates_changed_by;
     e6e:	80 91 2f 01 	lds	r24, 0x012F
     e72:	90 91 30 01 	lds	r25, 0x0130
	
	if(value==2)		//to store the middle point in 60cm shift i.e to make it continous
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <update_coordinates+0x10>
     e7c:	a7 c0       	rjmp	.+334    	; 0xfcc <update_coordinates+0x15e>
	{
		switch(dir)
     e7e:	80 91 16 01 	lds	r24, 0x0116
     e82:	90 91 17 01 	lds	r25, 0x0117
     e86:	2f ef       	ldi	r18, 0xFF	; 255
     e88:	8f 3f       	cpi	r24, 0xFF	; 255
     e8a:	92 07       	cpc	r25, r18
     e8c:	a1 f1       	breq	.+104    	; 0xef6 <update_coordinates+0x88>
     e8e:	2f ef       	ldi	r18, 0xFF	; 255
     e90:	8f 3f       	cpi	r24, 0xFF	; 255
     e92:	92 07       	cpc	r25, r18
     e94:	09 f0       	breq	.+2      	; 0xe98 <update_coordinates+0x2a>
     e96:	2c f4       	brge	.+10     	; 0xea2 <update_coordinates+0x34>
     e98:	8e 5f       	subi	r24, 0xFE	; 254
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	09 f0       	breq	.+2      	; 0xea0 <update_coordinates+0x32>
     e9e:	fb c1       	rjmp	.+1014   	; 0x1296 <update_coordinates+0x428>
     ea0:	71 c0       	rjmp	.+226    	; 0xf84 <update_coordinates+0x116>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <update_coordinates+0x42>
     ea8:	02 97       	sbiw	r24, 0x02	; 2
     eaa:	09 f0       	breq	.+2      	; 0xeae <update_coordinates+0x40>
     eac:	f4 c1       	rjmp	.+1000   	; 0x1296 <update_coordinates+0x428>
     eae:	46 c0       	rjmp	.+140    	; 0xf3c <update_coordinates+0xce>
		{
			case +1 :	x_coordinate+=1;						
     eb0:	80 91 18 01 	lds	r24, 0x0118
     eb4:	90 91 19 01 	lds	r25, 0x0119
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	90 93 19 01 	sts	0x0119, r25
     ebe:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
     ec2:	84 e5       	ldi	r24, 0x54	; 84
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	66 e4       	ldi	r22, 0x46	; 70
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	44 e5       	ldi	r20, 0x54	; 84
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	26 e4       	ldi	r18, 0x46	; 70
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate+=1;
     ed6:	80 91 18 01 	lds	r24, 0x0118
     eda:	90 91 19 01 	lds	r25, 0x0119
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	90 93 19 01 	sts	0x0119, r25
     ee4:	80 93 18 01 	sts	0x0118, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     ee8:	60 91 1a 01 	lds	r22, 0x011A
     eec:	70 91 1b 01 	lds	r23, 0x011B
     ef0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     ef4:	c0 c1       	rjmp	.+896    	; 0x1276 <update_coordinates+0x408>
						{
							repeat = 0;
						}
						break;

			case -1 :	x_coordinate-=1;						
     ef6:	80 91 18 01 	lds	r24, 0x0118
     efa:	90 91 19 01 	lds	r25, 0x0119
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	90 93 19 01 	sts	0x0119, r25
     f04:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
     f08:	84 e5       	ldi	r24, 0x54	; 84
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	66 e4       	ldi	r22, 0x46	; 70
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	44 e5       	ldi	r20, 0x54	; 84
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	26 e4       	ldi	r18, 0x46	; 70
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate-=1;
     f1c:	80 91 18 01 	lds	r24, 0x0118
     f20:	90 91 19 01 	lds	r25, 0x0119
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	90 93 19 01 	sts	0x0119, r25
     f2a:	80 93 18 01 	sts	0x0118, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     f2e:	60 91 1a 01 	lds	r22, 0x011A
     f32:	70 91 1b 01 	lds	r23, 0x011B
     f36:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     f3a:	9d c1       	rjmp	.+826    	; 0x1276 <update_coordinates+0x408>
						{
							repeat = 0;
						}
						break;
					
			case +2 :	y_coordinate+=1;						
     f3c:	80 91 1a 01 	lds	r24, 0x011A
     f40:	90 91 1b 01 	lds	r25, 0x011B
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 1b 01 	sts	0x011B, r25
     f4a:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
     f4e:	84 e5       	ldi	r24, 0x54	; 84
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	66 e4       	ldi	r22, 0x46	; 70
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	44 e5       	ldi	r20, 0x54	; 84
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	26 e4       	ldi	r18, 0x46	; 70
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate+=1;
     f62:	60 91 1a 01 	lds	r22, 0x011A
     f66:	70 91 1b 01 	lds	r23, 0x011B
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	70 93 1b 01 	sts	0x011B, r23
     f72:	60 93 1a 01 	sts	0x011A, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     f76:	80 91 18 01 	lds	r24, 0x0118
     f7a:	90 91 19 01 	lds	r25, 0x0119
     f7e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     f82:	79 c1       	rjmp	.+754    	; 0x1276 <update_coordinates+0x408>
							repeat = 0;
						}
						
						break;

			case -2 :	y_coordinate-=1;						
     f84:	80 91 1a 01 	lds	r24, 0x011A
     f88:	90 91 1b 01 	lds	r25, 0x011B
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	90 93 1b 01 	sts	0x011B, r25
     f92:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
     f96:	84 e5       	ldi	r24, 0x54	; 84
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	66 e4       	ldi	r22, 0x46	; 70
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	44 e5       	ldi	r20, 0x54	; 84
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	26 e4       	ldi	r18, 0x46	; 70
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate-=1;
     faa:	60 91 1a 01 	lds	r22, 0x011A
     fae:	70 91 1b 01 	lds	r23, 0x011B
     fb2:	61 50       	subi	r22, 0x01	; 1
     fb4:	70 40       	sbci	r23, 0x00	; 0
     fb6:	70 93 1b 01 	sts	0x011B, r23
     fba:	60 93 1a 01 	sts	0x011A, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     fbe:	80 91 18 01 	lds	r24, 0x0118
     fc2:	90 91 19 01 	lds	r25, 0x0119
     fc6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     fca:	55 c1       	rjmp	.+682    	; 0x1276 <update_coordinates+0x408>
							repeat = 0;
						}
						break;	
		}
	}
	else if(value==1)
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <update_coordinates+0x166>
     fd2:	5b c0       	rjmp	.+182    	; 0x108a <update_coordinates+0x21c>
	{
		switch(dir)
     fd4:	80 91 16 01 	lds	r24, 0x0116
     fd8:	90 91 17 01 	lds	r25, 0x0117
     fdc:	2f ef       	ldi	r18, 0xFF	; 255
     fde:	8f 3f       	cpi	r24, 0xFF	; 255
     fe0:	92 07       	cpc	r25, r18
     fe2:	09 f1       	breq	.+66     	; 0x1026 <update_coordinates+0x1b8>
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	8f 3f       	cpi	r24, 0xFF	; 255
     fe8:	92 07       	cpc	r25, r18
     fea:	09 f0       	breq	.+2      	; 0xfee <update_coordinates+0x180>
     fec:	2c f4       	brge	.+10     	; 0xff8 <update_coordinates+0x18a>
     fee:	8e 5f       	subi	r24, 0xFE	; 254
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	09 f0       	breq	.+2      	; 0xff6 <update_coordinates+0x188>
     ff4:	50 c1       	rjmp	.+672    	; 0x1296 <update_coordinates+0x428>
     ff6:	38 c0       	rjmp	.+112    	; 0x1068 <update_coordinates+0x1fa>
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	91 05       	cpc	r25, r1
     ffc:	21 f0       	breq	.+8      	; 0x1006 <update_coordinates+0x198>
     ffe:	02 97       	sbiw	r24, 0x02	; 2
    1000:	09 f0       	breq	.+2      	; 0x1004 <update_coordinates+0x196>
    1002:	49 c1       	rjmp	.+658    	; 0x1296 <update_coordinates+0x428>
    1004:	20 c0       	rjmp	.+64     	; 0x1046 <update_coordinates+0x1d8>
		{
			case +1 : 
			x_coordinate+=value;
    1006:	80 91 18 01 	lds	r24, 0x0118
    100a:	90 91 19 01 	lds	r25, 0x0119
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	90 93 19 01 	sts	0x0119, r25
    1014:	80 93 18 01 	sts	0x0118, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1018:	60 91 1a 01 	lds	r22, 0x011A
    101c:	70 91 1b 01 	lds	r23, 0x011B
    1020:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1024:	28 c1       	rjmp	.+592    	; 0x1276 <update_coordinates+0x408>
			{
				repeat = 0;
			}
			break;
			case -1 : 
			x_coordinate-=value;
    1026:	80 91 18 01 	lds	r24, 0x0118
    102a:	90 91 19 01 	lds	r25, 0x0119
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	90 93 19 01 	sts	0x0119, r25
    1034:	80 93 18 01 	sts	0x0118, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1038:	60 91 1a 01 	lds	r22, 0x011A
    103c:	70 91 1b 01 	lds	r23, 0x011B
    1040:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1044:	18 c1       	rjmp	.+560    	; 0x1276 <update_coordinates+0x408>
			{
				repeat = 0;
			}
			break;
			case +2 : 
			y_coordinate+=value;
    1046:	60 91 1a 01 	lds	r22, 0x011A
    104a:	70 91 1b 01 	lds	r23, 0x011B
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	70 93 1b 01 	sts	0x011B, r23
    1056:	60 93 1a 01 	sts	0x011A, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    105a:	80 91 18 01 	lds	r24, 0x0118
    105e:	90 91 19 01 	lds	r25, 0x0119
    1062:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1066:	07 c1       	rjmp	.+526    	; 0x1276 <update_coordinates+0x408>
			{
				repeat = 0;
			}
			break;
			case -2 : 
			y_coordinate-=value; 
    1068:	60 91 1a 01 	lds	r22, 0x011A
    106c:	70 91 1b 01 	lds	r23, 0x011B
    1070:	61 50       	subi	r22, 0x01	; 1
    1072:	70 40       	sbci	r23, 0x00	; 0
    1074:	70 93 1b 01 	sts	0x011B, r23
    1078:	60 93 1a 01 	sts	0x011A, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    107c:	80 91 18 01 	lds	r24, 0x0118
    1080:	90 91 19 01 	lds	r25, 0x0119
    1084:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1088:	f6 c0       	rjmp	.+492    	; 0x1276 <update_coordinates+0x408>
				repeat = 0;
			}
			break;
		}
	}
	else if(value==3)		//to store the middle point in 60cm shift i.e to make it continous
    108a:	03 97       	sbiw	r24, 0x03	; 3
    108c:	09 f0       	breq	.+2      	; 0x1090 <update_coordinates+0x222>
    108e:	03 c1       	rjmp	.+518    	; 0x1296 <update_coordinates+0x428>
	{
		switch(dir)
    1090:	80 91 16 01 	lds	r24, 0x0116
    1094:	90 91 17 01 	lds	r25, 0x0117
    1098:	2f ef       	ldi	r18, 0xFF	; 255
    109a:	8f 3f       	cpi	r24, 0xFF	; 255
    109c:	92 07       	cpc	r25, r18
    109e:	09 f4       	brne	.+2      	; 0x10a2 <update_coordinates+0x234>
    10a0:	47 c0       	rjmp	.+142    	; 0x1130 <update_coordinates+0x2c2>
    10a2:	2f ef       	ldi	r18, 0xFF	; 255
    10a4:	8f 3f       	cpi	r24, 0xFF	; 255
    10a6:	92 07       	cpc	r25, r18
    10a8:	09 f0       	breq	.+2      	; 0x10ac <update_coordinates+0x23e>
    10aa:	2c f4       	brge	.+10     	; 0x10b6 <update_coordinates+0x248>
    10ac:	8e 5f       	subi	r24, 0xFE	; 254
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <update_coordinates+0x246>
    10b2:	f1 c0       	rjmp	.+482    	; 0x1296 <update_coordinates+0x428>
    10b4:	aa c0       	rjmp	.+340    	; 0x120a <update_coordinates+0x39c>
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	21 f0       	breq	.+8      	; 0x10c4 <update_coordinates+0x256>
    10bc:	02 97       	sbiw	r24, 0x02	; 2
    10be:	09 f0       	breq	.+2      	; 0x10c2 <update_coordinates+0x254>
    10c0:	ea c0       	rjmp	.+468    	; 0x1296 <update_coordinates+0x428>
    10c2:	6c c0       	rjmp	.+216    	; 0x119c <update_coordinates+0x32e>
		{
			case +1 :	x_coordinate+=1;						
    10c4:	80 91 18 01 	lds	r24, 0x0118
    10c8:	90 91 19 01 	lds	r25, 0x0119
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	90 93 19 01 	sts	0x0119, r25
    10d2:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
    10d6:	84 e5       	ldi	r24, 0x54	; 84
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	66 e4       	ldi	r22, 0x46	; 70
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	44 e5       	ldi	r20, 0x54	; 84
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	26 e4       	ldi	r18, 0x46	; 70
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate+=1;
    10ea:	80 91 18 01 	lds	r24, 0x0118
    10ee:	90 91 19 01 	lds	r25, 0x0119
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 19 01 	sts	0x0119, r25
    10f8:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
    10fc:	84 e5       	ldi	r24, 0x54	; 84
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	66 e4       	ldi	r22, 0x46	; 70
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	44 e5       	ldi	r20, 0x54	; 84
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	26 e4       	ldi	r18, 0x46	; 70
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate+=1;
    1110:	80 91 18 01 	lds	r24, 0x0118
    1114:	90 91 19 01 	lds	r25, 0x0119
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	90 93 19 01 	sts	0x0119, r25
    111e:	80 93 18 01 	sts	0x0118, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1122:	60 91 1a 01 	lds	r22, 0x011A
    1126:	70 91 1b 01 	lds	r23, 0x011B
    112a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    112e:	a3 c0       	rjmp	.+326    	; 0x1276 <update_coordinates+0x408>
						{
							repeat = 0;
						}
						break;

			case -1 :	x_coordinate-=1;						
    1130:	80 91 18 01 	lds	r24, 0x0118
    1134:	90 91 19 01 	lds	r25, 0x0119
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	90 93 19 01 	sts	0x0119, r25
    113e:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
    1142:	84 e5       	ldi	r24, 0x54	; 84
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	66 e4       	ldi	r22, 0x46	; 70
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	44 e5       	ldi	r20, 0x54	; 84
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	26 e4       	ldi	r18, 0x46	; 70
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate-=1;
    1156:	80 91 18 01 	lds	r24, 0x0118
    115a:	90 91 19 01 	lds	r25, 0x0119
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	90 93 19 01 	sts	0x0119, r25
    1164:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
    1168:	84 e5       	ldi	r24, 0x54	; 84
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	66 e4       	ldi	r22, 0x46	; 70
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	44 e5       	ldi	r20, 0x54	; 84
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	26 e4       	ldi	r18, 0x46	; 70
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate+=1;
    117c:	80 91 18 01 	lds	r24, 0x0118
    1180:	90 91 19 01 	lds	r25, 0x0119
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	90 93 19 01 	sts	0x0119, r25
    118a:	80 93 18 01 	sts	0x0118, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    118e:	60 91 1a 01 	lds	r22, 0x011A
    1192:	70 91 1b 01 	lds	r23, 0x011B
    1196:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    119a:	6d c0       	rjmp	.+218    	; 0x1276 <update_coordinates+0x408>
						{
							repeat = 0;
						}
						break;
					
			case +2 :	y_coordinate+=1;						
    119c:	80 91 1a 01 	lds	r24, 0x011A
    11a0:	90 91 1b 01 	lds	r25, 0x011B
    11a4:	01 96       	adiw	r24, 0x01	; 1
    11a6:	90 93 1b 01 	sts	0x011B, r25
    11aa:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
    11ae:	84 e5       	ldi	r24, 0x54	; 84
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	66 e4       	ldi	r22, 0x46	; 70
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	44 e5       	ldi	r20, 0x54	; 84
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	26 e4       	ldi	r18, 0x46	; 70
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate+=1;
    11c2:	80 91 1a 01 	lds	r24, 0x011A
    11c6:	90 91 1b 01 	lds	r25, 0x011B
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	90 93 1b 01 	sts	0x011B, r25
    11d0:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
    11d4:	84 e5       	ldi	r24, 0x54	; 84
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	66 e4       	ldi	r22, 0x46	; 70
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	44 e5       	ldi	r20, 0x54	; 84
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	26 e4       	ldi	r18, 0x46	; 70
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate+=1;
    11e8:	60 91 1a 01 	lds	r22, 0x011A
    11ec:	70 91 1b 01 	lds	r23, 0x011B
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	70 93 1b 01 	sts	0x011B, r23
    11f8:	60 93 1a 01 	sts	0x011A, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    11fc:	80 91 18 01 	lds	r24, 0x0118
    1200:	90 91 19 01 	lds	r25, 0x0119
    1204:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1208:	36 c0       	rjmp	.+108    	; 0x1276 <update_coordinates+0x408>
							repeat = 0;
						}
						
						break;

			case -2 :	y_coordinate-=1;						
    120a:	80 91 1a 01 	lds	r24, 0x011A
    120e:	90 91 1b 01 	lds	r25, 0x011B
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	90 93 1b 01 	sts	0x011B, r25
    1218:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
    121c:	84 e5       	ldi	r24, 0x54	; 84
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	66 e4       	ldi	r22, 0x46	; 70
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	44 e5       	ldi	r20, 0x54	; 84
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	26 e4       	ldi	r18, 0x46	; 70
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate-=1;
    1230:	80 91 1a 01 	lds	r24, 0x011A
    1234:	90 91 1b 01 	lds	r25, 0x011B
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	90 93 1b 01 	sts	0x011B, r25
    123e:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
    1242:	84 e5       	ldi	r24, 0x54	; 84
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	66 e4       	ldi	r22, 0x46	; 70
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	44 e5       	ldi	r20, 0x54	; 84
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	26 e4       	ldi	r18, 0x46	; 70
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate+=1;
    1256:	60 91 1a 01 	lds	r22, 0x011A
    125a:	70 91 1b 01 	lds	r23, 0x011B
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	70 93 1b 01 	sts	0x011B, r23
    1266:	60 93 1a 01 	sts	0x011A, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    126a:	80 91 18 01 	lds	r24, 0x0118
    126e:	90 91 19 01 	lds	r25, 0x0119
    1272:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1276:	89 2b       	or	r24, r25
    1278:	51 f4       	brne	.+20     	; 0x128e <update_coordinates+0x420>
						{
							repeat++;
    127a:	80 91 37 01 	lds	r24, 0x0137
    127e:	90 91 38 01 	lds	r25, 0x0138
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	90 93 38 01 	sts	0x0138, r25
    1288:	80 93 37 01 	sts	0x0137, r24
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <update_coordinates+0x428>
						}
						else
						{
							repeat = 0;
    128e:	10 92 38 01 	sts	0x0138, r1
    1292:	10 92 37 01 	sts	0x0137, r1
						}
						break;	
		}
	}
	lcd_clear();
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(4,0,x_coordinate,2);
    129e:	40 91 18 01 	lds	r20, 0x0118
    12a2:	50 91 19 01 	lds	r21, 0x0119
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	22 e0       	ldi	r18, 0x02	; 2
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(8,0,y_coordinate,2);
    12b6:	40 91 1a 01 	lds	r20, 0x011A
    12ba:	50 91 1b 01 	lds	r21, 0x011B
    12be:	88 e0       	ldi	r24, 0x08	; 8
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	22 e0       	ldi	r18, 0x02	; 2
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	Coordinates_changed_by = 0;
    12ce:	10 92 30 01 	sts	0x0130, r1
    12d2:	10 92 2f 01 	sts	0x012F, r1
}
    12d6:	08 95       	ret

000012d8 <left_junc_check>:
		delay_microsec(10);
}
void left_junc_check()                                 
{

	if(bit_is_clear(PINA,5))
    12d8:	cd 99       	sbic	0x19, 5	; 25
    12da:	25 c0       	rjmp	.+74     	; 0x1326 <left_junc_check+0x4e>
	{
		flag1 = 1;
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	30 93 2a 01 	sts	0x012A, r19
    12e4:	20 93 29 01 	sts	0x0129, r18
		//bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		if(irc>2000)
    12e8:	80 91 2b 01 	lds	r24, 0x012B
    12ec:	90 91 2c 01 	lds	r25, 0x012C
    12f0:	47 e0       	ldi	r20, 0x07	; 7
    12f2:	81 3d       	cpi	r24, 0xD1	; 209
    12f4:	94 07       	cpc	r25, r20
    12f6:	6c f0       	brlt	.+26     	; 0x1312 <left_junc_check+0x3a>
		{
			// lcd_write_string("Sixty");
			if(irc>4000)
    12f8:	81 5a       	subi	r24, 0xA1	; 161
    12fa:	9f 40       	sbci	r25, 0x0F	; 15
    12fc:	1c f0       	brlt	.+6      	; 0x1304 <left_junc_check+0x2c>
			{
				Coordinates_changed_by = 3;
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <left_junc_check+0x30>
			}
			else
			{
				Coordinates_changed_by = 2;
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	90 93 30 01 	sts	0x0130, r25
    130c:	80 93 2f 01 	sts	0x012F, r24
    1310:	0a c0       	rjmp	.+20     	; 0x1326 <left_junc_check+0x4e>
			}
		}
		else
		{
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
    1312:	30 93 30 01 	sts	0x0130, r19
    1316:	20 93 2f 01 	sts	0x012F, r18
		}

		if(irc==0)
    131a:	89 2b       	or	r24, r25
    131c:	21 f4       	brne	.+8      	; 0x1326 <left_junc_check+0x4e>
		{
			Coordinates_changed_by = 0;
    131e:	10 92 30 01 	sts	0x0130, r1
    1322:	10 92 2f 01 	sts	0x012F, r1
		}				
	}
	if((bit_is_clear(PINA,6) || bit_is_clear(PIND,6)) && (bit_is_clear(PINA,4) || special_flag == 1))
    1326:	ce 9b       	sbis	0x19, 6	; 25
    1328:	02 c0       	rjmp	.+4      	; 0x132e <left_junc_check+0x56>
    132a:	86 99       	sbic	0x10, 6	; 16
    132c:	1d c0       	rjmp	.+58     	; 0x1368 <left_junc_check+0x90>
    132e:	cc 9b       	sbis	0x19, 4	; 25
    1330:	06 c0       	rjmp	.+12     	; 0x133e <left_junc_check+0x66>
    1332:	80 91 35 01 	lds	r24, 0x0135
    1336:	90 91 36 01 	lds	r25, 0x0136
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	a9 f4       	brne	.+42     	; 0x1368 <left_junc_check+0x90>
	{
		//bot_brake();
		update_coordinates();
    133e:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
		//delay_sec(2);
		//lcd_clear();
		update_array('T','F','T','T');			
    1342:	84 e5       	ldi	r24, 0x54	; 84
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	66 e4       	ldi	r22, 0x46	; 70
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	44 e5       	ldi	r20, 0x54	; 84
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	24 e5       	ldi	r18, 0x54	; 84
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
		// lcd_write_string("-| detected");
		//delay_millisec(500);
		irc = 0;
    1356:	10 92 2c 01 	sts	0x012C, r1
    135a:	10 92 2b 01 	sts	0x012B, r1
		special_flag = 0;       ///one time use
    135e:	10 92 36 01 	sts	0x0136, r1
    1362:	10 92 35 01 	sts	0x0135, r1
    1366:	08 95       	ret
	}
	
	else if((bit_is_clear(PINA,4) || special_flag==1) && bit_is_set(PINA,6) && bit_is_set(PIND,6))
    1368:	cc 9b       	sbis	0x19, 4	; 25
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <left_junc_check+0xa0>
    136c:	80 91 35 01 	lds	r24, 0x0135
    1370:	90 91 36 01 	lds	r25, 0x0136
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	71 f5       	brne	.+92     	; 0x13d4 <left_junc_check+0xfc>
    1378:	ce 9b       	sbis	0x19, 6	; 25
    137a:	2c c0       	rjmp	.+88     	; 0x13d4 <left_junc_check+0xfc>
    137c:	86 9b       	sbis	0x10, 6	; 16
    137e:	2a c0       	rjmp	.+84     	; 0x13d4 <left_junc_check+0xfc>
	{
		// lcd_clear();
		// bot_brake();
		// lcd_write_string("L detected");
		update_coordinates();
    1380:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
		//delay_sec(2);
		irc = 0;
    1384:	10 92 2c 01 	sts	0x012C, r1
    1388:	10 92 2b 01 	sts	0x012B, r1
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    138c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    138e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1390:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1392:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		if(repeat<=2)
    1394:	80 91 37 01 	lds	r24, 0x0137
    1398:	90 91 38 01 	lds	r25, 0x0138
    139c:	03 97       	sbiw	r24, 0x03	; 3
    139e:	d4 f4       	brge	.+52     	; 0x13d4 <left_junc_check+0xfc>
		{
			turn_left();						
    13a0:	0e 94 65 05 	call	0xaca	; 0xaca <turn_left>

			update_array('F','F','T','T');
    13a4:	86 e4       	ldi	r24, 0x46	; 70
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	66 e4       	ldi	r22, 0x46	; 70
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	44 e5       	ldi	r20, 0x54	; 84
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	24 e5       	ldi	r18, 0x54	; 84
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    13b8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    13ba:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    13bc:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    13be:	af 9a       	sbi	0x15, 7	; 21
			bot_brake();
			sense_of_directon();
    13c0:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
			// lcd_clear();
			// lcd_write_int_xy(0,0,dir,3);
			// delay_millisec(2000);
			flag1 = 0;
    13c4:	10 92 2a 01 	sts	0x012A, r1
    13c8:	10 92 29 01 	sts	0x0129, r1
			special_flag = 0;
    13cc:	10 92 36 01 	sts	0x0136, r1
    13d0:	10 92 35 01 	sts	0x0135, r1
    13d4:	08 95       	ret

000013d6 <frSensorCheck>:
	
}

void frSensorCheck()
{
	if(bit_is_set(PINA,6) && bit_is_set(PIND,6))
    13d6:	ce 9b       	sbis	0x19, 6	; 25
    13d8:	1f c0       	rjmp	.+62     	; 0x1418 <frSensorCheck+0x42>
    13da:	86 9b       	sbis	0x10, 6	; 16
    13dc:	1d c0       	rjmp	.+58     	; 0x1418 <frSensorCheck+0x42>
		////just confirming if its really a dead end or the bot has simply just wobbled
		
			
		//lcd_clear();
		// lcd_write_string("Uturn Detected");
		if(Coordinates_changed_by==0)
    13de:	80 91 2f 01 	lds	r24, 0x012F
    13e2:	90 91 30 01 	lds	r25, 0x0130
    13e6:	89 2b       	or	r24, r25
    13e8:	b9 f4       	brne	.+46     	; 0x1418 <frSensorCheck+0x42>
		{
			if(irc>2000)
    13ea:	80 91 2b 01 	lds	r24, 0x012B
    13ee:	90 91 2c 01 	lds	r25, 0x012C
    13f2:	27 e0       	ldi	r18, 0x07	; 7
    13f4:	81 3d       	cpi	r24, 0xD1	; 209
    13f6:	92 07       	cpc	r25, r18
    13f8:	4c f0       	brlt	.+18     	; 0x140c <frSensorCheck+0x36>
			{
				// lcd_write_string("Sixty");
				if(irc>4000)
    13fa:	81 5a       	subi	r24, 0xA1	; 161
    13fc:	9f 40       	sbci	r25, 0x0F	; 15
    13fe:	1c f0       	brlt	.+6      	; 0x1406 <frSensorCheck+0x30>
				{
					Coordinates_changed_by = 3;
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <frSensorCheck+0x3a>
				}
				else
				{
					Coordinates_changed_by = 2;
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <frSensorCheck+0x3a>
				}
			}
			else
			{
				// lcd_write_string("Thirty");
				Coordinates_changed_by = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 30 01 	sts	0x0130, r25
    1414:	80 93 2f 01 	sts	0x012F, r24
		
			
		
	}
	
	if(sensorbyte==0b0000 && bit_is_set(PINA,4) && bit_is_set(PINA,5) && bit_is_set(PINA,6) && bit_is_set(PINA,7) && bit_is_set(PIND, 6) && bit_is_set(PIND, 7))
    1418:	80 91 1c 01 	lds	r24, 0x011C
    141c:	88 23       	and	r24, r24
    141e:	41 f5       	brne	.+80     	; 0x1470 <frSensorCheck+0x9a>
    1420:	cc 9b       	sbis	0x19, 4	; 25
    1422:	26 c0       	rjmp	.+76     	; 0x1470 <frSensorCheck+0x9a>
    1424:	cd 9b       	sbis	0x19, 5	; 25
    1426:	24 c0       	rjmp	.+72     	; 0x1470 <frSensorCheck+0x9a>
    1428:	ce 9b       	sbis	0x19, 6	; 25
    142a:	22 c0       	rjmp	.+68     	; 0x1470 <frSensorCheck+0x9a>
    142c:	cf 9b       	sbis	0x19, 7	; 25
    142e:	20 c0       	rjmp	.+64     	; 0x1470 <frSensorCheck+0x9a>
    1430:	86 9b       	sbis	0x10, 6	; 16
    1432:	1e c0       	rjmp	.+60     	; 0x1470 <frSensorCheck+0x9a>
    1434:	87 9b       	sbis	0x10, 7	; 16
    1436:	1c c0       	rjmp	.+56     	; 0x1470 <frSensorCheck+0x9a>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1438:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    143a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    143c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    143e:	af 9a       	sbi	0x15, 7	; 21
	{
		//lcd_clear();
		//lcd_write_string("Uturn");
		bot_brake();
		update_coordinates();
    1440:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
		update_array('F','F','T','F');
    1444:	86 e4       	ldi	r24, 0x46	; 70
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	66 e4       	ldi	r22, 0x46	; 70
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	44 e5       	ldi	r20, 0x54	; 84
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	26 e4       	ldi	r18, 0x46	; 70
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
		//delay_sec(2);

		Uturn();
    1458:	0e 94 67 04 	call	0x8ce	; 0x8ce <Uturn>
		//bot_brake();
		sense_of_directon();
    145c:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_sec(2);
		flag1 = 0;
    1460:	10 92 2a 01 	sts	0x012A, r1
    1464:	10 92 29 01 	sts	0x0129, r1
		irc = 0;
    1468:	10 92 2c 01 	sts	0x012C, r1
    146c:	10 92 2b 01 	sts	0x012B, r1
    1470:	08 95       	ret

00001472 <fill_missed_array>:
		return 0;
	}
}

void fill_missed_array()
{
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	e8 2e       	mov	r14, r24
    1490:	f1 2c       	mov	r15, r1
					{
						dir_array[i][j][2] = 'T';
					}
					else
					{
						dir_array[i][j][2] = 'F';
    1492:	06 e4       	ldi	r16, 0x46	; 70
    1494:	b0 2e       	mov	r11, r16
    1496:	65 c0       	rjmp	.+202    	; 0x1562 <fill_missed_array+0xf0>
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
	{
		for(int j = 1 ; j<15 ; j++)
		{
			if(is_coordinate_null(i,j))
    1498:	c7 01       	movw	r24, r14
    149a:	b8 01       	movw	r22, r16
    149c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    14a0:	89 2b       	or	r24, r25
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <fill_missed_array+0x34>
    14a4:	4c c0       	rjmp	.+152    	; 0x153e <fill_missed_array+0xcc>
			{
				hx = i+1;
				hy = j+1;
				lx = i-1;
				ly = j-1;
				lcd_clear();
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    14ae:	c3 01       	movw	r24, r6
    14b0:	b8 01       	movw	r22, r16
    14b2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    14b6:	89 2b       	or	r24, r25
    14b8:	09 f0       	breq	.+2      	; 0x14bc <fill_missed_array+0x4a>
    14ba:	41 c0       	rjmp	.+130    	; 0x153e <fill_missed_array+0xcc>
    14bc:	c4 01       	movw	r24, r8
    14be:	b8 01       	movw	r22, r16
    14c0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    14c4:	89 2b       	or	r24, r25
    14c6:	d9 f5       	brne	.+118    	; 0x153e <fill_missed_array+0xcc>
    14c8:	b8 01       	movw	r22, r16
    14ca:	61 50       	subi	r22, 0x01	; 1
    14cc:	70 40       	sbci	r23, 0x00	; 0
    14ce:	c7 01       	movw	r24, r14
    14d0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    14d4:	89 2b       	or	r24, r25
    14d6:	99 f5       	brne	.+102    	; 0x153e <fill_missed_array+0xcc>
    14d8:	b8 01       	movw	r22, r16
    14da:	6f 5f       	subi	r22, 0xFF	; 255
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	c7 01       	movw	r24, r14
    14e0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    14e4:	89 2b       	or	r24, r25
    14e6:	59 f5       	brne	.+86     	; 0x153e <fill_missed_array+0xcc>
				{
					lcd_clear();
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Filliable");
    14f0:	80 e6       	ldi	r24, 0x60	; 96
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_millisec(2000);
    14f8:	80 ed       	ldi	r24, 0xD0	; 208
    14fa:	97 e0       	ldi	r25, 0x07	; 7
    14fc:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
					if(dir_array[hx][j][3]=='T')
    1500:	cd 5b       	subi	r28, 0xBD	; 189
    1502:	df 4f       	sbci	r29, 0xFF	; 255
    1504:	88 81       	ld	r24, Y
    1506:	c3 54       	subi	r28, 0x43	; 67
    1508:	d0 40       	sbci	r29, 0x00	; 0
    150a:	84 35       	cpi	r24, 0x54	; 84
    150c:	11 f4       	brne	.+4      	; 0x1512 <fill_missed_array+0xa0>
					{
						dir_array[i][j][1] = 'T';
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <fill_missed_array+0xa2>
					}
					else
					{
						dir_array[i][j][1] = 'F';
    1512:	b9 82       	std	Y+1, r11	; 0x01
					}
					if(dir_array[lx][j][1]=='T')
    1514:	ef 97       	sbiw	r28, 0x3f	; 63
    1516:	88 81       	ld	r24, Y
    1518:	ef 96       	adiw	r28, 0x3f	; 63
    151a:	84 35       	cpi	r24, 0x54	; 84
    151c:	11 f4       	brne	.+4      	; 0x1522 <fill_missed_array+0xb0>
					{
						dir_array[i][j][3] = 'T';
    151e:	8b 83       	std	Y+3, r24	; 0x03
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <fill_missed_array+0xb2>
					}
					else
					{
						dir_array[i][j][3] = 'F';
    1522:	bb 82       	std	Y+3, r11	; 0x03
					}
					if(dir_array[i][hy][2]=='T')
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	84 35       	cpi	r24, 0x54	; 84
    1528:	11 f4       	brne	.+4      	; 0x152e <fill_missed_array+0xbc>
					{
						dir_array[i][j][0] = 'T';
    152a:	88 83       	st	Y, r24
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <fill_missed_array+0xbe>
					}
					else
					{
						dir_array[i][j][0] ='F';
    152e:	b8 82       	st	Y, r11
					}
					if(dir_array[i][j][ly]=='T')
    1530:	f6 01       	movw	r30, r12
    1532:	80 81       	ld	r24, Z
    1534:	84 35       	cpi	r24, 0x54	; 84
    1536:	11 f4       	brne	.+4      	; 0x153c <fill_missed_array+0xca>
					{
						dir_array[i][j][2] = 'T';
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	01 c0       	rjmp	.+2      	; 0x153e <fill_missed_array+0xcc>
					}
					else
					{
						dir_array[i][j][2] = 'F';
    153c:	ba 82       	std	Y+2, r11	; 0x02
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
	{
		for(int j = 1 ; j<15 ; j++)
    153e:	0f 5f       	subi	r16, 0xFF	; 255
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	85 e0       	ldi	r24, 0x05	; 5
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	c8 0e       	add	r12, r24
    1548:	d9 1e       	adc	r13, r25
    154a:	24 96       	adiw	r28, 0x04	; 4
    154c:	0f 30       	cpi	r16, 0x0F	; 15
    154e:	11 05       	cpc	r17, r1
    1550:	09 f0       	breq	.+2      	; 0x1554 <fill_missed_array+0xe2>
    1552:	a2 cf       	rjmp	.-188    	; 0x1498 <fill_missed_array+0x26>
}

void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
    1554:	08 94       	sec
    1556:	e1 1c       	adc	r14, r1
    1558:	f1 1c       	adc	r15, r1
    155a:	9f e0       	ldi	r25, 0x0F	; 15
    155c:	e9 16       	cp	r14, r25
    155e:	f1 04       	cpc	r15, r1
    1560:	b1 f0       	breq	.+44     	; 0x158e <fill_missed_array+0x11c>
    1562:	67 01       	movw	r12, r14
    1564:	16 e0       	ldi	r17, 0x06	; 6
    1566:	cc 0c       	add	r12, r12
    1568:	dd 1c       	adc	r13, r13
    156a:	1a 95       	dec	r17
    156c:	e1 f7       	brne	.-8      	; 0x1566 <fill_missed_array+0xf4>
    156e:	e3 e4       	ldi	r30, 0x43	; 67
    1570:	f3 e0       	ldi	r31, 0x03	; 3
    1572:	ce 0e       	add	r12, r30
    1574:	df 1e       	adc	r13, r31
    1576:	e6 01       	movw	r28, r12
    1578:	01 e0       	ldi	r16, 0x01	; 1
    157a:	10 e0       	ldi	r17, 0x00	; 0
				lcd_clear();
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    157c:	37 01       	movw	r6, r14
    157e:	08 94       	sec
    1580:	61 1c       	adc	r6, r1
    1582:	71 1c       	adc	r7, r1
    1584:	47 01       	movw	r8, r14
    1586:	08 94       	sec
    1588:	81 08       	sbc	r8, r1
    158a:	91 08       	sbc	r9, r1
    158c:	85 cf       	rjmp	.-246    	; 0x1498 <fill_missed_array+0x26>
					}
				}
			}
		}
	}
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	bf 90       	pop	r11
    15a0:	9f 90       	pop	r9
    15a2:	8f 90       	pop	r8
    15a4:	7f 90       	pop	r7
    15a6:	6f 90       	pop	r6
    15a8:	08 95       	ret

000015aa <coordinates_tobe_reached>:

void coordinates_tobe_reached()
{
    15aa:	2f 92       	push	r2
    15ac:	3f 92       	push	r3
    15ae:	4f 92       	push	r4
    15b0:	5f 92       	push	r5
    15b2:	6f 92       	push	r6
    15b4:	7f 92       	push	r7
    15b6:	8f 92       	push	r8
    15b8:	9f 92       	push	r9
    15ba:	af 92       	push	r10
    15bc:	bf 92       	push	r11
    15be:	cf 92       	push	r12
    15c0:	df 92       	push	r13
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	68 97       	sbiw	r28, 0x18	; 24
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
	int stop=0, t1, t2;
	mx = 0;
    15de:	10 92 32 01 	sts	0x0132, r1
    15e2:	10 92 31 01 	sts	0x0131, r1
	my = 0;
    15e6:	10 92 34 01 	sts	0x0134, r1
    15ea:	10 92 33 01 	sts	0x0133, r1
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    15ee:	80 90 18 01 	lds	r8, 0x0118
    15f2:	90 90 19 01 	lds	r9, 0x0119
    15f6:	a0 90 1a 01 	lds	r10, 0x011A
    15fa:	b0 90 1b 01 	lds	r11, 0x011B
    15fe:	cc 24       	eor	r12, r12
    1600:	dd 24       	eor	r13, r13
    1602:	c8 18       	sub	r12, r8
    1604:	d9 08       	sbc	r13, r9
    1606:	de 82       	std	Y+6, r13	; 0x06
    1608:	cd 82       	std	Y+5, r12	; 0x05
    160a:	dc 82       	std	Y+4, r13	; 0x04
    160c:	cb 82       	std	Y+3, r12	; 0x03
    160e:	da 82       	std	Y+2, r13	; 0x02
    1610:	c9 82       	std	Y+1, r12	; 0x01
    1612:	00 e0       	ldi	r16, 0x00	; 0
    1614:	10 e0       	ldi	r17, 0x00	; 0
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1616:	22 27       	eor	r18, r18
    1618:	33 27       	eor	r19, r19
    161a:	2a 19       	sub	r18, r10
    161c:	3b 09       	sbc	r19, r11
    161e:	3e 8b       	std	Y+22, r19	; 0x16
    1620:	2d 8b       	std	Y+21, r18	; 0x15
    1622:	90 c1       	rjmp	.+800    	; 0x1944 <coordinates_tobe_reached+0x39a>
	my = 0;
	for(int i = 0 ; i<16 ; i++)
	{
		for(int j = 0 ; j<16 ; j++)
		{
			if(!(is_coordinate_null(i,j)))
    1624:	c8 01       	movw	r24, r16
    1626:	6f 89       	ldd	r22, Y+23	; 0x17
    1628:	78 8d       	ldd	r23, Y+24	; 0x18
    162a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    162e:	89 2b       	or	r24, r25
    1630:	09 f0       	breq	.+2      	; 0x1634 <coordinates_tobe_reached+0x8a>
    1632:	55 c1       	rjmp	.+682    	; 0x18de <coordinates_tobe_reached+0x334>
			{
				if(dir_array[i][j][0]=='T')
    1634:	f7 01       	movw	r30, r14
    1636:	80 81       	ld	r24, Z
    1638:	84 35       	cpi	r24, 0x54	; 84
    163a:	09 f0       	breq	.+2      	; 0x163e <coordinates_tobe_reached+0x94>
    163c:	4a c0       	rjmp	.+148    	; 0x16d2 <coordinates_tobe_reached+0x128>
				{
					if(is_coordinate_null(i,j+1))
    163e:	6f 89       	ldd	r22, Y+23	; 0x17
    1640:	78 8d       	ldd	r23, Y+24	; 0x18
    1642:	6f 5f       	subi	r22, 0xFF	; 255
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	c8 01       	movw	r24, r16
    1648:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    164c:	89 2b       	or	r24, r25
    164e:	09 f4       	brne	.+2      	; 0x1652 <coordinates_tobe_reached+0xa8>
    1650:	40 c0       	rjmp	.+128    	; 0x16d2 <coordinates_tobe_reached+0x128>
					{
						if(mx==0 && my==0)
    1652:	60 91 31 01 	lds	r22, 0x0131
    1656:	70 91 32 01 	lds	r23, 0x0132
    165a:	61 15       	cp	r22, r1
    165c:	71 05       	cpc	r23, r1
    165e:	31 f4       	brne	.+12     	; 0x166c <coordinates_tobe_reached+0xc2>
    1660:	80 91 33 01 	lds	r24, 0x0133
    1664:	90 91 34 01 	lds	r25, 0x0134
    1668:	89 2b       	or	r24, r25
    166a:	49 f1       	breq	.+82     	; 0x16be <coordinates_tobe_reached+0x114>
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    166c:	68 19       	sub	r22, r8
    166e:	79 09       	sbc	r23, r9
    1670:	80 91 33 01 	lds	r24, 0x0133
    1674:	90 91 34 01 	lds	r25, 0x0134
    1678:	8a 19       	sub	r24, r10
    167a:	9b 09       	sbc	r25, r11
							if(t1<t2)
    167c:	ed 85       	ldd	r30, Y+13	; 0x0d
    167e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1680:	ee 9f       	mul	r30, r30
    1682:	a0 01       	movw	r20, r0
    1684:	ef 9f       	mul	r30, r31
    1686:	50 0d       	add	r21, r0
    1688:	fe 9f       	mul	r31, r30
    168a:	50 0d       	add	r21, r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1690:	38 89       	ldd	r19, Y+16	; 0x10
    1692:	42 0f       	add	r20, r18
    1694:	53 1f       	adc	r21, r19
    1696:	fc 01       	movw	r30, r24
    1698:	ee 9f       	mul	r30, r30
    169a:	c0 01       	movw	r24, r0
    169c:	ef 9f       	mul	r30, r31
    169e:	90 0d       	add	r25, r0
    16a0:	fe 9f       	mul	r31, r30
    16a2:	90 0d       	add	r25, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	66 9f       	mul	r22, r22
    16a8:	90 01       	movw	r18, r0
    16aa:	67 9f       	mul	r22, r23
    16ac:	30 0d       	add	r19, r0
    16ae:	76 9f       	mul	r23, r22
    16b0:	30 0d       	add	r19, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	82 0f       	add	r24, r18
    16b6:	93 1f       	adc	r25, r19
    16b8:	48 17       	cp	r20, r24
    16ba:	59 07       	cpc	r21, r25
    16bc:	54 f4       	brge	.+20     	; 0x16d2 <coordinates_tobe_reached+0x128>
							{
								mx = i;
    16be:	10 93 32 01 	sts	0x0132, r17
    16c2:	00 93 31 01 	sts	0x0131, r16
								my = j;
    16c6:	2f 89       	ldd	r18, Y+23	; 0x17
    16c8:	38 8d       	ldd	r19, Y+24	; 0x18
    16ca:	30 93 34 01 	sts	0x0134, r19
    16ce:	20 93 33 01 	sts	0x0133, r18
							}
						}
					}
				}
				if(dir_array[i][j][1]=='T')
    16d2:	f7 01       	movw	r30, r14
    16d4:	81 81       	ldd	r24, Z+1	; 0x01
    16d6:	84 35       	cpi	r24, 0x54	; 84
    16d8:	09 f0       	breq	.+2      	; 0x16dc <coordinates_tobe_reached+0x132>
    16da:	52 c0       	rjmp	.+164    	; 0x1780 <coordinates_tobe_reached+0x1d6>
				{
					if(is_coordinate_null(i+1,j))
    16dc:	8b 89       	ldd	r24, Y+19	; 0x13
    16de:	9c 89       	ldd	r25, Y+20	; 0x14
    16e0:	6f 89       	ldd	r22, Y+23	; 0x17
    16e2:	78 8d       	ldd	r23, Y+24	; 0x18
    16e4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    16e8:	89 2b       	or	r24, r25
    16ea:	09 f4       	brne	.+2      	; 0x16ee <coordinates_tobe_reached+0x144>
    16ec:	49 c0       	rjmp	.+146    	; 0x1780 <coordinates_tobe_reached+0x1d6>
					{
						if(mx==0 && my==0)
    16ee:	60 91 31 01 	lds	r22, 0x0131
    16f2:	70 91 32 01 	lds	r23, 0x0132
    16f6:	61 15       	cp	r22, r1
    16f8:	71 05       	cpc	r23, r1
    16fa:	89 f4       	brne	.+34     	; 0x171e <coordinates_tobe_reached+0x174>
    16fc:	80 91 33 01 	lds	r24, 0x0133
    1700:	90 91 34 01 	lds	r25, 0x0134
    1704:	89 2b       	or	r24, r25
    1706:	59 f4       	brne	.+22     	; 0x171e <coordinates_tobe_reached+0x174>
						{
							mx = i;
    1708:	10 93 32 01 	sts	0x0132, r17
    170c:	00 93 31 01 	sts	0x0131, r16
							my = j;
    1710:	2f 89       	ldd	r18, Y+23	; 0x17
    1712:	38 8d       	ldd	r19, Y+24	; 0x18
    1714:	30 93 34 01 	sts	0x0134, r19
    1718:	20 93 33 01 	sts	0x0133, r18
    171c:	31 c0       	rjmp	.+98     	; 0x1780 <coordinates_tobe_reached+0x1d6>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    171e:	68 19       	sub	r22, r8
    1720:	79 09       	sbc	r23, r9
    1722:	80 91 33 01 	lds	r24, 0x0133
    1726:	90 91 34 01 	lds	r25, 0x0134
    172a:	8a 19       	sub	r24, r10
    172c:	9b 09       	sbc	r25, r11
							
							if(t1<t2)
    172e:	66 9c       	mul	r6, r6
    1730:	a0 01       	movw	r20, r0
    1732:	67 9c       	mul	r6, r7
    1734:	50 0d       	add	r21, r0
    1736:	76 9c       	mul	r7, r6
    1738:	50 0d       	add	r21, r0
    173a:	11 24       	eor	r1, r1
    173c:	eb 85       	ldd	r30, Y+11	; 0x0b
    173e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1740:	4e 0f       	add	r20, r30
    1742:	5f 1f       	adc	r21, r31
    1744:	9c 01       	movw	r18, r24
    1746:	22 9f       	mul	r18, r18
    1748:	c0 01       	movw	r24, r0
    174a:	23 9f       	mul	r18, r19
    174c:	90 0d       	add	r25, r0
    174e:	32 9f       	mul	r19, r18
    1750:	90 0d       	add	r25, r0
    1752:	11 24       	eor	r1, r1
    1754:	66 9f       	mul	r22, r22
    1756:	90 01       	movw	r18, r0
    1758:	67 9f       	mul	r22, r23
    175a:	30 0d       	add	r19, r0
    175c:	76 9f       	mul	r23, r22
    175e:	30 0d       	add	r19, r0
    1760:	11 24       	eor	r1, r1
    1762:	82 0f       	add	r24, r18
    1764:	93 1f       	adc	r25, r19
    1766:	48 17       	cp	r20, r24
    1768:	59 07       	cpc	r21, r25
    176a:	54 f4       	brge	.+20     	; 0x1780 <coordinates_tobe_reached+0x1d6>
							{
								mx = i;
    176c:	10 93 32 01 	sts	0x0132, r17
    1770:	00 93 31 01 	sts	0x0131, r16
								my = j;
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	90 93 34 01 	sts	0x0134, r25
    177c:	80 93 33 01 	sts	0x0133, r24
							}
						}
					}
				}
				if(dir_array[i][j][2]=='T')
    1780:	f7 01       	movw	r30, r14
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	84 35       	cpi	r24, 0x54	; 84
    1786:	09 f0       	breq	.+2      	; 0x178a <coordinates_tobe_reached+0x1e0>
    1788:	53 c0       	rjmp	.+166    	; 0x1830 <coordinates_tobe_reached+0x286>
				{
					if(is_coordinate_null(i,j-1))
    178a:	6f 89       	ldd	r22, Y+23	; 0x17
    178c:	78 8d       	ldd	r23, Y+24	; 0x18
    178e:	61 50       	subi	r22, 0x01	; 1
    1790:	70 40       	sbci	r23, 0x00	; 0
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1798:	89 2b       	or	r24, r25
    179a:	09 f4       	brne	.+2      	; 0x179e <coordinates_tobe_reached+0x1f4>
    179c:	49 c0       	rjmp	.+146    	; 0x1830 <coordinates_tobe_reached+0x286>
					{
						if(mx==0 && my==0)
    179e:	60 91 31 01 	lds	r22, 0x0131
    17a2:	70 91 32 01 	lds	r23, 0x0132
    17a6:	61 15       	cp	r22, r1
    17a8:	71 05       	cpc	r23, r1
    17aa:	89 f4       	brne	.+34     	; 0x17ce <coordinates_tobe_reached+0x224>
    17ac:	80 91 33 01 	lds	r24, 0x0133
    17b0:	90 91 34 01 	lds	r25, 0x0134
    17b4:	89 2b       	or	r24, r25
    17b6:	59 f4       	brne	.+22     	; 0x17ce <coordinates_tobe_reached+0x224>
						{
							mx = i;
    17b8:	10 93 32 01 	sts	0x0132, r17
    17bc:	00 93 31 01 	sts	0x0131, r16
							my = j;
    17c0:	2f 89       	ldd	r18, Y+23	; 0x17
    17c2:	38 8d       	ldd	r19, Y+24	; 0x18
    17c4:	30 93 34 01 	sts	0x0134, r19
    17c8:	20 93 33 01 	sts	0x0133, r18
    17cc:	31 c0       	rjmp	.+98     	; 0x1830 <coordinates_tobe_reached+0x286>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    17ce:	68 19       	sub	r22, r8
    17d0:	79 09       	sbc	r23, r9
    17d2:	80 91 33 01 	lds	r24, 0x0133
    17d6:	90 91 34 01 	lds	r25, 0x0134
    17da:	8a 19       	sub	r24, r10
    17dc:	9b 09       	sbc	r25, r11
							if(t1<t2)
    17de:	44 9c       	mul	r4, r4
    17e0:	a0 01       	movw	r20, r0
    17e2:	45 9c       	mul	r4, r5
    17e4:	50 0d       	add	r21, r0
    17e6:	54 9c       	mul	r5, r4
    17e8:	50 0d       	add	r21, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	e9 85       	ldd	r30, Y+9	; 0x09
    17ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    17f0:	4e 0f       	add	r20, r30
    17f2:	5f 1f       	adc	r21, r31
    17f4:	9c 01       	movw	r18, r24
    17f6:	22 9f       	mul	r18, r18
    17f8:	c0 01       	movw	r24, r0
    17fa:	23 9f       	mul	r18, r19
    17fc:	90 0d       	add	r25, r0
    17fe:	32 9f       	mul	r19, r18
    1800:	90 0d       	add	r25, r0
    1802:	11 24       	eor	r1, r1
    1804:	66 9f       	mul	r22, r22
    1806:	90 01       	movw	r18, r0
    1808:	67 9f       	mul	r22, r23
    180a:	30 0d       	add	r19, r0
    180c:	76 9f       	mul	r23, r22
    180e:	30 0d       	add	r19, r0
    1810:	11 24       	eor	r1, r1
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	48 17       	cp	r20, r24
    1818:	59 07       	cpc	r21, r25
    181a:	54 f4       	brge	.+20     	; 0x1830 <coordinates_tobe_reached+0x286>
							{
								mx = i;
    181c:	10 93 32 01 	sts	0x0132, r17
    1820:	00 93 31 01 	sts	0x0131, r16
								my = j;
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	90 93 34 01 	sts	0x0134, r25
    182c:	80 93 33 01 	sts	0x0133, r24
							}
						}
					}
				}
				if(dir_array[i][j][3]=='T')
    1830:	f7 01       	movw	r30, r14
    1832:	83 81       	ldd	r24, Z+3	; 0x03
    1834:	84 35       	cpi	r24, 0x54	; 84
    1836:	09 f0       	breq	.+2      	; 0x183a <coordinates_tobe_reached+0x290>
    1838:	52 c0       	rjmp	.+164    	; 0x18de <coordinates_tobe_reached+0x334>
				{
					if(is_coordinate_null(i-1,j))
    183a:	89 89       	ldd	r24, Y+17	; 0x11
    183c:	9a 89       	ldd	r25, Y+18	; 0x12
    183e:	6f 89       	ldd	r22, Y+23	; 0x17
    1840:	78 8d       	ldd	r23, Y+24	; 0x18
    1842:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1846:	89 2b       	or	r24, r25
    1848:	09 f4       	brne	.+2      	; 0x184c <coordinates_tobe_reached+0x2a2>
    184a:	49 c0       	rjmp	.+146    	; 0x18de <coordinates_tobe_reached+0x334>
					{
						if(mx==0 && my==0)
    184c:	60 91 31 01 	lds	r22, 0x0131
    1850:	70 91 32 01 	lds	r23, 0x0132
    1854:	61 15       	cp	r22, r1
    1856:	71 05       	cpc	r23, r1
    1858:	89 f4       	brne	.+34     	; 0x187c <coordinates_tobe_reached+0x2d2>
    185a:	80 91 33 01 	lds	r24, 0x0133
    185e:	90 91 34 01 	lds	r25, 0x0134
    1862:	89 2b       	or	r24, r25
    1864:	59 f4       	brne	.+22     	; 0x187c <coordinates_tobe_reached+0x2d2>
						{
							mx = i;
    1866:	10 93 32 01 	sts	0x0132, r17
    186a:	00 93 31 01 	sts	0x0131, r16
							my = j;
    186e:	2f 89       	ldd	r18, Y+23	; 0x17
    1870:	38 8d       	ldd	r19, Y+24	; 0x18
    1872:	30 93 34 01 	sts	0x0134, r19
    1876:	20 93 33 01 	sts	0x0133, r18
    187a:	31 c0       	rjmp	.+98     	; 0x18de <coordinates_tobe_reached+0x334>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    187c:	68 19       	sub	r22, r8
    187e:	79 09       	sbc	r23, r9
    1880:	80 91 33 01 	lds	r24, 0x0133
    1884:	90 91 34 01 	lds	r25, 0x0134
    1888:	8a 19       	sub	r24, r10
    188a:	9b 09       	sbc	r25, r11
							if(t1<t2)
    188c:	22 9c       	mul	r2, r2
    188e:	a0 01       	movw	r20, r0
    1890:	23 9c       	mul	r2, r3
    1892:	50 0d       	add	r21, r0
    1894:	32 9c       	mul	r3, r2
    1896:	50 0d       	add	r21, r0
    1898:	11 24       	eor	r1, r1
    189a:	ef 81       	ldd	r30, Y+7	; 0x07
    189c:	f8 85       	ldd	r31, Y+8	; 0x08
    189e:	4e 0f       	add	r20, r30
    18a0:	5f 1f       	adc	r21, r31
    18a2:	9c 01       	movw	r18, r24
    18a4:	22 9f       	mul	r18, r18
    18a6:	c0 01       	movw	r24, r0
    18a8:	23 9f       	mul	r18, r19
    18aa:	90 0d       	add	r25, r0
    18ac:	32 9f       	mul	r19, r18
    18ae:	90 0d       	add	r25, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	66 9f       	mul	r22, r22
    18b4:	90 01       	movw	r18, r0
    18b6:	67 9f       	mul	r22, r23
    18b8:	30 0d       	add	r19, r0
    18ba:	76 9f       	mul	r23, r22
    18bc:	30 0d       	add	r19, r0
    18be:	11 24       	eor	r1, r1
    18c0:	82 0f       	add	r24, r18
    18c2:	93 1f       	adc	r25, r19
    18c4:	48 17       	cp	r20, r24
    18c6:	59 07       	cpc	r21, r25
    18c8:	54 f4       	brge	.+20     	; 0x18de <coordinates_tobe_reached+0x334>
							{
								mx = i;
    18ca:	10 93 32 01 	sts	0x0132, r17
    18ce:	00 93 31 01 	sts	0x0131, r16
								my = j;
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	90 93 34 01 	sts	0x0134, r25
    18da:	80 93 33 01 	sts	0x0133, r24
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<16 ; i++)
	{
		for(int j = 0 ; j<16 ; j++)
    18de:	ef 89       	ldd	r30, Y+23	; 0x17
    18e0:	f8 8d       	ldd	r31, Y+24	; 0x18
    18e2:	31 96       	adiw	r30, 0x01	; 1
    18e4:	f8 8f       	std	Y+24, r31	; 0x18
    18e6:	ef 8b       	std	Y+23, r30	; 0x17
    18e8:	24 e0       	ldi	r18, 0x04	; 4
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	e2 0e       	add	r14, r18
    18ee:	f3 1e       	adc	r15, r19
    18f0:	08 94       	sec
    18f2:	21 1c       	adc	r2, r1
    18f4:	31 1c       	adc	r3, r1
    18f6:	08 94       	sec
    18f8:	41 1c       	adc	r4, r1
    18fa:	51 1c       	adc	r5, r1
    18fc:	08 94       	sec
    18fe:	61 1c       	adc	r6, r1
    1900:	71 1c       	adc	r7, r1
    1902:	8d 85       	ldd	r24, Y+13	; 0x0d
    1904:	9e 85       	ldd	r25, Y+14	; 0x0e
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	9e 87       	std	Y+14, r25	; 0x0e
    190a:	8d 87       	std	Y+13, r24	; 0x0d
    190c:	70 97       	sbiw	r30, 0x10	; 16
    190e:	09 f0       	breq	.+2      	; 0x1912 <coordinates_tobe_reached+0x368>
    1910:	89 ce       	rjmp	.-750    	; 0x1624 <coordinates_tobe_reached+0x7a>
void coordinates_tobe_reached()
{
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<16 ; i++)
    1912:	0f 5f       	subi	r16, 0xFF	; 255
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	08 94       	sec
    1918:	c1 1c       	adc	r12, r1
    191a:	d1 1c       	adc	r13, r1
    191c:	ed 81       	ldd	r30, Y+5	; 0x05
    191e:	fe 81       	ldd	r31, Y+6	; 0x06
    1920:	31 96       	adiw	r30, 0x01	; 1
    1922:	fe 83       	std	Y+6, r31	; 0x06
    1924:	ed 83       	std	Y+5, r30	; 0x05
    1926:	2b 81       	ldd	r18, Y+3	; 0x03
    1928:	3c 81       	ldd	r19, Y+4	; 0x04
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	3c 83       	std	Y+4, r19	; 0x04
    1930:	2b 83       	std	Y+3, r18	; 0x03
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	00 31       	cpi	r16, 0x10	; 16
    193e:	11 05       	cpc	r17, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <coordinates_tobe_reached+0x39a>
    1942:	47 c0       	rjmp	.+142    	; 0x19d2 <coordinates_tobe_reached+0x428>
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1944:	cc 9c       	mul	r12, r12
    1946:	f0 01       	movw	r30, r0
    1948:	cd 9c       	mul	r12, r13
    194a:	f0 0d       	add	r31, r0
    194c:	dc 9c       	mul	r13, r12
    194e:	f0 0d       	add	r31, r0
    1950:	11 24       	eor	r1, r1
    1952:	f8 8b       	std	Y+16, r31	; 0x10
    1954:	ef 87       	std	Y+15, r30	; 0x0f
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	88 9f       	mul	r24, r24
    195c:	90 01       	movw	r18, r0
    195e:	89 9f       	mul	r24, r25
    1960:	30 0d       	add	r19, r0
    1962:	98 9f       	mul	r25, r24
    1964:	30 0d       	add	r19, r0
    1966:	11 24       	eor	r1, r1
    1968:	3c 87       	std	Y+12, r19	; 0x0c
    196a:	2b 87       	std	Y+11, r18	; 0x0b
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    196c:	2b 81       	ldd	r18, Y+3	; 0x03
    196e:	3c 81       	ldd	r19, Y+4	; 0x04
    1970:	22 9f       	mul	r18, r18
    1972:	f0 01       	movw	r30, r0
    1974:	23 9f       	mul	r18, r19
    1976:	f0 0d       	add	r31, r0
    1978:	32 9f       	mul	r19, r18
    197a:	f0 0d       	add	r31, r0
    197c:	11 24       	eor	r1, r1
    197e:	fa 87       	std	Y+10, r31	; 0x0a
    1980:	e9 87       	std	Y+9, r30	; 0x09
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1982:	e9 81       	ldd	r30, Y+1	; 0x01
    1984:	fa 81       	ldd	r31, Y+2	; 0x02
    1986:	ee 9f       	mul	r30, r30
    1988:	c0 01       	movw	r24, r0
    198a:	ef 9f       	mul	r30, r31
    198c:	90 0d       	add	r25, r0
    198e:	fe 9f       	mul	r31, r30
    1990:	90 0d       	add	r25, r0
    1992:	11 24       	eor	r1, r1
    1994:	98 87       	std	Y+8, r25	; 0x08
    1996:	8f 83       	std	Y+7, r24	; 0x07
    1998:	78 01       	movw	r14, r16
    199a:	96 e0       	ldi	r25, 0x06	; 6
    199c:	ee 0c       	add	r14, r14
    199e:	ff 1c       	adc	r15, r15
    19a0:	9a 95       	dec	r25
    19a2:	e1 f7       	brne	.-8      	; 0x199c <coordinates_tobe_reached+0x3f2>
    19a4:	2f e3       	ldi	r18, 0x3F	; 63
    19a6:	33 e0       	ldi	r19, 0x03	; 3
    19a8:	e2 0e       	add	r14, r18
    19aa:	f3 1e       	adc	r15, r19
    19ac:	8d 89       	ldd	r24, Y+21	; 0x15
    19ae:	9e 89       	ldd	r25, Y+22	; 0x16
    19b0:	9e 87       	std	Y+14, r25	; 0x0e
    19b2:	8d 87       	std	Y+13, r24	; 0x0d
    19b4:	1c 01       	movw	r2, r24
    19b6:	2c 01       	movw	r4, r24
    19b8:	3c 01       	movw	r6, r24
    19ba:	18 8e       	std	Y+24, r1	; 0x18
    19bc:	1f 8a       	std	Y+23, r1	; 0x17
						}
					}
				}
				if(dir_array[i][j][3]=='T')
				{
					if(is_coordinate_null(i-1,j))
    19be:	f8 01       	movw	r30, r16
    19c0:	31 97       	sbiw	r30, 0x01	; 1
    19c2:	fa 8b       	std	Y+18, r31	; 0x12
    19c4:	e9 8b       	std	Y+17, r30	; 0x11
						}
					}
				}
				if(dir_array[i][j][1]=='T')
				{
					if(is_coordinate_null(i+1,j))
    19c6:	98 01       	movw	r18, r16
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	3c 8b       	std	Y+20, r19	; 0x14
    19ce:	2b 8b       	std	Y+19, r18	; 0x13
    19d0:	29 ce       	rjmp	.-942    	; 0x1624 <coordinates_tobe_reached+0x7a>
					}
				}	
			}	
		}
	}
}
    19d2:	68 96       	adiw	r28, 0x18	; 24
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	cf 90       	pop	r12
    19ee:	bf 90       	pop	r11
    19f0:	af 90       	pop	r10
    19f2:	9f 90       	pop	r9
    19f4:	8f 90       	pop	r8
    19f6:	7f 90       	pop	r7
    19f8:	6f 90       	pop	r6
    19fa:	5f 90       	pop	r5
    19fc:	4f 90       	pop	r4
    19fe:	3f 90       	pop	r3
    1a00:	2f 90       	pop	r2
    1a02:	08 95       	ret

00001a04 <get_path>:
void get_path()
{ 
    1a04:	6f 92       	push	r6
    1a06:	7f 92       	push	r7
    1a08:	8f 92       	push	r8
    1a0a:	9f 92       	push	r9
    1a0c:	af 92       	push	r10
    1a0e:	bf 92       	push	r11
    1a10:	cf 92       	push	r12
    1a12:	df 92       	push	r13
    1a14:	ef 92       	push	r14
    1a16:	ff 92       	push	r15
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
	int x , y;
	y = y_coordinate;
    1a20:	60 91 1a 01 	lds	r22, 0x011A
    1a24:	70 91 1b 01 	lds	r23, 0x011B
	x = x_coordinate;
    1a28:	00 91 18 01 	lds	r16, 0x0118
    1a2c:	10 91 19 01 	lds	r17, 0x0119
    1a30:	f5 e4       	ldi	r31, 0x45	; 69
    1a32:	cf 2e       	mov	r12, r31
    1a34:	f7 e0       	ldi	r31, 0x07	; 7
    1a36:	df 2e       	mov	r13, r31
    1a38:	f6 01       	movw	r30, r12
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
	{
		path_array[ls][0] = 0;
    1a3a:	11 82       	std	Z+1, r1	; 0x01
    1a3c:	10 82       	st	Z, r1
		path_array[ls][1] = 0;
    1a3e:	13 82       	std	Z+3, r1	; 0x03
    1a40:	12 82       	std	Z+2, r1	; 0x02
    1a42:	34 96       	adiw	r30, 0x04	; 4
{ 
	int x , y;
	y = y_coordinate;
	x = x_coordinate;
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
    1a44:	87 e0       	ldi	r24, 0x07	; 7
    1a46:	e1 38       	cpi	r30, 0x81	; 129
    1a48:	f8 07       	cpc	r31, r24
    1a4a:	b9 f7       	brne	.-18     	; 0x1a3a <get_path+0x36>
	{
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	ipl=0;
    1a4c:	10 92 3a 01 	sts	0x013A, r1
    1a50:	10 92 39 01 	sts	0x0139, r1
    1a54:	66 24       	eor	r6, r6
    1a56:	77 24       	eor	r7, r7
    1a58:	ed c2       	rjmp	.+1498   	; 0x2034 <get_path+0x630>
	while(map_array[x][y]!=0)
	{
		if(map_array[x+1][y]<map_array[x][y] && dir_array[x][y][1]=='T' && dir_array[x+1][y][3]=='T' && x<15)
    1a5a:	a8 01       	movw	r20, r16
    1a5c:	4f 5f       	subi	r20, 0xFF	; 255
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	9a 01       	movw	r18, r20
    1a62:	e4 e0       	ldi	r30, 0x04	; 4
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	ea 95       	dec	r30
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <get_path+0x60>
    1a6c:	26 0f       	add	r18, r22
    1a6e:	37 1f       	adc	r19, r23
    1a70:	79 01       	movw	r14, r18
    1a72:	ee 0c       	add	r14, r14
    1a74:	ff 1c       	adc	r15, r15
    1a76:	f7 01       	movw	r30, r14
    1a78:	e1 5c       	subi	r30, 0xC1	; 193
    1a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7c:	80 80       	ld	r8, Z
    1a7e:	91 80       	ldd	r9, Z+1	; 0x01
    1a80:	8a 14       	cp	r8, r10
    1a82:	9b 04       	cpc	r9, r11
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <get_path+0x84>
    1a86:	a2 c0       	rjmp	.+324    	; 0x1bcc <get_path+0x1c8>
    1a88:	aa 0f       	add	r26, r26
    1a8a:	bb 1f       	adc	r27, r27
    1a8c:	aa 0f       	add	r26, r26
    1a8e:	bb 1f       	adc	r27, r27
    1a90:	a1 5c       	subi	r26, 0xC1	; 193
    1a92:	bc 4f       	sbci	r27, 0xFC	; 252
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	8c 91       	ld	r24, X
    1a98:	84 35       	cpi	r24, 0x54	; 84
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <get_path+0x9a>
    1a9c:	97 c0       	rjmp	.+302    	; 0x1bcc <get_path+0x1c8>
    1a9e:	e9 01       	movw	r28, r18
    1aa0:	cc 0f       	add	r28, r28
    1aa2:	dd 1f       	adc	r29, r29
    1aa4:	cc 0f       	add	r28, r28
    1aa6:	dd 1f       	adc	r29, r29
    1aa8:	c1 5c       	subi	r28, 0xC1	; 193
    1aaa:	dc 4f       	sbci	r29, 0xFC	; 252
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	84 35       	cpi	r24, 0x54	; 84
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <get_path+0xb0>
    1ab2:	8c c0       	rjmp	.+280    	; 0x1bcc <get_path+0x1c8>
    1ab4:	0f 30       	cpi	r16, 0x0F	; 15
    1ab6:	11 05       	cpc	r17, r1
    1ab8:	0c f0       	brlt	.+2      	; 0x1abc <get_path+0xb8>
    1aba:	88 c0       	rjmp	.+272    	; 0x1bcc <get_path+0x1c8>
		{
			x = x+1;
			path_array[ipl][0]=x;
    1abc:	f6 01       	movw	r30, r12
    1abe:	51 83       	std	Z+1, r21	; 0x01
    1ac0:	40 83       	st	Z, r20
			path_array[ipl][1]=y;
    1ac2:	73 83       	std	Z+3, r23	; 0x03
    1ac4:	62 83       	std	Z+2, r22	; 0x02
			if(map_array[x+1][y]<map_array[x][y] && dir_array[x+1][y][3]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x<15)
    1ac6:	9a 01       	movw	r18, r20
    1ac8:	2f 5f       	subi	r18, 0xFF	; 255
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	d9 01       	movw	r26, r18
    1ace:	e4 e0       	ldi	r30, 0x04	; 4
    1ad0:	aa 0f       	add	r26, r26
    1ad2:	bb 1f       	adc	r27, r27
    1ad4:	ea 95       	dec	r30
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <get_path+0xcc>
    1ad8:	a6 0f       	add	r26, r22
    1ada:	b7 1f       	adc	r27, r23
    1adc:	fd 01       	movw	r30, r26
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	e1 5c       	subi	r30, 0xC1	; 193
    1ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae6:	00 81       	ld	r16, Z
    1ae8:	11 81       	ldd	r17, Z+1	; 0x01
    1aea:	08 15       	cp	r16, r8
    1aec:	19 05       	cpc	r17, r9
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <get_path+0xee>
    1af0:	82 c2       	rjmp	.+1284   	; 0x1ff6 <get_path+0x5f2>
    1af2:	aa 0f       	add	r26, r26
    1af4:	bb 1f       	adc	r27, r27
    1af6:	aa 0f       	add	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	a1 5c       	subi	r26, 0xC1	; 193
    1afc:	bc 4f       	sbci	r27, 0xFC	; 252
    1afe:	13 96       	adiw	r26, 0x03	; 3
    1b00:	8c 91       	ld	r24, X
    1b02:	84 35       	cpi	r24, 0x54	; 84
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <get_path+0x104>
    1b06:	77 c2       	rjmp	.+1262   	; 0x1ff6 <get_path+0x5f2>
    1b08:	88 81       	ld	r24, Y
    1b0a:	86 34       	cpi	r24, 0x46	; 70
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <get_path+0x10c>
    1b0e:	73 c2       	rjmp	.+1254   	; 0x1ff6 <get_path+0x5f2>
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	84 35       	cpi	r24, 0x54	; 84
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <get_path+0x114>
    1b16:	6f c2       	rjmp	.+1246   	; 0x1ff6 <get_path+0x5f2>
    1b18:	ee 0c       	add	r14, r14
    1b1a:	ff 1c       	adc	r15, r15
    1b1c:	81 e4       	ldi	r24, 0x41	; 65
    1b1e:	93 e0       	ldi	r25, 0x03	; 3
    1b20:	e8 0e       	add	r14, r24
    1b22:	f9 1e       	adc	r15, r25
    1b24:	f7 01       	movw	r30, r14
    1b26:	80 81       	ld	r24, Z
    1b28:	86 34       	cpi	r24, 0x46	; 70
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <get_path+0x12a>
    1b2c:	64 c2       	rjmp	.+1224   	; 0x1ff6 <get_path+0x5f2>
    1b2e:	4f 30       	cpi	r20, 0x0F	; 15
    1b30:	51 05       	cpc	r21, r1
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <get_path+0x132>
    1b34:	60 c2       	rjmp	.+1216   	; 0x1ff6 <get_path+0x5f2>
			{
				x = x+1;
				path_array[ipl][0]=x;
    1b36:	f6 01       	movw	r30, r12
    1b38:	31 83       	std	Z+1, r19	; 0x01
    1b3a:	20 83       	st	Z, r18
				path_array[ipl][1]=y;
				if(map_array[x+1][y]<map_array[x][y] && dir_array[x+1][y][3]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x<15)
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	4f 5f       	subi	r20, 0xFF	; 255
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	da 01       	movw	r26, r20
    1b44:	e4 e0       	ldi	r30, 0x04	; 4
    1b46:	aa 0f       	add	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	ea 95       	dec	r30
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <get_path+0x142>
    1b4e:	a6 0f       	add	r26, r22
    1b50:	b7 1f       	adc	r27, r23
    1b52:	fd 01       	movw	r30, r26
    1b54:	ee 0f       	add	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	e1 5c       	subi	r30, 0xC1	; 193
    1b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	80 17       	cp	r24, r16
    1b62:	91 07       	cpc	r25, r17
    1b64:	0c f0       	brlt	.+2      	; 0x1b68 <get_path+0x164>
    1b66:	46 c2       	rjmp	.+1164   	; 0x1ff4 <get_path+0x5f0>
    1b68:	aa 0f       	add	r26, r26
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	aa 0f       	add	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	a1 5c       	subi	r26, 0xC1	; 193
    1b72:	bc 4f       	sbci	r27, 0xFC	; 252
    1b74:	13 96       	adiw	r26, 0x03	; 3
    1b76:	8c 91       	ld	r24, X
    1b78:	84 35       	cpi	r24, 0x54	; 84
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <get_path+0x17a>
    1b7c:	3b c2       	rjmp	.+1142   	; 0x1ff4 <get_path+0x5f0>
    1b7e:	f9 01       	movw	r30, r18
    1b80:	04 e0       	ldi	r16, 0x04	; 4
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	0a 95       	dec	r16
    1b88:	e1 f7       	brne	.-8      	; 0x1b82 <get_path+0x17e>
    1b8a:	e6 0f       	add	r30, r22
    1b8c:	f7 1f       	adc	r31, r23
    1b8e:	df 01       	movw	r26, r30
    1b90:	aa 0f       	add	r26, r26
    1b92:	bb 1f       	adc	r27, r27
    1b94:	aa 0f       	add	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	a1 5c       	subi	r26, 0xC1	; 193
    1b9a:	bc 4f       	sbci	r27, 0xFC	; 252
    1b9c:	8c 91       	ld	r24, X
    1b9e:	86 34       	cpi	r24, 0x46	; 70
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <get_path+0x1a0>
    1ba2:	28 c2       	rjmp	.+1104   	; 0x1ff4 <get_path+0x5f0>
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	8c 91       	ld	r24, X
    1ba8:	84 35       	cpi	r24, 0x54	; 84
    1baa:	09 f0       	breq	.+2      	; 0x1bae <get_path+0x1aa>
    1bac:	23 c2       	rjmp	.+1094   	; 0x1ff4 <get_path+0x5f0>
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	ef 5b       	subi	r30, 0xBF	; 191
    1bb8:	fc 4f       	sbci	r31, 0xFC	; 252
    1bba:	80 81       	ld	r24, Z
    1bbc:	86 34       	cpi	r24, 0x46	; 70
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <get_path+0x1be>
    1bc0:	19 c2       	rjmp	.+1074   	; 0x1ff4 <get_path+0x5f0>
    1bc2:	2f 30       	cpi	r18, 0x0F	; 15
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	0c f0       	brlt	.+2      	; 0x1bca <get_path+0x1c6>
    1bc8:	15 c2       	rjmp	.+1066   	; 0x1ff4 <get_path+0x5f0>
    1bca:	bf c0       	rjmp	.+382    	; 0x1d4a <get_path+0x346>
					path_array[ipl][0]=x;
					path_array[ipl][1]=y;
				}
			}
		}
		else if(map_array[x-1][y]<map_array[x][y] && dir_array[x][y][3]=='T' && dir_array[x-1][y][1]=='T' && x>=1)
    1bcc:	a8 01       	movw	r20, r16
    1bce:	41 50       	subi	r20, 0x01	; 1
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	9a 01       	movw	r18, r20
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	22 0f       	add	r18, r18
    1bd8:	33 1f       	adc	r19, r19
    1bda:	8a 95       	dec	r24
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <get_path+0x1d2>
    1bde:	26 0f       	add	r18, r22
    1be0:	37 1f       	adc	r19, r23
    1be2:	79 01       	movw	r14, r18
    1be4:	ee 0c       	add	r14, r14
    1be6:	ff 1c       	adc	r15, r15
    1be8:	f7 01       	movw	r30, r14
    1bea:	e1 5c       	subi	r30, 0xC1	; 193
    1bec:	fe 4f       	sbci	r31, 0xFE	; 254
    1bee:	80 80       	ld	r8, Z
    1bf0:	91 80       	ldd	r9, Z+1	; 0x01
    1bf2:	8a 14       	cp	r8, r10
    1bf4:	9b 04       	cpc	r9, r11
    1bf6:	0c f0       	brlt	.+2      	; 0x1bfa <get_path+0x1f6>
    1bf8:	ac c0       	rjmp	.+344    	; 0x1d52 <get_path+0x34e>
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	a4 e0       	ldi	r26, 0x04	; 4
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	aa 95       	dec	r26
    1c04:	e1 f7       	brne	.-8      	; 0x1bfe <get_path+0x1fa>
    1c06:	e6 0f       	add	r30, r22
    1c08:	f7 1f       	adc	r31, r23
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	e1 5c       	subi	r30, 0xC1	; 193
    1c14:	fc 4f       	sbci	r31, 0xFC	; 252
    1c16:	83 81       	ldd	r24, Z+3	; 0x03
    1c18:	84 35       	cpi	r24, 0x54	; 84
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <get_path+0x21a>
    1c1c:	9a c0       	rjmp	.+308    	; 0x1d52 <get_path+0x34e>
    1c1e:	e9 01       	movw	r28, r18
    1c20:	cc 0f       	add	r28, r28
    1c22:	dd 1f       	adc	r29, r29
    1c24:	cc 0f       	add	r28, r28
    1c26:	dd 1f       	adc	r29, r29
    1c28:	c1 5c       	subi	r28, 0xC1	; 193
    1c2a:	dc 4f       	sbci	r29, 0xFC	; 252
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	84 35       	cpi	r24, 0x54	; 84
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <get_path+0x230>
    1c32:	8f c0       	rjmp	.+286    	; 0x1d52 <get_path+0x34e>
    1c34:	10 16       	cp	r1, r16
    1c36:	11 06       	cpc	r1, r17
    1c38:	0c f0       	brlt	.+2      	; 0x1c3c <get_path+0x238>
    1c3a:	8b c0       	rjmp	.+278    	; 0x1d52 <get_path+0x34e>
		{

			x = x-1;
			path_array[ipl][0]=x;
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	51 83       	std	Z+1, r21	; 0x01
    1c40:	40 83       	st	Z, r20
			path_array[ipl][1]=y;
    1c42:	73 83       	std	Z+3, r23	; 0x03
    1c44:	62 83       	std	Z+2, r22	; 0x02
			if(map_array[x-1][y]<map_array[x][y] && dir_array[x-1][y][1]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x>=1)
    1c46:	9a 01       	movw	r18, r20
    1c48:	21 50       	subi	r18, 0x01	; 1
    1c4a:	30 40       	sbci	r19, 0x00	; 0
    1c4c:	d9 01       	movw	r26, r18
    1c4e:	04 e0       	ldi	r16, 0x04	; 4
    1c50:	aa 0f       	add	r26, r26
    1c52:	bb 1f       	adc	r27, r27
    1c54:	0a 95       	dec	r16
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <get_path+0x24c>
    1c58:	a6 0f       	add	r26, r22
    1c5a:	b7 1f       	adc	r27, r23
    1c5c:	fd 01       	movw	r30, r26
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	e1 5c       	subi	r30, 0xC1	; 193
    1c64:	fe 4f       	sbci	r31, 0xFE	; 254
    1c66:	00 81       	ld	r16, Z
    1c68:	11 81       	ldd	r17, Z+1	; 0x01
    1c6a:	08 15       	cp	r16, r8
    1c6c:	19 05       	cpc	r17, r9
    1c6e:	0c f0       	brlt	.+2      	; 0x1c72 <get_path+0x26e>
    1c70:	c2 c1       	rjmp	.+900    	; 0x1ff6 <get_path+0x5f2>
    1c72:	aa 0f       	add	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	aa 0f       	add	r26, r26
    1c78:	bb 1f       	adc	r27, r27
    1c7a:	a1 5c       	subi	r26, 0xC1	; 193
    1c7c:	bc 4f       	sbci	r27, 0xFC	; 252
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	8c 91       	ld	r24, X
    1c82:	84 35       	cpi	r24, 0x54	; 84
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <get_path+0x284>
    1c86:	b7 c1       	rjmp	.+878    	; 0x1ff6 <get_path+0x5f2>
    1c88:	88 81       	ld	r24, Y
    1c8a:	86 34       	cpi	r24, 0x46	; 70
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <get_path+0x28c>
    1c8e:	b3 c1       	rjmp	.+870    	; 0x1ff6 <get_path+0x5f2>
    1c90:	ee 0c       	add	r14, r14
    1c92:	ff 1c       	adc	r15, r15
    1c94:	81 e4       	ldi	r24, 0x41	; 65
    1c96:	93 e0       	ldi	r25, 0x03	; 3
    1c98:	e8 0e       	add	r14, r24
    1c9a:	f9 1e       	adc	r15, r25
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	80 81       	ld	r24, Z
    1ca0:	86 34       	cpi	r24, 0x46	; 70
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <get_path+0x2a2>
    1ca4:	a8 c1       	rjmp	.+848    	; 0x1ff6 <get_path+0x5f2>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	84 35       	cpi	r24, 0x54	; 84
    1caa:	09 f0       	breq	.+2      	; 0x1cae <get_path+0x2aa>
    1cac:	a4 c1       	rjmp	.+840    	; 0x1ff6 <get_path+0x5f2>
    1cae:	14 16       	cp	r1, r20
    1cb0:	15 06       	cpc	r1, r21
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <get_path+0x2b2>
    1cb4:	a0 c1       	rjmp	.+832    	; 0x1ff6 <get_path+0x5f2>
			{
				x = x-1;
				path_array[ipl][0]=x;
    1cb6:	f6 01       	movw	r30, r12
    1cb8:	31 83       	std	Z+1, r19	; 0x01
    1cba:	20 83       	st	Z, r18
				path_array[ipl][1]=y;
				if(map_array[x-1][y]<map_array[x][y] && dir_array[x-1][y][1]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x>=1)
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	41 50       	subi	r20, 0x01	; 1
    1cc0:	50 40       	sbci	r21, 0x00	; 0
    1cc2:	da 01       	movw	r26, r20
    1cc4:	94 e0       	ldi	r25, 0x04	; 4
    1cc6:	aa 0f       	add	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	9a 95       	dec	r25
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <get_path+0x2c2>
    1cce:	a6 0f       	add	r26, r22
    1cd0:	b7 1f       	adc	r27, r23
    1cd2:	fd 01       	movw	r30, r26
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	e1 5c       	subi	r30, 0xC1	; 193
    1cda:	fe 4f       	sbci	r31, 0xFE	; 254
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	80 17       	cp	r24, r16
    1ce2:	91 07       	cpc	r25, r17
    1ce4:	0c f0       	brlt	.+2      	; 0x1ce8 <get_path+0x2e4>
    1ce6:	86 c1       	rjmp	.+780    	; 0x1ff4 <get_path+0x5f0>
    1ce8:	aa 0f       	add	r26, r26
    1cea:	bb 1f       	adc	r27, r27
    1cec:	aa 0f       	add	r26, r26
    1cee:	bb 1f       	adc	r27, r27
    1cf0:	a1 5c       	subi	r26, 0xC1	; 193
    1cf2:	bc 4f       	sbci	r27, 0xFC	; 252
    1cf4:	11 96       	adiw	r26, 0x01	; 1
    1cf6:	8c 91       	ld	r24, X
    1cf8:	84 35       	cpi	r24, 0x54	; 84
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <get_path+0x2fa>
    1cfc:	7b c1       	rjmp	.+758    	; 0x1ff4 <get_path+0x5f0>
    1cfe:	f9 01       	movw	r30, r18
    1d00:	84 e0       	ldi	r24, 0x04	; 4
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	8a 95       	dec	r24
    1d08:	e1 f7       	brne	.-8      	; 0x1d02 <get_path+0x2fe>
    1d0a:	e6 0f       	add	r30, r22
    1d0c:	f7 1f       	adc	r31, r23
    1d0e:	df 01       	movw	r26, r30
    1d10:	aa 0f       	add	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	aa 0f       	add	r26, r26
    1d16:	bb 1f       	adc	r27, r27
    1d18:	a1 5c       	subi	r26, 0xC1	; 193
    1d1a:	bc 4f       	sbci	r27, 0xFC	; 252
    1d1c:	8c 91       	ld	r24, X
    1d1e:	86 34       	cpi	r24, 0x46	; 70
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <get_path+0x320>
    1d22:	68 c1       	rjmp	.+720    	; 0x1ff4 <get_path+0x5f0>
    1d24:	ee 0f       	add	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	ee 0f       	add	r30, r30
    1d2a:	ff 1f       	adc	r31, r31
    1d2c:	ef 5b       	subi	r30, 0xBF	; 191
    1d2e:	fc 4f       	sbci	r31, 0xFC	; 252
    1d30:	80 81       	ld	r24, Z
    1d32:	86 34       	cpi	r24, 0x46	; 70
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <get_path+0x334>
    1d36:	5e c1       	rjmp	.+700    	; 0x1ff4 <get_path+0x5f0>
    1d38:	13 96       	adiw	r26, 0x03	; 3
    1d3a:	8c 91       	ld	r24, X
    1d3c:	84 35       	cpi	r24, 0x54	; 84
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <get_path+0x33e>
    1d40:	59 c1       	rjmp	.+690    	; 0x1ff4 <get_path+0x5f0>
    1d42:	12 16       	cp	r1, r18
    1d44:	13 06       	cpc	r1, r19
    1d46:	0c f0       	brlt	.+2      	; 0x1d4a <get_path+0x346>
    1d48:	55 c1       	rjmp	.+682    	; 0x1ff4 <get_path+0x5f0>
				{
					x = x-1;
					path_array[ipl][0]=x;
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	51 83       	std	Z+1, r21	; 0x01
    1d4e:	40 83       	st	Z, r20
    1d50:	52 c1       	rjmp	.+676    	; 0x1ff6 <get_path+0x5f2>

				}
			}
		}

		else if(map_array[x][y+1]<map_array[x][y] && dir_array[x][y][0]=='T' && dir_array[x][y+1][2]=='T' && y<15)
    1d52:	9b 01       	movw	r18, r22
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	a8 01       	movw	r20, r16
    1d5a:	e4 e0       	ldi	r30, 0x04	; 4
    1d5c:	44 0f       	add	r20, r20
    1d5e:	55 1f       	adc	r21, r21
    1d60:	ea 95       	dec	r30
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <get_path+0x358>
    1d64:	4a 01       	movw	r8, r20
    1d66:	82 0e       	add	r8, r18
    1d68:	93 1e       	adc	r9, r19
    1d6a:	d4 01       	movw	r26, r8
    1d6c:	aa 0f       	add	r26, r26
    1d6e:	bb 1f       	adc	r27, r27
    1d70:	fd 01       	movw	r30, r26
    1d72:	e1 5c       	subi	r30, 0xC1	; 193
    1d74:	fe 4f       	sbci	r31, 0xFE	; 254
    1d76:	c0 81       	ld	r28, Z
    1d78:	d1 81       	ldd	r29, Z+1	; 0x01
    1d7a:	ca 15       	cp	r28, r10
    1d7c:	db 05       	cpc	r29, r11
    1d7e:	0c f0       	brlt	.+2      	; 0x1d82 <get_path+0x37e>
    1d80:	8a c0       	rjmp	.+276    	; 0x1e96 <get_path+0x492>
    1d82:	fa 01       	movw	r30, r20
    1d84:	e6 0f       	add	r30, r22
    1d86:	f7 1f       	adc	r31, r23
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	e1 5c       	subi	r30, 0xC1	; 193
    1d92:	fc 4f       	sbci	r31, 0xFC	; 252
    1d94:	80 81       	ld	r24, Z
    1d96:	84 35       	cpi	r24, 0x54	; 84
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <get_path+0x398>
    1d9a:	7d c0       	rjmp	.+250    	; 0x1e96 <get_path+0x492>
    1d9c:	aa 0f       	add	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	af 5b       	subi	r26, 0xBF	; 191
    1da2:	bc 4f       	sbci	r27, 0xFC	; 252
    1da4:	8c 91       	ld	r24, X
    1da6:	84 35       	cpi	r24, 0x54	; 84
    1da8:	09 f0       	breq	.+2      	; 0x1dac <get_path+0x3a8>
    1daa:	75 c0       	rjmp	.+234    	; 0x1e96 <get_path+0x492>
    1dac:	6f 30       	cpi	r22, 0x0F	; 15
    1dae:	71 05       	cpc	r23, r1
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <get_path+0x3b0>
    1db2:	71 c0       	rjmp	.+226    	; 0x1e96 <get_path+0x492>
		{

			y = y+1;
			path_array[ipl][0]=x;
    1db4:	f6 01       	movw	r30, r12
    1db6:	11 83       	std	Z+1, r17	; 0x01
    1db8:	00 83       	st	Z, r16
			path_array[ipl][1]=y;
    1dba:	33 83       	std	Z+3, r19	; 0x03
    1dbc:	22 83       	std	Z+2, r18	; 0x02
			if(map_array[x][y+1]<map_array[x][y]  && dir_array[x][y+1][2]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y<15)
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	6f 5f       	subi	r22, 0xFF	; 255
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	da 01       	movw	r26, r20
    1dc6:	a6 0f       	add	r26, r22
    1dc8:	b7 1f       	adc	r27, r23
    1dca:	aa 0f       	add	r26, r26
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	fd 01       	movw	r30, r26
    1dd0:	e1 5c       	subi	r30, 0xC1	; 193
    1dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd4:	e0 80       	ld	r14, Z
    1dd6:	f1 80       	ldd	r15, Z+1	; 0x01
    1dd8:	ec 16       	cp	r14, r28
    1dda:	fd 06       	cpc	r15, r29
    1ddc:	0c f0       	brlt	.+2      	; 0x1de0 <get_path+0x3dc>
    1dde:	06 c1       	rjmp	.+524    	; 0x1fec <get_path+0x5e8>
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	af 5b       	subi	r26, 0xBF	; 191
    1de6:	bc 4f       	sbci	r27, 0xFC	; 252
    1de8:	8c 91       	ld	r24, X
    1dea:	84 35       	cpi	r24, 0x54	; 84
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <get_path+0x3ec>
    1dee:	fe c0       	rjmp	.+508    	; 0x1fec <get_path+0x5e8>
    1df0:	f4 01       	movw	r30, r8
    1df2:	ee 0f       	add	r30, r30
    1df4:	ff 1f       	adc	r31, r31
    1df6:	ee 0f       	add	r30, r30
    1df8:	ff 1f       	adc	r31, r31
    1dfa:	e1 5c       	subi	r30, 0xC1	; 193
    1dfc:	fc 4f       	sbci	r31, 0xFC	; 252
    1dfe:	80 81       	ld	r24, Z
    1e00:	84 35       	cpi	r24, 0x54	; 84
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <get_path+0x402>
    1e04:	f3 c0       	rjmp	.+486    	; 0x1fec <get_path+0x5e8>
    1e06:	81 81       	ldd	r24, Z+1	; 0x01
    1e08:	86 34       	cpi	r24, 0x46	; 70
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <get_path+0x40a>
    1e0c:	ef c0       	rjmp	.+478    	; 0x1fec <get_path+0x5e8>
    1e0e:	83 81       	ldd	r24, Z+3	; 0x03
    1e10:	86 34       	cpi	r24, 0x46	; 70
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <get_path+0x412>
    1e14:	eb c0       	rjmp	.+470    	; 0x1fec <get_path+0x5e8>
    1e16:	2f 30       	cpi	r18, 0x0F	; 15
    1e18:	31 05       	cpc	r19, r1
    1e1a:	0c f0       	brlt	.+2      	; 0x1e1e <get_path+0x41a>
    1e1c:	e7 c0       	rjmp	.+462    	; 0x1fec <get_path+0x5e8>
			{
				y = y+1;
				path_array[ipl][0]=x;
    1e1e:	f6 01       	movw	r30, r12
				path_array[ipl][1]=y;
    1e20:	73 83       	std	Z+3, r23	; 0x03
    1e22:	62 83       	std	Z+2, r22	; 0x02
				if(map_array[x][y+1]<map_array[x][y]  && dir_array[x][y+1][2]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y<15)
    1e24:	9b 01       	movw	r18, r22
    1e26:	2f 5f       	subi	r18, 0xFF	; 255
    1e28:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2a:	a8 01       	movw	r20, r16
    1e2c:	a4 e0       	ldi	r26, 0x04	; 4
    1e2e:	44 0f       	add	r20, r20
    1e30:	55 1f       	adc	r21, r21
    1e32:	aa 95       	dec	r26
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <get_path+0x42a>
    1e36:	da 01       	movw	r26, r20
    1e38:	a2 0f       	add	r26, r18
    1e3a:	b3 1f       	adc	r27, r19
    1e3c:	aa 0f       	add	r26, r26
    1e3e:	bb 1f       	adc	r27, r27
    1e40:	fd 01       	movw	r30, r26
    1e42:	e1 5c       	subi	r30, 0xC1	; 193
    1e44:	fe 4f       	sbci	r31, 0xFE	; 254
    1e46:	80 81       	ld	r24, Z
    1e48:	91 81       	ldd	r25, Z+1	; 0x01
    1e4a:	8e 15       	cp	r24, r14
    1e4c:	9f 05       	cpc	r25, r15
    1e4e:	0c f0       	brlt	.+2      	; 0x1e52 <get_path+0x44e>
    1e50:	cf c0       	rjmp	.+414    	; 0x1ff0 <get_path+0x5ec>
    1e52:	aa 0f       	add	r26, r26
    1e54:	bb 1f       	adc	r27, r27
    1e56:	af 5b       	subi	r26, 0xBF	; 191
    1e58:	bc 4f       	sbci	r27, 0xFC	; 252
    1e5a:	8c 91       	ld	r24, X
    1e5c:	84 35       	cpi	r24, 0x54	; 84
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <get_path+0x45e>
    1e60:	c7 c0       	rjmp	.+398    	; 0x1ff0 <get_path+0x5ec>
    1e62:	fa 01       	movw	r30, r20
    1e64:	e6 0f       	add	r30, r22
    1e66:	f7 1f       	adc	r31, r23
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	e1 5c       	subi	r30, 0xC1	; 193
    1e72:	fc 4f       	sbci	r31, 0xFC	; 252
    1e74:	80 81       	ld	r24, Z
    1e76:	84 35       	cpi	r24, 0x54	; 84
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <get_path+0x478>
    1e7a:	ba c0       	rjmp	.+372    	; 0x1ff0 <get_path+0x5ec>
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	86 34       	cpi	r24, 0x46	; 70
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <get_path+0x480>
    1e82:	b6 c0       	rjmp	.+364    	; 0x1ff0 <get_path+0x5ec>
    1e84:	83 81       	ldd	r24, Z+3	; 0x03
    1e86:	86 34       	cpi	r24, 0x46	; 70
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <get_path+0x488>
    1e8a:	b2 c0       	rjmp	.+356    	; 0x1ff0 <get_path+0x5ec>
    1e8c:	6f 30       	cpi	r22, 0x0F	; 15
    1e8e:	71 05       	cpc	r23, r1
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <get_path+0x490>
    1e92:	ae c0       	rjmp	.+348    	; 0x1ff0 <get_path+0x5ec>
    1e94:	a8 c0       	rjmp	.+336    	; 0x1fe6 <get_path+0x5e2>
					path_array[ipl][1]=y;

				}
			}
		}
		else if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y][2]=='T' && dir_array[x][y-1][0]=='T' && y>=1)
    1e96:	9b 01       	movw	r18, r22
    1e98:	21 50       	subi	r18, 0x01	; 1
    1e9a:	30 40       	sbci	r19, 0x00	; 0
    1e9c:	d8 01       	movw	r26, r16
    1e9e:	44 e0       	ldi	r20, 0x04	; 4
    1ea0:	aa 0f       	add	r26, r26
    1ea2:	bb 1f       	adc	r27, r27
    1ea4:	4a 95       	dec	r20
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <get_path+0x49c>
    1ea8:	ed 01       	movw	r28, r26
    1eaa:	c2 0f       	add	r28, r18
    1eac:	d3 1f       	adc	r29, r19
    1eae:	ae 01       	movw	r20, r28
    1eb0:	44 0f       	add	r20, r20
    1eb2:	55 1f       	adc	r21, r21
    1eb4:	fa 01       	movw	r30, r20
    1eb6:	e1 5c       	subi	r30, 0xC1	; 193
    1eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eba:	e0 80       	ld	r14, Z
    1ebc:	f1 80       	ldd	r15, Z+1	; 0x01
    1ebe:	ea 14       	cp	r14, r10
    1ec0:	fb 04       	cpc	r15, r11
    1ec2:	0c f0       	brlt	.+2      	; 0x1ec6 <get_path+0x4c2>
    1ec4:	95 c0       	rjmp	.+298    	; 0x1ff0 <get_path+0x5ec>
    1ec6:	fd 01       	movw	r30, r26
    1ec8:	e6 0f       	add	r30, r22
    1eca:	f7 1f       	adc	r31, r23
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ef 5b       	subi	r30, 0xBF	; 191
    1ed6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed8:	80 81       	ld	r24, Z
    1eda:	84 35       	cpi	r24, 0x54	; 84
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <get_path+0x4dc>
    1ede:	88 c0       	rjmp	.+272    	; 0x1ff0 <get_path+0x5ec>
    1ee0:	cc 0f       	add	r28, r28
    1ee2:	dd 1f       	adc	r29, r29
    1ee4:	cc 0f       	add	r28, r28
    1ee6:	dd 1f       	adc	r29, r29
    1ee8:	c1 5c       	subi	r28, 0xC1	; 193
    1eea:	dc 4f       	sbci	r29, 0xFC	; 252
    1eec:	88 81       	ld	r24, Y
    1eee:	84 35       	cpi	r24, 0x54	; 84
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <get_path+0x4f0>
    1ef2:	7e c0       	rjmp	.+252    	; 0x1ff0 <get_path+0x5ec>
    1ef4:	16 16       	cp	r1, r22
    1ef6:	17 06       	cpc	r1, r23
    1ef8:	0c f0       	brlt	.+2      	; 0x1efc <get_path+0x4f8>
    1efa:	7a c0       	rjmp	.+244    	; 0x1ff0 <get_path+0x5ec>
		{

			y = y-1;
			path_array[ipl][0]=x;
    1efc:	f6 01       	movw	r30, r12
    1efe:	11 83       	std	Z+1, r17	; 0x01
    1f00:	00 83       	st	Z, r16
			path_array[ipl][1]=y;
    1f02:	33 83       	std	Z+3, r19	; 0x03
    1f04:	22 83       	std	Z+2, r18	; 0x02
			if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y-1][0]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y>=1)
    1f06:	b9 01       	movw	r22, r18
    1f08:	61 50       	subi	r22, 0x01	; 1
    1f0a:	70 40       	sbci	r23, 0x00	; 0
    1f0c:	a6 0f       	add	r26, r22
    1f0e:	b7 1f       	adc	r27, r23
    1f10:	fd 01       	movw	r30, r26
    1f12:	ee 0f       	add	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	e1 5c       	subi	r30, 0xC1	; 193
    1f18:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1a:	a0 80       	ld	r10, Z
    1f1c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f1e:	ae 14       	cp	r10, r14
    1f20:	bf 04       	cpc	r11, r15
    1f22:	0c f0       	brlt	.+2      	; 0x1f26 <get_path+0x522>
    1f24:	63 c0       	rjmp	.+198    	; 0x1fec <get_path+0x5e8>
    1f26:	aa 0f       	add	r26, r26
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	aa 0f       	add	r26, r26
    1f2c:	bb 1f       	adc	r27, r27
    1f2e:	a1 5c       	subi	r26, 0xC1	; 193
    1f30:	bc 4f       	sbci	r27, 0xFC	; 252
    1f32:	8c 91       	ld	r24, X
    1f34:	84 35       	cpi	r24, 0x54	; 84
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <get_path+0x536>
    1f38:	59 c0       	rjmp	.+178    	; 0x1fec <get_path+0x5e8>
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	86 34       	cpi	r24, 0x46	; 70
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <get_path+0x53e>
    1f40:	55 c0       	rjmp	.+170    	; 0x1fec <get_path+0x5e8>
    1f42:	44 0f       	add	r20, r20
    1f44:	55 1f       	adc	r21, r21
    1f46:	4f 5b       	subi	r20, 0xBF	; 191
    1f48:	5c 4f       	sbci	r21, 0xFC	; 252
    1f4a:	fa 01       	movw	r30, r20
    1f4c:	80 81       	ld	r24, Z
    1f4e:	84 35       	cpi	r24, 0x54	; 84
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <get_path+0x550>
    1f52:	4c c0       	rjmp	.+152    	; 0x1fec <get_path+0x5e8>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	86 34       	cpi	r24, 0x46	; 70
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <get_path+0x558>
    1f5a:	48 c0       	rjmp	.+144    	; 0x1fec <get_path+0x5e8>
    1f5c:	12 16       	cp	r1, r18
    1f5e:	13 06       	cpc	r1, r19
    1f60:	0c f0       	brlt	.+2      	; 0x1f64 <get_path+0x560>
    1f62:	44 c0       	rjmp	.+136    	; 0x1fec <get_path+0x5e8>
			{
				y = y-1;
				path_array[ipl][0]=x;
    1f64:	f6 01       	movw	r30, r12
				path_array[ipl][1]=y;
    1f66:	73 83       	std	Z+3, r23	; 0x03
    1f68:	62 83       	std	Z+2, r22	; 0x02
				if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y-1][0]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y>=1)
    1f6a:	9b 01       	movw	r18, r22
    1f6c:	21 50       	subi	r18, 0x01	; 1
    1f6e:	30 40       	sbci	r19, 0x00	; 0
    1f70:	a8 01       	movw	r20, r16
    1f72:	94 e0       	ldi	r25, 0x04	; 4
    1f74:	44 0f       	add	r20, r20
    1f76:	55 1f       	adc	r21, r21
    1f78:	9a 95       	dec	r25
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <get_path+0x570>
    1f7c:	da 01       	movw	r26, r20
    1f7e:	a2 0f       	add	r26, r18
    1f80:	b3 1f       	adc	r27, r19
    1f82:	fd 01       	movw	r30, r26
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	e1 5c       	subi	r30, 0xC1	; 193
    1f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	8a 15       	cp	r24, r10
    1f92:	9b 05       	cpc	r25, r11
    1f94:	6c f5       	brge	.+90     	; 0x1ff0 <get_path+0x5ec>
    1f96:	aa 0f       	add	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	aa 0f       	add	r26, r26
    1f9c:	bb 1f       	adc	r27, r27
    1f9e:	a1 5c       	subi	r26, 0xC1	; 193
    1fa0:	bc 4f       	sbci	r27, 0xFC	; 252
    1fa2:	8c 91       	ld	r24, X
    1fa4:	84 35       	cpi	r24, 0x54	; 84
    1fa6:	21 f5       	brne	.+72     	; 0x1ff0 <get_path+0x5ec>
    1fa8:	fa 01       	movw	r30, r20
    1faa:	e6 0f       	add	r30, r22
    1fac:	f7 1f       	adc	r31, r23
    1fae:	df 01       	movw	r26, r30
    1fb0:	aa 0f       	add	r26, r26
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	aa 0f       	add	r26, r26
    1fb6:	bb 1f       	adc	r27, r27
    1fb8:	a1 5c       	subi	r26, 0xC1	; 193
    1fba:	bc 4f       	sbci	r27, 0xFC	; 252
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	8c 91       	ld	r24, X
    1fc0:	11 97       	sbiw	r26, 0x01	; 1
    1fc2:	86 34       	cpi	r24, 0x46	; 70
    1fc4:	a9 f4       	brne	.+42     	; 0x1ff0 <get_path+0x5ec>
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ef 5b       	subi	r30, 0xBF	; 191
    1fd0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fd2:	80 81       	ld	r24, Z
    1fd4:	84 35       	cpi	r24, 0x54	; 84
    1fd6:	61 f4       	brne	.+24     	; 0x1ff0 <get_path+0x5ec>
    1fd8:	13 96       	adiw	r26, 0x03	; 3
    1fda:	8c 91       	ld	r24, X
    1fdc:	86 34       	cpi	r24, 0x46	; 70
    1fde:	41 f4       	brne	.+16     	; 0x1ff0 <get_path+0x5ec>
    1fe0:	16 16       	cp	r1, r22
    1fe2:	17 06       	cpc	r1, r23
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <get_path+0x5ec>
				{
					y = y-1;
					path_array[ipl][0]=x;
    1fe6:	f6 01       	movw	r30, r12
					path_array[ipl][1]=y;
    1fe8:	33 83       	std	Z+3, r19	; 0x03
    1fea:	22 83       	std	Z+2, r18	; 0x02
    1fec:	a8 01       	movw	r20, r16
    1fee:	04 c0       	rjmp	.+8      	; 0x1ff8 <get_path+0x5f4>
    1ff0:	a8 01       	movw	r20, r16
    1ff2:	01 c0       	rjmp	.+2      	; 0x1ff6 <get_path+0x5f2>
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	9b 01       	movw	r18, r22
			}	
		}
	}
}
void get_path()
{ 
    1ff8:	08 94       	sec
    1ffa:	61 1c       	adc	r6, r1
    1ffc:	71 1c       	adc	r7, r1
    1ffe:	84 e0       	ldi	r24, 0x04	; 4
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	c8 0e       	add	r12, r24
    2004:	d9 1e       	adc	r13, r25
		// if(is_coordinate_null(x,y))
		// {
		//   break;
		// }
		ipl++;
		if(ipl>15)
    2006:	90 e1       	ldi	r25, 0x10	; 16
    2008:	69 16       	cp	r6, r25
    200a:	71 04       	cpc	r7, r1
    200c:	8c f0       	brlt	.+34     	; 0x2030 <get_path+0x62c>
    200e:	70 92 3a 01 	sts	0x013A, r7
    2012:	60 92 39 01 	sts	0x0139, r6
		{
			lcd_clear();
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("Broke path ");
    201e:	8a e6       	ldi	r24, 0x6A	; 106
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(2);
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    202e:	19 c0       	rjmp	.+50     	; 0x2062 <get_path+0x65e>
			break;
    2030:	8a 01       	movw	r16, r20
    2032:	b9 01       	movw	r22, r18
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	ipl=0;
	while(map_array[x][y]!=0)
    2034:	d8 01       	movw	r26, r16
    2036:	34 e0       	ldi	r19, 0x04	; 4
    2038:	aa 0f       	add	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	3a 95       	dec	r19
    203e:	e1 f7       	brne	.-8      	; 0x2038 <get_path+0x634>
    2040:	a6 0f       	add	r26, r22
    2042:	b7 1f       	adc	r27, r23
    2044:	fd 01       	movw	r30, r26
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e1 5c       	subi	r30, 0xC1	; 193
    204c:	fe 4f       	sbci	r31, 0xFE	; 254
    204e:	a0 80       	ld	r10, Z
    2050:	b1 80       	ldd	r11, Z+1	; 0x01
    2052:	a1 14       	cp	r10, r1
    2054:	b1 04       	cpc	r11, r1
    2056:	09 f0       	breq	.+2      	; 0x205a <get_path+0x656>
    2058:	00 cd       	rjmp	.-1536   	; 0x1a5a <get_path+0x56>
    205a:	70 92 3a 01 	sts	0x013A, r7
    205e:	60 92 39 01 	sts	0x0139, r6
			lcd_write_string("Broke path ");
			delay_sec(2);
			break;
		}
	}
}
    2062:	df 91       	pop	r29
    2064:	cf 91       	pop	r28
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	df 90       	pop	r13
    2070:	cf 90       	pop	r12
    2072:	bf 90       	pop	r11
    2074:	af 90       	pop	r10
    2076:	9f 90       	pop	r9
    2078:	8f 90       	pop	r8
    207a:	7f 90       	pop	r7
    207c:	6f 90       	pop	r6
    207e:	08 95       	ret

00002080 <build_map>:
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
    2080:	4f 92       	push	r4
    2082:	5f 92       	push	r5
    2084:	6f 92       	push	r6
    2086:	7f 92       	push	r7
    2088:	8f 92       	push	r8
    208a:	9f 92       	push	r9
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	5c 01       	movw	r10, r24
    20a2:	4b 01       	movw	r8, r22
    20a4:	3a 01       	movw	r6, r20
    20a6:	29 01       	movw	r4, r18
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
		{
			map_array[i][j] = 100;
    20ac:	44 e6       	ldi	r20, 0x64	; 100
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	0b c0       	rjmp	.+22     	; 0x20c8 <build_map+0x48>
    20b2:	41 93       	st	Z+, r20
    20b4:	51 93       	st	Z+, r21
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	80 31       	cpi	r24, 0x10	; 16
    20ba:	91 05       	cpc	r25, r1
    20bc:	d1 f7       	brne	.-12     	; 0x20b2 <build_map+0x32>
		}
	}
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 16; i++)
    20be:	2f 5f       	subi	r18, 0xFF	; 255
    20c0:	3f 4f       	sbci	r19, 0xFF	; 255
    20c2:	20 31       	cpi	r18, 0x10	; 16
    20c4:	31 05       	cpc	r19, r1
    20c6:	59 f0       	breq	.+22     	; 0x20de <build_map+0x5e>
    20c8:	f9 01       	movw	r30, r18
    20ca:	65 e0       	ldi	r22, 0x05	; 5
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	6a 95       	dec	r22
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <build_map+0x4c>
    20d4:	e1 5c       	subi	r30, 0xC1	; 193
    20d6:	fe 4f       	sbci	r31, 0xFE	; 254
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	ea cf       	rjmp	.-44     	; 0x20b2 <build_map+0x32>
		}
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
    20de:	f3 01       	movw	r30, r6
    20e0:	54 e0       	ldi	r21, 0x04	; 4
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	5a 95       	dec	r21
    20e8:	e1 f7       	brne	.-8      	; 0x20e2 <build_map+0x62>
    20ea:	e4 0d       	add	r30, r4
    20ec:	f5 1d       	adc	r31, r5
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	e1 5c       	subi	r30, 0xC1	; 193
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	11 82       	std	Z+1, r1	; 0x01
    20f8:	10 82       	st	Z, r1
    20fa:	ee 24       	eor	r14, r14
    20fc:	ff 24       	eor	r15, r15
	while(map_array[start_x][start_y]==100)
    20fe:	a5 01       	movw	r20, r10
    2100:	34 e0       	ldi	r19, 0x04	; 4
    2102:	44 0f       	add	r20, r20
    2104:	55 1f       	adc	r21, r21
    2106:	3a 95       	dec	r19
    2108:	e1 f7       	brne	.-8      	; 0x2102 <build_map+0x82>
    210a:	48 0d       	add	r20, r8
    210c:	59 1d       	adc	r21, r9
    210e:	44 0f       	add	r20, r20
    2110:	55 1f       	adc	r21, r21
    2112:	41 5c       	subi	r20, 0xC1	; 193
    2114:	5e 4f       	sbci	r21, 0xFE	; 254
    2116:	b4 c0       	rjmp	.+360    	; 0x2280 <build_map+0x200>
		
		for(int l=0; l<16; l++)
		{
			for(int s=0; s<16; s++)
			{
				if(map_array[l][s]==fi)
    2118:	90 96       	adiw	r26, 0x20	; 32
    211a:	8d 91       	ld	r24, X+
    211c:	9c 91       	ld	r25, X
    211e:	91 97       	sbiw	r26, 0x21	; 33
    2120:	8e 15       	cp	r24, r14
    2122:	9f 05       	cpc	r25, r15
    2124:	09 f0       	breq	.+2      	; 0x2128 <build_map+0xa8>
    2126:	40 c0       	rjmp	.+128    	; 0x21a8 <build_map+0x128>
				{
					if(dir_array[l][s][0]=='T' && dir_array[l][s+1][2]=='T')
    2128:	84 81       	ldd	r24, Z+4	; 0x04
    212a:	84 35       	cpi	r24, 0x54	; 84
    212c:	51 f4       	brne	.+20     	; 0x2142 <build_map+0xc2>
    212e:	82 85       	ldd	r24, Z+10	; 0x0a
    2130:	84 35       	cpi	r24, 0x54	; 84
    2132:	39 f4       	brne	.+14     	; 0x2142 <build_map+0xc2>
					{
						if(map_array[l][s+1]==100)
    2134:	88 81       	ld	r24, Y
    2136:	99 81       	ldd	r25, Y+1	; 0x01
    2138:	84 36       	cpi	r24, 0x64	; 100
    213a:	91 05       	cpc	r25, r1
    213c:	11 f4       	brne	.+4      	; 0x2142 <build_map+0xc2>
						{
							map_array[l][s+1]=(fi+1);
    213e:	19 83       	std	Y+1, r17	; 0x01
    2140:	08 83       	st	Y, r16
						}
					}
					if(dir_array[l][s][1]=='T' && dir_array[l+1][s][3]=='T')
    2142:	85 81       	ldd	r24, Z+5	; 0x05
    2144:	84 35       	cpi	r24, 0x54	; 84
    2146:	71 f4       	brne	.+28     	; 0x2164 <build_map+0xe4>
    2148:	e9 5b       	subi	r30, 0xB9	; 185
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	e7 54       	subi	r30, 0x47	; 71
    2150:	f0 40       	sbci	r31, 0x00	; 0
    2152:	84 35       	cpi	r24, 0x54	; 84
    2154:	39 f4       	brne	.+14     	; 0x2164 <build_map+0xe4>
					{
						if(map_array[l+1][s]==100)
    2156:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2158:	9f 8d       	ldd	r25, Y+31	; 0x1f
    215a:	84 36       	cpi	r24, 0x64	; 100
    215c:	91 05       	cpc	r25, r1
    215e:	11 f4       	brne	.+4      	; 0x2164 <build_map+0xe4>
						{
							map_array[l+1][s]=(fi+1);
    2160:	1f 8f       	std	Y+31, r17	; 0x1f
    2162:	0e 8f       	std	Y+30, r16	; 0x1e
						}
					}
					if(dir_array[l][s][2]=='T' && dir_array[l][s-1][0]=='T')
    2164:	86 81       	ldd	r24, Z+6	; 0x06
    2166:	84 35       	cpi	r24, 0x54	; 84
    2168:	71 f4       	brne	.+28     	; 0x2186 <build_map+0x106>
    216a:	80 81       	ld	r24, Z
    216c:	84 35       	cpi	r24, 0x54	; 84
    216e:	59 f4       	brne	.+22     	; 0x2186 <build_map+0x106>
					{
						if(map_array[l][s-1]==100)
    2170:	5e 96       	adiw	r26, 0x1e	; 30
    2172:	8d 91       	ld	r24, X+
    2174:	9c 91       	ld	r25, X
    2176:	5f 97       	sbiw	r26, 0x1f	; 31
    2178:	84 36       	cpi	r24, 0x64	; 100
    217a:	91 05       	cpc	r25, r1
    217c:	21 f4       	brne	.+8      	; 0x2186 <build_map+0x106>
						{
							map_array[l][s-1]=(fi+1);
    217e:	5f 96       	adiw	r26, 0x1f	; 31
    2180:	1c 93       	st	X, r17
    2182:	0e 93       	st	-X, r16
    2184:	5e 97       	sbiw	r26, 0x1e	; 30
						}
					}
					if(dir_array[l][s][3]=='T' && dir_array[l-1][s][1]=='T')
    2186:	87 81       	ldd	r24, Z+7	; 0x07
    2188:	84 35       	cpi	r24, 0x54	; 84
    218a:	71 f4       	brne	.+28     	; 0x21a8 <build_map+0x128>
    218c:	fb 97       	sbiw	r30, 0x3b	; 59
    218e:	80 81       	ld	r24, Z
    2190:	fb 96       	adiw	r30, 0x3b	; 59
    2192:	84 35       	cpi	r24, 0x54	; 84
    2194:	49 f4       	brne	.+18     	; 0x21a8 <build_map+0x128>
					{
						if(map_array[l-1][s]==100)
    2196:	8d 91       	ld	r24, X+
    2198:	9c 91       	ld	r25, X
    219a:	11 97       	sbiw	r26, 0x01	; 1
    219c:	84 36       	cpi	r24, 0x64	; 100
    219e:	91 05       	cpc	r25, r1
    21a0:	19 f4       	brne	.+6      	; 0x21a8 <build_map+0x128>
						{
							map_array[l-1][s]=(fi+1);
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	1c 93       	st	X, r17
    21a6:	0e 93       	st	-X, r16
    21a8:	12 96       	adiw	r26, 0x02	; 2
    21aa:	34 96       	adiw	r30, 0x04	; 4
    21ac:	22 96       	adiw	r28, 0x02	; 2
	{
		//l=x ,s=y
		
		for(int l=0; l<16; l++)
		{
			for(int s=0; s<16; s++)
    21ae:	ac 15       	cp	r26, r12
    21b0:	bd 05       	cpc	r27, r13
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <build_map+0x136>
    21b4:	b1 cf       	rjmp	.-158    	; 0x2118 <build_map+0x98>
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<16; l++)
    21b6:	6f 5f       	subi	r22, 0xFF	; 255
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	90 e2       	ldi	r25, 0x20	; 32
    21bc:	c9 2e       	mov	r12, r25
    21be:	d1 2c       	mov	r13, r1
    21c0:	ca 0e       	add	r12, r26
    21c2:	db 1e       	adc	r13, r27
    21c4:	60 31       	cpi	r22, 0x10	; 16
    21c6:	71 05       	cpc	r23, r1
    21c8:	19 f1       	breq	.+70     	; 0x2210 <build_map+0x190>
    21ca:	db 01       	movw	r26, r22
    21cc:	85 e0       	ldi	r24, 0x05	; 5
    21ce:	aa 0f       	add	r26, r26
    21d0:	bb 1f       	adc	r27, r27
    21d2:	8a 95       	dec	r24
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <build_map+0x14e>
    21d6:	a1 5e       	subi	r26, 0xE1	; 225
    21d8:	be 4f       	sbci	r27, 0xFE	; 254
    21da:	9b 01       	movw	r18, r22
    21dc:	f4 e0       	ldi	r31, 0x04	; 4
    21de:	22 0f       	add	r18, r18
    21e0:	33 1f       	adc	r19, r19
    21e2:	fa 95       	dec	r31
    21e4:	e1 f7       	brne	.-8      	; 0x21de <build_map+0x15e>
    21e6:	88 27       	eor	r24, r24
    21e8:	99 27       	eor	r25, r25
    21ea:	82 1b       	sub	r24, r18
    21ec:	93 0b       	sbc	r25, r19
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	ee 27       	eor	r30, r30
    21fa:	ff 27       	eor	r31, r31
    21fc:	e8 1b       	sub	r30, r24
    21fe:	f9 0b       	sbc	r31, r25
    2200:	e1 5c       	subi	r30, 0xC1	; 193
    2202:	fc 4f       	sbci	r31, 0xFC	; 252
    2204:	e9 01       	movw	r28, r18
    2206:	cc 0f       	add	r28, r28
    2208:	dd 1f       	adc	r29, r29
    220a:	cf 5b       	subi	r28, 0xBF	; 191
    220c:	de 4f       	sbci	r29, 0xFE	; 254
    220e:	84 cf       	rjmp	.-248    	; 0x2118 <build_map+0x98>
						}
					}
				}
			}
		}
		fi++;
    2210:	08 94       	sec
    2212:	e1 1c       	adc	r14, r1
    2214:	f1 1c       	adc	r15, r1
		if(fi>50)
    2216:	83 e3       	ldi	r24, 0x33	; 51
    2218:	e8 16       	cp	r14, r24
    221a:	f1 04       	cpc	r15, r1
    221c:	89 f5       	brne	.+98     	; 0x2280 <build_map+0x200>
		{
		lcd_clear();
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_string("Broke build");
    2226:	86 e7       	ldi	r24, 0x76	; 118
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		lcd_write_int_xy(0,1,start_x,2);
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	a5 01       	movw	r20, r10
    2238:	22 e0       	ldi	r18, 0x02	; 2
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(3,1,start_y,2);
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	70 e0       	ldi	r23, 0x00	; 0
    2248:	a4 01       	movw	r20, r8
    224a:	22 e0       	ldi	r18, 0x02	; 2
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(8,1,destn_x,2);
    2252:	88 e0       	ldi	r24, 0x08	; 8
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	a3 01       	movw	r20, r6
    225c:	22 e0       	ldi	r18, 0x02	; 2
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(11,1,destn_y,2);
    2264:	8b e0       	ldi	r24, 0x0B	; 11
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	61 e0       	ldi	r22, 0x01	; 1
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	a2 01       	movw	r20, r4
    226e:	22 e0       	ldi	r18, 0x02	; 2
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		delay_sec(2);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    227e:	10 c0       	rjmp	.+32     	; 0x22a0 <build_map+0x220>
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
    2280:	fa 01       	movw	r30, r20
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	84 36       	cpi	r24, 0x64	; 100
    2288:	91 05       	cpc	r25, r1
    228a:	51 f4       	brne	.+20     	; 0x22a0 <build_map+0x220>
    228c:	af e3       	ldi	r26, 0x3F	; 63
    228e:	ca 2e       	mov	r12, r26
    2290:	a1 e0       	ldi	r26, 0x01	; 1
    2292:	da 2e       	mov	r13, r26
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
					}
					if(dir_array[l][s][3]=='T' && dir_array[l-1][s][1]=='T')
					{
						if(map_array[l-1][s]==100)
						{
							map_array[l-1][s]=(fi+1);
    2298:	87 01       	movw	r16, r14
    229a:	0f 5f       	subi	r16, 0xFF	; 255
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	95 cf       	rjmp	.-214    	; 0x21ca <build_map+0x14a>
		lcd_write_int_xy(11,1,destn_y,2);
		delay_sec(2);
		break;
		}
	}
}
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	bf 90       	pop	r11
    22b2:	af 90       	pop	r10
    22b4:	9f 90       	pop	r9
    22b6:	8f 90       	pop	r8
    22b8:	7f 90       	pop	r7
    22ba:	6f 90       	pop	r6
    22bc:	5f 90       	pop	r5
    22be:	4f 90       	pop	r4
    22c0:	08 95       	ret

000022c2 <checkAndCorrectDirection>:
	bot_brake();
	//delay_millisec(500);
}

void checkAndCorrectDirection(int req_dir)
{
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	ec 01       	movw	r28, r24
	if(req_dir == 1)
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	39 f5       	brne	.+78     	; 0x231c <checkAndCorrectDirection+0x5a>
	{
		switch(dir)
    22ce:	80 91 16 01 	lds	r24, 0x0116
    22d2:	90 91 17 01 	lds	r25, 0x0117
    22d6:	2f ef       	ldi	r18, 0xFF	; 255
    22d8:	8f 3f       	cpi	r24, 0xFF	; 255
    22da:	92 07       	cpc	r25, r18
    22dc:	49 f0       	breq	.+18     	; 0x22f0 <checkAndCorrectDirection+0x2e>
    22de:	82 30       	cpi	r24, 0x02	; 2
    22e0:	91 05       	cpc	r25, r1
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <checkAndCorrectDirection+0x24>
    22e4:	57 c0       	rjmp	.+174    	; 0x2394 <checkAndCorrectDirection+0xd2>
    22e6:	8e 5f       	subi	r24, 0xFE	; 254
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	09 f0       	breq	.+2      	; 0x22ee <checkAndCorrectDirection+0x2c>
    22ec:	a3 c0       	rjmp	.+326    	; 0x2434 <checkAndCorrectDirection+0x172>
    22ee:	7f c0       	rjmp	.+254    	; 0x23ee <checkAndCorrectDirection+0x12c>
			case +2: turn_right();sense_of_directon();break;

			case -2:turn_left();sense_of_directon();break;

			case -1:
			if(dir_array[x_coordinate][y_coordinate][0]=='T')
    22f0:	e0 91 18 01 	lds	r30, 0x0118
    22f4:	f0 91 19 01 	lds	r31, 0x0119
    22f8:	44 e0       	ldi	r20, 0x04	; 4
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	4a 95       	dec	r20
    2300:	e1 f7       	brne	.-8      	; 0x22fa <checkAndCorrectDirection+0x38>
    2302:	80 91 1a 01 	lds	r24, 0x011A
    2306:	90 91 1b 01 	lds	r25, 0x011B
    230a:	e8 0f       	add	r30, r24
    230c:	f9 1f       	adc	r31, r25
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	e1 5c       	subi	r30, 0xC1	; 193
    2318:	fc 4f       	sbci	r31, 0xFC	; 252
    231a:	56 c0       	rjmp	.+172    	; 0x23c8 <checkAndCorrectDirection+0x106>
			

		}
	}

	else if(req_dir == 2)
    231c:	82 30       	cpi	r24, 0x02	; 2
    231e:	91 05       	cpc	r25, r1
    2320:	39 f5       	brne	.+78     	; 0x2370 <checkAndCorrectDirection+0xae>
	{
		switch(dir)
    2322:	80 91 16 01 	lds	r24, 0x0116
    2326:	90 91 17 01 	lds	r25, 0x0117
    232a:	2f ef       	ldi	r18, 0xFF	; 255
    232c:	8f 3f       	cpi	r24, 0xFF	; 255
    232e:	92 07       	cpc	r25, r18
    2330:	89 f1       	breq	.+98     	; 0x2394 <checkAndCorrectDirection+0xd2>
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	91 05       	cpc	r25, r1
    2336:	09 f4       	brne	.+2      	; 0x233a <checkAndCorrectDirection+0x78>
    2338:	5a c0       	rjmp	.+180    	; 0x23ee <checkAndCorrectDirection+0x12c>
    233a:	8e 5f       	subi	r24, 0xFE	; 254
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	09 f0       	breq	.+2      	; 0x2342 <checkAndCorrectDirection+0x80>
    2340:	79 c0       	rjmp	.+242    	; 0x2434 <checkAndCorrectDirection+0x172>
		{	
			case +1: turn_left();sense_of_directon();break;
			case -1:turn_right();sense_of_directon();break;
			case -2:
			if(dir_array[x_coordinate][y_coordinate][3]=='T')
    2342:	e0 91 18 01 	lds	r30, 0x0118
    2346:	f0 91 19 01 	lds	r31, 0x0119
    234a:	24 e0       	ldi	r18, 0x04	; 4
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	2a 95       	dec	r18
    2352:	e1 f7       	brne	.-8      	; 0x234c <checkAndCorrectDirection+0x8a>
    2354:	80 91 1a 01 	lds	r24, 0x011A
    2358:	90 91 1b 01 	lds	r25, 0x011B
    235c:	e8 0f       	add	r30, r24
    235e:	f9 1f       	adc	r31, r25
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	ee 0f       	add	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	e1 5c       	subi	r30, 0xC1	; 193
    236a:	fc 4f       	sbci	r31, 0xFC	; 252
    236c:	83 81       	ldd	r24, Z+3	; 0x03
    236e:	58 c0       	rjmp	.+176    	; 0x2420 <checkAndCorrectDirection+0x15e>
				dir = 2;
			}
		}
	}

	else if(req_dir == -1)
    2370:	8f ef       	ldi	r24, 0xFF	; 255
    2372:	cf 3f       	cpi	r28, 0xFF	; 255
    2374:	d8 07       	cpc	r29, r24
    2376:	51 f5       	brne	.+84     	; 0x23cc <checkAndCorrectDirection+0x10a>
	{
		switch(dir)
    2378:	80 91 16 01 	lds	r24, 0x0116
    237c:	90 91 17 01 	lds	r25, 0x0117
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	91 05       	cpc	r25, r1
    2384:	61 f0       	breq	.+24     	; 0x239e <checkAndCorrectDirection+0xdc>
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	91 05       	cpc	r25, r1
    238a:	89 f1       	breq	.+98     	; 0x23ee <checkAndCorrectDirection+0x12c>
    238c:	8e 5f       	subi	r24, 0xFE	; 254
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	09 f0       	breq	.+2      	; 0x2394 <checkAndCorrectDirection+0xd2>
    2392:	50 c0       	rjmp	.+160    	; 0x2434 <checkAndCorrectDirection+0x172>
		{	
			case +2: turn_left();sense_of_directon();break;
		
			case -2:turn_right();sense_of_directon();break;
    2394:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
    2398:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
    239c:	4b c0       	rjmp	.+150    	; 0x2434 <checkAndCorrectDirection+0x172>

			case 1:
			if(dir_array[x_coordinate][y_coordinate][2]=='T')
    239e:	e0 91 18 01 	lds	r30, 0x0118
    23a2:	f0 91 19 01 	lds	r31, 0x0119
    23a6:	84 e0       	ldi	r24, 0x04	; 4
    23a8:	ee 0f       	add	r30, r30
    23aa:	ff 1f       	adc	r31, r31
    23ac:	8a 95       	dec	r24
    23ae:	e1 f7       	brne	.-8      	; 0x23a8 <checkAndCorrectDirection+0xe6>
    23b0:	80 91 1a 01 	lds	r24, 0x011A
    23b4:	90 91 1b 01 	lds	r25, 0x011B
    23b8:	e8 0f       	add	r30, r24
    23ba:	f9 1f       	adc	r31, r25
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ef 5b       	subi	r30, 0xBF	; 191
    23c6:	fc 4f       	sbci	r31, 0xFC	; 252
    23c8:	80 81       	ld	r24, Z
    23ca:	2a c0       	rjmp	.+84     	; 0x2420 <checkAndCorrectDirection+0x15e>
			default:break;
		}
	}


	else if(req_dir == -2)
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	ce 3f       	cpi	r28, 0xFE	; 254
    23d0:	d8 07       	cpc	r29, r24
    23d2:	81 f5       	brne	.+96     	; 0x2434 <checkAndCorrectDirection+0x172>
	{
		switch(dir)
    23d4:	80 91 16 01 	lds	r24, 0x0116
    23d8:	90 91 17 01 	lds	r25, 0x0117
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	c9 f2       	breq	.-78     	; 0x2394 <checkAndCorrectDirection+0xd2>
    23e2:	82 30       	cpi	r24, 0x02	; 2
    23e4:	91 05       	cpc	r25, r1
    23e6:	31 f0       	breq	.+12     	; 0x23f4 <checkAndCorrectDirection+0x132>
    23e8:	8f 5f       	subi	r24, 0xFF	; 255
    23ea:	9f 4f       	sbci	r25, 0xFF	; 255
    23ec:	19 f5       	brne	.+70     	; 0x2434 <checkAndCorrectDirection+0x172>
		{	
			case +1:turn_right();sense_of_directon();break; 
				
			case -1: turn_left();sense_of_directon();break;
    23ee:	0e 94 65 05 	call	0xaca	; 0xaca <turn_left>
    23f2:	d2 cf       	rjmp	.-92     	; 0x2398 <checkAndCorrectDirection+0xd6>
					
			case 2:
			if(dir_array[x_coordinate][y_coordinate][1]=='T')
    23f4:	e0 91 18 01 	lds	r30, 0x0118
    23f8:	f0 91 19 01 	lds	r31, 0x0119
    23fc:	a4 e0       	ldi	r26, 0x04	; 4
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	aa 95       	dec	r26
    2404:	e1 f7       	brne	.-8      	; 0x23fe <checkAndCorrectDirection+0x13c>
    2406:	80 91 1a 01 	lds	r24, 0x011A
    240a:	90 91 1b 01 	lds	r25, 0x011B
    240e:	e8 0f       	add	r30, r24
    2410:	f9 1f       	adc	r31, r25
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	ee 0f       	add	r30, r30
    2418:	ff 1f       	adc	r31, r31
    241a:	e1 5c       	subi	r30, 0xC1	; 193
    241c:	fc 4f       	sbci	r31, 0xFC	; 252
    241e:	81 81       	ldd	r24, Z+1	; 0x01
    2420:	84 35       	cpi	r24, 0x54	; 84
    2422:	11 f4       	brne	.+4      	; 0x2428 <checkAndCorrectDirection+0x166>
			{
				turn_right();
    2424:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
				turn_right();
				dir = -2;
			}
			else
			{
				turn_right();
    2428:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
				dir = -2;
    242c:	d0 93 17 01 	sts	0x0117, r29
    2430:	c0 93 16 01 	sts	0x0116, r28
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2434:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2436:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2438:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    243a:	af 9a       	sbi	0x15, 7	; 21

		}
	}
	bot_brake();
	//delay_sec(1);
}
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <go_to_coordinate>:
		}
	}
}

void go_to_coordinate(int next_x, int next_y)
{
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	ec 01       	movw	r28, r24
    244c:	8b 01       	movw	r16, r22
	if (next_x > x_coordinate)
    244e:	80 91 18 01 	lds	r24, 0x0118
    2452:	90 91 19 01 	lds	r25, 0x0119
    2456:	8c 17       	cp	r24, r28
    2458:	9d 07       	cpc	r25, r29
    245a:	9c f4       	brge	.+38     	; 0x2482 <go_to_coordinate+0x40>
	{	
		checkAndCorrectDirection(1);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 61 11 	call	0x22c2	; 0x22c2 <checkAndCorrectDirection>
    2464:	02 c0       	rjmp	.+4      	; 0x246a <go_to_coordinate+0x28>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    2466:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
void go_to_coordinate(int next_x, int next_y)
{
	if (next_x > x_coordinate)
	{	
		checkAndCorrectDirection(1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    246a:	cd 9b       	sbis	0x19, 5	; 25
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <go_to_coordinate+0x36>
    246e:	cf 99       	sbic	0x19, 7	; 25
    2470:	fa cf       	rjmp	.-12     	; 0x2466 <go_to_coordinate+0x24>
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <go_to_coordinate+0x36>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    2474:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    2478:	cc 9b       	sbis	0x19, 4	; 25
    247a:	4c c0       	rjmp	.+152    	; 0x2514 <go_to_coordinate+0xd2>
    247c:	87 99       	sbic	0x10, 7	; 16
    247e:	fa cf       	rjmp	.-12     	; 0x2474 <go_to_coordinate+0x32>
    2480:	49 c0       	rjmp	.+146    	; 0x2514 <go_to_coordinate+0xd2>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
    2482:	c8 17       	cp	r28, r24
    2484:	d9 07       	cpc	r29, r25
    2486:	9c f4       	brge	.+38     	; 0x24ae <go_to_coordinate+0x6c>
	{
		checkAndCorrectDirection(-1);
    2488:	8f ef       	ldi	r24, 0xFF	; 255
    248a:	9f ef       	ldi	r25, 0xFF	; 255
    248c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <checkAndCorrectDirection>
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <go_to_coordinate+0x54>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    2492:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
	{
		checkAndCorrectDirection(-1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    2496:	cd 9b       	sbis	0x19, 5	; 25
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <go_to_coordinate+0x62>
    249a:	cf 99       	sbic	0x19, 7	; 25
    249c:	fa cf       	rjmp	.-12     	; 0x2492 <go_to_coordinate+0x50>
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <go_to_coordinate+0x62>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    24a0:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    24a4:	cc 9b       	sbis	0x19, 4	; 25
    24a6:	36 c0       	rjmp	.+108    	; 0x2514 <go_to_coordinate+0xd2>
    24a8:	87 99       	sbic	0x10, 7	; 16
    24aa:	fa cf       	rjmp	.-12     	; 0x24a0 <go_to_coordinate+0x5e>
    24ac:	33 c0       	rjmp	.+102    	; 0x2514 <go_to_coordinate+0xd2>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}

	else if (next_y>y_coordinate)
    24ae:	80 91 1a 01 	lds	r24, 0x011A
    24b2:	90 91 1b 01 	lds	r25, 0x011B
    24b6:	86 17       	cp	r24, r22
    24b8:	97 07       	cpc	r25, r23
    24ba:	9c f4       	brge	.+38     	; 0x24e2 <go_to_coordinate+0xa0>
	{	
		checkAndCorrectDirection(2);
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <checkAndCorrectDirection>
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <go_to_coordinate+0x88>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    24c6:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}

	else if (next_y>y_coordinate)
	{	
		checkAndCorrectDirection(2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    24ca:	cd 9b       	sbis	0x19, 5	; 25
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <go_to_coordinate+0x96>
    24ce:	cf 99       	sbic	0x19, 7	; 25
    24d0:	fa cf       	rjmp	.-12     	; 0x24c6 <go_to_coordinate+0x84>
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <go_to_coordinate+0x96>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    24d4:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    24d8:	cc 9b       	sbis	0x19, 4	; 25
    24da:	1c c0       	rjmp	.+56     	; 0x2514 <go_to_coordinate+0xd2>
    24dc:	87 99       	sbic	0x10, 7	; 16
    24de:	fa cf       	rjmp	.-12     	; 0x24d4 <go_to_coordinate+0x92>
    24e0:	19 c0       	rjmp	.+50     	; 0x2514 <go_to_coordinate+0xd2>
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}
	else if(next_y<y_coordinate)
    24e2:	68 17       	cp	r22, r24
    24e4:	79 07       	cpc	r23, r25
    24e6:	04 f5       	brge	.+64     	; 0x2528 <go_to_coordinate+0xe6>
	{
		right=0;
    24e8:	10 92 40 07 	sts	0x0740, r1
    24ec:	10 92 3f 07 	sts	0x073F, r1
		checkAndCorrectDirection(-2);
    24f0:	8e ef       	ldi	r24, 0xFE	; 254
    24f2:	9f ef       	ldi	r25, 0xFF	; 255
    24f4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <checkAndCorrectDirection>
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <go_to_coordinate+0xbc>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    24fa:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}
	else if(next_y<y_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    24fe:	cd 9b       	sbis	0x19, 5	; 25
    2500:	05 c0       	rjmp	.+10     	; 0x250c <go_to_coordinate+0xca>
    2502:	cf 99       	sbic	0x19, 7	; 25
    2504:	fa cf       	rjmp	.-12     	; 0x24fa <go_to_coordinate+0xb8>
    2506:	02 c0       	rjmp	.+4      	; 0x250c <go_to_coordinate+0xca>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    2508:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    250c:	cc 9b       	sbis	0x19, 4	; 25
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <go_to_coordinate+0xd2>
    2510:	87 99       	sbic	0x10, 7	; 16
    2512:	fa cf       	rjmp	.-12     	; 0x2508 <go_to_coordinate+0xc6>
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2514:	8f e8       	ldi	r24, 0x8F	; 143
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	99 bd       	out	0x29, r25	; 41
    251a:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    251c:	9b bd       	out	0x2b, r25	; 43
    251e:	8a bd       	out	0x2a, r24	; 42
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2520:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2522:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2524:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2526:	af 9a       	sbi	0x15, 7	; 21
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}	
	x_coordinate = next_x;               ///good work
    2528:	d0 93 19 01 	sts	0x0119, r29
    252c:	c0 93 18 01 	sts	0x0118, r28
	y_coordinate = next_y;
    2530:	10 93 1b 01 	sts	0x011B, r17
    2534:	00 93 1a 01 	sts	0x011A, r16
	lcd_clear();
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,1,x_coordinate,2);
    2540:	40 91 18 01 	lds	r20, 0x0118
    2544:	50 91 19 01 	lds	r21, 0x0119
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	22 e0       	ldi	r18, 0x02	; 2
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(5,1,y_coordinate,2);
    2558:	40 91 1a 01 	lds	r20, 0x011A
    255c:	50 91 1b 01 	lds	r21, 0x011B
    2560:	85 e0       	ldi	r24, 0x05	; 5
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	22 e0       	ldi	r18, 0x02	; 2
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(3,0,irc,5);
    2570:	40 91 2b 01 	lds	r20, 0x012B
    2574:	50 91 2c 01 	lds	r21, 0x012C
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	25 e0       	ldi	r18, 0x05	; 5
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2588:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    258a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    258c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    258e:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	//delay_millisec(500);
}
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <print_path>:
		}
	}
}

void print_path()
{
    259a:	cf 92       	push	r12
    259c:	df 92       	push	r13
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
	int a=0,b=0;
	lcd_clear();
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
    25b2:	05 e4       	ldi	r16, 0x45	; 69
    25b4:	17 e0       	ldi	r17, 0x07	; 7
    25b6:	c0 e0       	ldi	r28, 0x00	; 0
    25b8:	d0 e0       	ldi	r29, 0x00	; 0
    25ba:	ee 24       	eor	r14, r14
    25bc:	ff 24       	eor	r15, r15
    25be:	cc 24       	eor	r12, r12
    25c0:	dd 24       	eor	r13, r13
    25c2:	21 c0       	rjmp	.+66     	; 0x2606 <print_path+0x6c>
	for(int i = 0; i<=ipl;i++)
	{
		lcd_write_int_xy(a,b, path_array[i][0],2);
    25c4:	f8 01       	movw	r30, r16
    25c6:	40 81       	ld	r20, Z
    25c8:	51 81       	ldd	r21, Z+1	; 0x01
    25ca:	ce 01       	movw	r24, r28
    25cc:	b7 01       	movw	r22, r14
    25ce:	22 e0       	ldi	r18, 0x02	; 2
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		a+=2;
		lcd_write_int_xy(a,b, path_array[i][1],2);
    25d6:	f8 01       	movw	r30, r16
    25d8:	42 81       	ldd	r20, Z+2	; 0x02
    25da:	53 81       	ldd	r21, Z+3	; 0x03
    25dc:	ce 01       	movw	r24, r28
    25de:	02 96       	adiw	r24, 0x02	; 2
    25e0:	b7 01       	movw	r22, r14
    25e2:	22 e0       	ldi	r18, 0x02	; 2
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		a+=3;
    25ea:	25 96       	adiw	r28, 0x05	; 5
		if(a>13)
    25ec:	ce 30       	cpi	r28, 0x0E	; 14
    25ee:	d1 05       	cpc	r29, r1
    25f0:	2c f0       	brlt	.+10     	; 0x25fc <print_path+0x62>
    25f2:	c0 e0       	ldi	r28, 0x00	; 0
    25f4:	d0 e0       	ldi	r29, 0x00	; 0
    25f6:	51 e0       	ldi	r21, 0x01	; 1
    25f8:	e5 2e       	mov	r14, r21
    25fa:	f1 2c       	mov	r15, r1

void print_path()
{
	int a=0,b=0;
	lcd_clear();
	for(int i = 0; i<=ipl;i++)
    25fc:	08 94       	sec
    25fe:	c1 1c       	adc	r12, r1
    2600:	d1 1c       	adc	r13, r1
    2602:	0c 5f       	subi	r16, 0xFC	; 252
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	80 91 39 01 	lds	r24, 0x0139
    260a:	90 91 3a 01 	lds	r25, 0x013A
    260e:	8c 15       	cp	r24, r12
    2610:	9d 05       	cpc	r25, r13
    2612:	c4 f6       	brge	.-80     	; 0x25c4 <print_path+0x2a>
		{
			b=1;
			a=0;
		}
	}
}
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	df 90       	pop	r13
    2622:	cf 90       	pop	r12
    2624:	08 95       	ret

00002626 <end_zone>:
void end_zone()
{
    2626:	6f 92       	push	r6
    2628:	7f 92       	push	r7
    262a:	8f 92       	push	r8
    262c:	9f 92       	push	r9
    262e:	af 92       	push	r10
    2630:	bf 92       	push	r11
    2632:	cf 92       	push	r12
    2634:	df 92       	push	r13
    2636:	ef 92       	push	r14
    2638:	ff 92       	push	r15
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
	int endx = x_coordinate, endy = y_coordinate;
    2642:	60 90 18 01 	lds	r6, 0x0118
    2646:	70 90 19 01 	lds	r7, 0x0119
    264a:	80 90 1a 01 	lds	r8, 0x011A
    264e:	90 90 1b 01 	lds	r9, 0x011B
	update_array('F','F','T','F');
    2652:	86 e4       	ldi	r24, 0x46	; 70
    2654:	66 e4       	ldi	r22, 0x46	; 70
    2656:	44 e5       	ldi	r20, 0x54	; 84
    2658:	26 e4       	ldi	r18, 0x46	; 70
    265a:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
	lcd_clear();
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2666:	8f e8       	ldi	r24, 0x8F	; 143
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	9b bd       	out	0x2b, r25	; 43
    266c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    266e:	99 bd       	out	0x29, r25	; 41
    2670:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2672:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2674:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2676:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2678:	af 9a       	sbi	0x15, 7	; 21
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	flick();
    267a:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
	//delay_sec(1);
	build_map(7,7,endx,endy);
    267e:	87 e0       	ldi	r24, 0x07	; 7
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	67 e0       	ldi	r22, 0x07	; 7
    2684:	70 e0       	ldi	r23, 0x00	; 0
    2686:	a3 01       	movw	r20, r6
    2688:	94 01       	movw	r18, r8
    268a:	0e 94 40 10 	call	0x2080	; 0x2080 <build_map>
	int tempx = x_coordinate, tempy = y_coordinate;
    268e:	a0 90 18 01 	lds	r10, 0x0118
    2692:	b0 90 19 01 	lds	r11, 0x0119
    2696:	c0 90 1a 01 	lds	r12, 0x011A
    269a:	d0 90 1b 01 	lds	r13, 0x011B
	x_coordinate = 7;
    269e:	87 e0       	ldi	r24, 0x07	; 7
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	90 93 19 01 	sts	0x0119, r25
    26a6:	80 93 18 01 	sts	0x0118, r24
	y_coordinate = 7;
    26aa:	90 93 1b 01 	sts	0x011B, r25
    26ae:	80 93 1a 01 	sts	0x011A, r24
	get_path();
    26b2:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <get_path>
    26b6:	65 e4       	ldi	r22, 0x45	; 69
    26b8:	e6 2e       	mov	r14, r22
    26ba:	67 e0       	ldi	r22, 0x07	; 7
    26bc:	f6 2e       	mov	r15, r22
    26be:	87 01       	movw	r16, r14
    26c0:	c0 e0       	ldi	r28, 0x00	; 0
    26c2:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<15;i++)
	{
		eeprom_write_word(eeprom_addr,path_array[i][0]);
    26c4:	f8 01       	movw	r30, r16
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	ce 01       	movw	r24, r28
    26cc:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__eewr_word_m32>
		eeprom_addr+=2;
		eeprom_write_word(eeprom_addr,path_array[i][1]);
    26d0:	f8 01       	movw	r30, r16
    26d2:	62 81       	ldd	r22, Z+2	; 0x02
    26d4:	73 81       	ldd	r23, Z+3	; 0x03
    26d6:	ce 01       	movw	r24, r28
    26d8:	02 96       	adiw	r24, 0x02	; 2
    26da:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__eewr_word_m32>
    26de:	0c 5f       	subi	r16, 0xFC	; 252
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	24 96       	adiw	r28, 0x04	; 4
	int tempx = x_coordinate, tempy = y_coordinate;
	x_coordinate = 7;
	y_coordinate = 7;
	get_path();
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<15;i++)
    26e4:	cc 33       	cpi	r28, 0x3C	; 60
    26e6:	d1 05       	cpc	r29, r1
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <end_zone+0x9e>
		eeprom_write_word(eeprom_addr,path_array[i][0]);
		eeprom_addr+=2;
		eeprom_write_word(eeprom_addr,path_array[i][1]);
		eeprom_addr+=2;
	}
	x_coordinate = tempx;
    26ea:	b0 92 19 01 	sts	0x0119, r11
    26ee:	a0 92 18 01 	sts	0x0118, r10
	y_coordinate = tempy;
    26f2:	d0 92 1b 01 	sts	0x011B, r13
    26f6:	c0 92 1a 01 	sts	0x011A, r12
	end_zone_uturn();
    26fa:	0e 94 27 05 	call	0xa4e	; 0xa4e <end_zone_uturn>
	sense_of_directon();
    26fe:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
	fill_missed_array();
    2702:	0e 94 39 0a 	call	0x1472	; 0x1472 <fill_missed_array>
	coordinates_tobe_reached();
    2706:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <coordinates_tobe_reached>
	
	lcd_clear();
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	
	lcd_write_string_xy(0,0,"mx: ");
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	42 e8       	ldi	r20, 0x82	; 130
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	lcd_write_int_xy(4,0,mx,2);
    2722:	40 91 31 01 	lds	r20, 0x0131
    2726:	50 91 32 01 	lds	r21, 0x0132
    272a:	84 e0       	ldi	r24, 0x04	; 4
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	22 e0       	ldi	r18, 0x02	; 2
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_string_xy(07,0,"my: ");
    273a:	87 e0       	ldi	r24, 0x07	; 7
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	47 e8       	ldi	r20, 0x87	; 135
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	lcd_write_int_xy(11,0,my,2);
    274a:	40 91 33 01 	lds	r20, 0x0133
    274e:	50 91 34 01 	lds	r21, 0x0134
    2752:	8b e0       	ldi	r24, 0x0B	; 11
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	22 e0       	ldi	r18, 0x02	; 2
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_string_xy(0,1,"x: ");
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	4c e8       	ldi	r20, 0x8C	; 140
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	lcd_write_int_xy(4,1,x_coordinate,2);
    2772:	40 91 18 01 	lds	r20, 0x0118
    2776:	50 91 19 01 	lds	r21, 0x0119
    277a:	84 e0       	ldi	r24, 0x04	; 4
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	22 e0       	ldi	r18, 0x02	; 2
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_string_xy(07,1,"y: ");
    278a:	87 e0       	ldi	r24, 0x07	; 7
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	40 e9       	ldi	r20, 0x90	; 144
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	lcd_write_int_xy(11,1,y_coordinate,2);
    279a:	40 91 1a 01 	lds	r20, 0x011A
    279e:	50 91 1b 01 	lds	r21, 0x011B
    27a2:	8b e0       	ldi	r24, 0x0B	; 11
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	22 e0       	ldi	r18, 0x02	; 2
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	//delay_sec(5);
	if(mx!=0 && my!=0)
    27b2:	80 91 31 01 	lds	r24, 0x0131
    27b6:	90 91 32 01 	lds	r25, 0x0132
    27ba:	89 2b       	or	r24, r25
    27bc:	41 f0       	breq	.+16     	; 0x27ce <end_zone+0x1a8>
    27be:	80 91 33 01 	lds	r24, 0x0133
    27c2:	90 91 34 01 	lds	r25, 0x0134
    27c6:	89 2b       	or	r24, r25
    27c8:	11 f0       	breq	.+4      	; 0x27ce <end_zone+0x1a8>
	{
		map_all();
    27ca:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <map_all>
	}
	x_coordinate = 7;
    27ce:	87 e0       	ldi	r24, 0x07	; 7
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	90 93 19 01 	sts	0x0119, r25
    27d6:	80 93 18 01 	sts	0x0118, r24
	y_coordinate = 7;
    27da:	90 93 1b 01 	sts	0x011B, r25
    27de:	80 93 1a 01 	sts	0x011A, r24
	dir = 2;
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	90 93 17 01 	sts	0x0117, r25
    27ea:	80 93 16 01 	sts	0x0116, r24
	
	
	lcd_write_string("Press Any Key");
    27ee:	84 e9       	ldi	r24, 0x94	; 148
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    27f6:	82 99       	sbic	0x10, 2	; 16
    27f8:	61 c0       	rjmp	.+194    	; 0x28bc <end_zone+0x296>
	while(1)
	{
		if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
		{
			build_map(7,7,endx,endy);
    27fa:	87 e0       	ldi	r24, 0x07	; 7
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	67 e0       	ldi	r22, 0x07	; 7
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	a3 01       	movw	r20, r6
    2804:	94 01       	movw	r18, r8
    2806:	0e 94 40 10 	call	0x2080	; 0x2080 <build_map>
			get_path();
    280a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <get_path>
    280e:	05 e4       	ldi	r16, 0x45	; 69
    2810:	17 e0       	ldi	r17, 0x07	; 7
    2812:	c0 e0       	ldi	r28, 0x00	; 0
    2814:	d0 e0       	ldi	r29, 0x00	; 0
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
			{
				eeprom_write_word(eeprom_addr,path_array[i][0]);
    2816:	f8 01       	movw	r30, r16
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	ce 01       	movw	r24, r28
    281e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__eewr_word_m32>
				eeprom_addr+=2;
				eeprom_write_word(eeprom_addr,path_array[i][1]);
    2822:	f8 01       	movw	r30, r16
    2824:	62 81       	ldd	r22, Z+2	; 0x02
    2826:	73 81       	ldd	r23, Z+3	; 0x03
    2828:	ce 01       	movw	r24, r28
    282a:	02 96       	adiw	r24, 0x02	; 2
    282c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__eewr_word_m32>
    2830:	0c 5f       	subi	r16, 0xFC	; 252
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	24 96       	adiw	r28, 0x04	; 4
		if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
		{
			build_map(7,7,endx,endy);
			get_path();
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
    2836:	cc 33       	cpi	r28, 0x3C	; 60
    2838:	d1 05       	cpc	r29, r1
    283a:	69 f7       	brne	.-38     	; 0x2816 <end_zone+0x1f0>
				eeprom_write_word(eeprom_addr,path_array[i][0]);
				eeprom_addr+=2;
				eeprom_write_word(eeprom_addr,path_array[i][1]);
				eeprom_addr+=2;
			}
			lcd_clear();
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("Stored In EP");
    2844:	82 ea       	ldi	r24, 0xA2	; 162
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(1);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
			right = 0;
    2854:	10 92 40 07 	sts	0x0740, r1
    2858:	10 92 3f 07 	sts	0x073F, r1
			print_path();
    285c:	0e 94 cd 12 	call	0x259a	; 0x259a <print_path>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2860:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2862:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2864:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2866:	af 9a       	sbi	0x15, 7	; 21
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2868:	82 99       	sbic	0x10, 2	; 16
    286a:	2f c0       	rjmp	.+94     	; 0x28ca <end_zone+0x2a4>
			bot_brake();
			while(1)
			{				
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{	
					lcd_clear();
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					delay_sec(1);
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					break;
				}
			}
			for(int i=0; i<15; i++)
			{
				if(path_array[i][0]==0 && path_array[i][1]==0)
    287c:	f7 01       	movw	r30, r14
    287e:	20 81       	ld	r18, Z
    2880:	31 81       	ldd	r19, Z+1	; 0x01
    2882:	21 15       	cp	r18, r1
    2884:	31 05       	cpc	r19, r1
    2886:	21 f4       	brne	.+8      	; 0x2890 <end_zone+0x26a>
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	89 2b       	or	r24, r25
    288e:	79 f0       	breq	.+30     	; 0x28ae <end_zone+0x288>
				{
					break;
				}
				
				go_to_coordinate(path_array[i][0], path_array[i][1]);
    2890:	f7 01       	movw	r30, r14
    2892:	62 81       	ldd	r22, Z+2	; 0x02
    2894:	73 81       	ldd	r23, Z+3	; 0x03
    2896:	c9 01       	movw	r24, r18
    2898:	0e 94 21 12 	call	0x2442	; 0x2442 <go_to_coordinate>
    289c:	84 e0       	ldi	r24, 0x04	; 4
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	e8 0e       	add	r14, r24
    28a2:	f9 1e       	adc	r15, r25
					lcd_clear();
					delay_sec(1);
					break;
				}
			}
			for(int i=0; i<15; i++)
    28a4:	91 e8       	ldi	r25, 0x81	; 129
    28a6:	e9 16       	cp	r14, r25
    28a8:	97 e0       	ldi	r25, 0x07	; 7
    28aa:	f9 06       	cpc	r15, r25
    28ac:	39 f7       	brne	.-50     	; 0x287c <end_zone+0x256>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_stop(void)
{
 MOTOR1A=0;
    28ae:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
    28b0:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
    28b2:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
    28b4:	af 98       	cbi	0x15, 7	; 21

			}
			while(1)
			{
				bot_stop();
				flick();
    28b6:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
    28ba:	f9 cf       	rjmp	.-14     	; 0x28ae <end_zone+0x288>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    28bc:	80 9b       	sbis	0x10, 0	; 16
    28be:	9d cf       	rjmp	.-198    	; 0x27fa <end_zone+0x1d4>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    28c0:	81 9b       	sbis	0x10, 1	; 16
    28c2:	9b cf       	rjmp	.-202    	; 0x27fa <end_zone+0x1d4>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    28c4:	83 9b       	sbis	0x10, 3	; 16
    28c6:	99 cf       	rjmp	.-206    	; 0x27fa <end_zone+0x1d4>
    28c8:	96 cf       	rjmp	.-212    	; 0x27f6 <end_zone+0x1d0>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    28ca:	80 9b       	sbis	0x10, 0	; 16
    28cc:	cf cf       	rjmp	.-98     	; 0x286c <end_zone+0x246>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    28ce:	81 9b       	sbis	0x10, 1	; 16
    28d0:	cd cf       	rjmp	.-102    	; 0x286c <end_zone+0x246>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    28d2:	83 9b       	sbis	0x10, 3	; 16
    28d4:	cb cf       	rjmp	.-106    	; 0x286c <end_zone+0x246>
    28d6:	c8 cf       	rjmp	.-112    	; 0x2868 <end_zone+0x242>

000028d8 <right_junc_check>:
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    28d8:	8f e8       	ldi	r24, 0x8F	; 143
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	9b bd       	out	0x2b, r25	; 43
    28de:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    28e0:	99 bd       	out	0x29, r25	; 41
    28e2:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    28e4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    28e6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    28e8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    28ea:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	//lcd_clear();
	//lcd_write_int_xy(0,0,irc,5);
	//delay_sec(20);
	
	lcd_clear();
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	if(irc>2000)
    28f4:	20 91 2b 01 	lds	r18, 0x012B
    28f8:	30 91 2c 01 	lds	r19, 0x012C
    28fc:	87 e0       	ldi	r24, 0x07	; 7
    28fe:	21 3d       	cpi	r18, 0xD1	; 209
    2900:	38 07       	cpc	r19, r24
    2902:	6c f0       	brlt	.+26     	; 0x291e <right_junc_check+0x46>
	{
		// lcd_write_string("Sixty");
		if(irc>4000)
    2904:	21 5a       	subi	r18, 0xA1	; 161
    2906:	3f 40       	sbci	r19, 0x0F	; 15
    2908:	1c f0       	brlt	.+6      	; 0x2910 <right_junc_check+0x38>
		{
			Coordinates_changed_by = 3;
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <right_junc_check+0x3c>
		}
		else
		{
			Coordinates_changed_by = 2;
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	90 93 30 01 	sts	0x0130, r25
    2918:	80 93 2f 01 	sts	0x012F, r24
    291c:	0c c0       	rjmp	.+24     	; 0x2936 <right_junc_check+0x5e>
		}
	}
	else
	{
		// lcd_write_string("Thirty");
		Coordinates_changed_by = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	90 93 30 01 	sts	0x0130, r25
    2926:	80 93 2f 01 	sts	0x012F, r24
	}

	
	//delay_sec(2);
	if(irc==0)
    292a:	23 2b       	or	r18, r19
    292c:	21 f4       	brne	.+8      	; 0x2936 <right_junc_check+0x5e>
	{
		Coordinates_changed_by = 0;
    292e:	10 92 30 01 	sts	0x0130, r1
    2932:	10 92 2f 01 	sts	0x012F, r1
	}
	update_coordinates();
    2936:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
	lcountPrev = lcount;
    293a:	80 91 23 01 	lds	r24, 0x0123
    293e:	90 91 24 01 	lds	r25, 0x0124
    2942:	90 93 28 01 	sts	0x0128, r25
    2946:	80 93 27 01 	sts	0x0127, r24
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <right_junc_check+0x7c>
	while(bit_is_set(PIND, 7))
	{
		line_track_new();
    294c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		left_count();
    2950:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
	{
		Coordinates_changed_by = 0;
	}
	update_coordinates();
	lcountPrev = lcount;
	while(bit_is_set(PIND, 7))
    2954:	87 99       	sbic	0x10, 7	; 16
    2956:	fa cf       	rjmp	.-12     	; 0x294c <right_junc_check+0x74>
	{
		line_track_new();
		left_count();
	}
	if(bit_is_clear(PINA,6) && bit_is_clear(PIND,6) && bit_is_clear(PINA,5) && bit_is_clear(PINA,7))
    2958:	ce 99       	sbic	0x19, 6	; 25
    295a:	08 c0       	rjmp	.+16     	; 0x296c <right_junc_check+0x94>
    295c:	86 99       	sbic	0x10, 6	; 16
    295e:	06 c0       	rjmp	.+12     	; 0x296c <right_junc_check+0x94>
    2960:	cd 99       	sbic	0x19, 5	; 25
    2962:	04 c0       	rjmp	.+8      	; 0x296c <right_junc_check+0x94>
    2964:	cf 99       	sbic	0x19, 7	; 25
    2966:	02 c0       	rjmp	.+4      	; 0x296c <right_junc_check+0x94>
	{
		end_zone();
    2968:	0e 94 13 13 	call	0x2626	; 0x2626 <end_zone>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    296c:	8f e8       	ldi	r24, 0x8F	; 143
    296e:	91 e0       	ldi	r25, 0x01	; 1
    2970:	9b bd       	out	0x2b, r25	; 43
    2972:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2974:	99 bd       	out	0x29, r25	; 41
    2976:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2978:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    297a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    297c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    297e:	af 9a       	sbi	0x15, 7	; 21
	
	//left_count();
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	lcd_clear();
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,0,lcount,1);
    2988:	40 91 23 01 	lds	r20, 0x0123
    298c:	50 91 24 01 	lds	r21, 0x0124
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	21 e0       	ldi	r18, 0x01	; 1
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	//delay_sec(2);
	if(repeat<=2)
    29a0:	80 91 37 01 	lds	r24, 0x0137
    29a4:	90 91 38 01 	lds	r25, 0x0138
    29a8:	03 97       	sbiw	r24, 0x03	; 3
    29aa:	0c f0       	brlt	.+2      	; 0x29ae <right_junc_check+0xd6>
    29ac:	a7 c0       	rjmp	.+334    	; 0x2afc <right_junc_check+0x224>
	{
		
		//End Condition
		
		if(bit_is_clear(PINA,6) || bit_is_clear(PIND,6))
    29ae:	ce 9b       	sbis	0x19, 6	; 25
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <right_junc_check+0xde>
    29b2:	86 99       	sbic	0x10, 6	; 16
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <right_junc_check+0xec>
		{
			straight = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	90 93 26 01 	sts	0x0126, r25
    29be:	80 93 25 01 	sts	0x0125, r24
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <right_junc_check+0xf4>
		}
		else
		{
			straight = 0;
    29c4:	10 92 26 01 	sts	0x0126, r1
    29c8:	10 92 25 01 	sts	0x0125, r1
		}
		
		
		turn_right();						////actual turn
    29cc:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
		
		l = 0;
    29d0:	10 92 22 01 	sts	0x0122, r1
    29d4:	10 92 21 01 	sts	0x0121, r1
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    29d8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    29da:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    29dc:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    29de:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		//delay_millisec(100);
		flag1 = 0;
    29e0:	10 92 2a 01 	sts	0x012A, r1
    29e4:	10 92 29 01 	sts	0x0129, r1
		irc = 0;
    29e8:	10 92 2c 01 	sts	0x012C, r1
    29ec:	10 92 2b 01 	sts	0x012B, r1
		temp = lcount - lcountPrev;
    29f0:	20 91 23 01 	lds	r18, 0x0123
    29f4:	30 91 24 01 	lds	r19, 0x0124
    29f8:	80 91 27 01 	lds	r24, 0x0127
    29fc:	90 91 28 01 	lds	r25, 0x0128
    2a00:	28 1b       	sub	r18, r24
    2a02:	39 0b       	sbc	r19, r25
    2a04:	30 93 2e 01 	sts	0x012E, r19
    2a08:	20 93 2d 01 	sts	0x012D, r18
		//delay_millisec(2000);
		// lcd_clear();
		
		//delay_sec(2);
		//lcd_clear();
		if(straight==1 && temp>=1)
    2a0c:	80 91 25 01 	lds	r24, 0x0125
    2a10:	90 91 26 01 	lds	r25, 0x0126
    2a14:	81 30       	cpi	r24, 0x01	; 1
    2a16:	91 05       	cpc	r25, r1
    2a18:	a9 f4       	brne	.+42     	; 0x2a44 <right_junc_check+0x16c>
    2a1a:	12 16       	cp	r1, r18
    2a1c:	13 06       	cpc	r1, r19
    2a1e:	0c f0       	brlt	.+2      	; 0x2a22 <right_junc_check+0x14a>
    2a20:	4b c0       	rjmp	.+150    	; 0x2ab8 <right_junc_check+0x1e0>
		{
			lcd_write_string_xy(0,1,"+ Detected");
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	4f ea       	ldi	r20, 0xAF	; 175
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('T','T','T','T');
    2a32:	84 e5       	ldi	r24, 0x54	; 84
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	64 e5       	ldi	r22, 0x54	; 84
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	44 e5       	ldi	r20, 0x54	; 84
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	24 e5       	ldi	r18, 0x54	; 84
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	4c c0       	rjmp	.+152    	; 0x2adc <right_junc_check+0x204>
			lcd_write_string_xy(4,0,"TTTF");
		} 
		else if(straight==0 && temp>=1)
    2a44:	89 2b       	or	r24, r25
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <right_junc_check+0x172>
    2a48:	53 c0       	rjmp	.+166    	; 0x2af0 <right_junc_check+0x218>
    2a4a:	12 16       	cp	r1, r18
    2a4c:	13 06       	cpc	r1, r19
    2a4e:	cc f4       	brge	.+50     	; 0x2a82 <right_junc_check+0x1aa>
		{
			lcd_write_string_xy(0,1,"T Detected");
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	61 e0       	ldi	r22, 0x01	; 1
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	4f eb       	ldi	r20, 0xBF	; 191
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('F','T','T','T');
    2a60:	86 e4       	ldi	r24, 0x46	; 70
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	64 e5       	ldi	r22, 0x54	; 84
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	44 e5       	ldi	r20, 0x54	; 84
    2a6a:	50 e0       	ldi	r21, 0x00	; 0
    2a6c:	24 e5       	ldi	r18, 0x54	; 84
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_write_string_xy(4,0,"FTTT");
    2a74:	84 e0       	ldi	r24, 0x04	; 4
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	4a ec       	ldi	r20, 0xCA	; 202
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	35 c0       	rjmp	.+106    	; 0x2aec <right_junc_check+0x214>
		}
		else if(straight==0 && temp==0)
    2a82:	23 2b       	or	r18, r19
    2a84:	a9 f5       	brne	.+106    	; 0x2af0 <right_junc_check+0x218>
		{
			lcd_write_string_xy(0,1,"L Detected");
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	61 e0       	ldi	r22, 0x01	; 1
    2a8c:	70 e0       	ldi	r23, 0x00	; 0
    2a8e:	4f ec       	ldi	r20, 0xCF	; 207
    2a90:	50 e0       	ldi	r21, 0x00	; 0
    2a92:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('F','T','T','F');
    2a96:	86 e4       	ldi	r24, 0x46	; 70
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	64 e5       	ldi	r22, 0x54	; 84
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	44 e5       	ldi	r20, 0x54	; 84
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	26 e4       	ldi	r18, 0x46	; 70
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_write_string_xy(4,0,"FTTF");
    2aaa:	84 e0       	ldi	r24, 0x04	; 4
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	4a ed       	ldi	r20, 0xDA	; 218
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	1a c0       	rjmp	.+52     	; 0x2aec <right_junc_check+0x214>
		}
		else if(straight==1 && temp==0)
    2ab8:	23 2b       	or	r18, r19
    2aba:	d1 f4       	brne	.+52     	; 0x2af0 <right_junc_check+0x218>
		{
			lcd_write_string_xy(0,1,"|- Detected");
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	61 e0       	ldi	r22, 0x01	; 1
    2ac2:	70 e0       	ldi	r23, 0x00	; 0
    2ac4:	4f ed       	ldi	r20, 0xDF	; 223
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('T','T','T','F');
    2acc:	84 e5       	ldi	r24, 0x54	; 84
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	64 e5       	ldi	r22, 0x54	; 84
    2ad2:	70 e0       	ldi	r23, 0x00	; 0
    2ad4:	44 e5       	ldi	r20, 0x54	; 84
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	26 e4       	ldi	r18, 0x46	; 70
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_write_string_xy(4,0,"TTTF");
    2ae0:	84 e0       	ldi	r24, 0x04	; 4
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	4a eb       	ldi	r20, 0xBA	; 186
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		}
		//delay_millisec(1000);
		temp = 0;
    2af0:	10 92 2e 01 	sts	0x012E, r1
    2af4:	10 92 2d 01 	sts	0x012D, r1
		sense_of_directon();
    2af8:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
    2afc:	08 95       	ret

00002afe <main>:
		}

	}
}
int main(void)
{
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
	init_devices();
    2b0a:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0 ; j<16; j++)
		{
			for(k=0 ; k<4 ; k++)
			{
				dir_array[i][j][k] = 'F';
    2b1a:	46 e4       	ldi	r20, 0x46	; 70
    2b1c:	0e c0       	rjmp	.+28     	; 0x2b3a <main+0x3c>
    2b1e:	40 83       	st	Z, r20
    2b20:	41 83       	std	Z+1, r20	; 0x01
    2b22:	42 83       	std	Z+2, r20	; 0x02
    2b24:	43 83       	std	Z+3, r20	; 0x03
	lcd_clear();
	int i, j, k;
	//array initializing to false
	for(i=0 ; i<16 ; i++)
	{
		for(j=0 ; j<16; j++)
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	34 96       	adiw	r30, 0x04	; 4
    2b2a:	80 31       	cpi	r24, 0x10	; 16
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	b9 f7       	brne	.-18     	; 0x2b1e <main+0x20>
{
	init_devices();
	lcd_clear();
	int i, j, k;
	//array initializing to false
	for(i=0 ; i<16 ; i++)
    2b30:	2f 5f       	subi	r18, 0xFF	; 255
    2b32:	3f 4f       	sbci	r19, 0xFF	; 255
    2b34:	20 31       	cpi	r18, 0x10	; 16
    2b36:	31 05       	cpc	r19, r1
    2b38:	59 f0       	breq	.+22     	; 0x2b50 <main+0x52>
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	66 e0       	ldi	r22, 0x06	; 6
    2b3e:	ee 0f       	add	r30, r30
    2b40:	ff 1f       	adc	r31, r31
    2b42:	6a 95       	dec	r22
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <main+0x40>
    2b46:	e1 5c       	subi	r30, 0xC1	; 193
    2b48:	fc 4f       	sbci	r31, 0xFC	; 252
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	e7 cf       	rjmp	.-50     	; 0x2b1e <main+0x20>
			{
				dir_array[i][j][k] = 'F';
			}
		}
	}
	lcd_clear();
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("D3 for dry run");
    2b58:	8b ee       	ldi	r24, 0xEB	; 235
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
	lcd_write_string_xy(0,1,"D0 for Stst path");
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	70 e0       	ldi	r23, 0x00	; 0
    2b68:	4a ef       	ldi	r20, 0xFA	; 250
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	update_array('T','F','F','F');
    2b70:	84 e5       	ldi	r24, 0x54	; 84
    2b72:	66 e4       	ldi	r22, 0x46	; 70
    2b74:	46 e4       	ldi	r20, 0x46	; 70
    2b76:	26 e4       	ldi	r18, 0x46	; 70
    2b78:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2b7c:	83 99       	sbic	0x10, 3	; 16
    2b7e:	c5 c1       	rjmp	.+906    	; 0x2f0a <main+0x40c>
	{
		if(pressed_switch3())
		{
			while(1)
			{
				repeat = 0;
    2b80:	10 92 38 01 	sts	0x0138, r1
    2b84:	10 92 37 01 	sts	0x0137, r1
    2b88:	1b c0       	rjmp	.+54     	; 0x2bc0 <main+0xc2>
				while(repeat<=2)
				{
					line_track_new();	
    2b8a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
					LED&=0b11110000;
    2b8e:	85 b3       	in	r24, 0x15	; 21
    2b90:	80 7f       	andi	r24, 0xF0	; 240
    2b92:	85 bb       	out	0x15, r24	; 21
					LED|=sensorbyte;
    2b94:	85 b3       	in	r24, 0x15	; 21
    2b96:	90 91 1c 01 	lds	r25, 0x011C
    2b9a:	89 2b       	or	r24, r25
    2b9c:	85 bb       	out	0x15, r24	; 21
					if(bit_is_clear(PINA,7))
    2b9e:	cf 99       	sbic	0x19, 7	; 25
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <main+0xa8>
					{
						right_junc_check();
    2ba2:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <right_junc_check>
					}
					left_junc_check();
    2ba6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <left_junc_check>
					frSensorCheck();
    2baa:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <frSensorCheck>
					irc++;
    2bae:	80 91 2b 01 	lds	r24, 0x012B
    2bb2:	90 91 2c 01 	lds	r25, 0x012C
    2bb6:	01 96       	adiw	r24, 0x01	; 1
    2bb8:	90 93 2c 01 	sts	0x012C, r25
    2bbc:	80 93 2b 01 	sts	0x012B, r24
		if(pressed_switch3())
		{
			while(1)
			{
				repeat = 0;
				while(repeat<=2)
    2bc0:	80 91 37 01 	lds	r24, 0x0137
    2bc4:	90 91 38 01 	lds	r25, 0x0138
    2bc8:	03 97       	sbiw	r24, 0x03	; 3
    2bca:	fc f2       	brlt	.-66     	; 0x2b8a <main+0x8c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2bcc:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2bce:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2bd0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2bd2:	af 9a       	sbi	0x15, 7	; 21
					left_junc_check();
					frSensorCheck();
					irc++;
				}
				bot_brake();
				fill_missed_array();
    2bd4:	0e 94 39 0a 	call	0x1472	; 0x1472 <fill_missed_array>
				mx = 0;
    2bd8:	10 92 32 01 	sts	0x0132, r1
    2bdc:	10 92 31 01 	sts	0x0131, r1
				my = 0;
    2be0:	10 92 34 01 	sts	0x0134, r1
    2be4:	10 92 33 01 	sts	0x0133, r1
				coordinates_tobe_reached();
    2be8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <coordinates_tobe_reached>
				// if(mx==0 && my == 0)
				// {
				// 	break;
				// }
				build_map(x_coordinate, y_coordinate, mx, my);
    2bec:	60 91 1a 01 	lds	r22, 0x011A
    2bf0:	70 91 1b 01 	lds	r23, 0x011B
    2bf4:	40 91 31 01 	lds	r20, 0x0131
    2bf8:	50 91 32 01 	lds	r21, 0x0132
    2bfc:	20 91 33 01 	lds	r18, 0x0133
    2c00:	30 91 34 01 	lds	r19, 0x0134
    2c04:	80 91 18 01 	lds	r24, 0x0118
    2c08:	90 91 19 01 	lds	r25, 0x0119
    2c0c:	0e 94 40 10 	call	0x2080	; 0x2080 <build_map>
				get_path();
    2c10:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <get_path>
				right = 0;
    2c14:	10 92 40 07 	sts	0x0740, r1
    2c18:	10 92 3f 07 	sts	0x073F, r1
				print_path();
    2c1c:	0e 94 cd 12 	call	0x259a	; 0x259a <print_path>
    2c20:	c5 e4       	ldi	r28, 0x45	; 69
    2c22:	d7 e0       	ldi	r29, 0x07	; 7
				//delay_sec(4);
				for(int i=0; i<15; i++)
				{
					if(path_array[i][0]==0 && path_array[i][1]==0)
    2c24:	28 81       	ld	r18, Y
    2c26:	39 81       	ldd	r19, Y+1	; 0x01
    2c28:	21 15       	cp	r18, r1
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	21 f4       	brne	.+8      	; 0x2c36 <main+0x138>
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	89 2b       	or	r24, r25
    2c34:	51 f0       	breq	.+20     	; 0x2c4a <main+0x14c>
					{
						break;
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
    2c36:	6a 81       	ldd	r22, Y+2	; 0x02
    2c38:	7b 81       	ldd	r23, Y+3	; 0x03
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	0e 94 21 12 	call	0x2442	; 0x2442 <go_to_coordinate>
    2c40:	24 96       	adiw	r28, 0x04	; 4
				build_map(x_coordinate, y_coordinate, mx, my);
				get_path();
				right = 0;
				print_path();
				//delay_sec(4);
				for(int i=0; i<15; i++)
    2c42:	87 e0       	ldi	r24, 0x07	; 7
    2c44:	c1 38       	cpi	r28, 0x81	; 129
    2c46:	d8 07       	cpc	r29, r24
    2c48:	69 f7       	brne	.-38     	; 0x2c24 <main+0x126>
					{
						break;
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
				}
				if(dir_array[x_coordinate][y_coordinate][0]=='T' && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    2c4a:	00 91 18 01 	lds	r16, 0x0118
    2c4e:	10 91 19 01 	lds	r17, 0x0119
    2c52:	c0 91 1a 01 	lds	r28, 0x011A
    2c56:	d0 91 1b 01 	lds	r29, 0x011B
    2c5a:	f8 01       	movw	r30, r16
    2c5c:	54 e0       	ldi	r21, 0x04	; 4
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	5a 95       	dec	r21
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <main+0x160>
    2c66:	ec 0f       	add	r30, r28
    2c68:	fd 1f       	adc	r31, r29
    2c6a:	ee 0f       	add	r30, r30
    2c6c:	ff 1f       	adc	r31, r31
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	e1 5c       	subi	r30, 0xC1	; 193
    2c74:	fc 4f       	sbci	r31, 0xFC	; 252
    2c76:	80 81       	ld	r24, Z
    2c78:	84 35       	cpi	r24, 0x54	; 84
    2c7a:	59 f4       	brne	.+22     	; 0x2c92 <main+0x194>
    2c7c:	be 01       	movw	r22, r28
    2c7e:	6f 5f       	subi	r22, 0xFF	; 255
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	c8 01       	movw	r24, r16
    2c84:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2c88:	89 2b       	or	r24, r25
    2c8a:	19 f0       	breq	.+6      	; 0x2c92 <main+0x194>
				{		
					checkAndCorrectDirection(2);
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	51 c0       	rjmp	.+162    	; 0x2d34 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][1]=='T' && is_coordinate_null(x_coordinate+1,y_coordinate))
    2c92:	f8 01       	movw	r30, r16
    2c94:	34 e0       	ldi	r19, 0x04	; 4
    2c96:	ee 0f       	add	r30, r30
    2c98:	ff 1f       	adc	r31, r31
    2c9a:	3a 95       	dec	r19
    2c9c:	e1 f7       	brne	.-8      	; 0x2c96 <main+0x198>
    2c9e:	ec 0f       	add	r30, r28
    2ca0:	fd 1f       	adc	r31, r29
    2ca2:	ee 0f       	add	r30, r30
    2ca4:	ff 1f       	adc	r31, r31
    2ca6:	ee 0f       	add	r30, r30
    2ca8:	ff 1f       	adc	r31, r31
    2caa:	e1 5c       	subi	r30, 0xC1	; 193
    2cac:	fc 4f       	sbci	r31, 0xFC	; 252
    2cae:	81 81       	ldd	r24, Z+1	; 0x01
    2cb0:	84 35       	cpi	r24, 0x54	; 84
    2cb2:	51 f4       	brne	.+20     	; 0x2cc8 <main+0x1ca>
    2cb4:	c8 01       	movw	r24, r16
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	be 01       	movw	r22, r28
    2cba:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2cbe:	89 2b       	or	r24, r25
    2cc0:	19 f0       	breq	.+6      	; 0x2cc8 <main+0x1ca>
				{
					checkAndCorrectDirection(1);
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	36 c0       	rjmp	.+108    	; 0x2d34 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][2]=='T' && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    2cc8:	f8 01       	movw	r30, r16
    2cca:	94 e0       	ldi	r25, 0x04	; 4
    2ccc:	ee 0f       	add	r30, r30
    2cce:	ff 1f       	adc	r31, r31
    2cd0:	9a 95       	dec	r25
    2cd2:	e1 f7       	brne	.-8      	; 0x2ccc <main+0x1ce>
    2cd4:	ec 0f       	add	r30, r28
    2cd6:	fd 1f       	adc	r31, r29
    2cd8:	ee 0f       	add	r30, r30
    2cda:	ff 1f       	adc	r31, r31
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	ef 5b       	subi	r30, 0xBF	; 191
    2ce2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ce4:	80 81       	ld	r24, Z
    2ce6:	84 35       	cpi	r24, 0x54	; 84
    2ce8:	59 f4       	brne	.+22     	; 0x2d00 <main+0x202>
    2cea:	be 01       	movw	r22, r28
    2cec:	61 50       	subi	r22, 0x01	; 1
    2cee:	70 40       	sbci	r23, 0x00	; 0
    2cf0:	c8 01       	movw	r24, r16
    2cf2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2cf6:	89 2b       	or	r24, r25
    2cf8:	19 f0       	breq	.+6      	; 0x2d00 <main+0x202>
				{
					checkAndCorrectDirection(-2);
    2cfa:	8e ef       	ldi	r24, 0xFE	; 254
    2cfc:	9f ef       	ldi	r25, 0xFF	; 255
    2cfe:	1a c0       	rjmp	.+52     	; 0x2d34 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
    2d00:	f8 01       	movw	r30, r16
    2d02:	b4 e0       	ldi	r27, 0x04	; 4
    2d04:	ee 0f       	add	r30, r30
    2d06:	ff 1f       	adc	r31, r31
    2d08:	ba 95       	dec	r27
    2d0a:	e1 f7       	brne	.-8      	; 0x2d04 <main+0x206>
    2d0c:	ec 0f       	add	r30, r28
    2d0e:	fd 1f       	adc	r31, r29
    2d10:	ee 0f       	add	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	ee 0f       	add	r30, r30
    2d16:	ff 1f       	adc	r31, r31
    2d18:	e1 5c       	subi	r30, 0xC1	; 193
    2d1a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d1c:	83 81       	ldd	r24, Z+3	; 0x03
    2d1e:	84 35       	cpi	r24, 0x54	; 84
    2d20:	71 f4       	brne	.+28     	; 0x2d3e <main+0x240>
    2d22:	c8 01       	movw	r24, r16
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	be 01       	movw	r22, r28
    2d28:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2d2c:	89 2b       	or	r24, r25
    2d2e:	39 f0       	breq	.+14     	; 0x2d3e <main+0x240>
				{
					checkAndCorrectDirection(-1);
    2d30:	8f ef       	ldi	r24, 0xFF	; 255
    2d32:	9f ef       	ldi	r25, 0xFF	; 255
    2d34:	0e 94 61 11 	call	0x22c2	; 0x22c2 <checkAndCorrectDirection>
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <main+0x240>
				}		
				while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
				{
					line_track_new();
    2d3a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
				}
				else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
				{
					checkAndCorrectDirection(-1);
				}		
				while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
    2d3e:	cc 9b       	sbis	0x19, 4	; 25
    2d40:	fc cf       	rjmp	.-8      	; 0x2d3a <main+0x23c>
    2d42:	87 9b       	sbis	0x10, 7	; 16
    2d44:	fa cf       	rjmp	.-12     	; 0x2d3a <main+0x23c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2d46:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2d48:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2d4a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2d4c:	af 9a       	sbi	0x15, 7	; 21
					line_track_new();
				}
				bot_brake();
				//delay_sec(2);
				irc=0;
				Coordinates_changed_by = 0;
    2d4e:	10 92 30 01 	sts	0x0130, r1
    2d52:	10 92 2f 01 	sts	0x012F, r1
				// else
				// {
				// 	special_flag = 1;
				// 	left_junc_check();
				// }
				irc = 0;
    2d56:	10 92 2c 01 	sts	0x012C, r1
    2d5a:	10 92 2b 01 	sts	0x012B, r1
				special_flag = 0;
    2d5e:	10 92 36 01 	sts	0x0136, r1
    2d62:	10 92 35 01 	sts	0x0135, r1
    2d66:	0c cf       	rjmp	.-488    	; 0x2b80 <main+0x82>
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
			{
				path_array[i][0] = eeprom_read_word(eeprom_addr);
    2d68:	ce 01       	movw	r24, r28
    2d6a:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__eerd_word_m32>
    2d6e:	f8 01       	movw	r30, r16
    2d70:	91 83       	std	Z+1, r25	; 0x01
    2d72:	80 83       	st	Z, r24
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
    2d74:	ce 01       	movw	r24, r28
    2d76:	02 96       	adiw	r24, 0x02	; 2
    2d78:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__eerd_word_m32>
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	93 83       	std	Z+3, r25	; 0x03
    2d80:	82 83       	std	Z+2, r24	; 0x02
    2d82:	24 96       	adiw	r28, 0x04	; 4
    2d84:	0c 5f       	subi	r16, 0xFC	; 252
    2d86:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
    2d88:	cc 33       	cpi	r28, 0x3C	; 60
    2d8a:	d1 05       	cpc	r29, r1
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <main+0x26a>
				path_array[i][0] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
			}
			lcd_clear();
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_int_xy(0,0,path_array[0][0],1);
    2d96:	40 91 45 07 	lds	r20, 0x0745
    2d9a:	50 91 46 07 	lds	r21, 0x0746
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	21 e0       	ldi	r18, 0x01	; 1
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,0,path_array[0][1],1);
    2dae:	40 91 47 07 	lds	r20, 0x0747
    2db2:	50 91 48 07 	lds	r21, 0x0748
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	21 e0       	ldi	r18, 0x01	; 1
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(3,0,path_array[1][0],1);
    2dc6:	40 91 49 07 	lds	r20, 0x0749
    2dca:	50 91 4a 07 	lds	r21, 0x074A
    2dce:	83 e0       	ldi	r24, 0x03	; 3
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	60 e0       	ldi	r22, 0x00	; 0
    2dd4:	70 e0       	ldi	r23, 0x00	; 0
    2dd6:	21 e0       	ldi	r18, 0x01	; 1
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(4,0,path_array[1][1],1);
    2dde:	40 91 4b 07 	lds	r20, 0x074B
    2de2:	50 91 4c 07 	lds	r21, 0x074C
    2de6:	84 e0       	ldi	r24, 0x04	; 4
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	21 e0       	ldi	r18, 0x01	; 1
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(6,0,path_array[2][0],1);
    2df6:	40 91 4d 07 	lds	r20, 0x074D
    2dfa:	50 91 4e 07 	lds	r21, 0x074E
    2dfe:	86 e0       	ldi	r24, 0x06	; 6
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	21 e0       	ldi	r18, 0x01	; 1
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(7,0,path_array[2][1],1);
    2e0e:	40 91 4f 07 	lds	r20, 0x074F
    2e12:	50 91 50 07 	lds	r21, 0x0750
    2e16:	87 e0       	ldi	r24, 0x07	; 7
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	21 e0       	ldi	r18, 0x01	; 1
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(9,0,path_array[3][0],1);
    2e26:	40 91 51 07 	lds	r20, 0x0751
    2e2a:	50 91 52 07 	lds	r21, 0x0752
    2e2e:	89 e0       	ldi	r24, 0x09	; 9
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	70 e0       	ldi	r23, 0x00	; 0
    2e36:	21 e0       	ldi	r18, 0x01	; 1
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(10,0,path_array[3][1],1);
    2e3e:	40 91 53 07 	lds	r20, 0x0753
    2e42:	50 91 54 07 	lds	r21, 0x0754
    2e46:	8a e0       	ldi	r24, 0x0A	; 10
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	60 e0       	ldi	r22, 0x00	; 0
    2e4c:	70 e0       	ldi	r23, 0x00	; 0
    2e4e:	21 e0       	ldi	r18, 0x01	; 1
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(12,0,path_array[4][0],1);
    2e56:	40 91 55 07 	lds	r20, 0x0755
    2e5a:	50 91 56 07 	lds	r21, 0x0756
    2e5e:	8c e0       	ldi	r24, 0x0C	; 12
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	60 e0       	ldi	r22, 0x00	; 0
    2e64:	70 e0       	ldi	r23, 0x00	; 0
    2e66:	21 e0       	ldi	r18, 0x01	; 1
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(13,0,path_array[4][1],1);
    2e6e:	40 91 57 07 	lds	r20, 0x0757
    2e72:	50 91 58 07 	lds	r21, 0x0758
    2e76:	8d e0       	ldi	r24, 0x0D	; 13
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	21 e0       	ldi	r18, 0x01	; 1
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(0,1,path_array[5][0],1);
    2e86:	40 91 59 07 	lds	r20, 0x0759
    2e8a:	50 91 5a 07 	lds	r21, 0x075A
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	61 e0       	ldi	r22, 0x01	; 1
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	21 e0       	ldi	r18, 0x01	; 1
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,1,path_array[5][1],1);
    2e9e:	40 91 5b 07 	lds	r20, 0x075B
    2ea2:	50 91 5c 07 	lds	r21, 0x075C
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	61 e0       	ldi	r22, 0x01	; 1
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	21 e0       	ldi	r18, 0x01	; 1
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2eb6:	82 99       	sbic	0x10, 2	; 16
    2eb8:	32 c0       	rjmp	.+100    	; 0x2f1e <main+0x420>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					lcd_clear();
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					delay_sec(1);
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					break;
				}
			}
			for(int i=0; i<15; i++)
			{
				if(path_array[i][0]==0 && path_array[i][1]==0)
    2eca:	f7 01       	movw	r30, r14
    2ecc:	20 81       	ld	r18, Z
    2ece:	31 81       	ldd	r19, Z+1	; 0x01
    2ed0:	21 15       	cp	r18, r1
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	21 f4       	brne	.+8      	; 0x2ede <main+0x3e0>
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	89 2b       	or	r24, r25
    2edc:	79 f0       	breq	.+30     	; 0x2efc <main+0x3fe>
				{
					break;
				}
				go_to_coordinate(path_array[i][0], path_array[i][1]);
    2ede:	f7 01       	movw	r30, r14
    2ee0:	62 81       	ldd	r22, Z+2	; 0x02
    2ee2:	73 81       	ldd	r23, Z+3	; 0x03
    2ee4:	c9 01       	movw	r24, r18
    2ee6:	0e 94 21 12 	call	0x2442	; 0x2442 <go_to_coordinate>
    2eea:	84 e0       	ldi	r24, 0x04	; 4
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	e8 0e       	add	r14, r24
    2ef0:	f9 1e       	adc	r15, r25
					lcd_clear();
					delay_sec(1);
					break;
				}
			}
			for(int i=0; i<15; i++)
    2ef2:	91 e8       	ldi	r25, 0x81	; 129
    2ef4:	e9 16       	cp	r14, r25
    2ef6:	97 e0       	ldi	r25, 0x07	; 7
    2ef8:	f9 06       	cpc	r15, r25
    2efa:	39 f7       	brne	.-50     	; 0x2eca <main+0x3cc>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_stop(void)
{
 MOTOR1A=0;
    2efc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
    2efe:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
    2f00:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
    2f02:	af 98       	cbi	0x15, 7	; 21

			}
			while(1)
			{
				bot_stop();
				flick();
    2f04:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
    2f08:	f9 cf       	rjmp	.-14     	; 0x2efc <main+0x3fe>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2f0a:	80 99       	sbic	0x10, 0	; 16
    2f0c:	37 ce       	rjmp	.-914    	; 0x2b7c <main+0x7e>
    2f0e:	75 e4       	ldi	r23, 0x45	; 69
    2f10:	e7 2e       	mov	r14, r23
    2f12:	77 e0       	ldi	r23, 0x07	; 7
    2f14:	f7 2e       	mov	r15, r23
    2f16:	87 01       	movw	r16, r14
    2f18:	c0 e0       	ldi	r28, 0x00	; 0
    2f1a:	d0 e0       	ldi	r29, 0x00	; 0
    2f1c:	25 cf       	rjmp	.-438    	; 0x2d68 <main+0x26a>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2f1e:	80 9b       	sbis	0x10, 0	; 16
    2f20:	cc cf       	rjmp	.-104    	; 0x2eba <main+0x3bc>
    2f22:	81 9b       	sbis	0x10, 1	; 16
    2f24:	ca cf       	rjmp	.-108    	; 0x2eba <main+0x3bc>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2f26:	83 9b       	sbis	0x10, 3	; 16
    2f28:	c8 cf       	rjmp	.-112    	; 0x2eba <main+0x3bc>
    2f2a:	c5 cf       	rjmp	.-118    	; 0x2eb6 <main+0x3b8>

00002f2c <map_all>:
	}
	bot_brake();
	//delay_sec(1);
}
void map_all()
{
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2f38:	5f e8       	ldi	r21, 0x8F	; 143
    2f3a:	e5 2e       	mov	r14, r21
    2f3c:	51 e0       	ldi	r21, 0x01	; 1
    2f3e:	f5 2e       	mov	r15, r21
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2f40:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2f42:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2f44:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2f46:	af 9a       	sbi	0x15, 7	; 21
	while(1)
	{
		bot_brake();
		build_map(x_coordinate, y_coordinate, mx, my);
    2f48:	60 91 1a 01 	lds	r22, 0x011A
    2f4c:	70 91 1b 01 	lds	r23, 0x011B
    2f50:	40 91 31 01 	lds	r20, 0x0131
    2f54:	50 91 32 01 	lds	r21, 0x0132
    2f58:	20 91 33 01 	lds	r18, 0x0133
    2f5c:	30 91 34 01 	lds	r19, 0x0134
    2f60:	80 91 18 01 	lds	r24, 0x0118
    2f64:	90 91 19 01 	lds	r25, 0x0119
    2f68:	0e 94 40 10 	call	0x2080	; 0x2080 <build_map>
		get_path();
    2f6c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <get_path>
		
		right = 0;
    2f70:	10 92 40 07 	sts	0x0740, r1
    2f74:	10 92 3f 07 	sts	0x073F, r1
		print_path();
    2f78:	0e 94 cd 12 	call	0x259a	; 0x259a <print_path>
    2f7c:	c5 e4       	ldi	r28, 0x45	; 69
    2f7e:	d7 e0       	ldi	r29, 0x07	; 7
		//delay_sec(4);
		for(int i=0; i<15; i++)
		{
			if(path_array[i][0]==0 && path_array[i][1]==0)
    2f80:	28 81       	ld	r18, Y
    2f82:	39 81       	ldd	r19, Y+1	; 0x01
    2f84:	21 15       	cp	r18, r1
    2f86:	31 05       	cpc	r19, r1
    2f88:	21 f4       	brne	.+8      	; 0x2f92 <map_all+0x66>
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8e:	89 2b       	or	r24, r25
    2f90:	51 f0       	breq	.+20     	; 0x2fa6 <map_all+0x7a>
			{
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);
    2f92:	6a 81       	ldd	r22, Y+2	; 0x02
    2f94:	7b 81       	ldd	r23, Y+3	; 0x03
    2f96:	c9 01       	movw	r24, r18
    2f98:	0e 94 21 12 	call	0x2442	; 0x2442 <go_to_coordinate>
    2f9c:	24 96       	adiw	r28, 0x04	; 4
		get_path();
		
		right = 0;
		print_path();
		//delay_sec(4);
		for(int i=0; i<15; i++)
    2f9e:	87 e0       	ldi	r24, 0x07	; 7
    2fa0:	c1 38       	cpi	r28, 0x81	; 129
    2fa2:	d8 07       	cpc	r29, r24
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <map_all+0x54>
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);

		}
		if(dir_array[x_coordinate][y_coordinate][0]=='T' && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    2fa6:	00 91 18 01 	lds	r16, 0x0118
    2faa:	10 91 19 01 	lds	r17, 0x0119
    2fae:	c0 91 1a 01 	lds	r28, 0x011A
    2fb2:	d0 91 1b 01 	lds	r29, 0x011B
    2fb6:	f8 01       	movw	r30, r16
    2fb8:	44 e0       	ldi	r20, 0x04	; 4
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	4a 95       	dec	r20
    2fc0:	e1 f7       	brne	.-8      	; 0x2fba <map_all+0x8e>
    2fc2:	ec 0f       	add	r30, r28
    2fc4:	fd 1f       	adc	r31, r29
    2fc6:	ee 0f       	add	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	ee 0f       	add	r30, r30
    2fcc:	ff 1f       	adc	r31, r31
    2fce:	e1 5c       	subi	r30, 0xC1	; 193
    2fd0:	fc 4f       	sbci	r31, 0xFC	; 252
    2fd2:	80 81       	ld	r24, Z
    2fd4:	84 35       	cpi	r24, 0x54	; 84
    2fd6:	59 f4       	brne	.+22     	; 0x2fee <map_all+0xc2>
    2fd8:	be 01       	movw	r22, r28
    2fda:	6f 5f       	subi	r22, 0xFF	; 255
    2fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fde:	c8 01       	movw	r24, r16
    2fe0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2fe4:	89 2b       	or	r24, r25
    2fe6:	19 f0       	breq	.+6      	; 0x2fee <map_all+0xc2>
		{
			checkAndCorrectDirection(2);
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	51 c0       	rjmp	.+162    	; 0x3090 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][1]=='T' && is_coordinate_null(x_coordinate+1,y_coordinate))
    2fee:	f8 01       	movw	r30, r16
    2ff0:	24 e0       	ldi	r18, 0x04	; 4
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	2a 95       	dec	r18
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <map_all+0xc6>
    2ffa:	ec 0f       	add	r30, r28
    2ffc:	fd 1f       	adc	r31, r29
    2ffe:	ee 0f       	add	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	ee 0f       	add	r30, r30
    3004:	ff 1f       	adc	r31, r31
    3006:	e1 5c       	subi	r30, 0xC1	; 193
    3008:	fc 4f       	sbci	r31, 0xFC	; 252
    300a:	81 81       	ldd	r24, Z+1	; 0x01
    300c:	84 35       	cpi	r24, 0x54	; 84
    300e:	51 f4       	brne	.+20     	; 0x3024 <map_all+0xf8>
    3010:	c8 01       	movw	r24, r16
    3012:	01 96       	adiw	r24, 0x01	; 1
    3014:	be 01       	movw	r22, r28
    3016:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    301a:	89 2b       	or	r24, r25
    301c:	19 f0       	breq	.+6      	; 0x3024 <map_all+0xf8>
		{
			checkAndCorrectDirection(1);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	36 c0       	rjmp	.+108    	; 0x3090 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][2]=='T' && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    3024:	f8 01       	movw	r30, r16
    3026:	84 e0       	ldi	r24, 0x04	; 4
    3028:	ee 0f       	add	r30, r30
    302a:	ff 1f       	adc	r31, r31
    302c:	8a 95       	dec	r24
    302e:	e1 f7       	brne	.-8      	; 0x3028 <map_all+0xfc>
    3030:	ec 0f       	add	r30, r28
    3032:	fd 1f       	adc	r31, r29
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	ee 0f       	add	r30, r30
    303a:	ff 1f       	adc	r31, r31
    303c:	ef 5b       	subi	r30, 0xBF	; 191
    303e:	fc 4f       	sbci	r31, 0xFC	; 252
    3040:	80 81       	ld	r24, Z
    3042:	84 35       	cpi	r24, 0x54	; 84
    3044:	59 f4       	brne	.+22     	; 0x305c <map_all+0x130>
    3046:	be 01       	movw	r22, r28
    3048:	61 50       	subi	r22, 0x01	; 1
    304a:	70 40       	sbci	r23, 0x00	; 0
    304c:	c8 01       	movw	r24, r16
    304e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    3052:	89 2b       	or	r24, r25
    3054:	19 f0       	breq	.+6      	; 0x305c <map_all+0x130>
		{
			checkAndCorrectDirection(-2);
    3056:	8e ef       	ldi	r24, 0xFE	; 254
    3058:	9f ef       	ldi	r25, 0xFF	; 255
    305a:	1a c0       	rjmp	.+52     	; 0x3090 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
    305c:	f8 01       	movw	r30, r16
    305e:	a4 e0       	ldi	r26, 0x04	; 4
    3060:	ee 0f       	add	r30, r30
    3062:	ff 1f       	adc	r31, r31
    3064:	aa 95       	dec	r26
    3066:	e1 f7       	brne	.-8      	; 0x3060 <map_all+0x134>
    3068:	ec 0f       	add	r30, r28
    306a:	fd 1f       	adc	r31, r29
    306c:	ee 0f       	add	r30, r30
    306e:	ff 1f       	adc	r31, r31
    3070:	ee 0f       	add	r30, r30
    3072:	ff 1f       	adc	r31, r31
    3074:	e1 5c       	subi	r30, 0xC1	; 193
    3076:	fc 4f       	sbci	r31, 0xFC	; 252
    3078:	83 81       	ldd	r24, Z+3	; 0x03
    307a:	84 35       	cpi	r24, 0x54	; 84
    307c:	71 f4       	brne	.+28     	; 0x309a <map_all+0x16e>
    307e:	c8 01       	movw	r24, r16
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	be 01       	movw	r22, r28
    3084:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    3088:	89 2b       	or	r24, r25
    308a:	39 f0       	breq	.+14     	; 0x309a <map_all+0x16e>
		{
			checkAndCorrectDirection(-1);
    308c:	8f ef       	ldi	r24, 0xFF	; 255
    308e:	9f ef       	ldi	r25, 0xFF	; 255
    3090:	0e 94 61 11 	call	0x22c2	; 0x22c2 <checkAndCorrectDirection>
    3094:	02 c0       	rjmp	.+4      	; 0x309a <map_all+0x16e>
		}
		while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
		{
			line_track_new();
    3096:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
		{
			checkAndCorrectDirection(-1);
		}
		while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
    309a:	cc 9b       	sbis	0x19, 4	; 25
    309c:	fc cf       	rjmp	.-8      	; 0x3096 <map_all+0x16a>
    309e:	87 9b       	sbis	0x10, 7	; 16
    30a0:	fa cf       	rjmp	.-12     	; 0x3096 <map_all+0x16a>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    30a2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    30a4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    30a6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    30a8:	af 9a       	sbi	0x15, 7	; 21
			line_track_new();
		}
		bot_brake();
		//delay_sec(2);
		irc=0;
		Coordinates_changed_by = 0;
    30aa:	10 92 30 01 	sts	0x0130, r1
    30ae:	10 92 2f 01 	sts	0x012F, r1
		// else
		// {
		// 	special_flag = 1;
		// 	left_junc_check();
		// }
		irc = 0;
    30b2:	10 92 2c 01 	sts	0x012C, r1
    30b6:	10 92 2b 01 	sts	0x012B, r1
		special_flag = 0;
    30ba:	10 92 36 01 	sts	0x0136, r1
    30be:	10 92 35 01 	sts	0x0135, r1
		repeat = 0;
    30c2:	10 92 38 01 	sts	0x0138, r1
    30c6:	10 92 37 01 	sts	0x0137, r1
    30ca:	1b c0       	rjmp	.+54     	; 0x3102 <map_all+0x1d6>
		while(repeat<=2)      //lsr (copied from int main) 
		{
			line_track_new();	
    30cc:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
			LED&=0b11110000;
    30d0:	85 b3       	in	r24, 0x15	; 21
    30d2:	80 7f       	andi	r24, 0xF0	; 240
    30d4:	85 bb       	out	0x15, r24	; 21
			LED|=sensorbyte;
    30d6:	85 b3       	in	r24, 0x15	; 21
    30d8:	90 91 1c 01 	lds	r25, 0x011C
    30dc:	89 2b       	or	r24, r25
    30de:	85 bb       	out	0x15, r24	; 21
			if(bit_is_clear(PINA,7))
    30e0:	cf 99       	sbic	0x19, 7	; 25
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <map_all+0x1bc>
			{
				right_junc_check();
    30e4:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <right_junc_check>
			}
			left_junc_check();
    30e8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <left_junc_check>
			frSensorCheck();
    30ec:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <frSensorCheck>
			irc++;
    30f0:	80 91 2b 01 	lds	r24, 0x012B
    30f4:	90 91 2c 01 	lds	r25, 0x012C
    30f8:	01 96       	adiw	r24, 0x01	; 1
    30fa:	90 93 2c 01 	sts	0x012C, r25
    30fe:	80 93 2b 01 	sts	0x012B, r24
		// 	left_junc_check();
		// }
		irc = 0;
		special_flag = 0;
		repeat = 0;
		while(repeat<=2)      //lsr (copied from int main) 
    3102:	80 91 37 01 	lds	r24, 0x0137
    3106:	90 91 38 01 	lds	r25, 0x0138
    310a:	03 97       	sbiw	r24, 0x03	; 3
    310c:	fc f2       	brlt	.-66     	; 0x30cc <map_all+0x1a0>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    310e:	fb bc       	out	0x2b, r15	; 43
    3110:	ea bc       	out	0x2a, r14	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    3112:	f9 bc       	out	0x29, r15	; 41
    3114:	e8 bc       	out	0x28, r14	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    3116:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    3118:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    311a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    311c:	af 9a       	sbi	0x15, 7	; 21
			irc++;
		}
		set_pwm1a(399);
		set_pwm1b(399);
		bot_brake();
		fill_missed_array();
    311e:	0e 94 39 0a 	call	0x1472	; 0x1472 <fill_missed_array>
		mx = 0;
    3122:	10 92 32 01 	sts	0x0132, r1
    3126:	10 92 31 01 	sts	0x0131, r1
		my = 0;
    312a:	10 92 34 01 	sts	0x0134, r1
    312e:	10 92 33 01 	sts	0x0133, r1
		coordinates_tobe_reached();
    3132:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <coordinates_tobe_reached>
		if(mx==0 && my == 0)
    3136:	80 91 31 01 	lds	r24, 0x0131
    313a:	90 91 32 01 	lds	r25, 0x0132
    313e:	89 2b       	or	r24, r25
    3140:	09 f0       	breq	.+2      	; 0x3144 <map_all+0x218>
    3142:	fe ce       	rjmp	.-516    	; 0x2f40 <map_all+0x14>
    3144:	80 91 33 01 	lds	r24, 0x0133
    3148:	90 91 34 01 	lds	r25, 0x0134
    314c:	89 2b       	or	r24, r25
    314e:	09 f0       	breq	.+2      	; 0x3152 <map_all+0x226>
    3150:	f7 ce       	rjmp	.-530    	; 0x2f40 <map_all+0x14>
		{
			break;
		}
	}
}
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	ff 90       	pop	r15
    315c:	ef 90       	pop	r14
    315e:	08 95       	ret

00003160 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 49 1b 	call	0x3692	; 0x3692 <__eerd_byte_m32>
    3168:	80 93 81 07 	sts	0x0781, r24
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 49 1b 	call	0x3692	; 0x3692 <__eerd_byte_m32>
    3174:	80 93 82 07 	sts	0x0782, r24
    3178:	82 e0       	ldi	r24, 0x02	; 2
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__eerd_byte_m32>
    3180:	80 93 83 07 	sts	0x0783, r24
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 49 1b 	call	0x3692	; 0x3692 <__eerd_byte_m32>
    318c:	80 93 84 07 	sts	0x0784, r24
		eeprom_addr++;
	}
}
    3190:	08 95       	ret

00003192 <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    3196:	20 91 85 07 	lds	r18, 0x0785
    319a:	80 91 41 07 	lds	r24, 0x0741
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	82 0f       	add	r24, r18
    31a2:	91 1d       	adc	r25, r1
    31a4:	95 95       	asr	r25
    31a6:	87 95       	ror	r24
    31a8:	80 93 81 07 	sts	0x0781, r24
    31ac:	20 91 86 07 	lds	r18, 0x0786
    31b0:	80 91 42 07 	lds	r24, 0x0742
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	82 0f       	add	r24, r18
    31b8:	91 1d       	adc	r25, r1
    31ba:	95 95       	asr	r25
    31bc:	87 95       	ror	r24
    31be:	80 93 82 07 	sts	0x0782, r24
    31c2:	20 91 87 07 	lds	r18, 0x0787
    31c6:	80 91 43 07 	lds	r24, 0x0743
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	82 0f       	add	r24, r18
    31ce:	91 1d       	adc	r25, r1
    31d0:	95 95       	asr	r25
    31d2:	87 95       	ror	r24
    31d4:	80 93 83 07 	sts	0x0783, r24
    31d8:	20 91 88 07 	lds	r18, 0x0788
    31dc:	80 91 44 07 	lds	r24, 0x0744
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	82 0f       	add	r24, r18
    31e4:	91 1d       	adc	r25, r1
    31e6:	95 95       	asr	r25
    31e8:	87 95       	ror	r24
    31ea:	80 93 84 07 	sts	0x0784, r24
    31ee:	c0 e0       	ldi	r28, 0x00	; 0
    31f0:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    31f2:	fe 01       	movw	r30, r28
    31f4:	ef 57       	subi	r30, 0x7F	; 127
    31f6:	f8 4f       	sbci	r31, 0xF8	; 248
    31f8:	ce 01       	movw	r24, r28
    31fa:	60 81       	ld	r22, Z
    31fc:	0e 94 57 1b 	call	0x36ae	; 0x36ae <__eewr_byte_m32>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    3200:	21 96       	adiw	r28, 0x01	; 1
    3202:	c4 30       	cpi	r28, 0x04	; 4
    3204:	d1 05       	cpc	r29, r1
    3206:	a9 f7       	brne	.-22     	; 0x31f2 <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	08 95       	ret

0000320e <__subsf3>:
    320e:	50 58       	subi	r21, 0x80	; 128

00003210 <__addsf3>:
    3210:	bb 27       	eor	r27, r27
    3212:	aa 27       	eor	r26, r26
    3214:	0e d0       	rcall	.+28     	; 0x3232 <__addsf3x>
    3216:	75 c1       	rjmp	.+746    	; 0x3502 <__fp_round>
    3218:	66 d1       	rcall	.+716    	; 0x34e6 <__fp_pscA>
    321a:	30 f0       	brcs	.+12     	; 0x3228 <__addsf3+0x18>
    321c:	6b d1       	rcall	.+726    	; 0x34f4 <__fp_pscB>
    321e:	20 f0       	brcs	.+8      	; 0x3228 <__addsf3+0x18>
    3220:	31 f4       	brne	.+12     	; 0x322e <__addsf3+0x1e>
    3222:	9f 3f       	cpi	r25, 0xFF	; 255
    3224:	11 f4       	brne	.+4      	; 0x322a <__addsf3+0x1a>
    3226:	1e f4       	brtc	.+6      	; 0x322e <__addsf3+0x1e>
    3228:	5b c1       	rjmp	.+694    	; 0x34e0 <__fp_nan>
    322a:	0e f4       	brtc	.+2      	; 0x322e <__addsf3+0x1e>
    322c:	e0 95       	com	r30
    322e:	e7 fb       	bst	r30, 7
    3230:	51 c1       	rjmp	.+674    	; 0x34d4 <__fp_inf>

00003232 <__addsf3x>:
    3232:	e9 2f       	mov	r30, r25
    3234:	77 d1       	rcall	.+750    	; 0x3524 <__fp_split3>
    3236:	80 f3       	brcs	.-32     	; 0x3218 <__addsf3+0x8>
    3238:	ba 17       	cp	r27, r26
    323a:	62 07       	cpc	r22, r18
    323c:	73 07       	cpc	r23, r19
    323e:	84 07       	cpc	r24, r20
    3240:	95 07       	cpc	r25, r21
    3242:	18 f0       	brcs	.+6      	; 0x324a <__addsf3x+0x18>
    3244:	71 f4       	brne	.+28     	; 0x3262 <__addsf3x+0x30>
    3246:	9e f5       	brtc	.+102    	; 0x32ae <__addsf3x+0x7c>
    3248:	8f c1       	rjmp	.+798    	; 0x3568 <__fp_zero>
    324a:	0e f4       	brtc	.+2      	; 0x324e <__addsf3x+0x1c>
    324c:	e0 95       	com	r30
    324e:	0b 2e       	mov	r0, r27
    3250:	ba 2f       	mov	r27, r26
    3252:	a0 2d       	mov	r26, r0
    3254:	0b 01       	movw	r0, r22
    3256:	b9 01       	movw	r22, r18
    3258:	90 01       	movw	r18, r0
    325a:	0c 01       	movw	r0, r24
    325c:	ca 01       	movw	r24, r20
    325e:	a0 01       	movw	r20, r0
    3260:	11 24       	eor	r1, r1
    3262:	ff 27       	eor	r31, r31
    3264:	59 1b       	sub	r21, r25
    3266:	99 f0       	breq	.+38     	; 0x328e <__addsf3x+0x5c>
    3268:	59 3f       	cpi	r21, 0xF9	; 249
    326a:	50 f4       	brcc	.+20     	; 0x3280 <__addsf3x+0x4e>
    326c:	50 3e       	cpi	r21, 0xE0	; 224
    326e:	68 f1       	brcs	.+90     	; 0x32ca <__addsf3x+0x98>
    3270:	1a 16       	cp	r1, r26
    3272:	f0 40       	sbci	r31, 0x00	; 0
    3274:	a2 2f       	mov	r26, r18
    3276:	23 2f       	mov	r18, r19
    3278:	34 2f       	mov	r19, r20
    327a:	44 27       	eor	r20, r20
    327c:	58 5f       	subi	r21, 0xF8	; 248
    327e:	f3 cf       	rjmp	.-26     	; 0x3266 <__addsf3x+0x34>
    3280:	46 95       	lsr	r20
    3282:	37 95       	ror	r19
    3284:	27 95       	ror	r18
    3286:	a7 95       	ror	r26
    3288:	f0 40       	sbci	r31, 0x00	; 0
    328a:	53 95       	inc	r21
    328c:	c9 f7       	brne	.-14     	; 0x3280 <__addsf3x+0x4e>
    328e:	7e f4       	brtc	.+30     	; 0x32ae <__addsf3x+0x7c>
    3290:	1f 16       	cp	r1, r31
    3292:	ba 0b       	sbc	r27, r26
    3294:	62 0b       	sbc	r22, r18
    3296:	73 0b       	sbc	r23, r19
    3298:	84 0b       	sbc	r24, r20
    329a:	ba f0       	brmi	.+46     	; 0x32ca <__addsf3x+0x98>
    329c:	91 50       	subi	r25, 0x01	; 1
    329e:	a1 f0       	breq	.+40     	; 0x32c8 <__addsf3x+0x96>
    32a0:	ff 0f       	add	r31, r31
    32a2:	bb 1f       	adc	r27, r27
    32a4:	66 1f       	adc	r22, r22
    32a6:	77 1f       	adc	r23, r23
    32a8:	88 1f       	adc	r24, r24
    32aa:	c2 f7       	brpl	.-16     	; 0x329c <__addsf3x+0x6a>
    32ac:	0e c0       	rjmp	.+28     	; 0x32ca <__addsf3x+0x98>
    32ae:	ba 0f       	add	r27, r26
    32b0:	62 1f       	adc	r22, r18
    32b2:	73 1f       	adc	r23, r19
    32b4:	84 1f       	adc	r24, r20
    32b6:	48 f4       	brcc	.+18     	; 0x32ca <__addsf3x+0x98>
    32b8:	87 95       	ror	r24
    32ba:	77 95       	ror	r23
    32bc:	67 95       	ror	r22
    32be:	b7 95       	ror	r27
    32c0:	f7 95       	ror	r31
    32c2:	9e 3f       	cpi	r25, 0xFE	; 254
    32c4:	08 f0       	brcs	.+2      	; 0x32c8 <__addsf3x+0x96>
    32c6:	b3 cf       	rjmp	.-154    	; 0x322e <__addsf3+0x1e>
    32c8:	93 95       	inc	r25
    32ca:	88 0f       	add	r24, r24
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <__addsf3x+0x9e>
    32ce:	99 27       	eor	r25, r25
    32d0:	ee 0f       	add	r30, r30
    32d2:	97 95       	ror	r25
    32d4:	87 95       	ror	r24
    32d6:	08 95       	ret

000032d8 <__cmpsf2>:
    32d8:	d9 d0       	rcall	.+434    	; 0x348c <__fp_cmp>
    32da:	08 f4       	brcc	.+2      	; 0x32de <__cmpsf2+0x6>
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	08 95       	ret

000032e0 <__divsf3>:
    32e0:	0c d0       	rcall	.+24     	; 0x32fa <__divsf3x>
    32e2:	0f c1       	rjmp	.+542    	; 0x3502 <__fp_round>
    32e4:	07 d1       	rcall	.+526    	; 0x34f4 <__fp_pscB>
    32e6:	40 f0       	brcs	.+16     	; 0x32f8 <__divsf3+0x18>
    32e8:	fe d0       	rcall	.+508    	; 0x34e6 <__fp_pscA>
    32ea:	30 f0       	brcs	.+12     	; 0x32f8 <__divsf3+0x18>
    32ec:	21 f4       	brne	.+8      	; 0x32f6 <__divsf3+0x16>
    32ee:	5f 3f       	cpi	r21, 0xFF	; 255
    32f0:	19 f0       	breq	.+6      	; 0x32f8 <__divsf3+0x18>
    32f2:	f0 c0       	rjmp	.+480    	; 0x34d4 <__fp_inf>
    32f4:	51 11       	cpse	r21, r1
    32f6:	39 c1       	rjmp	.+626    	; 0x356a <__fp_szero>
    32f8:	f3 c0       	rjmp	.+486    	; 0x34e0 <__fp_nan>

000032fa <__divsf3x>:
    32fa:	14 d1       	rcall	.+552    	; 0x3524 <__fp_split3>
    32fc:	98 f3       	brcs	.-26     	; 0x32e4 <__divsf3+0x4>

000032fe <__divsf3_pse>:
    32fe:	99 23       	and	r25, r25
    3300:	c9 f3       	breq	.-14     	; 0x32f4 <__divsf3+0x14>
    3302:	55 23       	and	r21, r21
    3304:	b1 f3       	breq	.-20     	; 0x32f2 <__divsf3+0x12>
    3306:	95 1b       	sub	r25, r21
    3308:	55 0b       	sbc	r21, r21
    330a:	bb 27       	eor	r27, r27
    330c:	aa 27       	eor	r26, r26
    330e:	62 17       	cp	r22, r18
    3310:	73 07       	cpc	r23, r19
    3312:	84 07       	cpc	r24, r20
    3314:	38 f0       	brcs	.+14     	; 0x3324 <__divsf3_pse+0x26>
    3316:	9f 5f       	subi	r25, 0xFF	; 255
    3318:	5f 4f       	sbci	r21, 0xFF	; 255
    331a:	22 0f       	add	r18, r18
    331c:	33 1f       	adc	r19, r19
    331e:	44 1f       	adc	r20, r20
    3320:	aa 1f       	adc	r26, r26
    3322:	a9 f3       	breq	.-22     	; 0x330e <__divsf3_pse+0x10>
    3324:	33 d0       	rcall	.+102    	; 0x338c <__divsf3_pse+0x8e>
    3326:	0e 2e       	mov	r0, r30
    3328:	3a f0       	brmi	.+14     	; 0x3338 <__divsf3_pse+0x3a>
    332a:	e0 e8       	ldi	r30, 0x80	; 128
    332c:	30 d0       	rcall	.+96     	; 0x338e <__divsf3_pse+0x90>
    332e:	91 50       	subi	r25, 0x01	; 1
    3330:	50 40       	sbci	r21, 0x00	; 0
    3332:	e6 95       	lsr	r30
    3334:	00 1c       	adc	r0, r0
    3336:	ca f7       	brpl	.-14     	; 0x332a <__divsf3_pse+0x2c>
    3338:	29 d0       	rcall	.+82     	; 0x338c <__divsf3_pse+0x8e>
    333a:	fe 2f       	mov	r31, r30
    333c:	27 d0       	rcall	.+78     	; 0x338c <__divsf3_pse+0x8e>
    333e:	66 0f       	add	r22, r22
    3340:	77 1f       	adc	r23, r23
    3342:	88 1f       	adc	r24, r24
    3344:	bb 1f       	adc	r27, r27
    3346:	26 17       	cp	r18, r22
    3348:	37 07       	cpc	r19, r23
    334a:	48 07       	cpc	r20, r24
    334c:	ab 07       	cpc	r26, r27
    334e:	b0 e8       	ldi	r27, 0x80	; 128
    3350:	09 f0       	breq	.+2      	; 0x3354 <__divsf3_pse+0x56>
    3352:	bb 0b       	sbc	r27, r27
    3354:	80 2d       	mov	r24, r0
    3356:	bf 01       	movw	r22, r30
    3358:	ff 27       	eor	r31, r31
    335a:	93 58       	subi	r25, 0x83	; 131
    335c:	5f 4f       	sbci	r21, 0xFF	; 255
    335e:	2a f0       	brmi	.+10     	; 0x336a <__divsf3_pse+0x6c>
    3360:	9e 3f       	cpi	r25, 0xFE	; 254
    3362:	51 05       	cpc	r21, r1
    3364:	68 f0       	brcs	.+26     	; 0x3380 <__divsf3_pse+0x82>
    3366:	b6 c0       	rjmp	.+364    	; 0x34d4 <__fp_inf>
    3368:	00 c1       	rjmp	.+512    	; 0x356a <__fp_szero>
    336a:	5f 3f       	cpi	r21, 0xFF	; 255
    336c:	ec f3       	brlt	.-6      	; 0x3368 <__divsf3_pse+0x6a>
    336e:	98 3e       	cpi	r25, 0xE8	; 232
    3370:	dc f3       	brlt	.-10     	; 0x3368 <__divsf3_pse+0x6a>
    3372:	86 95       	lsr	r24
    3374:	77 95       	ror	r23
    3376:	67 95       	ror	r22
    3378:	b7 95       	ror	r27
    337a:	f7 95       	ror	r31
    337c:	9f 5f       	subi	r25, 0xFF	; 255
    337e:	c9 f7       	brne	.-14     	; 0x3372 <__divsf3_pse+0x74>
    3380:	88 0f       	add	r24, r24
    3382:	91 1d       	adc	r25, r1
    3384:	96 95       	lsr	r25
    3386:	87 95       	ror	r24
    3388:	97 f9       	bld	r25, 7
    338a:	08 95       	ret
    338c:	e1 e0       	ldi	r30, 0x01	; 1
    338e:	66 0f       	add	r22, r22
    3390:	77 1f       	adc	r23, r23
    3392:	88 1f       	adc	r24, r24
    3394:	bb 1f       	adc	r27, r27
    3396:	62 17       	cp	r22, r18
    3398:	73 07       	cpc	r23, r19
    339a:	84 07       	cpc	r24, r20
    339c:	ba 07       	cpc	r27, r26
    339e:	20 f0       	brcs	.+8      	; 0x33a8 <__divsf3_pse+0xaa>
    33a0:	62 1b       	sub	r22, r18
    33a2:	73 0b       	sbc	r23, r19
    33a4:	84 0b       	sbc	r24, r20
    33a6:	ba 0b       	sbc	r27, r26
    33a8:	ee 1f       	adc	r30, r30
    33aa:	88 f7       	brcc	.-30     	; 0x338e <__divsf3_pse+0x90>
    33ac:	e0 95       	com	r30
    33ae:	08 95       	ret

000033b0 <__fixsfsi>:
    33b0:	04 d0       	rcall	.+8      	; 0x33ba <__fixunssfsi>
    33b2:	68 94       	set
    33b4:	b1 11       	cpse	r27, r1
    33b6:	d9 c0       	rjmp	.+434    	; 0x356a <__fp_szero>
    33b8:	08 95       	ret

000033ba <__fixunssfsi>:
    33ba:	bc d0       	rcall	.+376    	; 0x3534 <__fp_splitA>
    33bc:	88 f0       	brcs	.+34     	; 0x33e0 <__fixunssfsi+0x26>
    33be:	9f 57       	subi	r25, 0x7F	; 127
    33c0:	90 f0       	brcs	.+36     	; 0x33e6 <__fixunssfsi+0x2c>
    33c2:	b9 2f       	mov	r27, r25
    33c4:	99 27       	eor	r25, r25
    33c6:	b7 51       	subi	r27, 0x17	; 23
    33c8:	a0 f0       	brcs	.+40     	; 0x33f2 <__fixunssfsi+0x38>
    33ca:	d1 f0       	breq	.+52     	; 0x3400 <__fixunssfsi+0x46>
    33cc:	66 0f       	add	r22, r22
    33ce:	77 1f       	adc	r23, r23
    33d0:	88 1f       	adc	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	1a f0       	brmi	.+6      	; 0x33dc <__fixunssfsi+0x22>
    33d6:	ba 95       	dec	r27
    33d8:	c9 f7       	brne	.-14     	; 0x33cc <__fixunssfsi+0x12>
    33da:	12 c0       	rjmp	.+36     	; 0x3400 <__fixunssfsi+0x46>
    33dc:	b1 30       	cpi	r27, 0x01	; 1
    33de:	81 f0       	breq	.+32     	; 0x3400 <__fixunssfsi+0x46>
    33e0:	c3 d0       	rcall	.+390    	; 0x3568 <__fp_zero>
    33e2:	b1 e0       	ldi	r27, 0x01	; 1
    33e4:	08 95       	ret
    33e6:	c0 c0       	rjmp	.+384    	; 0x3568 <__fp_zero>
    33e8:	67 2f       	mov	r22, r23
    33ea:	78 2f       	mov	r23, r24
    33ec:	88 27       	eor	r24, r24
    33ee:	b8 5f       	subi	r27, 0xF8	; 248
    33f0:	39 f0       	breq	.+14     	; 0x3400 <__fixunssfsi+0x46>
    33f2:	b9 3f       	cpi	r27, 0xF9	; 249
    33f4:	cc f3       	brlt	.-14     	; 0x33e8 <__fixunssfsi+0x2e>
    33f6:	86 95       	lsr	r24
    33f8:	77 95       	ror	r23
    33fa:	67 95       	ror	r22
    33fc:	b3 95       	inc	r27
    33fe:	d9 f7       	brne	.-10     	; 0x33f6 <__fixunssfsi+0x3c>
    3400:	3e f4       	brtc	.+14     	; 0x3410 <__fixunssfsi+0x56>
    3402:	90 95       	com	r25
    3404:	80 95       	com	r24
    3406:	70 95       	com	r23
    3408:	61 95       	neg	r22
    340a:	7f 4f       	sbci	r23, 0xFF	; 255
    340c:	8f 4f       	sbci	r24, 0xFF	; 255
    340e:	9f 4f       	sbci	r25, 0xFF	; 255
    3410:	08 95       	ret

00003412 <__floatunsisf>:
    3412:	e8 94       	clt
    3414:	09 c0       	rjmp	.+18     	; 0x3428 <__floatsisf+0x12>

00003416 <__floatsisf>:
    3416:	97 fb       	bst	r25, 7
    3418:	3e f4       	brtc	.+14     	; 0x3428 <__floatsisf+0x12>
    341a:	90 95       	com	r25
    341c:	80 95       	com	r24
    341e:	70 95       	com	r23
    3420:	61 95       	neg	r22
    3422:	7f 4f       	sbci	r23, 0xFF	; 255
    3424:	8f 4f       	sbci	r24, 0xFF	; 255
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
    3428:	99 23       	and	r25, r25
    342a:	a9 f0       	breq	.+42     	; 0x3456 <__floatsisf+0x40>
    342c:	f9 2f       	mov	r31, r25
    342e:	96 e9       	ldi	r25, 0x96	; 150
    3430:	bb 27       	eor	r27, r27
    3432:	93 95       	inc	r25
    3434:	f6 95       	lsr	r31
    3436:	87 95       	ror	r24
    3438:	77 95       	ror	r23
    343a:	67 95       	ror	r22
    343c:	b7 95       	ror	r27
    343e:	f1 11       	cpse	r31, r1
    3440:	f8 cf       	rjmp	.-16     	; 0x3432 <__floatsisf+0x1c>
    3442:	fa f4       	brpl	.+62     	; 0x3482 <__floatsisf+0x6c>
    3444:	bb 0f       	add	r27, r27
    3446:	11 f4       	brne	.+4      	; 0x344c <__floatsisf+0x36>
    3448:	60 ff       	sbrs	r22, 0
    344a:	1b c0       	rjmp	.+54     	; 0x3482 <__floatsisf+0x6c>
    344c:	6f 5f       	subi	r22, 0xFF	; 255
    344e:	7f 4f       	sbci	r23, 0xFF	; 255
    3450:	8f 4f       	sbci	r24, 0xFF	; 255
    3452:	9f 4f       	sbci	r25, 0xFF	; 255
    3454:	16 c0       	rjmp	.+44     	; 0x3482 <__floatsisf+0x6c>
    3456:	88 23       	and	r24, r24
    3458:	11 f0       	breq	.+4      	; 0x345e <__floatsisf+0x48>
    345a:	96 e9       	ldi	r25, 0x96	; 150
    345c:	11 c0       	rjmp	.+34     	; 0x3480 <__floatsisf+0x6a>
    345e:	77 23       	and	r23, r23
    3460:	21 f0       	breq	.+8      	; 0x346a <__floatsisf+0x54>
    3462:	9e e8       	ldi	r25, 0x8E	; 142
    3464:	87 2f       	mov	r24, r23
    3466:	76 2f       	mov	r23, r22
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <__floatsisf+0x5e>
    346a:	66 23       	and	r22, r22
    346c:	71 f0       	breq	.+28     	; 0x348a <__floatsisf+0x74>
    346e:	96 e8       	ldi	r25, 0x86	; 134
    3470:	86 2f       	mov	r24, r22
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	2a f0       	brmi	.+10     	; 0x3482 <__floatsisf+0x6c>
    3478:	9a 95       	dec	r25
    347a:	66 0f       	add	r22, r22
    347c:	77 1f       	adc	r23, r23
    347e:	88 1f       	adc	r24, r24
    3480:	da f7       	brpl	.-10     	; 0x3478 <__floatsisf+0x62>
    3482:	88 0f       	add	r24, r24
    3484:	96 95       	lsr	r25
    3486:	87 95       	ror	r24
    3488:	97 f9       	bld	r25, 7
    348a:	08 95       	ret

0000348c <__fp_cmp>:
    348c:	99 0f       	add	r25, r25
    348e:	00 08       	sbc	r0, r0
    3490:	55 0f       	add	r21, r21
    3492:	aa 0b       	sbc	r26, r26
    3494:	e0 e8       	ldi	r30, 0x80	; 128
    3496:	fe ef       	ldi	r31, 0xFE	; 254
    3498:	16 16       	cp	r1, r22
    349a:	17 06       	cpc	r1, r23
    349c:	e8 07       	cpc	r30, r24
    349e:	f9 07       	cpc	r31, r25
    34a0:	c0 f0       	brcs	.+48     	; 0x34d2 <__fp_cmp+0x46>
    34a2:	12 16       	cp	r1, r18
    34a4:	13 06       	cpc	r1, r19
    34a6:	e4 07       	cpc	r30, r20
    34a8:	f5 07       	cpc	r31, r21
    34aa:	98 f0       	brcs	.+38     	; 0x34d2 <__fp_cmp+0x46>
    34ac:	62 1b       	sub	r22, r18
    34ae:	73 0b       	sbc	r23, r19
    34b0:	84 0b       	sbc	r24, r20
    34b2:	95 0b       	sbc	r25, r21
    34b4:	39 f4       	brne	.+14     	; 0x34c4 <__fp_cmp+0x38>
    34b6:	0a 26       	eor	r0, r26
    34b8:	61 f0       	breq	.+24     	; 0x34d2 <__fp_cmp+0x46>
    34ba:	23 2b       	or	r18, r19
    34bc:	24 2b       	or	r18, r20
    34be:	25 2b       	or	r18, r21
    34c0:	21 f4       	brne	.+8      	; 0x34ca <__fp_cmp+0x3e>
    34c2:	08 95       	ret
    34c4:	0a 26       	eor	r0, r26
    34c6:	09 f4       	brne	.+2      	; 0x34ca <__fp_cmp+0x3e>
    34c8:	a1 40       	sbci	r26, 0x01	; 1
    34ca:	a6 95       	lsr	r26
    34cc:	8f ef       	ldi	r24, 0xFF	; 255
    34ce:	81 1d       	adc	r24, r1
    34d0:	81 1d       	adc	r24, r1
    34d2:	08 95       	ret

000034d4 <__fp_inf>:
    34d4:	97 f9       	bld	r25, 7
    34d6:	9f 67       	ori	r25, 0x7F	; 127
    34d8:	80 e8       	ldi	r24, 0x80	; 128
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	08 95       	ret

000034e0 <__fp_nan>:
    34e0:	9f ef       	ldi	r25, 0xFF	; 255
    34e2:	80 ec       	ldi	r24, 0xC0	; 192
    34e4:	08 95       	ret

000034e6 <__fp_pscA>:
    34e6:	00 24       	eor	r0, r0
    34e8:	0a 94       	dec	r0
    34ea:	16 16       	cp	r1, r22
    34ec:	17 06       	cpc	r1, r23
    34ee:	18 06       	cpc	r1, r24
    34f0:	09 06       	cpc	r0, r25
    34f2:	08 95       	ret

000034f4 <__fp_pscB>:
    34f4:	00 24       	eor	r0, r0
    34f6:	0a 94       	dec	r0
    34f8:	12 16       	cp	r1, r18
    34fa:	13 06       	cpc	r1, r19
    34fc:	14 06       	cpc	r1, r20
    34fe:	05 06       	cpc	r0, r21
    3500:	08 95       	ret

00003502 <__fp_round>:
    3502:	09 2e       	mov	r0, r25
    3504:	03 94       	inc	r0
    3506:	00 0c       	add	r0, r0
    3508:	11 f4       	brne	.+4      	; 0x350e <__fp_round+0xc>
    350a:	88 23       	and	r24, r24
    350c:	52 f0       	brmi	.+20     	; 0x3522 <__fp_round+0x20>
    350e:	bb 0f       	add	r27, r27
    3510:	40 f4       	brcc	.+16     	; 0x3522 <__fp_round+0x20>
    3512:	bf 2b       	or	r27, r31
    3514:	11 f4       	brne	.+4      	; 0x351a <__fp_round+0x18>
    3516:	60 ff       	sbrs	r22, 0
    3518:	04 c0       	rjmp	.+8      	; 0x3522 <__fp_round+0x20>
    351a:	6f 5f       	subi	r22, 0xFF	; 255
    351c:	7f 4f       	sbci	r23, 0xFF	; 255
    351e:	8f 4f       	sbci	r24, 0xFF	; 255
    3520:	9f 4f       	sbci	r25, 0xFF	; 255
    3522:	08 95       	ret

00003524 <__fp_split3>:
    3524:	57 fd       	sbrc	r21, 7
    3526:	90 58       	subi	r25, 0x80	; 128
    3528:	44 0f       	add	r20, r20
    352a:	55 1f       	adc	r21, r21
    352c:	59 f0       	breq	.+22     	; 0x3544 <__fp_splitA+0x10>
    352e:	5f 3f       	cpi	r21, 0xFF	; 255
    3530:	71 f0       	breq	.+28     	; 0x354e <__fp_splitA+0x1a>
    3532:	47 95       	ror	r20

00003534 <__fp_splitA>:
    3534:	88 0f       	add	r24, r24
    3536:	97 fb       	bst	r25, 7
    3538:	99 1f       	adc	r25, r25
    353a:	61 f0       	breq	.+24     	; 0x3554 <__fp_splitA+0x20>
    353c:	9f 3f       	cpi	r25, 0xFF	; 255
    353e:	79 f0       	breq	.+30     	; 0x355e <__fp_splitA+0x2a>
    3540:	87 95       	ror	r24
    3542:	08 95       	ret
    3544:	12 16       	cp	r1, r18
    3546:	13 06       	cpc	r1, r19
    3548:	14 06       	cpc	r1, r20
    354a:	55 1f       	adc	r21, r21
    354c:	f2 cf       	rjmp	.-28     	; 0x3532 <__fp_split3+0xe>
    354e:	46 95       	lsr	r20
    3550:	f1 df       	rcall	.-30     	; 0x3534 <__fp_splitA>
    3552:	08 c0       	rjmp	.+16     	; 0x3564 <__fp_splitA+0x30>
    3554:	16 16       	cp	r1, r22
    3556:	17 06       	cpc	r1, r23
    3558:	18 06       	cpc	r1, r24
    355a:	99 1f       	adc	r25, r25
    355c:	f1 cf       	rjmp	.-30     	; 0x3540 <__fp_splitA+0xc>
    355e:	86 95       	lsr	r24
    3560:	71 05       	cpc	r23, r1
    3562:	61 05       	cpc	r22, r1
    3564:	08 94       	sec
    3566:	08 95       	ret

00003568 <__fp_zero>:
    3568:	e8 94       	clt

0000356a <__fp_szero>:
    356a:	bb 27       	eor	r27, r27
    356c:	66 27       	eor	r22, r22
    356e:	77 27       	eor	r23, r23
    3570:	cb 01       	movw	r24, r22
    3572:	97 f9       	bld	r25, 7
    3574:	08 95       	ret

00003576 <__gesf2>:
    3576:	8a df       	rcall	.-236    	; 0x348c <__fp_cmp>
    3578:	08 f4       	brcc	.+2      	; 0x357c <__gesf2+0x6>
    357a:	8f ef       	ldi	r24, 0xFF	; 255
    357c:	08 95       	ret

0000357e <__mulsf3>:
    357e:	0b d0       	rcall	.+22     	; 0x3596 <__mulsf3x>
    3580:	c0 cf       	rjmp	.-128    	; 0x3502 <__fp_round>
    3582:	b1 df       	rcall	.-158    	; 0x34e6 <__fp_pscA>
    3584:	28 f0       	brcs	.+10     	; 0x3590 <__mulsf3+0x12>
    3586:	b6 df       	rcall	.-148    	; 0x34f4 <__fp_pscB>
    3588:	18 f0       	brcs	.+6      	; 0x3590 <__mulsf3+0x12>
    358a:	95 23       	and	r25, r21
    358c:	09 f0       	breq	.+2      	; 0x3590 <__mulsf3+0x12>
    358e:	a2 cf       	rjmp	.-188    	; 0x34d4 <__fp_inf>
    3590:	a7 cf       	rjmp	.-178    	; 0x34e0 <__fp_nan>
    3592:	11 24       	eor	r1, r1
    3594:	ea cf       	rjmp	.-44     	; 0x356a <__fp_szero>

00003596 <__mulsf3x>:
    3596:	c6 df       	rcall	.-116    	; 0x3524 <__fp_split3>
    3598:	a0 f3       	brcs	.-24     	; 0x3582 <__mulsf3+0x4>

0000359a <__mulsf3_pse>:
    359a:	95 9f       	mul	r25, r21
    359c:	d1 f3       	breq	.-12     	; 0x3592 <__mulsf3+0x14>
    359e:	95 0f       	add	r25, r21
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	55 1f       	adc	r21, r21
    35a4:	62 9f       	mul	r22, r18
    35a6:	f0 01       	movw	r30, r0
    35a8:	72 9f       	mul	r23, r18
    35aa:	bb 27       	eor	r27, r27
    35ac:	f0 0d       	add	r31, r0
    35ae:	b1 1d       	adc	r27, r1
    35b0:	63 9f       	mul	r22, r19
    35b2:	aa 27       	eor	r26, r26
    35b4:	f0 0d       	add	r31, r0
    35b6:	b1 1d       	adc	r27, r1
    35b8:	aa 1f       	adc	r26, r26
    35ba:	64 9f       	mul	r22, r20
    35bc:	66 27       	eor	r22, r22
    35be:	b0 0d       	add	r27, r0
    35c0:	a1 1d       	adc	r26, r1
    35c2:	66 1f       	adc	r22, r22
    35c4:	82 9f       	mul	r24, r18
    35c6:	22 27       	eor	r18, r18
    35c8:	b0 0d       	add	r27, r0
    35ca:	a1 1d       	adc	r26, r1
    35cc:	62 1f       	adc	r22, r18
    35ce:	73 9f       	mul	r23, r19
    35d0:	b0 0d       	add	r27, r0
    35d2:	a1 1d       	adc	r26, r1
    35d4:	62 1f       	adc	r22, r18
    35d6:	83 9f       	mul	r24, r19
    35d8:	a0 0d       	add	r26, r0
    35da:	61 1d       	adc	r22, r1
    35dc:	22 1f       	adc	r18, r18
    35de:	74 9f       	mul	r23, r20
    35e0:	33 27       	eor	r19, r19
    35e2:	a0 0d       	add	r26, r0
    35e4:	61 1d       	adc	r22, r1
    35e6:	23 1f       	adc	r18, r19
    35e8:	84 9f       	mul	r24, r20
    35ea:	60 0d       	add	r22, r0
    35ec:	21 1d       	adc	r18, r1
    35ee:	82 2f       	mov	r24, r18
    35f0:	76 2f       	mov	r23, r22
    35f2:	6a 2f       	mov	r22, r26
    35f4:	11 24       	eor	r1, r1
    35f6:	9f 57       	subi	r25, 0x7F	; 127
    35f8:	50 40       	sbci	r21, 0x00	; 0
    35fa:	8a f0       	brmi	.+34     	; 0x361e <__mulsf3_pse+0x84>
    35fc:	e1 f0       	breq	.+56     	; 0x3636 <__mulsf3_pse+0x9c>
    35fe:	88 23       	and	r24, r24
    3600:	4a f0       	brmi	.+18     	; 0x3614 <__mulsf3_pse+0x7a>
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	bb 1f       	adc	r27, r27
    3608:	66 1f       	adc	r22, r22
    360a:	77 1f       	adc	r23, r23
    360c:	88 1f       	adc	r24, r24
    360e:	91 50       	subi	r25, 0x01	; 1
    3610:	50 40       	sbci	r21, 0x00	; 0
    3612:	a9 f7       	brne	.-22     	; 0x35fe <__mulsf3_pse+0x64>
    3614:	9e 3f       	cpi	r25, 0xFE	; 254
    3616:	51 05       	cpc	r21, r1
    3618:	70 f0       	brcs	.+28     	; 0x3636 <__mulsf3_pse+0x9c>
    361a:	5c cf       	rjmp	.-328    	; 0x34d4 <__fp_inf>
    361c:	a6 cf       	rjmp	.-180    	; 0x356a <__fp_szero>
    361e:	5f 3f       	cpi	r21, 0xFF	; 255
    3620:	ec f3       	brlt	.-6      	; 0x361c <__mulsf3_pse+0x82>
    3622:	98 3e       	cpi	r25, 0xE8	; 232
    3624:	dc f3       	brlt	.-10     	; 0x361c <__mulsf3_pse+0x82>
    3626:	86 95       	lsr	r24
    3628:	77 95       	ror	r23
    362a:	67 95       	ror	r22
    362c:	b7 95       	ror	r27
    362e:	f7 95       	ror	r31
    3630:	e7 95       	ror	r30
    3632:	9f 5f       	subi	r25, 0xFF	; 255
    3634:	c1 f7       	brne	.-16     	; 0x3626 <__mulsf3_pse+0x8c>
    3636:	fe 2b       	or	r31, r30
    3638:	88 0f       	add	r24, r24
    363a:	91 1d       	adc	r25, r1
    363c:	96 95       	lsr	r25
    363e:	87 95       	ror	r24
    3640:	97 f9       	bld	r25, 7
    3642:	08 95       	ret

00003644 <__divmodhi4>:
    3644:	97 fb       	bst	r25, 7
    3646:	09 2e       	mov	r0, r25
    3648:	07 26       	eor	r0, r23
    364a:	0a d0       	rcall	.+20     	; 0x3660 <__divmodhi4_neg1>
    364c:	77 fd       	sbrc	r23, 7
    364e:	04 d0       	rcall	.+8      	; 0x3658 <__divmodhi4_neg2>
    3650:	0c d0       	rcall	.+24     	; 0x366a <__udivmodhi4>
    3652:	06 d0       	rcall	.+12     	; 0x3660 <__divmodhi4_neg1>
    3654:	00 20       	and	r0, r0
    3656:	1a f4       	brpl	.+6      	; 0x365e <__divmodhi4_exit>

00003658 <__divmodhi4_neg2>:
    3658:	70 95       	com	r23
    365a:	61 95       	neg	r22
    365c:	7f 4f       	sbci	r23, 0xFF	; 255

0000365e <__divmodhi4_exit>:
    365e:	08 95       	ret

00003660 <__divmodhi4_neg1>:
    3660:	f6 f7       	brtc	.-4      	; 0x365e <__divmodhi4_exit>
    3662:	90 95       	com	r25
    3664:	81 95       	neg	r24
    3666:	9f 4f       	sbci	r25, 0xFF	; 255
    3668:	08 95       	ret

0000366a <__udivmodhi4>:
    366a:	aa 1b       	sub	r26, r26
    366c:	bb 1b       	sub	r27, r27
    366e:	51 e1       	ldi	r21, 0x11	; 17
    3670:	07 c0       	rjmp	.+14     	; 0x3680 <__udivmodhi4_ep>

00003672 <__udivmodhi4_loop>:
    3672:	aa 1f       	adc	r26, r26
    3674:	bb 1f       	adc	r27, r27
    3676:	a6 17       	cp	r26, r22
    3678:	b7 07       	cpc	r27, r23
    367a:	10 f0       	brcs	.+4      	; 0x3680 <__udivmodhi4_ep>
    367c:	a6 1b       	sub	r26, r22
    367e:	b7 0b       	sbc	r27, r23

00003680 <__udivmodhi4_ep>:
    3680:	88 1f       	adc	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	5a 95       	dec	r21
    3686:	a9 f7       	brne	.-22     	; 0x3672 <__udivmodhi4_loop>
    3688:	80 95       	com	r24
    368a:	90 95       	com	r25
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	08 95       	ret

00003692 <__eerd_byte_m32>:
    3692:	e1 99       	sbic	0x1c, 1	; 28
    3694:	fe cf       	rjmp	.-4      	; 0x3692 <__eerd_byte_m32>
    3696:	9f bb       	out	0x1f, r25	; 31
    3698:	8e bb       	out	0x1e, r24	; 30
    369a:	e0 9a       	sbi	0x1c, 0	; 28
    369c:	99 27       	eor	r25, r25
    369e:	8d b3       	in	r24, 0x1d	; 29
    36a0:	08 95       	ret

000036a2 <__eerd_word_m32>:
    36a2:	a8 e1       	ldi	r26, 0x18	; 24
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	42 e0       	ldi	r20, 0x02	; 2
    36a8:	50 e0       	ldi	r21, 0x00	; 0
    36aa:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__eerd_blraw_m32>

000036ae <__eewr_byte_m32>:
    36ae:	26 2f       	mov	r18, r22

000036b0 <__eewr_r18_m32>:
    36b0:	e1 99       	sbic	0x1c, 1	; 28
    36b2:	fe cf       	rjmp	.-4      	; 0x36b0 <__eewr_r18_m32>
    36b4:	9f bb       	out	0x1f, r25	; 31
    36b6:	8e bb       	out	0x1e, r24	; 30
    36b8:	2d bb       	out	0x1d, r18	; 29
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	e2 9a       	sbi	0x1c, 2	; 28
    36c0:	e1 9a       	sbi	0x1c, 1	; 28
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	01 96       	adiw	r24, 0x01	; 1
    36c6:	08 95       	ret

000036c8 <__eewr_word_m32>:
    36c8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <__eewr_byte_m32>
    36cc:	27 2f       	mov	r18, r23
    36ce:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <__eewr_r18_m32>

000036d2 <__eerd_block_m32>:
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22

000036d6 <__eerd_blraw_m32>:
    36d6:	fc 01       	movw	r30, r24
    36d8:	e1 99       	sbic	0x1c, 1	; 28
    36da:	fe cf       	rjmp	.-4      	; 0x36d8 <__eerd_blraw_m32+0x2>
    36dc:	06 c0       	rjmp	.+12     	; 0x36ea <__eerd_blraw_m32+0x14>
    36de:	ff bb       	out	0x1f, r31	; 31
    36e0:	ee bb       	out	0x1e, r30	; 30
    36e2:	e0 9a       	sbi	0x1c, 0	; 28
    36e4:	31 96       	adiw	r30, 0x01	; 1
    36e6:	0d b2       	in	r0, 0x1d	; 29
    36e8:	0d 92       	st	X+, r0
    36ea:	41 50       	subi	r20, 0x01	; 1
    36ec:	50 40       	sbci	r21, 0x00	; 0
    36ee:	b8 f7       	brcc	.-18     	; 0x36de <__eerd_blraw_m32+0x8>
    36f0:	08 95       	ret

000036f2 <_exit>:
    36f2:	f8 94       	cli

000036f4 <__stop_program>:
    36f4:	ff cf       	rjmp	.-2      	; 0x36f4 <__stop_program>
