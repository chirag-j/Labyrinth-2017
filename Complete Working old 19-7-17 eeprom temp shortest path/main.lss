
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000032aa  0000333e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000675  0080011c  0080011c  000033fa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000033fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006a4  00000000  00000000  0000341a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ed2  00000000  00000000  00003abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f3  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002730  00000000  00000000  00005d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  000084b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a7  00000000  00000000  00008944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b7a  00000000  00000000  00008feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  00009b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 13 	call	0x26bc	; 0x26bc <main>
      8a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 95 18 	call	0x312a	; 0x312a <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     18e:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 95 18 	call	0x312a	; 0x312a <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 95 18 	call	0x312a	; 0x312a <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     286:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 1c 01 	sts	0x011C, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 1c 01 	lds	r24, 0x011C
     300:	82 2b       	or	r24, r18
     302:	80 93 1c 01 	sts	0x011C, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 41 07 	sts	0x0741, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 42 07 	sts	0x0742, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 43 07 	sts	0x0743, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 44 07 	sts	0x0744, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 85 07 	sts	0x0785, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 86 07 	sts	0x0786, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 87 07 	sts	0x0787, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 88 07 	sts	0x0788, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
int path_array[15][2];
int special_flag = 0, repeat=0;
int right;
int ipl = 0;
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 1c 01 	lds	r24, 0x011C
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 1e 01 	sts	0x011E, r25
     778:	80 93 1d 01 	sts	0x011D, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 29 01 	lds	r24, 0x0129
     780:	90 91 2a 01 	lds	r25, 0x012A
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 1e 01 	sts	0x011E, r1
     78c:	10 92 1d 01 	sts	0x011D, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 1e 01 	sts	0x011E, r25
     7a0:	80 93 1d 01 	sts	0x011D, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 1d 01 	lds	r22, 0x011D
     7a8:	70 91 1e 01 	lds	r23, 0x011E
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 89 07 	lds	r22, 0x0789
     7c0:	70 91 8a 07 	lds	r23, 0x078A
     7c4:	80 91 8b 07 	lds	r24, 0x078B
     7c8:	90 91 8c 07 	lds	r25, 0x078C
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 8d 07 	sts	0x078D, r22
     7dc:	70 93 8e 07 	sts	0x078E, r23
     7e0:	80 93 8f 07 	sts	0x078F, r24
     7e4:	90 93 90 07 	sts	0x0790, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 0d 01 	lds	r18, 0x010D
     7f0:	30 91 0e 01 	lds	r19, 0x010E
     7f4:	40 91 0f 01 	lds	r20, 0x010F
     7f8:	50 91 10 01 	lds	r21, 0x0110
     7fc:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 11 01 	lds	r18, 0x0111
     80c:	30 91 12 01 	lds	r19, 0x0112
     810:	40 91 13 01 	lds	r20, 0x0113
     814:	50 91 14 01 	lds	r21, 0x0114
     818:	0e 94 99 18 	call	0x3132	; 0x3132 <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 3b 01 	sts	0x013B, r22
     830:	70 93 3c 01 	sts	0x013C, r23
     834:	80 93 3d 01 	sts	0x013D, r24
     838:	90 93 3e 01 	sts	0x013E, r25
	prev_error = mpos ;
     83c:	a0 92 89 07 	sts	0x0789, r10
     840:	b0 92 8a 07 	sts	0x078A, r11
     844:	c0 92 8b 07 	sts	0x078B, r12
     848:	d0 92 8c 07 	sts	0x078C, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 0b 01 	lds	r22, 0x010B
     850:	70 91 0c 01 	lds	r23, 0x010C
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__subsf3>
     868:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__addsf3>
     87c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 15 01 	sts	0x0115, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
		//left_count();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     92a:	82 e3       	ldi	r24, 0x32	; 50
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
	//delay_sec(2);
}
     932:	08 95       	ret

00000934 <left_count>:
	delay_millisec(50);
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     934:	cc 99       	sbic	0x19, 4	; 25
     936:	16 c0       	rjmp	.+44     	; 0x964 <left_count+0x30>
	{
		if(l==0)
     938:	80 91 21 01 	lds	r24, 0x0121
     93c:	90 91 22 01 	lds	r25, 0x0122
     940:	89 2b       	or	r24, r25
     942:	a1 f4       	brne	.+40     	; 0x96c <left_count+0x38>
		{
			lcount++;
     944:	80 91 23 01 	lds	r24, 0x0123
     948:	90 91 24 01 	lds	r25, 0x0124
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	90 93 24 01 	sts	0x0124, r25
     952:	80 93 23 01 	sts	0x0123, r24
			l = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 22 01 	sts	0x0122, r25
     95e:	80 93 21 01 	sts	0x0121, r24
     962:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     964:	10 92 22 01 	sts	0x0122, r1
     968:	10 92 21 01 	sts	0x0121, r1
     96c:	08 95       	ret

0000096e <special_case_check>:
	bot_brake();
	delay_millisec(50);
}
void special_case_check()         ////called inside left_junc_check
{
	if(bit_is_clear(PINA,5) || flag1 == 1)
     96e:	cd 9b       	sbis	0x19, 5	; 25
     970:	06 c0       	rjmp	.+12     	; 0x97e <special_case_check+0x10>
     972:	80 91 29 01 	lds	r24, 0x0129
     976:	90 91 2a 01 	lds	r25, 0x012A
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	79 f5       	brne	.+94     	; 0x9dc <special_case_check+0x6e>
	{
		flag1 = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 2a 01 	sts	0x012A, r25
     986:	80 93 29 01 	sts	0x0129, r24
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
     98a:	cc 99       	sbic	0x19, 4	; 25
     98c:	27 c0       	rjmp	.+78     	; 0x9dc <special_case_check+0x6e>
     98e:	86 9b       	sbis	0x10, 6	; 16
     990:	14 c0       	rjmp	.+40     	; 0x9ba <special_case_check+0x4c>
     992:	ce 9b       	sbis	0x19, 6	; 25
     994:	12 c0       	rjmp	.+36     	; 0x9ba <special_case_check+0x4c>
     996:	08 95       	ret
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     998:	3b bd       	out	0x2b, r19	; 43
     99a:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     99c:	39 bd       	out	0x29, r19	; 41
     99e:	28 bd       	out	0x28, r18	; 40
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9a0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9a2:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9a4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9a6:	af 98       	cbi	0x15, 7	; 21
			{
				set_pwm1a(240);
				set_pwm1b(240);
				bot_forward();
				flag1 = 0;
				if(bit_is_clear(PIND, 7))
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	87 99       	sbic	0x10, 7	; 16
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <special_case_check+0x54>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9b0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9b2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9b4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9b6:	af 9a       	sbi	0x15, 7	; 21
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <special_case_check+0x54>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9be:	20 ef       	ldi	r18, 0xF0	; 240
     9c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		flag1 = 1;
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
		{
			while(bit_is_clear(PINA,4) && bit_is_set(PIND, 7)) 
     9c2:	cc 9b       	sbis	0x19, 4	; 25
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <special_case_check+0x62>
     9c6:	90 93 2a 01 	sts	0x012A, r25
     9ca:	80 93 29 01 	sts	0x0129, r24
     9ce:	08 95       	ret
     9d0:	87 99       	sbic	0x10, 7	; 16
     9d2:	e2 cf       	rjmp	.-60     	; 0x998 <special_case_check+0x2a>
     9d4:	90 93 2a 01 	sts	0x012A, r25
     9d8:	80 93 29 01 	sts	0x0129, r24
     9dc:	08 95       	ret

000009de <line_track_new>:
	
}

void line_track_new()
{
	check_sensors();
     9de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9e2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9e4:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9e6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9e8:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     9ea:	ce 9b       	sbis	0x19, 6	; 25
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <line_track_new+0x26>
     9ee:	86 99       	sbic	0x10, 6	; 16
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <line_track_new+0x26>
	{
		set_pwm1a(opt-30);
     9f2:	80 91 0b 01 	lds	r24, 0x010B
     9f6:	90 91 0c 01 	lds	r25, 0x010C
     9fa:	4e 97       	sbiw	r24, 0x1e	; 30
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9fc:	9b bd       	out	0x2b, r25	; 43
     9fe:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt+30);
     a00:	cc 96       	adiw	r24, 0x3c	; 60
     a02:	1e c0       	rjmp	.+60     	; 0xa40 <line_track_new+0x62>

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     a04:	86 9b       	sbis	0x10, 6	; 16
     a06:	0b c0       	rjmp	.+22     	; 0xa1e <line_track_new+0x40>
     a08:	ce 99       	sbic	0x19, 6	; 25
     a0a:	09 c0       	rjmp	.+18     	; 0xa1e <line_track_new+0x40>
	{
		set_pwm1a(opt+30);
     a0c:	80 91 0b 01 	lds	r24, 0x010B
     a10:	90 91 0c 01 	lds	r25, 0x010C
     a14:	4e 96       	adiw	r24, 0x1e	; 30
     a16:	9b bd       	out	0x2b, r25	; 43
     a18:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt-30);
     a1a:	cc 97       	sbiw	r24, 0x3c	; 60
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <line_track_new+0x62>
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     a1e:	86 9b       	sbis	0x10, 6	; 16
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <line_track_new+0x4e>
     a22:	ce 9b       	sbis	0x19, 6	; 25
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <line_track_new+0x4e>
	{
		line_track();
     a26:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <line_track_new+0x66>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     a2c:	86 99       	sbic	0x10, 6	; 16
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <line_track_new+0x66>
     a30:	ce 99       	sbic	0x19, 6	; 25
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <line_track_new+0x66>
	{
		set_pwm1a(opt);
     a34:	80 91 0b 01 	lds	r24, 0x010B
     a38:	90 91 0c 01 	lds	r25, 0x010C
     a3c:	9b bd       	out	0x2b, r25	; 43
     a3e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a40:	99 bd       	out	0x29, r25	; 41
     a42:	88 bd       	out	0x28, r24	; 40
		set_pwm1b(opt);
	}
		delay_microsec(10);
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     a4c:	08 95       	ret

00000a4e <end_zone_uturn>:
	
}

void end_zone_uturn()
{
	turn = 'u';
     a4e:	85 e7       	ldi	r24, 0x75	; 117
     a50:	80 93 15 01 	sts	0x0115, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a54:	24 e0       	ldi	r18, 0x04	; 4
     a56:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a58:	88 e1       	ldi	r24, 0x18	; 24
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <end_zone_uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a5e:	3b bd       	out	0x2b, r19	; 43
     a60:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a62:	99 bd       	out	0x29, r25	; 41
     a64:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a66:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a68:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a6a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a6c:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_clear(PINA,5))
     a6e:	cd 9b       	sbis	0x19, 5	; 25
     a70:	f6 cf       	rjmp	.-20     	; 0xa5e <end_zone_uturn+0x10>
	{
		set_pwm1a(260);
		set_pwm1b(280);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,6) || bit_is_clear(PIND,6));
     a72:	ce 9b       	sbis	0x19, 6	; 25
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <end_zone_uturn+0x24>
     a76:	86 9b       	sbis	0x10, 6	; 16
     a78:	fc cf       	rjmp	.-8      	; 0xa72 <end_zone_uturn+0x24>
	while(bit_is_set(PINA,5));
     a7a:	cd 99       	sbic	0x19, 5	; 25
     a7c:	fe cf       	rjmp	.-4      	; 0xa7a <end_zone_uturn+0x2c>
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <end_zone_uturn+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a80:	9b bd       	out	0x2b, r25	; 43
     a82:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a84:	99 bd       	out	0x29, r25	; 41
     a86:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a88:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a8a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a8c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a8e:	af 98       	cbi	0x15, 7	; 21
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <end_zone_uturn+0x48>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a92:	82 ed       	ldi	r24, 0xD2	; 210
     a94:	90 e0       	ldi	r25, 0x00	; 0
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a96:	ce 9b       	sbis	0x19, 6	; 25
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <end_zone_uturn+0x56>
     a9a:	86 99       	sbic	0x10, 6	; 16
     a9c:	f1 cf       	rjmp	.-30     	; 0xa80 <end_zone_uturn+0x32>
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <end_zone_uturn+0x56>
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     aa0:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	{
		set_pwm1a(210);
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     aa4:	cc 9b       	sbis	0x19, 4	; 25
     aa6:	fc cf       	rjmp	.-8      	; 0xaa0 <end_zone_uturn+0x52>
     aa8:	87 9b       	sbis	0x10, 7	; 16
     aaa:	fa cf       	rjmp	.-12     	; 0xaa0 <end_zone_uturn+0x52>
     aac:	8f e8       	ldi	r24, 0x8F	; 143
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	9b bd       	out	0x2b, r25	; 43
     ab2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ab4:	99 bd       	out	0x29, r25	; 41
     ab6:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     ab8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     aba:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     abc:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     abe:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     ac0:	82 e3       	ldi	r24, 0x32	; 50
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     ac8:	08 95       	ret

00000aca <turn_left>:
	delay_millisec(50);
}

void turn_left()
{	
	turn = 'l';
     aca:	8c e6       	ldi	r24, 0x6C	; 108
     acc:	80 93 15 01 	sts	0x0115, r24
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <turn_left+0xc>
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
	{
		line_track_new();
     ad2:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
}

void turn_left()
{	
	turn = 'l';
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
     ad6:	87 9b       	sbis	0x10, 7	; 16
     ad8:	fc cf       	rjmp	.-8      	; 0xad2 <turn_left+0x8>
     ada:	cc 9b       	sbis	0x19, 4	; 25
     adc:	fa cf       	rjmp	.-12     	; 0xad2 <turn_left+0x8>
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <turn_left+0x28>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ae0:	9b bd       	out	0x2b, r25	; 43
     ae2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ae4:	99 bd       	out	0x29, r25	; 41
     ae6:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=1;
 MOTOR2B=0;
}
void bot_backward(void)
{
 MOTOR1A=0;
     ae8:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     aea:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     aec:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     aee:	af 9a       	sbi	0x15, 7	; 21
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <turn_left+0x2c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     af2:	85 ef       	ldi	r24, 0xF5	; 245
     af4:	90 e0       	ldi	r25, 0x00	; 0
	{
		line_track_new();
	}
	while(bit_is_set(PIND, 7) && bit_is_set(PINA, 4))
     af6:	87 9b       	sbis	0x10, 7	; 16
     af8:	0c c0       	rjmp	.+24     	; 0xb12 <turn_left+0x48>
     afa:	cc 99       	sbic	0x19, 4	; 25
     afc:	f1 cf       	rjmp	.-30     	; 0xae0 <turn_left+0x16>
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <turn_left+0x48>
     b00:	9b bd       	out	0x2b, r25	; 43
     b02:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b04:	99 bd       	out	0x29, r25	; 41
     b06:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     b08:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     b0a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b0c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     b0e:	af 98       	cbi	0x15, 7	; 21
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <turn_left+0x4c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b12:	85 ef       	ldi	r24, 0xF5	; 245
     b14:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_backward();
	}
	while(bit_is_set(PINA,5))
     b16:	cd 99       	sbic	0x19, 5	; 25
     b18:	f3 cf       	rjmp	.-26     	; 0xb00 <turn_left+0x36>
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <turn_left+0x64>
     b1c:	9b bd       	out	0x2b, r25	; 43
     b1e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b20:	99 bd       	out	0x29, r25	; 41
     b22:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     b24:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     b26:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b28:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     b2a:	af 98       	cbi	0x15, 7	; 21
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <turn_left+0x68>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b2e:	8c ed       	ldi	r24, 0xDC	; 220
     b30:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     b32:	ce 9b       	sbis	0x19, 6	; 25
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <turn_left+0x76>
     b36:	86 99       	sbic	0x10, 6	; 16
     b38:	f1 cf       	rjmp	.-30     	; 0xb1c <turn_left+0x52>
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <turn_left+0x76>
		set_pwm1b(220);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b3c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	{
		set_pwm1a(220);
		set_pwm1b(220);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b40:	cc 9b       	sbis	0x19, 4	; 25
     b42:	fc cf       	rjmp	.-8      	; 0xb3c <turn_left+0x72>
     b44:	87 9b       	sbis	0x10, 7	; 16
     b46:	fa cf       	rjmp	.-12     	; 0xb3c <turn_left+0x72>
     b48:	8f e8       	ldi	r24, 0x8F	; 143
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	9b bd       	out	0x2b, r25	; 43
     b4e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b50:	99 bd       	out	0x29, r25	; 41
     b52:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b54:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b56:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b58:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b5a:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b5c:	82 e3       	ldi	r24, 0x32	; 50
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     b64:	08 95       	ret

00000b66 <turn_right>:
	delay_millisec(50);
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
     b66:	82 e7       	ldi	r24, 0x72	; 114
     b68:	80 93 15 01 	sts	0x0115, r24
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <turn_right+0x10>
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
	{
		line_track_new();
     b6e:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		left_count();
     b72:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_clear(PIND, 7) || bit_is_clear(PINA, 4))
     b76:	87 9b       	sbis	0x10, 7	; 16
     b78:	fa cf       	rjmp	.-12     	; 0xb6e <turn_right+0x8>
     b7a:	cc 9b       	sbis	0x19, 4	; 25
     b7c:	f8 cf       	rjmp	.-16     	; 0xb6e <turn_right+0x8>
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <turn_right+0x2c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b80:	9b bd       	out	0x2b, r25	; 43
     b82:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b84:	99 bd       	out	0x29, r25	; 41
     b86:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=1;
 MOTOR2B=0;
}
void bot_backward(void)
{
 MOTOR1A=0;
     b88:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     b8a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     b8c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b8e:	af 9a       	sbi	0x15, 7	; 21
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <turn_right+0x30>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b92:	85 ef       	ldi	r24, 0xF5	; 245
     b94:	90 e0       	ldi	r25, 0x00	; 0
	{
		line_track_new();
		left_count();
	}
	while(bit_is_set(PIND, 7) && bit_is_set(PINA, 4))
     b96:	87 9b       	sbis	0x10, 7	; 16
     b98:	0c c0       	rjmp	.+24     	; 0xbb2 <turn_right+0x4c>
     b9a:	cc 99       	sbic	0x19, 4	; 25
     b9c:	f1 cf       	rjmp	.-30     	; 0xb80 <turn_right+0x1a>
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <turn_right+0x4c>
     ba0:	9b bd       	out	0x2b, r25	; 43
     ba2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ba4:	99 bd       	out	0x29, r25	; 41
     ba6:	88 bd       	out	0x28, r24	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     ba8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     baa:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     bac:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     bae:	af 9a       	sbi	0x15, 7	; 21
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <turn_right+0x50>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bb2:	85 ef       	ldi	r24, 0xF5	; 245
     bb4:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_backward();
	}
	while(bit_is_set(PINA,7))
     bb6:	cf 99       	sbic	0x19, 7	; 25
     bb8:	f3 cf       	rjmp	.-26     	; 0xba0 <turn_right+0x3a>
     bba:	09 c0       	rjmp	.+18     	; 0xbce <turn_right+0x68>
     bbc:	9b bd       	out	0x2b, r25	; 43
     bbe:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bc0:	99 bd       	out	0x29, r25	; 41
     bc2:	88 bd       	out	0x28, r24	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     bc4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     bc6:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     bc8:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     bca:	af 9a       	sbi	0x15, 7	; 21
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <turn_right+0x6c>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     bce:	8c ed       	ldi	r24, 0xDC	; 220
     bd0:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1b(245);
		bot_spot_right();
		//left_count();
	}
	
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     bd2:	ce 9b       	sbis	0x19, 6	; 25
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <turn_right+0x7a>
     bd6:	86 99       	sbic	0x10, 6	; 16
     bd8:	f1 cf       	rjmp	.-30     	; 0xbbc <turn_right+0x56>
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <turn_right+0x7a>
		bot_spot_right();
		//left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     bdc:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		set_pwm1a(220);
		set_pwm1b(220);
		bot_spot_right();
		//left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     be0:	cc 9b       	sbis	0x19, 4	; 25
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <turn_right+0x76>
     be4:	87 9b       	sbis	0x10, 7	; 16
     be6:	fa cf       	rjmp	.-12     	; 0xbdc <turn_right+0x76>
     be8:	8f e8       	ldi	r24, 0x8F	; 143
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9b bd       	out	0x2b, r25	; 43
     bee:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     bf0:	99 bd       	out	0x29, r25	; 41
     bf2:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     bf4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     bf6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     bf8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     bfa:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     bfc:	82 e3       	ldi	r24, 0x32	; 50
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     c04:	08 95       	ret

00000c06 <sense_of_directon>:
}


void sense_of_directon(void)
{
	if(turn == 'r')	
     c06:	80 91 15 01 	lds	r24, 0x0115
     c0a:	82 37       	cpi	r24, 0x72	; 114
     c0c:	d1 f4       	brne	.+52     	; 0xc42 <sense_of_directon+0x3c>
	{
		switch(dir)
     c0e:	80 91 16 01 	lds	r24, 0x0116
     c12:	90 91 17 01 	lds	r25, 0x0117
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	8f 3f       	cpi	r24, 0xFF	; 255
     c1a:	92 07       	cpc	r25, r18
     c1c:	59 f1       	breq	.+86     	; 0xc74 <sense_of_directon+0x6e>
     c1e:	2f ef       	ldi	r18, 0xFF	; 255
     c20:	8f 3f       	cpi	r24, 0xFF	; 255
     c22:	92 07       	cpc	r25, r18
     c24:	09 f0       	breq	.+2      	; 0xc28 <sense_of_directon+0x22>
     c26:	2c f4       	brge	.+10     	; 0xc32 <sense_of_directon+0x2c>
     c28:	8e 5f       	subi	r24, 0xFE	; 254
     c2a:	9f 4f       	sbci	r25, 0xFF	; 255
     c2c:	09 f0       	breq	.+2      	; 0xc30 <sense_of_directon+0x2a>
     c2e:	51 c0       	rjmp	.+162    	; 0xcd2 <sense_of_directon+0xcc>
     c30:	3d c0       	rjmp	.+122    	; 0xcac <sense_of_directon+0xa6>
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	91 05       	cpc	r25, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <sense_of_directon+0x34>
     c38:	3f c0       	rjmp	.+126    	; 0xcb8 <sense_of_directon+0xb2>
     c3a:	02 97       	sbiw	r24, 0x02	; 2
     c3c:	09 f0       	breq	.+2      	; 0xc40 <sense_of_directon+0x3a>
     c3e:	49 c0       	rjmp	.+146    	; 0xcd2 <sense_of_directon+0xcc>
     c40:	38 c0       	rjmp	.+112    	; 0xcb2 <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     c42:	8c 36       	cpi	r24, 0x6C	; 108
     c44:	d1 f4       	brne	.+52     	; 0xc7a <sense_of_directon+0x74>
	{
		switch(dir)
     c46:	80 91 16 01 	lds	r24, 0x0116
     c4a:	90 91 17 01 	lds	r25, 0x0117
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	8f 3f       	cpi	r24, 0xFF	; 255
     c52:	92 07       	cpc	r25, r18
     c54:	89 f1       	breq	.+98     	; 0xcb8 <sense_of_directon+0xb2>
     c56:	2f ef       	ldi	r18, 0xFF	; 255
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	92 07       	cpc	r25, r18
     c5c:	09 f0       	breq	.+2      	; 0xc60 <sense_of_directon+0x5a>
     c5e:	24 f4       	brge	.+8      	; 0xc68 <sense_of_directon+0x62>
     c60:	8e 5f       	subi	r24, 0xFE	; 254
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	b1 f5       	brne	.+108    	; 0xcd2 <sense_of_directon+0xcc>
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <sense_of_directon+0xac>
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	91 05       	cpc	r25, r1
     c6c:	19 f0       	breq	.+6      	; 0xc74 <sense_of_directon+0x6e>
     c6e:	02 97       	sbiw	r24, 0x02	; 2
     c70:	81 f5       	brne	.+96     	; 0xcd2 <sense_of_directon+0xcc>
     c72:	1c c0       	rjmp	.+56     	; 0xcac <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	21 c0       	rjmp	.+66     	; 0xcbc <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     c7a:	85 37       	cpi	r24, 0x75	; 117
     c7c:	51 f5       	brne	.+84     	; 0xcd2 <sense_of_directon+0xcc>
	{
		switch(dir)
     c7e:	80 91 16 01 	lds	r24, 0x0116
     c82:	90 91 17 01 	lds	r25, 0x0117
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	8f 3f       	cpi	r24, 0xFF	; 255
     c8a:	92 07       	cpc	r25, r18
     c8c:	91 f0       	breq	.+36     	; 0xcb2 <sense_of_directon+0xac>
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	8f 3f       	cpi	r24, 0xFF	; 255
     c92:	92 07       	cpc	r25, r18
     c94:	09 f0       	breq	.+2      	; 0xc98 <sense_of_directon+0x92>
     c96:	24 f4       	brge	.+8      	; 0xca0 <sense_of_directon+0x9a>
     c98:	8e 5f       	subi	r24, 0xFE	; 254
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	d1 f4       	brne	.+52     	; 0xcd2 <sense_of_directon+0xcc>
     c9e:	13 c0       	rjmp	.+38     	; 0xcc6 <sense_of_directon+0xc0>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	91 05       	cpc	r25, r1
     ca4:	19 f0       	breq	.+6      	; 0xcac <sense_of_directon+0xa6>
     ca6:	02 97       	sbiw	r24, 0x02	; 2
     ca8:	a1 f4       	brne	.+40     	; 0xcd2 <sense_of_directon+0xcc>
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	9f ef       	ldi	r25, 0xFF	; 255
     cb0:	05 c0       	rjmp	.+10     	; 0xcbc <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     cb8:	8e ef       	ldi	r24, 0xFE	; 254
     cba:	9f ef       	ldi	r25, 0xFF	; 255
     cbc:	90 93 17 01 	sts	0x0117, r25
     cc0:	80 93 16 01 	sts	0x0116, r24
     cc4:	08 95       	ret
			case -2: dir = +2; break;	
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 17 01 	sts	0x0117, r25
     cce:	80 93 16 01 	sts	0x0116, r24
     cd2:	08 95       	ret

00000cd4 <is_coordinate_null>:
	
}

int is_coordinate_null(int x,int y)
{
	if(dir_array[x][y][0]=='F' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='F')
     cd4:	fc 01       	movw	r30, r24
     cd6:	a4 e0       	ldi	r26, 0x04	; 4
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	aa 95       	dec	r26
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <is_coordinate_null+0x4>
     ce0:	e6 0f       	add	r30, r22
     ce2:	f7 1f       	adc	r31, r23
     ce4:	df 01       	movw	r26, r30
     ce6:	aa 0f       	add	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	aa 0f       	add	r26, r26
     cec:	bb 1f       	adc	r27, r27
     cee:	a1 5c       	subi	r26, 0xC1	; 193
     cf0:	bc 4f       	sbci	r27, 0xFC	; 252
     cf2:	8c 91       	ld	r24, X
     cf4:	86 34       	cpi	r24, 0x46	; 70
     cf6:	c9 f4       	brne	.+50     	; 0xd2a <is_coordinate_null+0x56>
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	8c 91       	ld	r24, X
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	86 34       	cpi	r24, 0x46	; 70
     d00:	a1 f4       	brne	.+40     	; 0xd2a <is_coordinate_null+0x56>
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ef 5b       	subi	r30, 0xBF	; 191
     d0c:	fc 4f       	sbci	r31, 0xFC	; 252
     d0e:	80 81       	ld	r24, Z
     d10:	86 34       	cpi	r24, 0x46	; 70
     d12:	59 f4       	brne	.+22     	; 0xd2a <is_coordinate_null+0x56>
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	8c 91       	ld	r24, X
     d1a:	86 34       	cpi	r24, 0x46	; 70
     d1c:	09 f0       	breq	.+2      	; 0xd20 <is_coordinate_null+0x4c>
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	98 27       	eor	r25, r24
     d24:	29 2f       	mov	r18, r25
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <is_coordinate_null+0x5a>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     d2e:	c9 01       	movw	r24, r18
     d30:	08 95       	ret

00000d32 <update_array>:
	}
	
}

void update_array(char y,char x,char ny,char nx)
{
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	f8 2e       	mov	r15, r24
     d44:	e6 2e       	mov	r14, r22
     d46:	d4 2e       	mov	r13, r20
     d48:	c2 2e       	mov	r12, r18
	////checking if the path is already traversed before i.e(if all 4 values is zero)
	if(is_coordinate_null(x_coordinate,y_coordinate))
     d4a:	c0 91 18 01 	lds	r28, 0x0118
     d4e:	d0 91 19 01 	lds	r29, 0x0119
     d52:	00 91 1a 01 	lds	r16, 0x011A
     d56:	10 91 1b 01 	lds	r17, 0x011B
     d5a:	ce 01       	movw	r24, r28
     d5c:	b8 01       	movw	r22, r16
     d5e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     d62:	89 2b       	or	r24, r25
     d64:	09 f4       	brne	.+2      	; 0xd68 <update_array+0x36>
     d66:	7a c0       	rjmp	.+244    	; 0xe5c <update_array+0x12a>
	{	
		switch(dir)
     d68:	80 91 16 01 	lds	r24, 0x0116
     d6c:	90 91 17 01 	lds	r25, 0x0117
     d70:	2f ef       	ldi	r18, 0xFF	; 255
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	92 07       	cpc	r25, r18
     d76:	09 f4       	brne	.+2      	; 0xd7a <update_array+0x48>
     d78:	59 c0       	rjmp	.+178    	; 0xe2c <update_array+0xfa>
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	92 07       	cpc	r25, r18
     d80:	09 f0       	breq	.+2      	; 0xd84 <update_array+0x52>
     d82:	2c f4       	brge	.+10     	; 0xd8e <update_array+0x5c>
     d84:	8e 5f       	subi	r24, 0xFE	; 254
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	09 f0       	breq	.+2      	; 0xd8c <update_array+0x5a>
     d8a:	68 c0       	rjmp	.+208    	; 0xe5c <update_array+0x12a>
     d8c:	39 c0       	rjmp	.+114    	; 0xe00 <update_array+0xce>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	91 05       	cpc	r25, r1
     d92:	e1 f0       	breq	.+56     	; 0xdcc <update_array+0x9a>
     d94:	02 97       	sbiw	r24, 0x02	; 2
     d96:	09 f0       	breq	.+2      	; 0xd9a <update_array+0x68>
     d98:	61 c0       	rjmp	.+194    	; 0xe5c <update_array+0x12a>
		{
			case 2:
			dir_array[x_coordinate][y_coordinate][0] = y;
     d9a:	fe 01       	movw	r30, r28
     d9c:	b4 e0       	ldi	r27, 0x04	; 4
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	ba 95       	dec	r27
     da4:	e1 f7       	brne	.-8      	; 0xd9e <update_array+0x6c>
     da6:	e0 0f       	add	r30, r16
     da8:	f1 1f       	adc	r31, r17
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	df 01       	movw	r26, r30
     db4:	a1 5c       	subi	r26, 0xC1	; 193
     db6:	bc 4f       	sbci	r27, 0xFC	; 252
     db8:	fc 92       	st	X, r15
			dir_array[x_coordinate][y_coordinate][1] = x;
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	ec 92       	st	X, r14
     dbe:	11 97       	sbiw	r26, 0x01	; 1
			dir_array[x_coordinate][y_coordinate][2] = ny;
     dc0:	ef 5b       	subi	r30, 0xBF	; 191
     dc2:	fc 4f       	sbci	r31, 0xFC	; 252
     dc4:	d0 82       	st	Z, r13
			dir_array[x_coordinate][y_coordinate][3] = nx;
     dc6:	13 96       	adiw	r26, 0x03	; 3
     dc8:	cc 92       	st	X, r12
     dca:	48 c0       	rjmp	.+144    	; 0xe5c <update_array+0x12a>
			break;
			case 1:
			dir_array[x_coordinate][y_coordinate][1] = y;
     dcc:	fe 01       	movw	r30, r28
     dce:	64 e0       	ldi	r22, 0x04	; 4
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	6a 95       	dec	r22
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <update_array+0x9e>
     dd8:	e0 0f       	add	r30, r16
     dda:	f1 1f       	adc	r31, r17
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	df 01       	movw	r26, r30
     de6:	a1 5c       	subi	r26, 0xC1	; 193
     de8:	bc 4f       	sbci	r27, 0xFC	; 252
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	fc 92       	st	X, r15
     dee:	11 97       	sbiw	r26, 0x01	; 1
			dir_array[x_coordinate][y_coordinate][2] = x;
     df0:	ef 5b       	subi	r30, 0xBF	; 191
     df2:	fc 4f       	sbci	r31, 0xFC	; 252
     df4:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][3] = ny;
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	dc 92       	st	X, r13
     dfa:	13 97       	sbiw	r26, 0x03	; 3
			dir_array[x_coordinate][y_coordinate][0] = nx;
     dfc:	cc 92       	st	X, r12
     dfe:	2e c0       	rjmp	.+92     	; 0xe5c <update_array+0x12a>
			break;
			case -2:
			dir_array[x_coordinate][y_coordinate][2] = y;
     e00:	fe 01       	movw	r30, r28
     e02:	34 e0       	ldi	r19, 0x04	; 4
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	3a 95       	dec	r19
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <update_array+0xd2>
     e0c:	e0 0f       	add	r30, r16
     e0e:	f1 1f       	adc	r31, r17
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	df 01       	movw	r26, r30
     e1a:	af 5b       	subi	r26, 0xBF	; 191
     e1c:	bc 4f       	sbci	r27, 0xFC	; 252
     e1e:	fc 92       	st	X, r15
			dir_array[x_coordinate][y_coordinate][3] = x;
     e20:	e1 5c       	subi	r30, 0xC1	; 193
     e22:	fc 4f       	sbci	r31, 0xFC	; 252
     e24:	e3 82       	std	Z+3, r14	; 0x03
			dir_array[x_coordinate][y_coordinate][0] = ny;
     e26:	d0 82       	st	Z, r13
			dir_array[x_coordinate][y_coordinate][1] = nx;
     e28:	c1 82       	std	Z+1, r12	; 0x01
     e2a:	18 c0       	rjmp	.+48     	; 0xe5c <update_array+0x12a>
			break;
			case -1:
			dir_array[x_coordinate][y_coordinate][3] = y;
     e2c:	fe 01       	movw	r30, r28
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	8a 95       	dec	r24
     e36:	e1 f7       	brne	.-8      	; 0xe30 <update_array+0xfe>
     e38:	e0 0f       	add	r30, r16
     e3a:	f1 1f       	adc	r31, r17
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	df 01       	movw	r26, r30
     e46:	a1 5c       	subi	r26, 0xC1	; 193
     e48:	bc 4f       	sbci	r27, 0xFC	; 252
     e4a:	13 96       	adiw	r26, 0x03	; 3
     e4c:	fc 92       	st	X, r15
     e4e:	13 97       	sbiw	r26, 0x03	; 3
			dir_array[x_coordinate][y_coordinate][0] = x;
     e50:	ec 92       	st	X, r14
			dir_array[x_coordinate][y_coordinate][1] = ny;
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	dc 92       	st	X, r13
			dir_array[x_coordinate][y_coordinate][2] = nx;
     e56:	ef 5b       	subi	r30, 0xBF	; 191
     e58:	fc 4f       	sbci	r31, 0xFC	; 252
     e5a:	c0 82       	st	Z, r12
			break;
		}
	}
	
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	08 95       	ret

00000e6e <update_coordinates>:
}


void update_coordinates(void)
{	
	int value = Coordinates_changed_by;
     e6e:	80 91 2f 01 	lds	r24, 0x012F
     e72:	90 91 30 01 	lds	r25, 0x0130
	
	if(value==2)		//to store the middle point in 60cm shift i.e to make it continous
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <update_coordinates+0x10>
     e7c:	a7 c0       	rjmp	.+334    	; 0xfcc <update_coordinates+0x15e>
	{
		switch(dir)
     e7e:	80 91 16 01 	lds	r24, 0x0116
     e82:	90 91 17 01 	lds	r25, 0x0117
     e86:	2f ef       	ldi	r18, 0xFF	; 255
     e88:	8f 3f       	cpi	r24, 0xFF	; 255
     e8a:	92 07       	cpc	r25, r18
     e8c:	a1 f1       	breq	.+104    	; 0xef6 <update_coordinates+0x88>
     e8e:	2f ef       	ldi	r18, 0xFF	; 255
     e90:	8f 3f       	cpi	r24, 0xFF	; 255
     e92:	92 07       	cpc	r25, r18
     e94:	09 f0       	breq	.+2      	; 0xe98 <update_coordinates+0x2a>
     e96:	2c f4       	brge	.+10     	; 0xea2 <update_coordinates+0x34>
     e98:	8e 5f       	subi	r24, 0xFE	; 254
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	09 f0       	breq	.+2      	; 0xea0 <update_coordinates+0x32>
     e9e:	03 c1       	rjmp	.+518    	; 0x10a6 <update_coordinates+0x238>
     ea0:	71 c0       	rjmp	.+226    	; 0xf84 <update_coordinates+0x116>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <update_coordinates+0x42>
     ea8:	02 97       	sbiw	r24, 0x02	; 2
     eaa:	09 f0       	breq	.+2      	; 0xeae <update_coordinates+0x40>
     eac:	fc c0       	rjmp	.+504    	; 0x10a6 <update_coordinates+0x238>
     eae:	46 c0       	rjmp	.+140    	; 0xf3c <update_coordinates+0xce>
		{
			case +1 :	x_coordinate+=1;						
     eb0:	80 91 18 01 	lds	r24, 0x0118
     eb4:	90 91 19 01 	lds	r25, 0x0119
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	90 93 19 01 	sts	0x0119, r25
     ebe:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
     ec2:	84 e5       	ldi	r24, 0x54	; 84
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	66 e4       	ldi	r22, 0x46	; 70
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	44 e5       	ldi	r20, 0x54	; 84
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	26 e4       	ldi	r18, 0x46	; 70
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate+=1;
     ed6:	80 91 18 01 	lds	r24, 0x0118
     eda:	90 91 19 01 	lds	r25, 0x0119
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	90 93 19 01 	sts	0x0119, r25
     ee4:	80 93 18 01 	sts	0x0118, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     ee8:	60 91 1a 01 	lds	r22, 0x011A
     eec:	70 91 1b 01 	lds	r23, 0x011B
     ef0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     ef4:	c8 c0       	rjmp	.+400    	; 0x1086 <update_coordinates+0x218>
						{
							repeat = 0;
						}
						break;

			case -1 :	x_coordinate-=1;						
     ef6:	80 91 18 01 	lds	r24, 0x0118
     efa:	90 91 19 01 	lds	r25, 0x0119
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	90 93 19 01 	sts	0x0119, r25
     f04:	80 93 18 01 	sts	0x0118, r24
						update_array('T','F','T','F');
     f08:	84 e5       	ldi	r24, 0x54	; 84
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	66 e4       	ldi	r22, 0x46	; 70
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	44 e5       	ldi	r20, 0x54	; 84
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	26 e4       	ldi	r18, 0x46	; 70
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						x_coordinate-=1;
     f1c:	80 91 18 01 	lds	r24, 0x0118
     f20:	90 91 19 01 	lds	r25, 0x0119
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	90 93 19 01 	sts	0x0119, r25
     f2a:	80 93 18 01 	sts	0x0118, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     f2e:	60 91 1a 01 	lds	r22, 0x011A
     f32:	70 91 1b 01 	lds	r23, 0x011B
     f36:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     f3a:	a5 c0       	rjmp	.+330    	; 0x1086 <update_coordinates+0x218>
						{
							repeat = 0;
						}
						break;
					
			case +2 :	y_coordinate+=1;						
     f3c:	80 91 1a 01 	lds	r24, 0x011A
     f40:	90 91 1b 01 	lds	r25, 0x011B
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 1b 01 	sts	0x011B, r25
     f4a:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
     f4e:	84 e5       	ldi	r24, 0x54	; 84
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	66 e4       	ldi	r22, 0x46	; 70
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	44 e5       	ldi	r20, 0x54	; 84
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	26 e4       	ldi	r18, 0x46	; 70
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate+=1;
     f62:	60 91 1a 01 	lds	r22, 0x011A
     f66:	70 91 1b 01 	lds	r23, 0x011B
     f6a:	6f 5f       	subi	r22, 0xFF	; 255
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	70 93 1b 01 	sts	0x011B, r23
     f72:	60 93 1a 01 	sts	0x011A, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     f76:	80 91 18 01 	lds	r24, 0x0118
     f7a:	90 91 19 01 	lds	r25, 0x0119
     f7e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     f82:	81 c0       	rjmp	.+258    	; 0x1086 <update_coordinates+0x218>
							repeat = 0;
						}
						
						break;

			case -2 :	y_coordinate-=1;						
     f84:	80 91 1a 01 	lds	r24, 0x011A
     f88:	90 91 1b 01 	lds	r25, 0x011B
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	90 93 1b 01 	sts	0x011B, r25
     f92:	80 93 1a 01 	sts	0x011A, r24
						update_array('T','F','T','F');
     f96:	84 e5       	ldi	r24, 0x54	; 84
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	66 e4       	ldi	r22, 0x46	; 70
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	44 e5       	ldi	r20, 0x54	; 84
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	26 e4       	ldi	r18, 0x46	; 70
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
						y_coordinate-=1;
     faa:	60 91 1a 01 	lds	r22, 0x011A
     fae:	70 91 1b 01 	lds	r23, 0x011B
     fb2:	61 50       	subi	r22, 0x01	; 1
     fb4:	70 40       	sbci	r23, 0x00	; 0
     fb6:	70 93 1b 01 	sts	0x011B, r23
     fba:	60 93 1a 01 	sts	0x011A, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     fbe:	80 91 18 01 	lds	r24, 0x0118
     fc2:	90 91 19 01 	lds	r25, 0x0119
     fc6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
     fca:	5d c0       	rjmp	.+186    	; 0x1086 <update_coordinates+0x218>
							repeat = 0;
						}
						break;	
		}
	}
	else if(value==1)
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	09 f0       	breq	.+2      	; 0xfd2 <update_coordinates+0x164>
     fd0:	6a c0       	rjmp	.+212    	; 0x10a6 <update_coordinates+0x238>
	{
		switch(dir)
     fd2:	80 91 16 01 	lds	r24, 0x0116
     fd6:	90 91 17 01 	lds	r25, 0x0117
     fda:	2f ef       	ldi	r18, 0xFF	; 255
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	92 07       	cpc	r25, r18
     fe0:	09 f1       	breq	.+66     	; 0x1024 <update_coordinates+0x1b6>
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	92 07       	cpc	r25, r18
     fe8:	09 f0       	breq	.+2      	; 0xfec <update_coordinates+0x17e>
     fea:	2c f4       	brge	.+10     	; 0xff6 <update_coordinates+0x188>
     fec:	8e 5f       	subi	r24, 0xFE	; 254
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	09 f0       	breq	.+2      	; 0xff4 <update_coordinates+0x186>
     ff2:	59 c0       	rjmp	.+178    	; 0x10a6 <update_coordinates+0x238>
     ff4:	38 c0       	rjmp	.+112    	; 0x1066 <update_coordinates+0x1f8>
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	21 f0       	breq	.+8      	; 0x1004 <update_coordinates+0x196>
     ffc:	02 97       	sbiw	r24, 0x02	; 2
     ffe:	09 f0       	breq	.+2      	; 0x1002 <update_coordinates+0x194>
    1000:	52 c0       	rjmp	.+164    	; 0x10a6 <update_coordinates+0x238>
    1002:	20 c0       	rjmp	.+64     	; 0x1044 <update_coordinates+0x1d6>
		{
			case +1 : 
			x_coordinate+=value;
    1004:	80 91 18 01 	lds	r24, 0x0118
    1008:	90 91 19 01 	lds	r25, 0x0119
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	90 93 19 01 	sts	0x0119, r25
    1012:	80 93 18 01 	sts	0x0118, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1016:	60 91 1a 01 	lds	r22, 0x011A
    101a:	70 91 1b 01 	lds	r23, 0x011B
    101e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1022:	31 c0       	rjmp	.+98     	; 0x1086 <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case -1 : 
			x_coordinate-=value;
    1024:	80 91 18 01 	lds	r24, 0x0118
    1028:	90 91 19 01 	lds	r25, 0x0119
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	90 93 19 01 	sts	0x0119, r25
    1032:	80 93 18 01 	sts	0x0118, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1036:	60 91 1a 01 	lds	r22, 0x011A
    103a:	70 91 1b 01 	lds	r23, 0x011B
    103e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1042:	21 c0       	rjmp	.+66     	; 0x1086 <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case +2 : 
			y_coordinate+=value;
    1044:	60 91 1a 01 	lds	r22, 0x011A
    1048:	70 91 1b 01 	lds	r23, 0x011B
    104c:	6f 5f       	subi	r22, 0xFF	; 255
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	70 93 1b 01 	sts	0x011B, r23
    1054:	60 93 1a 01 	sts	0x011A, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1058:	80 91 18 01 	lds	r24, 0x0118
    105c:	90 91 19 01 	lds	r25, 0x0119
    1060:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1064:	10 c0       	rjmp	.+32     	; 0x1086 <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case -2 : 
			y_coordinate-=value; 
    1066:	60 91 1a 01 	lds	r22, 0x011A
    106a:	70 91 1b 01 	lds	r23, 0x011B
    106e:	61 50       	subi	r22, 0x01	; 1
    1070:	70 40       	sbci	r23, 0x00	; 0
    1072:	70 93 1b 01 	sts	0x011B, r23
    1076:	60 93 1a 01 	sts	0x011A, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    107a:	80 91 18 01 	lds	r24, 0x0118
    107e:	90 91 19 01 	lds	r25, 0x0119
    1082:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1086:	89 2b       	or	r24, r25
    1088:	51 f4       	brne	.+20     	; 0x109e <update_coordinates+0x230>
			{
				repeat++;
    108a:	80 91 37 01 	lds	r24, 0x0137
    108e:	90 91 38 01 	lds	r25, 0x0138
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	90 93 38 01 	sts	0x0138, r25
    1098:	80 93 37 01 	sts	0x0137, r24
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <update_coordinates+0x238>
			}
			else
			{
				repeat = 0;
    109e:	10 92 38 01 	sts	0x0138, r1
    10a2:	10 92 37 01 	sts	0x0137, r1
			}
			break;
		}
	}
	lcd_clear();
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(4,0,x_coordinate,2);
    10ae:	40 91 18 01 	lds	r20, 0x0118
    10b2:	50 91 19 01 	lds	r21, 0x0119
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	22 e0       	ldi	r18, 0x02	; 2
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(8,0,y_coordinate,2);
    10c6:	40 91 1a 01 	lds	r20, 0x011A
    10ca:	50 91 1b 01 	lds	r21, 0x011B
    10ce:	88 e0       	ldi	r24, 0x08	; 8
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	22 e0       	ldi	r18, 0x02	; 2
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	Coordinates_changed_by = 0;
    10de:	10 92 30 01 	sts	0x0130, r1
    10e2:	10 92 2f 01 	sts	0x012F, r1
}
    10e6:	08 95       	ret

000010e8 <left_junc_check>:
		set_pwm1b(opt);
	}
		delay_microsec(10);
}
void left_junc_check()                                 
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29

	if(bit_is_clear(PINA,5))
    10ec:	cd 99       	sbic	0x19, 5	; 25
    10ee:	2a c0       	rjmp	.+84     	; 0x1144 <left_junc_check+0x5c>
	{
		flag1 = 1;
    10f0:	c1 e0       	ldi	r28, 0x01	; 1
    10f2:	d0 e0       	ldi	r29, 0x00	; 0
    10f4:	d0 93 2a 01 	sts	0x012A, r29
    10f8:	c0 93 29 01 	sts	0x0129, r28
		//bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		if(irc>2000)
    10fc:	80 91 2b 01 	lds	r24, 0x012B
    1100:	90 91 2c 01 	lds	r25, 0x012C
    1104:	81 5d       	subi	r24, 0xD1	; 209
    1106:	97 40       	sbci	r25, 0x07	; 7
    1108:	5c f0       	brlt	.+22     	; 0x1120 <left_junc_check+0x38>
		{	
			lcd_clear();
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("sixty");
			Coordinates_changed_by = 2;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	90 93 30 01 	sts	0x0130, r25
    111a:	80 93 2f 01 	sts	0x012F, r24
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <left_junc_check+0x48>
		}
		else
		{
			lcd_clear();
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
    1128:	d0 93 30 01 	sts	0x0130, r29
    112c:	c0 93 2f 01 	sts	0x012F, r28
		}
		if(irc==0)
    1130:	80 91 2b 01 	lds	r24, 0x012B
    1134:	90 91 2c 01 	lds	r25, 0x012C
    1138:	89 2b       	or	r24, r25
    113a:	21 f4       	brne	.+8      	; 0x1144 <left_junc_check+0x5c>
		{
			Coordinates_changed_by = 0;
    113c:	10 92 30 01 	sts	0x0130, r1
    1140:	10 92 2f 01 	sts	0x012F, r1
		}				
	}
	if((bit_is_clear(PINA,6) || bit_is_clear(PIND,6)) && (bit_is_clear(PINA,4) || special_flag == 1))
    1144:	ce 9b       	sbis	0x19, 6	; 25
    1146:	02 c0       	rjmp	.+4      	; 0x114c <left_junc_check+0x64>
    1148:	86 99       	sbic	0x10, 6	; 16
    114a:	19 c0       	rjmp	.+50     	; 0x117e <left_junc_check+0x96>
    114c:	cc 9b       	sbis	0x19, 4	; 25
    114e:	06 c0       	rjmp	.+12     	; 0x115c <left_junc_check+0x74>
    1150:	80 91 35 01 	lds	r24, 0x0135
    1154:	90 91 36 01 	lds	r25, 0x0136
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	89 f4       	brne	.+34     	; 0x117e <left_junc_check+0x96>
	{
		//bot_brake();
		update_coordinates();
    115c:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
		//delay_sec(2);
		//lcd_clear();
		update_array('T','F','T','T');			
    1160:	84 e5       	ldi	r24, 0x54	; 84
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	66 e4       	ldi	r22, 0x46	; 70
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	44 e5       	ldi	r20, 0x54	; 84
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	24 e5       	ldi	r18, 0x54	; 84
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
		// lcd_write_string("-| detected");
		//delay_millisec(500);
		irc = 0;
    1174:	10 92 2c 01 	sts	0x012C, r1
    1178:	10 92 2b 01 	sts	0x012B, r1
    117c:	32 c0       	rjmp	.+100    	; 0x11e2 <left_junc_check+0xfa>
		special_flag = 0;       ///one time use
	}
	
	else if((bit_is_clear(PINA,4) || special_flag==1) && bit_is_set(PINA,6) && bit_is_set(PIND,6))
    117e:	cc 9b       	sbis	0x19, 4	; 25
    1180:	06 c0       	rjmp	.+12     	; 0x118e <left_junc_check+0xa6>
    1182:	80 91 35 01 	lds	r24, 0x0135
    1186:	90 91 36 01 	lds	r25, 0x0136
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	71 f5       	brne	.+92     	; 0x11ea <left_junc_check+0x102>
    118e:	ce 9b       	sbis	0x19, 6	; 25
    1190:	2c c0       	rjmp	.+88     	; 0x11ea <left_junc_check+0x102>
    1192:	86 9b       	sbis	0x10, 6	; 16
    1194:	2a c0       	rjmp	.+84     	; 0x11ea <left_junc_check+0x102>
	{
		// lcd_clear();
		// bot_brake();
		// lcd_write_string("L detected");
		update_coordinates();
    1196:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
		//delay_sec(2);
		irc = 0;
    119a:	10 92 2c 01 	sts	0x012C, r1
    119e:	10 92 2b 01 	sts	0x012B, r1
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    11a2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    11a4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    11a6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    11a8:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		if(repeat<=2)
    11aa:	80 91 37 01 	lds	r24, 0x0137
    11ae:	90 91 38 01 	lds	r25, 0x0138
    11b2:	03 97       	sbiw	r24, 0x03	; 3
    11b4:	d4 f4       	brge	.+52     	; 0x11ea <left_junc_check+0x102>
		{
			turn_left();						
    11b6:	0e 94 65 05 	call	0xaca	; 0xaca <turn_left>

			update_array('F','F','T','T');
    11ba:	86 e4       	ldi	r24, 0x46	; 70
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	66 e4       	ldi	r22, 0x46	; 70
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	44 e5       	ldi	r20, 0x54	; 84
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	24 e5       	ldi	r18, 0x54	; 84
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    11ce:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    11d0:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    11d2:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    11d4:	af 9a       	sbi	0x15, 7	; 21
			bot_brake();
			sense_of_directon();
    11d6:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
			// lcd_clear();
			// lcd_write_int_xy(0,0,dir,3);
			// delay_millisec(2000);
			flag1 = 0;
    11da:	10 92 2a 01 	sts	0x012A, r1
    11de:	10 92 29 01 	sts	0x0129, r1
			special_flag = 0;
    11e2:	10 92 36 01 	sts	0x0136, r1
    11e6:	10 92 35 01 	sts	0x0135, r1
		}
	}

	//special_case_check();       ///////////
	
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <frSensorCheck>:
	
}

void frSensorCheck()
{
	if(bit_is_set(PINA,6) && bit_is_set(PIND,6))
    11f0:	ce 9b       	sbis	0x19, 6	; 25
    11f2:	1a c0       	rjmp	.+52     	; 0x1228 <frSensorCheck+0x38>
    11f4:	86 9b       	sbis	0x10, 6	; 16
    11f6:	18 c0       	rjmp	.+48     	; 0x1228 <frSensorCheck+0x38>
		////just confirming if its really a dead end or the bot has simply just wobbled
		
			
		//lcd_clear();
		// lcd_write_string("Uturn Detected");
		if(irc>2000)
    11f8:	80 91 2b 01 	lds	r24, 0x012B
    11fc:	90 91 2c 01 	lds	r25, 0x012C
    1200:	20 91 2f 01 	lds	r18, 0x012F
    1204:	30 91 30 01 	lds	r19, 0x0130
    1208:	81 5d       	subi	r24, 0xD1	; 209
    120a:	97 40       	sbci	r25, 0x07	; 7
    120c:	2c f0       	brlt	.+10     	; 0x1218 <frSensorCheck+0x28>
		{
			// lcd_write_string("Sixty");
			if(Coordinates_changed_by ==0)
    120e:	23 2b       	or	r18, r19
    1210:	59 f4       	brne	.+22     	; 0x1228 <frSensorCheck+0x38>
			{
				Coordinates_changed_by = 2;
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <frSensorCheck+0x30>
			}
		}
		else
		{
			// lcd_write_string("Thirty");
			if(Coordinates_changed_by ==0)
    1218:	23 2b       	or	r18, r19
    121a:	31 f4       	brne	.+12     	; 0x1228 <frSensorCheck+0x38>
			{
				Coordinates_changed_by = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 30 01 	sts	0x0130, r25
    1224:	80 93 2f 01 	sts	0x012F, r24
		
			
		
	}
	
	if(sensorbyte==0b0000 && bit_is_set(PINA,4) && bit_is_set(PINA,5) && bit_is_set(PINA,6) && bit_is_set(PINA,7) && bit_is_set(PIND, 6) && bit_is_set(PIND, 7))
    1228:	80 91 1c 01 	lds	r24, 0x011C
    122c:	88 23       	and	r24, r24
    122e:	41 f5       	brne	.+80     	; 0x1280 <frSensorCheck+0x90>
    1230:	cc 9b       	sbis	0x19, 4	; 25
    1232:	26 c0       	rjmp	.+76     	; 0x1280 <frSensorCheck+0x90>
    1234:	cd 9b       	sbis	0x19, 5	; 25
    1236:	24 c0       	rjmp	.+72     	; 0x1280 <frSensorCheck+0x90>
    1238:	ce 9b       	sbis	0x19, 6	; 25
    123a:	22 c0       	rjmp	.+68     	; 0x1280 <frSensorCheck+0x90>
    123c:	cf 9b       	sbis	0x19, 7	; 25
    123e:	20 c0       	rjmp	.+64     	; 0x1280 <frSensorCheck+0x90>
    1240:	86 9b       	sbis	0x10, 6	; 16
    1242:	1e c0       	rjmp	.+60     	; 0x1280 <frSensorCheck+0x90>
    1244:	87 9b       	sbis	0x10, 7	; 16
    1246:	1c c0       	rjmp	.+56     	; 0x1280 <frSensorCheck+0x90>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1248:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    124a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    124c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    124e:	af 9a       	sbi	0x15, 7	; 21
	{
		//lcd_clear();
		//lcd_write_string("Uturn");
		bot_brake();
		update_coordinates();
    1250:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
		update_array('F','F','T','F');
    1254:	86 e4       	ldi	r24, 0x46	; 70
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	66 e4       	ldi	r22, 0x46	; 70
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	44 e5       	ldi	r20, 0x54	; 84
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	26 e4       	ldi	r18, 0x46	; 70
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
		//delay_sec(2);

		Uturn();
    1268:	0e 94 67 04 	call	0x8ce	; 0x8ce <Uturn>
		//bot_brake();
		sense_of_directon();
    126c:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_sec(2);
		flag1 = 0;
    1270:	10 92 2a 01 	sts	0x012A, r1
    1274:	10 92 29 01 	sts	0x0129, r1
		irc = 0;
    1278:	10 92 2c 01 	sts	0x012C, r1
    127c:	10 92 2b 01 	sts	0x012B, r1
    1280:	08 95       	ret

00001282 <fill_missed_array>:
		return 0;
	}
}

void fill_missed_array()
{
    1282:	6f 92       	push	r6
    1284:	7f 92       	push	r7
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	e8 2e       	mov	r14, r24
    12a0:	f1 2c       	mov	r15, r1
					{
						dir_array[i][j][2] = 'T';
					}
					else
					{
						dir_array[i][j][2] = 'F';
    12a2:	06 e4       	ldi	r16, 0x46	; 70
    12a4:	b0 2e       	mov	r11, r16
    12a6:	65 c0       	rjmp	.+202    	; 0x1372 <fill_missed_array+0xf0>
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
	{
		for(int j = 1 ; j<15 ; j++)
		{
			if(is_coordinate_null(i,j))
    12a8:	c7 01       	movw	r24, r14
    12aa:	b8 01       	movw	r22, r16
    12ac:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    12b0:	89 2b       	or	r24, r25
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <fill_missed_array+0x34>
    12b4:	4c c0       	rjmp	.+152    	; 0x134e <fill_missed_array+0xcc>
			{
				hx = i+1;
				hy = j+1;
				lx = i-1;
				ly = j-1;
				lcd_clear();
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    12be:	c3 01       	movw	r24, r6
    12c0:	b8 01       	movw	r22, r16
    12c2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    12c6:	89 2b       	or	r24, r25
    12c8:	09 f0       	breq	.+2      	; 0x12cc <fill_missed_array+0x4a>
    12ca:	41 c0       	rjmp	.+130    	; 0x134e <fill_missed_array+0xcc>
    12cc:	c4 01       	movw	r24, r8
    12ce:	b8 01       	movw	r22, r16
    12d0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    12d4:	89 2b       	or	r24, r25
    12d6:	d9 f5       	brne	.+118    	; 0x134e <fill_missed_array+0xcc>
    12d8:	b8 01       	movw	r22, r16
    12da:	61 50       	subi	r22, 0x01	; 1
    12dc:	70 40       	sbci	r23, 0x00	; 0
    12de:	c7 01       	movw	r24, r14
    12e0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    12e4:	89 2b       	or	r24, r25
    12e6:	99 f5       	brne	.+102    	; 0x134e <fill_missed_array+0xcc>
    12e8:	b8 01       	movw	r22, r16
    12ea:	6f 5f       	subi	r22, 0xFF	; 255
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	c7 01       	movw	r24, r14
    12f0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    12f4:	89 2b       	or	r24, r25
    12f6:	59 f5       	brne	.+86     	; 0x134e <fill_missed_array+0xcc>
				{
					lcd_clear();
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Filliable");
    1300:	80 e6       	ldi	r24, 0x60	; 96
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_millisec(2000);
    1308:	80 ed       	ldi	r24, 0xD0	; 208
    130a:	97 e0       	ldi	r25, 0x07	; 7
    130c:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
					if(dir_array[hx][j][3]=='T')
    1310:	cd 5b       	subi	r28, 0xBD	; 189
    1312:	df 4f       	sbci	r29, 0xFF	; 255
    1314:	88 81       	ld	r24, Y
    1316:	c3 54       	subi	r28, 0x43	; 67
    1318:	d0 40       	sbci	r29, 0x00	; 0
    131a:	84 35       	cpi	r24, 0x54	; 84
    131c:	11 f4       	brne	.+4      	; 0x1322 <fill_missed_array+0xa0>
					{
						dir_array[i][j][1] = 'T';
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <fill_missed_array+0xa2>
					}
					else
					{
						dir_array[i][j][1] = 'F';
    1322:	b9 82       	std	Y+1, r11	; 0x01
					}
					if(dir_array[lx][j][1]=='T')
    1324:	ef 97       	sbiw	r28, 0x3f	; 63
    1326:	88 81       	ld	r24, Y
    1328:	ef 96       	adiw	r28, 0x3f	; 63
    132a:	84 35       	cpi	r24, 0x54	; 84
    132c:	11 f4       	brne	.+4      	; 0x1332 <fill_missed_array+0xb0>
					{
						dir_array[i][j][3] = 'T';
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <fill_missed_array+0xb2>
					}
					else
					{
						dir_array[i][j][3] = 'F';
    1332:	bb 82       	std	Y+3, r11	; 0x03
					}
					if(dir_array[i][hy][2]=='T')
    1334:	8e 81       	ldd	r24, Y+6	; 0x06
    1336:	84 35       	cpi	r24, 0x54	; 84
    1338:	11 f4       	brne	.+4      	; 0x133e <fill_missed_array+0xbc>
					{
						dir_array[i][j][0] = 'T';
    133a:	88 83       	st	Y, r24
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <fill_missed_array+0xbe>
					}
					else
					{
						dir_array[i][j][0] ='F';
    133e:	b8 82       	st	Y, r11
					}
					if(dir_array[i][j][ly]=='T')
    1340:	f6 01       	movw	r30, r12
    1342:	80 81       	ld	r24, Z
    1344:	84 35       	cpi	r24, 0x54	; 84
    1346:	11 f4       	brne	.+4      	; 0x134c <fill_missed_array+0xca>
					{
						dir_array[i][j][2] = 'T';
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	01 c0       	rjmp	.+2      	; 0x134e <fill_missed_array+0xcc>
					}
					else
					{
						dir_array[i][j][2] = 'F';
    134c:	ba 82       	std	Y+2, r11	; 0x02
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
	{
		for(int j = 1 ; j<15 ; j++)
    134e:	0f 5f       	subi	r16, 0xFF	; 255
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	85 e0       	ldi	r24, 0x05	; 5
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	c8 0e       	add	r12, r24
    1358:	d9 1e       	adc	r13, r25
    135a:	24 96       	adiw	r28, 0x04	; 4
    135c:	0f 30       	cpi	r16, 0x0F	; 15
    135e:	11 05       	cpc	r17, r1
    1360:	09 f0       	breq	.+2      	; 0x1364 <fill_missed_array+0xe2>
    1362:	a2 cf       	rjmp	.-188    	; 0x12a8 <fill_missed_array+0x26>
}

void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
    1364:	08 94       	sec
    1366:	e1 1c       	adc	r14, r1
    1368:	f1 1c       	adc	r15, r1
    136a:	9f e0       	ldi	r25, 0x0F	; 15
    136c:	e9 16       	cp	r14, r25
    136e:	f1 04       	cpc	r15, r1
    1370:	b1 f0       	breq	.+44     	; 0x139e <fill_missed_array+0x11c>
    1372:	67 01       	movw	r12, r14
    1374:	16 e0       	ldi	r17, 0x06	; 6
    1376:	cc 0c       	add	r12, r12
    1378:	dd 1c       	adc	r13, r13
    137a:	1a 95       	dec	r17
    137c:	e1 f7       	brne	.-8      	; 0x1376 <fill_missed_array+0xf4>
    137e:	e3 e4       	ldi	r30, 0x43	; 67
    1380:	f3 e0       	ldi	r31, 0x03	; 3
    1382:	ce 0e       	add	r12, r30
    1384:	df 1e       	adc	r13, r31
    1386:	e6 01       	movw	r28, r12
    1388:	01 e0       	ldi	r16, 0x01	; 1
    138a:	10 e0       	ldi	r17, 0x00	; 0
				lcd_clear();
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    138c:	37 01       	movw	r6, r14
    138e:	08 94       	sec
    1390:	61 1c       	adc	r6, r1
    1392:	71 1c       	adc	r7, r1
    1394:	47 01       	movw	r8, r14
    1396:	08 94       	sec
    1398:	81 08       	sbc	r8, r1
    139a:	91 08       	sbc	r9, r1
    139c:	85 cf       	rjmp	.-246    	; 0x12a8 <fill_missed_array+0x26>
					}
				}
			}
		}
	}
}
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	9f 90       	pop	r9
    13b2:	8f 90       	pop	r8
    13b4:	7f 90       	pop	r7
    13b6:	6f 90       	pop	r6
    13b8:	08 95       	ret

000013ba <coordinates_tobe_reached>:

void coordinates_tobe_reached()
{
    13ba:	2f 92       	push	r2
    13bc:	3f 92       	push	r3
    13be:	4f 92       	push	r4
    13c0:	5f 92       	push	r5
    13c2:	6f 92       	push	r6
    13c4:	7f 92       	push	r7
    13c6:	8f 92       	push	r8
    13c8:	9f 92       	push	r9
    13ca:	af 92       	push	r10
    13cc:	bf 92       	push	r11
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	68 97       	sbiw	r28, 0x18	; 24
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
	int stop=0, t1, t2;
	mx = 0;
    13ee:	10 92 32 01 	sts	0x0132, r1
    13f2:	10 92 31 01 	sts	0x0131, r1
	my = 0;
    13f6:	10 92 34 01 	sts	0x0134, r1
    13fa:	10 92 33 01 	sts	0x0133, r1
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    13fe:	80 90 18 01 	lds	r8, 0x0118
    1402:	90 90 19 01 	lds	r9, 0x0119
    1406:	a0 90 1a 01 	lds	r10, 0x011A
    140a:	b0 90 1b 01 	lds	r11, 0x011B
    140e:	cc 24       	eor	r12, r12
    1410:	dd 24       	eor	r13, r13
    1412:	c8 18       	sub	r12, r8
    1414:	d9 08       	sbc	r13, r9
    1416:	de 82       	std	Y+6, r13	; 0x06
    1418:	cd 82       	std	Y+5, r12	; 0x05
    141a:	dc 82       	std	Y+4, r13	; 0x04
    141c:	cb 82       	std	Y+3, r12	; 0x03
    141e:	da 82       	std	Y+2, r13	; 0x02
    1420:	c9 82       	std	Y+1, r12	; 0x01
    1422:	00 e0       	ldi	r16, 0x00	; 0
    1424:	10 e0       	ldi	r17, 0x00	; 0
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1426:	22 27       	eor	r18, r18
    1428:	33 27       	eor	r19, r19
    142a:	2a 19       	sub	r18, r10
    142c:	3b 09       	sbc	r19, r11
    142e:	3e 8b       	std	Y+22, r19	; 0x16
    1430:	2d 8b       	std	Y+21, r18	; 0x15
    1432:	90 c1       	rjmp	.+800    	; 0x1754 <coordinates_tobe_reached+0x39a>
	my = 0;
	for(int i = 0 ; i<16 ; i++)
	{
		for(int j = 0 ; j<16 ; j++)
		{
			if(!(is_coordinate_null(i,j)))
    1434:	c8 01       	movw	r24, r16
    1436:	6f 89       	ldd	r22, Y+23	; 0x17
    1438:	78 8d       	ldd	r23, Y+24	; 0x18
    143a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    143e:	89 2b       	or	r24, r25
    1440:	09 f0       	breq	.+2      	; 0x1444 <coordinates_tobe_reached+0x8a>
    1442:	55 c1       	rjmp	.+682    	; 0x16ee <coordinates_tobe_reached+0x334>
			{
				if(dir_array[i][j][0]=='T')
    1444:	f7 01       	movw	r30, r14
    1446:	80 81       	ld	r24, Z
    1448:	84 35       	cpi	r24, 0x54	; 84
    144a:	09 f0       	breq	.+2      	; 0x144e <coordinates_tobe_reached+0x94>
    144c:	4a c0       	rjmp	.+148    	; 0x14e2 <coordinates_tobe_reached+0x128>
				{
					if(is_coordinate_null(i,j+1))
    144e:	6f 89       	ldd	r22, Y+23	; 0x17
    1450:	78 8d       	ldd	r23, Y+24	; 0x18
    1452:	6f 5f       	subi	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	c8 01       	movw	r24, r16
    1458:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    145c:	89 2b       	or	r24, r25
    145e:	09 f4       	brne	.+2      	; 0x1462 <coordinates_tobe_reached+0xa8>
    1460:	40 c0       	rjmp	.+128    	; 0x14e2 <coordinates_tobe_reached+0x128>
					{
						if(mx==0 && my==0)
    1462:	60 91 31 01 	lds	r22, 0x0131
    1466:	70 91 32 01 	lds	r23, 0x0132
    146a:	61 15       	cp	r22, r1
    146c:	71 05       	cpc	r23, r1
    146e:	31 f4       	brne	.+12     	; 0x147c <coordinates_tobe_reached+0xc2>
    1470:	80 91 33 01 	lds	r24, 0x0133
    1474:	90 91 34 01 	lds	r25, 0x0134
    1478:	89 2b       	or	r24, r25
    147a:	49 f1       	breq	.+82     	; 0x14ce <coordinates_tobe_reached+0x114>
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    147c:	68 19       	sub	r22, r8
    147e:	79 09       	sbc	r23, r9
    1480:	80 91 33 01 	lds	r24, 0x0133
    1484:	90 91 34 01 	lds	r25, 0x0134
    1488:	8a 19       	sub	r24, r10
    148a:	9b 09       	sbc	r25, r11
							if(t1<t2)
    148c:	ed 85       	ldd	r30, Y+13	; 0x0d
    148e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1490:	ee 9f       	mul	r30, r30
    1492:	a0 01       	movw	r20, r0
    1494:	ef 9f       	mul	r30, r31
    1496:	50 0d       	add	r21, r0
    1498:	fe 9f       	mul	r31, r30
    149a:	50 0d       	add	r21, r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 85       	ldd	r18, Y+15	; 0x0f
    14a0:	38 89       	ldd	r19, Y+16	; 0x10
    14a2:	42 0f       	add	r20, r18
    14a4:	53 1f       	adc	r21, r19
    14a6:	fc 01       	movw	r30, r24
    14a8:	ee 9f       	mul	r30, r30
    14aa:	c0 01       	movw	r24, r0
    14ac:	ef 9f       	mul	r30, r31
    14ae:	90 0d       	add	r25, r0
    14b0:	fe 9f       	mul	r31, r30
    14b2:	90 0d       	add	r25, r0
    14b4:	11 24       	eor	r1, r1
    14b6:	66 9f       	mul	r22, r22
    14b8:	90 01       	movw	r18, r0
    14ba:	67 9f       	mul	r22, r23
    14bc:	30 0d       	add	r19, r0
    14be:	76 9f       	mul	r23, r22
    14c0:	30 0d       	add	r19, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	48 17       	cp	r20, r24
    14ca:	59 07       	cpc	r21, r25
    14cc:	54 f4       	brge	.+20     	; 0x14e2 <coordinates_tobe_reached+0x128>
							{
								mx = i;
    14ce:	10 93 32 01 	sts	0x0132, r17
    14d2:	00 93 31 01 	sts	0x0131, r16
								my = j;
    14d6:	2f 89       	ldd	r18, Y+23	; 0x17
    14d8:	38 8d       	ldd	r19, Y+24	; 0x18
    14da:	30 93 34 01 	sts	0x0134, r19
    14de:	20 93 33 01 	sts	0x0133, r18
							}
						}
					}
				}
				if(dir_array[i][j][1]=='T')
    14e2:	f7 01       	movw	r30, r14
    14e4:	81 81       	ldd	r24, Z+1	; 0x01
    14e6:	84 35       	cpi	r24, 0x54	; 84
    14e8:	09 f0       	breq	.+2      	; 0x14ec <coordinates_tobe_reached+0x132>
    14ea:	52 c0       	rjmp	.+164    	; 0x1590 <coordinates_tobe_reached+0x1d6>
				{
					if(is_coordinate_null(i+1,j))
    14ec:	8b 89       	ldd	r24, Y+19	; 0x13
    14ee:	9c 89       	ldd	r25, Y+20	; 0x14
    14f0:	6f 89       	ldd	r22, Y+23	; 0x17
    14f2:	78 8d       	ldd	r23, Y+24	; 0x18
    14f4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    14f8:	89 2b       	or	r24, r25
    14fa:	09 f4       	brne	.+2      	; 0x14fe <coordinates_tobe_reached+0x144>
    14fc:	49 c0       	rjmp	.+146    	; 0x1590 <coordinates_tobe_reached+0x1d6>
					{
						if(mx==0 && my==0)
    14fe:	60 91 31 01 	lds	r22, 0x0131
    1502:	70 91 32 01 	lds	r23, 0x0132
    1506:	61 15       	cp	r22, r1
    1508:	71 05       	cpc	r23, r1
    150a:	89 f4       	brne	.+34     	; 0x152e <coordinates_tobe_reached+0x174>
    150c:	80 91 33 01 	lds	r24, 0x0133
    1510:	90 91 34 01 	lds	r25, 0x0134
    1514:	89 2b       	or	r24, r25
    1516:	59 f4       	brne	.+22     	; 0x152e <coordinates_tobe_reached+0x174>
						{
							mx = i;
    1518:	10 93 32 01 	sts	0x0132, r17
    151c:	00 93 31 01 	sts	0x0131, r16
							my = j;
    1520:	2f 89       	ldd	r18, Y+23	; 0x17
    1522:	38 8d       	ldd	r19, Y+24	; 0x18
    1524:	30 93 34 01 	sts	0x0134, r19
    1528:	20 93 33 01 	sts	0x0133, r18
    152c:	31 c0       	rjmp	.+98     	; 0x1590 <coordinates_tobe_reached+0x1d6>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    152e:	68 19       	sub	r22, r8
    1530:	79 09       	sbc	r23, r9
    1532:	80 91 33 01 	lds	r24, 0x0133
    1536:	90 91 34 01 	lds	r25, 0x0134
    153a:	8a 19       	sub	r24, r10
    153c:	9b 09       	sbc	r25, r11
							
							if(t1<t2)
    153e:	66 9c       	mul	r6, r6
    1540:	a0 01       	movw	r20, r0
    1542:	67 9c       	mul	r6, r7
    1544:	50 0d       	add	r21, r0
    1546:	76 9c       	mul	r7, r6
    1548:	50 0d       	add	r21, r0
    154a:	11 24       	eor	r1, r1
    154c:	eb 85       	ldd	r30, Y+11	; 0x0b
    154e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1550:	4e 0f       	add	r20, r30
    1552:	5f 1f       	adc	r21, r31
    1554:	9c 01       	movw	r18, r24
    1556:	22 9f       	mul	r18, r18
    1558:	c0 01       	movw	r24, r0
    155a:	23 9f       	mul	r18, r19
    155c:	90 0d       	add	r25, r0
    155e:	32 9f       	mul	r19, r18
    1560:	90 0d       	add	r25, r0
    1562:	11 24       	eor	r1, r1
    1564:	66 9f       	mul	r22, r22
    1566:	90 01       	movw	r18, r0
    1568:	67 9f       	mul	r22, r23
    156a:	30 0d       	add	r19, r0
    156c:	76 9f       	mul	r23, r22
    156e:	30 0d       	add	r19, r0
    1570:	11 24       	eor	r1, r1
    1572:	82 0f       	add	r24, r18
    1574:	93 1f       	adc	r25, r19
    1576:	48 17       	cp	r20, r24
    1578:	59 07       	cpc	r21, r25
    157a:	54 f4       	brge	.+20     	; 0x1590 <coordinates_tobe_reached+0x1d6>
							{
								mx = i;
    157c:	10 93 32 01 	sts	0x0132, r17
    1580:	00 93 31 01 	sts	0x0131, r16
								my = j;
    1584:	8f 89       	ldd	r24, Y+23	; 0x17
    1586:	98 8d       	ldd	r25, Y+24	; 0x18
    1588:	90 93 34 01 	sts	0x0134, r25
    158c:	80 93 33 01 	sts	0x0133, r24
							}
						}
					}
				}
				if(dir_array[i][j][2]=='T')
    1590:	f7 01       	movw	r30, r14
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	84 35       	cpi	r24, 0x54	; 84
    1596:	09 f0       	breq	.+2      	; 0x159a <coordinates_tobe_reached+0x1e0>
    1598:	53 c0       	rjmp	.+166    	; 0x1640 <coordinates_tobe_reached+0x286>
				{
					if(is_coordinate_null(i,j-1))
    159a:	6f 89       	ldd	r22, Y+23	; 0x17
    159c:	78 8d       	ldd	r23, Y+24	; 0x18
    159e:	61 50       	subi	r22, 0x01	; 1
    15a0:	70 40       	sbci	r23, 0x00	; 0
    15a2:	c8 01       	movw	r24, r16
    15a4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f4       	brne	.+2      	; 0x15ae <coordinates_tobe_reached+0x1f4>
    15ac:	49 c0       	rjmp	.+146    	; 0x1640 <coordinates_tobe_reached+0x286>
					{
						if(mx==0 && my==0)
    15ae:	60 91 31 01 	lds	r22, 0x0131
    15b2:	70 91 32 01 	lds	r23, 0x0132
    15b6:	61 15       	cp	r22, r1
    15b8:	71 05       	cpc	r23, r1
    15ba:	89 f4       	brne	.+34     	; 0x15de <coordinates_tobe_reached+0x224>
    15bc:	80 91 33 01 	lds	r24, 0x0133
    15c0:	90 91 34 01 	lds	r25, 0x0134
    15c4:	89 2b       	or	r24, r25
    15c6:	59 f4       	brne	.+22     	; 0x15de <coordinates_tobe_reached+0x224>
						{
							mx = i;
    15c8:	10 93 32 01 	sts	0x0132, r17
    15cc:	00 93 31 01 	sts	0x0131, r16
							my = j;
    15d0:	2f 89       	ldd	r18, Y+23	; 0x17
    15d2:	38 8d       	ldd	r19, Y+24	; 0x18
    15d4:	30 93 34 01 	sts	0x0134, r19
    15d8:	20 93 33 01 	sts	0x0133, r18
    15dc:	31 c0       	rjmp	.+98     	; 0x1640 <coordinates_tobe_reached+0x286>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    15de:	68 19       	sub	r22, r8
    15e0:	79 09       	sbc	r23, r9
    15e2:	80 91 33 01 	lds	r24, 0x0133
    15e6:	90 91 34 01 	lds	r25, 0x0134
    15ea:	8a 19       	sub	r24, r10
    15ec:	9b 09       	sbc	r25, r11
							if(t1<t2)
    15ee:	44 9c       	mul	r4, r4
    15f0:	a0 01       	movw	r20, r0
    15f2:	45 9c       	mul	r4, r5
    15f4:	50 0d       	add	r21, r0
    15f6:	54 9c       	mul	r5, r4
    15f8:	50 0d       	add	r21, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	e9 85       	ldd	r30, Y+9	; 0x09
    15fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    1600:	4e 0f       	add	r20, r30
    1602:	5f 1f       	adc	r21, r31
    1604:	9c 01       	movw	r18, r24
    1606:	22 9f       	mul	r18, r18
    1608:	c0 01       	movw	r24, r0
    160a:	23 9f       	mul	r18, r19
    160c:	90 0d       	add	r25, r0
    160e:	32 9f       	mul	r19, r18
    1610:	90 0d       	add	r25, r0
    1612:	11 24       	eor	r1, r1
    1614:	66 9f       	mul	r22, r22
    1616:	90 01       	movw	r18, r0
    1618:	67 9f       	mul	r22, r23
    161a:	30 0d       	add	r19, r0
    161c:	76 9f       	mul	r23, r22
    161e:	30 0d       	add	r19, r0
    1620:	11 24       	eor	r1, r1
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	48 17       	cp	r20, r24
    1628:	59 07       	cpc	r21, r25
    162a:	54 f4       	brge	.+20     	; 0x1640 <coordinates_tobe_reached+0x286>
							{
								mx = i;
    162c:	10 93 32 01 	sts	0x0132, r17
    1630:	00 93 31 01 	sts	0x0131, r16
								my = j;
    1634:	8f 89       	ldd	r24, Y+23	; 0x17
    1636:	98 8d       	ldd	r25, Y+24	; 0x18
    1638:	90 93 34 01 	sts	0x0134, r25
    163c:	80 93 33 01 	sts	0x0133, r24
							}
						}
					}
				}
				if(dir_array[i][j][3]=='T')
    1640:	f7 01       	movw	r30, r14
    1642:	83 81       	ldd	r24, Z+3	; 0x03
    1644:	84 35       	cpi	r24, 0x54	; 84
    1646:	09 f0       	breq	.+2      	; 0x164a <coordinates_tobe_reached+0x290>
    1648:	52 c0       	rjmp	.+164    	; 0x16ee <coordinates_tobe_reached+0x334>
				{
					if(is_coordinate_null(i-1,j))
    164a:	89 89       	ldd	r24, Y+17	; 0x11
    164c:	9a 89       	ldd	r25, Y+18	; 0x12
    164e:	6f 89       	ldd	r22, Y+23	; 0x17
    1650:	78 8d       	ldd	r23, Y+24	; 0x18
    1652:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    1656:	89 2b       	or	r24, r25
    1658:	09 f4       	brne	.+2      	; 0x165c <coordinates_tobe_reached+0x2a2>
    165a:	49 c0       	rjmp	.+146    	; 0x16ee <coordinates_tobe_reached+0x334>
					{
						if(mx==0 && my==0)
    165c:	60 91 31 01 	lds	r22, 0x0131
    1660:	70 91 32 01 	lds	r23, 0x0132
    1664:	61 15       	cp	r22, r1
    1666:	71 05       	cpc	r23, r1
    1668:	89 f4       	brne	.+34     	; 0x168c <coordinates_tobe_reached+0x2d2>
    166a:	80 91 33 01 	lds	r24, 0x0133
    166e:	90 91 34 01 	lds	r25, 0x0134
    1672:	89 2b       	or	r24, r25
    1674:	59 f4       	brne	.+22     	; 0x168c <coordinates_tobe_reached+0x2d2>
						{
							mx = i;
    1676:	10 93 32 01 	sts	0x0132, r17
    167a:	00 93 31 01 	sts	0x0131, r16
							my = j;
    167e:	2f 89       	ldd	r18, Y+23	; 0x17
    1680:	38 8d       	ldd	r19, Y+24	; 0x18
    1682:	30 93 34 01 	sts	0x0134, r19
    1686:	20 93 33 01 	sts	0x0133, r18
    168a:	31 c0       	rjmp	.+98     	; 0x16ee <coordinates_tobe_reached+0x334>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    168c:	68 19       	sub	r22, r8
    168e:	79 09       	sbc	r23, r9
    1690:	80 91 33 01 	lds	r24, 0x0133
    1694:	90 91 34 01 	lds	r25, 0x0134
    1698:	8a 19       	sub	r24, r10
    169a:	9b 09       	sbc	r25, r11
							if(t1<t2)
    169c:	22 9c       	mul	r2, r2
    169e:	a0 01       	movw	r20, r0
    16a0:	23 9c       	mul	r2, r3
    16a2:	50 0d       	add	r21, r0
    16a4:	32 9c       	mul	r3, r2
    16a6:	50 0d       	add	r21, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	ef 81       	ldd	r30, Y+7	; 0x07
    16ac:	f8 85       	ldd	r31, Y+8	; 0x08
    16ae:	4e 0f       	add	r20, r30
    16b0:	5f 1f       	adc	r21, r31
    16b2:	9c 01       	movw	r18, r24
    16b4:	22 9f       	mul	r18, r18
    16b6:	c0 01       	movw	r24, r0
    16b8:	23 9f       	mul	r18, r19
    16ba:	90 0d       	add	r25, r0
    16bc:	32 9f       	mul	r19, r18
    16be:	90 0d       	add	r25, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	66 9f       	mul	r22, r22
    16c4:	90 01       	movw	r18, r0
    16c6:	67 9f       	mul	r22, r23
    16c8:	30 0d       	add	r19, r0
    16ca:	76 9f       	mul	r23, r22
    16cc:	30 0d       	add	r19, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	48 17       	cp	r20, r24
    16d6:	59 07       	cpc	r21, r25
    16d8:	54 f4       	brge	.+20     	; 0x16ee <coordinates_tobe_reached+0x334>
							{
								mx = i;
    16da:	10 93 32 01 	sts	0x0132, r17
    16de:	00 93 31 01 	sts	0x0131, r16
								my = j;
    16e2:	8f 89       	ldd	r24, Y+23	; 0x17
    16e4:	98 8d       	ldd	r25, Y+24	; 0x18
    16e6:	90 93 34 01 	sts	0x0134, r25
    16ea:	80 93 33 01 	sts	0x0133, r24
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<16 ; i++)
	{
		for(int j = 0 ; j<16 ; j++)
    16ee:	ef 89       	ldd	r30, Y+23	; 0x17
    16f0:	f8 8d       	ldd	r31, Y+24	; 0x18
    16f2:	31 96       	adiw	r30, 0x01	; 1
    16f4:	f8 8f       	std	Y+24, r31	; 0x18
    16f6:	ef 8b       	std	Y+23, r30	; 0x17
    16f8:	24 e0       	ldi	r18, 0x04	; 4
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	e2 0e       	add	r14, r18
    16fe:	f3 1e       	adc	r15, r19
    1700:	08 94       	sec
    1702:	21 1c       	adc	r2, r1
    1704:	31 1c       	adc	r3, r1
    1706:	08 94       	sec
    1708:	41 1c       	adc	r4, r1
    170a:	51 1c       	adc	r5, r1
    170c:	08 94       	sec
    170e:	61 1c       	adc	r6, r1
    1710:	71 1c       	adc	r7, r1
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	9e 87       	std	Y+14, r25	; 0x0e
    171a:	8d 87       	std	Y+13, r24	; 0x0d
    171c:	70 97       	sbiw	r30, 0x10	; 16
    171e:	09 f0       	breq	.+2      	; 0x1722 <coordinates_tobe_reached+0x368>
    1720:	89 ce       	rjmp	.-750    	; 0x1434 <coordinates_tobe_reached+0x7a>
void coordinates_tobe_reached()
{
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<16 ; i++)
    1722:	0f 5f       	subi	r16, 0xFF	; 255
    1724:	1f 4f       	sbci	r17, 0xFF	; 255
    1726:	08 94       	sec
    1728:	c1 1c       	adc	r12, r1
    172a:	d1 1c       	adc	r13, r1
    172c:	ed 81       	ldd	r30, Y+5	; 0x05
    172e:	fe 81       	ldd	r31, Y+6	; 0x06
    1730:	31 96       	adiw	r30, 0x01	; 1
    1732:	fe 83       	std	Y+6, r31	; 0x06
    1734:	ed 83       	std	Y+5, r30	; 0x05
    1736:	2b 81       	ldd	r18, Y+3	; 0x03
    1738:	3c 81       	ldd	r19, Y+4	; 0x04
    173a:	2f 5f       	subi	r18, 0xFF	; 255
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	3c 83       	std	Y+4, r19	; 0x04
    1740:	2b 83       	std	Y+3, r18	; 0x03
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	00 31       	cpi	r16, 0x10	; 16
    174e:	11 05       	cpc	r17, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <coordinates_tobe_reached+0x39a>
    1752:	47 c0       	rjmp	.+142    	; 0x17e2 <coordinates_tobe_reached+0x428>
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1754:	cc 9c       	mul	r12, r12
    1756:	f0 01       	movw	r30, r0
    1758:	cd 9c       	mul	r12, r13
    175a:	f0 0d       	add	r31, r0
    175c:	dc 9c       	mul	r13, r12
    175e:	f0 0d       	add	r31, r0
    1760:	11 24       	eor	r1, r1
    1762:	f8 8b       	std	Y+16, r31	; 0x10
    1764:	ef 87       	std	Y+15, r30	; 0x0f
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	88 9f       	mul	r24, r24
    176c:	90 01       	movw	r18, r0
    176e:	89 9f       	mul	r24, r25
    1770:	30 0d       	add	r19, r0
    1772:	98 9f       	mul	r25, r24
    1774:	30 0d       	add	r19, r0
    1776:	11 24       	eor	r1, r1
    1778:	3c 87       	std	Y+12, r19	; 0x0c
    177a:	2b 87       	std	Y+11, r18	; 0x0b
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	22 9f       	mul	r18, r18
    1782:	f0 01       	movw	r30, r0
    1784:	23 9f       	mul	r18, r19
    1786:	f0 0d       	add	r31, r0
    1788:	32 9f       	mul	r19, r18
    178a:	f0 0d       	add	r31, r0
    178c:	11 24       	eor	r1, r1
    178e:	fa 87       	std	Y+10, r31	; 0x0a
    1790:	e9 87       	std	Y+9, r30	; 0x09
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	ee 9f       	mul	r30, r30
    1798:	c0 01       	movw	r24, r0
    179a:	ef 9f       	mul	r30, r31
    179c:	90 0d       	add	r25, r0
    179e:	fe 9f       	mul	r31, r30
    17a0:	90 0d       	add	r25, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	98 87       	std	Y+8, r25	; 0x08
    17a6:	8f 83       	std	Y+7, r24	; 0x07
    17a8:	78 01       	movw	r14, r16
    17aa:	96 e0       	ldi	r25, 0x06	; 6
    17ac:	ee 0c       	add	r14, r14
    17ae:	ff 1c       	adc	r15, r15
    17b0:	9a 95       	dec	r25
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <coordinates_tobe_reached+0x3f2>
    17b4:	2f e3       	ldi	r18, 0x3F	; 63
    17b6:	33 e0       	ldi	r19, 0x03	; 3
    17b8:	e2 0e       	add	r14, r18
    17ba:	f3 1e       	adc	r15, r19
    17bc:	8d 89       	ldd	r24, Y+21	; 0x15
    17be:	9e 89       	ldd	r25, Y+22	; 0x16
    17c0:	9e 87       	std	Y+14, r25	; 0x0e
    17c2:	8d 87       	std	Y+13, r24	; 0x0d
    17c4:	1c 01       	movw	r2, r24
    17c6:	2c 01       	movw	r4, r24
    17c8:	3c 01       	movw	r6, r24
    17ca:	18 8e       	std	Y+24, r1	; 0x18
    17cc:	1f 8a       	std	Y+23, r1	; 0x17
						}
					}
				}
				if(dir_array[i][j][3]=='T')
				{
					if(is_coordinate_null(i-1,j))
    17ce:	f8 01       	movw	r30, r16
    17d0:	31 97       	sbiw	r30, 0x01	; 1
    17d2:	fa 8b       	std	Y+18, r31	; 0x12
    17d4:	e9 8b       	std	Y+17, r30	; 0x11
						}
					}
				}
				if(dir_array[i][j][1]=='T')
				{
					if(is_coordinate_null(i+1,j))
    17d6:	98 01       	movw	r18, r16
    17d8:	2f 5f       	subi	r18, 0xFF	; 255
    17da:	3f 4f       	sbci	r19, 0xFF	; 255
    17dc:	3c 8b       	std	Y+20, r19	; 0x14
    17de:	2b 8b       	std	Y+19, r18	; 0x13
    17e0:	29 ce       	rjmp	.-942    	; 0x1434 <coordinates_tobe_reached+0x7a>
					}
				}	
			}	
		}
	}
}
    17e2:	68 96       	adiw	r28, 0x18	; 24
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	df 90       	pop	r13
    17fc:	cf 90       	pop	r12
    17fe:	bf 90       	pop	r11
    1800:	af 90       	pop	r10
    1802:	9f 90       	pop	r9
    1804:	8f 90       	pop	r8
    1806:	7f 90       	pop	r7
    1808:	6f 90       	pop	r6
    180a:	5f 90       	pop	r5
    180c:	4f 90       	pop	r4
    180e:	3f 90       	pop	r3
    1810:	2f 90       	pop	r2
    1812:	08 95       	ret

00001814 <get_path>:
void get_path()
{ 
    1814:	6f 92       	push	r6
    1816:	7f 92       	push	r7
    1818:	8f 92       	push	r8
    181a:	9f 92       	push	r9
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
	int x , y;
	y = y_coordinate;
    1830:	40 91 1a 01 	lds	r20, 0x011A
    1834:	50 91 1b 01 	lds	r21, 0x011B
	x = x_coordinate;
    1838:	60 91 18 01 	lds	r22, 0x0118
    183c:	70 91 19 01 	lds	r23, 0x0119
    1840:	05 e4       	ldi	r16, 0x45	; 69
    1842:	17 e0       	ldi	r17, 0x07	; 7
    1844:	f8 01       	movw	r30, r16
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
	{
		path_array[ls][0] = 0;
    1846:	11 82       	std	Z+1, r1	; 0x01
    1848:	10 82       	st	Z, r1
		path_array[ls][1] = 0;
    184a:	13 82       	std	Z+3, r1	; 0x03
    184c:	12 82       	std	Z+2, r1	; 0x02
    184e:	34 96       	adiw	r30, 0x04	; 4
{ 
	int x , y;
	y = y_coordinate;
	x = x_coordinate;
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
    1850:	87 e0       	ldi	r24, 0x07	; 7
    1852:	e1 38       	cpi	r30, 0x81	; 129
    1854:	f8 07       	cpc	r31, r24
    1856:	b9 f7       	brne	.-18     	; 0x1846 <get_path+0x32>
	{
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	ipl=0;
    1858:	10 92 3a 01 	sts	0x013A, r1
    185c:	10 92 39 01 	sts	0x0139, r1
    1860:	66 24       	eor	r6, r6
    1862:	77 24       	eor	r7, r7
    1864:	d2 c1       	rjmp	.+932    	; 0x1c0a <get_path+0x3f6>
	while(map_array[x][y]!=0)
	{
		if(map_array[x+1][y]<map_array[x][y] && dir_array[x][y][1]=='T' && dir_array[x+1][y][3]=='T' && x<15)
    1866:	6b 01       	movw	r12, r22
    1868:	08 94       	sec
    186a:	c1 1c       	adc	r12, r1
    186c:	d1 1c       	adc	r13, r1
    186e:	96 01       	movw	r18, r12
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	8a 95       	dec	r24
    1878:	e1 f7       	brne	.-8      	; 0x1872 <get_path+0x5e>
    187a:	24 0f       	add	r18, r20
    187c:	35 1f       	adc	r19, r21
    187e:	79 01       	movw	r14, r18
    1880:	ee 0c       	add	r14, r14
    1882:	ff 1c       	adc	r15, r15
    1884:	f7 01       	movw	r30, r14
    1886:	e1 5c       	subi	r30, 0xC1	; 193
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	80 80       	ld	r8, Z
    188c:	91 80       	ldd	r9, Z+1	; 0x01
    188e:	8a 14       	cp	r8, r10
    1890:	9b 04       	cpc	r9, r11
    1892:	0c f0       	brlt	.+2      	; 0x1896 <get_path+0x82>
    1894:	59 c0       	rjmp	.+178    	; 0x1948 <get_path+0x134>
    1896:	aa 0f       	add	r26, r26
    1898:	bb 1f       	adc	r27, r27
    189a:	aa 0f       	add	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	a1 5c       	subi	r26, 0xC1	; 193
    18a0:	bc 4f       	sbci	r27, 0xFC	; 252
    18a2:	11 96       	adiw	r26, 0x01	; 1
    18a4:	8c 91       	ld	r24, X
    18a6:	84 35       	cpi	r24, 0x54	; 84
    18a8:	09 f0       	breq	.+2      	; 0x18ac <get_path+0x98>
    18aa:	4e c0       	rjmp	.+156    	; 0x1948 <get_path+0x134>
    18ac:	e9 01       	movw	r28, r18
    18ae:	cc 0f       	add	r28, r28
    18b0:	dd 1f       	adc	r29, r29
    18b2:	cc 0f       	add	r28, r28
    18b4:	dd 1f       	adc	r29, r29
    18b6:	c1 5c       	subi	r28, 0xC1	; 193
    18b8:	dc 4f       	sbci	r29, 0xFC	; 252
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	84 35       	cpi	r24, 0x54	; 84
    18be:	09 f0       	breq	.+2      	; 0x18c2 <get_path+0xae>
    18c0:	43 c0       	rjmp	.+134    	; 0x1948 <get_path+0x134>
    18c2:	6f 30       	cpi	r22, 0x0F	; 15
    18c4:	71 05       	cpc	r23, r1
    18c6:	0c f0       	brlt	.+2      	; 0x18ca <get_path+0xb6>
    18c8:	3f c0       	rjmp	.+126    	; 0x1948 <get_path+0x134>
		{
			x = x+1;
			path_array[ipl][0]=x;
    18ca:	f8 01       	movw	r30, r16
    18cc:	d1 82       	std	Z+1, r13	; 0x01
    18ce:	c0 82       	st	Z, r12
			path_array[ipl][1]=y;
    18d0:	53 83       	std	Z+3, r21	; 0x03
    18d2:	42 83       	std	Z+2, r20	; 0x02
			if(map_array[x+1][y]<map_array[x][y] && dir_array[x+1][y][3]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x<15)
    18d4:	b6 01       	movw	r22, r12
    18d6:	6f 5f       	subi	r22, 0xFF	; 255
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	db 01       	movw	r26, r22
    18dc:	94 e0       	ldi	r25, 0x04	; 4
    18de:	aa 0f       	add	r26, r26
    18e0:	bb 1f       	adc	r27, r27
    18e2:	9a 95       	dec	r25
    18e4:	e1 f7       	brne	.-8      	; 0x18de <get_path+0xca>
    18e6:	a4 0f       	add	r26, r20
    18e8:	b5 1f       	adc	r27, r21
    18ea:	fd 01       	movw	r30, r26
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	e1 5c       	subi	r30, 0xC1	; 193
    18f2:	fe 4f       	sbci	r31, 0xFE	; 254
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	88 15       	cp	r24, r8
    18fa:	99 05       	cpc	r25, r9
    18fc:	0c f0       	brlt	.+2      	; 0x1900 <get_path+0xec>
    18fe:	66 c1       	rjmp	.+716    	; 0x1bcc <get_path+0x3b8>
    1900:	aa 0f       	add	r26, r26
    1902:	bb 1f       	adc	r27, r27
    1904:	aa 0f       	add	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	a1 5c       	subi	r26, 0xC1	; 193
    190a:	bc 4f       	sbci	r27, 0xFC	; 252
    190c:	13 96       	adiw	r26, 0x03	; 3
    190e:	8c 91       	ld	r24, X
    1910:	84 35       	cpi	r24, 0x54	; 84
    1912:	09 f0       	breq	.+2      	; 0x1916 <get_path+0x102>
    1914:	5b c1       	rjmp	.+694    	; 0x1bcc <get_path+0x3b8>
    1916:	88 81       	ld	r24, Y
    1918:	86 34       	cpi	r24, 0x46	; 70
    191a:	09 f0       	breq	.+2      	; 0x191e <get_path+0x10a>
    191c:	57 c1       	rjmp	.+686    	; 0x1bcc <get_path+0x3b8>
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	84 35       	cpi	r24, 0x54	; 84
    1922:	09 f0       	breq	.+2      	; 0x1926 <get_path+0x112>
    1924:	53 c1       	rjmp	.+678    	; 0x1bcc <get_path+0x3b8>
    1926:	ee 0c       	add	r14, r14
    1928:	ff 1c       	adc	r15, r15
    192a:	81 e4       	ldi	r24, 0x41	; 65
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	e8 0e       	add	r14, r24
    1930:	f9 1e       	adc	r15, r25
    1932:	f7 01       	movw	r30, r14
    1934:	80 81       	ld	r24, Z
    1936:	86 34       	cpi	r24, 0x46	; 70
    1938:	09 f0       	breq	.+2      	; 0x193c <get_path+0x128>
    193a:	48 c1       	rjmp	.+656    	; 0x1bcc <get_path+0x3b8>
    193c:	ff e0       	ldi	r31, 0x0F	; 15
    193e:	cf 16       	cp	r12, r31
    1940:	d1 04       	cpc	r13, r1
    1942:	0c f0       	brlt	.+2      	; 0x1946 <get_path+0x132>
    1944:	43 c1       	rjmp	.+646    	; 0x1bcc <get_path+0x3b8>
    1946:	76 c0       	rjmp	.+236    	; 0x1a34 <get_path+0x220>
				x = x+1;
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;
			}
		}
		else if(map_array[x-1][y]<map_array[x][y] && dir_array[x][y][3]=='T' && dir_array[x-1][y][1]=='T' && x>=1)
    1948:	6b 01       	movw	r12, r22
    194a:	08 94       	sec
    194c:	c1 08       	sbc	r12, r1
    194e:	d1 08       	sbc	r13, r1
    1950:	96 01       	movw	r18, r12
    1952:	94 e0       	ldi	r25, 0x04	; 4
    1954:	22 0f       	add	r18, r18
    1956:	33 1f       	adc	r19, r19
    1958:	9a 95       	dec	r25
    195a:	e1 f7       	brne	.-8      	; 0x1954 <get_path+0x140>
    195c:	24 0f       	add	r18, r20
    195e:	35 1f       	adc	r19, r21
    1960:	79 01       	movw	r14, r18
    1962:	ee 0c       	add	r14, r14
    1964:	ff 1c       	adc	r15, r15
    1966:	f7 01       	movw	r30, r14
    1968:	e1 5c       	subi	r30, 0xC1	; 193
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 80       	ld	r8, Z
    196e:	91 80       	ldd	r9, Z+1	; 0x01
    1970:	8a 14       	cp	r8, r10
    1972:	9b 04       	cpc	r9, r11
    1974:	0c f0       	brlt	.+2      	; 0x1978 <get_path+0x164>
    1976:	62 c0       	rjmp	.+196    	; 0x1a3c <get_path+0x228>
    1978:	fb 01       	movw	r30, r22
    197a:	b4 e0       	ldi	r27, 0x04	; 4
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	ba 95       	dec	r27
    1982:	e1 f7       	brne	.-8      	; 0x197c <get_path+0x168>
    1984:	e4 0f       	add	r30, r20
    1986:	f5 1f       	adc	r31, r21
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	e1 5c       	subi	r30, 0xC1	; 193
    1992:	fc 4f       	sbci	r31, 0xFC	; 252
    1994:	83 81       	ldd	r24, Z+3	; 0x03
    1996:	84 35       	cpi	r24, 0x54	; 84
    1998:	09 f0       	breq	.+2      	; 0x199c <get_path+0x188>
    199a:	50 c0       	rjmp	.+160    	; 0x1a3c <get_path+0x228>
    199c:	e9 01       	movw	r28, r18
    199e:	cc 0f       	add	r28, r28
    19a0:	dd 1f       	adc	r29, r29
    19a2:	cc 0f       	add	r28, r28
    19a4:	dd 1f       	adc	r29, r29
    19a6:	c1 5c       	subi	r28, 0xC1	; 193
    19a8:	dc 4f       	sbci	r29, 0xFC	; 252
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	84 35       	cpi	r24, 0x54	; 84
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <get_path+0x19e>
    19b0:	45 c0       	rjmp	.+138    	; 0x1a3c <get_path+0x228>
    19b2:	16 16       	cp	r1, r22
    19b4:	17 06       	cpc	r1, r23
    19b6:	0c f0       	brlt	.+2      	; 0x19ba <get_path+0x1a6>
    19b8:	41 c0       	rjmp	.+130    	; 0x1a3c <get_path+0x228>
		{

			x = x-1;
			path_array[ipl][0]=x;
    19ba:	f8 01       	movw	r30, r16
    19bc:	d1 82       	std	Z+1, r13	; 0x01
    19be:	c0 82       	st	Z, r12
			path_array[ipl][1]=y;
    19c0:	53 83       	std	Z+3, r21	; 0x03
    19c2:	42 83       	std	Z+2, r20	; 0x02
			if(map_array[x-1][y]<map_array[x][y] && dir_array[x-1][y][1]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x>=1)
    19c4:	b6 01       	movw	r22, r12
    19c6:	61 50       	subi	r22, 0x01	; 1
    19c8:	70 40       	sbci	r23, 0x00	; 0
    19ca:	db 01       	movw	r26, r22
    19cc:	24 e0       	ldi	r18, 0x04	; 4
    19ce:	aa 0f       	add	r26, r26
    19d0:	bb 1f       	adc	r27, r27
    19d2:	2a 95       	dec	r18
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <get_path+0x1ba>
    19d6:	a4 0f       	add	r26, r20
    19d8:	b5 1f       	adc	r27, r21
    19da:	fd 01       	movw	r30, r26
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	e1 5c       	subi	r30, 0xC1	; 193
    19e2:	fe 4f       	sbci	r31, 0xFE	; 254
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	88 15       	cp	r24, r8
    19ea:	99 05       	cpc	r25, r9
    19ec:	0c f0       	brlt	.+2      	; 0x19f0 <get_path+0x1dc>
    19ee:	ee c0       	rjmp	.+476    	; 0x1bcc <get_path+0x3b8>
    19f0:	aa 0f       	add	r26, r26
    19f2:	bb 1f       	adc	r27, r27
    19f4:	aa 0f       	add	r26, r26
    19f6:	bb 1f       	adc	r27, r27
    19f8:	a1 5c       	subi	r26, 0xC1	; 193
    19fa:	bc 4f       	sbci	r27, 0xFC	; 252
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	8c 91       	ld	r24, X
    1a00:	84 35       	cpi	r24, 0x54	; 84
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <get_path+0x1f2>
    1a04:	e3 c0       	rjmp	.+454    	; 0x1bcc <get_path+0x3b8>
    1a06:	88 81       	ld	r24, Y
    1a08:	86 34       	cpi	r24, 0x46	; 70
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <get_path+0x1fa>
    1a0c:	df c0       	rjmp	.+446    	; 0x1bcc <get_path+0x3b8>
    1a0e:	ee 0c       	add	r14, r14
    1a10:	ff 1c       	adc	r15, r15
    1a12:	81 e4       	ldi	r24, 0x41	; 65
    1a14:	93 e0       	ldi	r25, 0x03	; 3
    1a16:	e8 0e       	add	r14, r24
    1a18:	f9 1e       	adc	r15, r25
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	80 81       	ld	r24, Z
    1a1e:	86 34       	cpi	r24, 0x46	; 70
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <get_path+0x210>
    1a22:	d4 c0       	rjmp	.+424    	; 0x1bcc <get_path+0x3b8>
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	84 35       	cpi	r24, 0x54	; 84
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <get_path+0x218>
    1a2a:	d0 c0       	rjmp	.+416    	; 0x1bcc <get_path+0x3b8>
    1a2c:	1c 14       	cp	r1, r12
    1a2e:	1d 04       	cpc	r1, r13
    1a30:	0c f0       	brlt	.+2      	; 0x1a34 <get_path+0x220>
    1a32:	cc c0       	rjmp	.+408    	; 0x1bcc <get_path+0x3b8>
			{
				x = x-1;
				path_array[ipl][0]=x;
    1a34:	f8 01       	movw	r30, r16
    1a36:	71 83       	std	Z+1, r23	; 0x01
    1a38:	60 83       	st	Z, r22
    1a3a:	cd c0       	rjmp	.+410    	; 0x1bd6 <get_path+0x3c2>
				path_array[ipl][1]=y;

			}
		}

		else if(map_array[x][y+1]<map_array[x][y] && dir_array[x][y][0]=='T' && dir_array[x][y+1][2]=='T' && y<15)
    1a3c:	ea 01       	movw	r28, r20
    1a3e:	21 96       	adiw	r28, 0x01	; 1
    1a40:	9b 01       	movw	r18, r22
    1a42:	f4 e0       	ldi	r31, 0x04	; 4
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	fa 95       	dec	r31
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <get_path+0x230>
    1a4c:	69 01       	movw	r12, r18
    1a4e:	cc 0e       	add	r12, r28
    1a50:	dd 1e       	adc	r13, r29
    1a52:	d6 01       	movw	r26, r12
    1a54:	aa 0f       	add	r26, r26
    1a56:	bb 1f       	adc	r27, r27
    1a58:	fd 01       	movw	r30, r26
    1a5a:	e1 5c       	subi	r30, 0xC1	; 193
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	e0 80       	ld	r14, Z
    1a60:	f1 80       	ldd	r15, Z+1	; 0x01
    1a62:	ea 14       	cp	r14, r10
    1a64:	fb 04       	cpc	r15, r11
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <get_path+0x256>
    1a68:	4d c0       	rjmp	.+154    	; 0x1b04 <get_path+0x2f0>
    1a6a:	f9 01       	movw	r30, r18
    1a6c:	e4 0f       	add	r30, r20
    1a6e:	f5 1f       	adc	r31, r21
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	e1 5c       	subi	r30, 0xC1	; 193
    1a7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7c:	80 81       	ld	r24, Z
    1a7e:	84 35       	cpi	r24, 0x54	; 84
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <get_path+0x270>
    1a82:	40 c0       	rjmp	.+128    	; 0x1b04 <get_path+0x2f0>
    1a84:	aa 0f       	add	r26, r26
    1a86:	bb 1f       	adc	r27, r27
    1a88:	af 5b       	subi	r26, 0xBF	; 191
    1a8a:	bc 4f       	sbci	r27, 0xFC	; 252
    1a8c:	8c 91       	ld	r24, X
    1a8e:	84 35       	cpi	r24, 0x54	; 84
    1a90:	c9 f5       	brne	.+114    	; 0x1b04 <get_path+0x2f0>
    1a92:	4f 30       	cpi	r20, 0x0F	; 15
    1a94:	51 05       	cpc	r21, r1
    1a96:	b4 f5       	brge	.+108    	; 0x1b04 <get_path+0x2f0>
		{

			y = y+1;
			path_array[ipl][0]=x;
    1a98:	f8 01       	movw	r30, r16
    1a9a:	71 83       	std	Z+1, r23	; 0x01
    1a9c:	60 83       	st	Z, r22
			path_array[ipl][1]=y;
    1a9e:	d3 83       	std	Z+3, r29	; 0x03
    1aa0:	c2 83       	std	Z+2, r28	; 0x02
			if(map_array[x][y+1]<map_array[x][y]  && dir_array[x][y+1][2]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y<15)
    1aa2:	ae 01       	movw	r20, r28
    1aa4:	4f 5f       	subi	r20, 0xFF	; 255
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa8:	d9 01       	movw	r26, r18
    1aaa:	a4 0f       	add	r26, r20
    1aac:	b5 1f       	adc	r27, r21
    1aae:	aa 0f       	add	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	fd 01       	movw	r30, r26
    1ab4:	e1 5c       	subi	r30, 0xC1	; 193
    1ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	8e 15       	cp	r24, r14
    1abe:	9f 05       	cpc	r25, r15
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <get_path+0x2b0>
    1ac2:	86 c0       	rjmp	.+268    	; 0x1bd0 <get_path+0x3bc>
    1ac4:	aa 0f       	add	r26, r26
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	af 5b       	subi	r26, 0xBF	; 191
    1aca:	bc 4f       	sbci	r27, 0xFC	; 252
    1acc:	8c 91       	ld	r24, X
    1ace:	84 35       	cpi	r24, 0x54	; 84
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <get_path+0x2c0>
    1ad2:	7e c0       	rjmp	.+252    	; 0x1bd0 <get_path+0x3bc>
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	e1 5c       	subi	r30, 0xC1	; 193
    1ae0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae2:	80 81       	ld	r24, Z
    1ae4:	84 35       	cpi	r24, 0x54	; 84
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <get_path+0x2d6>
    1ae8:	73 c0       	rjmp	.+230    	; 0x1bd0 <get_path+0x3bc>
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	86 34       	cpi	r24, 0x46	; 70
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <get_path+0x2de>
    1af0:	6f c0       	rjmp	.+222    	; 0x1bd0 <get_path+0x3bc>
    1af2:	83 81       	ldd	r24, Z+3	; 0x03
    1af4:	86 34       	cpi	r24, 0x46	; 70
    1af6:	09 f0       	breq	.+2      	; 0x1afa <get_path+0x2e6>
    1af8:	6b c0       	rjmp	.+214    	; 0x1bd0 <get_path+0x3bc>
    1afa:	cf 30       	cpi	r28, 0x0F	; 15
    1afc:	d1 05       	cpc	r29, r1
    1afe:	0c f0       	brlt	.+2      	; 0x1b02 <get_path+0x2ee>
    1b00:	67 c0       	rjmp	.+206    	; 0x1bd0 <get_path+0x3bc>
    1b02:	60 c0       	rjmp	.+192    	; 0x1bc4 <get_path+0x3b0>
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;

			}
		}
		else if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y][2]=='T' && dir_array[x][y-1][0]=='T' && y>=1)
    1b04:	7a 01       	movw	r14, r20
    1b06:	08 94       	sec
    1b08:	e1 08       	sbc	r14, r1
    1b0a:	f1 08       	sbc	r15, r1
    1b0c:	db 01       	movw	r26, r22
    1b0e:	24 e0       	ldi	r18, 0x04	; 4
    1b10:	aa 0f       	add	r26, r26
    1b12:	bb 1f       	adc	r27, r27
    1b14:	2a 95       	dec	r18
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <get_path+0x2fc>
    1b18:	ed 01       	movw	r28, r26
    1b1a:	ce 0d       	add	r28, r14
    1b1c:	df 1d       	adc	r29, r15
    1b1e:	9e 01       	movw	r18, r28
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	f9 01       	movw	r30, r18
    1b26:	e1 5c       	subi	r30, 0xC1	; 193
    1b28:	fe 4f       	sbci	r31, 0xFE	; 254
    1b2a:	c0 80       	ld	r12, Z
    1b2c:	d1 80       	ldd	r13, Z+1	; 0x01
    1b2e:	ca 14       	cp	r12, r10
    1b30:	db 04       	cpc	r13, r11
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <get_path+0x322>
    1b34:	50 c0       	rjmp	.+160    	; 0x1bd6 <get_path+0x3c2>
    1b36:	fd 01       	movw	r30, r26
    1b38:	e4 0f       	add	r30, r20
    1b3a:	f5 1f       	adc	r31, r21
    1b3c:	ee 0f       	add	r30, r30
    1b3e:	ff 1f       	adc	r31, r31
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	ef 5b       	subi	r30, 0xBF	; 191
    1b46:	fc 4f       	sbci	r31, 0xFC	; 252
    1b48:	80 81       	ld	r24, Z
    1b4a:	84 35       	cpi	r24, 0x54	; 84
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <get_path+0x33c>
    1b4e:	43 c0       	rjmp	.+134    	; 0x1bd6 <get_path+0x3c2>
    1b50:	cc 0f       	add	r28, r28
    1b52:	dd 1f       	adc	r29, r29
    1b54:	cc 0f       	add	r28, r28
    1b56:	dd 1f       	adc	r29, r29
    1b58:	c1 5c       	subi	r28, 0xC1	; 193
    1b5a:	dc 4f       	sbci	r29, 0xFC	; 252
    1b5c:	88 81       	ld	r24, Y
    1b5e:	84 35       	cpi	r24, 0x54	; 84
    1b60:	d1 f5       	brne	.+116    	; 0x1bd6 <get_path+0x3c2>
    1b62:	14 16       	cp	r1, r20
    1b64:	15 06       	cpc	r1, r21
    1b66:	bc f5       	brge	.+110    	; 0x1bd6 <get_path+0x3c2>
		{

			y = y-1;
			path_array[ipl][0]=x;
    1b68:	f8 01       	movw	r30, r16
    1b6a:	71 83       	std	Z+1, r23	; 0x01
    1b6c:	60 83       	st	Z, r22
			path_array[ipl][1]=y;
    1b6e:	f3 82       	std	Z+3, r15	; 0x03
    1b70:	e2 82       	std	Z+2, r14	; 0x02
			if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y-1][0]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y>=1)
    1b72:	a7 01       	movw	r20, r14
    1b74:	41 50       	subi	r20, 0x01	; 1
    1b76:	50 40       	sbci	r21, 0x00	; 0
    1b78:	a4 0f       	add	r26, r20
    1b7a:	b5 1f       	adc	r27, r21
    1b7c:	fd 01       	movw	r30, r26
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	e1 5c       	subi	r30, 0xC1	; 193
    1b84:	fe 4f       	sbci	r31, 0xFE	; 254
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	8c 15       	cp	r24, r12
    1b8c:	9d 05       	cpc	r25, r13
    1b8e:	14 f5       	brge	.+68     	; 0x1bd4 <get_path+0x3c0>
    1b90:	aa 0f       	add	r26, r26
    1b92:	bb 1f       	adc	r27, r27
    1b94:	aa 0f       	add	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	a1 5c       	subi	r26, 0xC1	; 193
    1b9a:	bc 4f       	sbci	r27, 0xFC	; 252
    1b9c:	8c 91       	ld	r24, X
    1b9e:	84 35       	cpi	r24, 0x54	; 84
    1ba0:	c9 f4       	brne	.+50     	; 0x1bd4 <get_path+0x3c0>
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	86 34       	cpi	r24, 0x46	; 70
    1ba6:	b1 f4       	brne	.+44     	; 0x1bd4 <get_path+0x3c0>
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	2f 5b       	subi	r18, 0xBF	; 191
    1bae:	3c 4f       	sbci	r19, 0xFC	; 252
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	80 81       	ld	r24, Z
    1bb4:	84 35       	cpi	r24, 0x54	; 84
    1bb6:	71 f4       	brne	.+28     	; 0x1bd4 <get_path+0x3c0>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	86 34       	cpi	r24, 0x46	; 70
    1bbc:	59 f4       	brne	.+22     	; 0x1bd4 <get_path+0x3c0>
    1bbe:	1e 14       	cp	r1, r14
    1bc0:	1f 04       	cpc	r1, r15
    1bc2:	44 f4       	brge	.+16     	; 0x1bd4 <get_path+0x3c0>
			{
				y = y-1;
				path_array[ipl][0]=x;
    1bc4:	f8 01       	movw	r30, r16
				path_array[ipl][1]=y;
    1bc6:	53 83       	std	Z+3, r21	; 0x03
    1bc8:	42 83       	std	Z+2, r20	; 0x02
    1bca:	05 c0       	rjmp	.+10     	; 0x1bd6 <get_path+0x3c2>
    1bcc:	b6 01       	movw	r22, r12
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <get_path+0x3c2>
    1bd0:	ae 01       	movw	r20, r28
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <get_path+0x3c2>
    1bd4:	a7 01       	movw	r20, r14
			}	
		}
	}
}
void get_path()
{ 
    1bd6:	08 94       	sec
    1bd8:	61 1c       	adc	r6, r1
    1bda:	71 1c       	adc	r7, r1
    1bdc:	0c 5f       	subi	r16, 0xFC	; 252
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
		// if(is_coordinate_null(x,y))
		// {
		//   break;
		// }
		ipl++;
		if(ipl>15)
    1be0:	f0 e1       	ldi	r31, 0x10	; 16
    1be2:	6f 16       	cp	r6, r31
    1be4:	71 04       	cpc	r7, r1
    1be6:	8c f0       	brlt	.+34     	; 0x1c0a <get_path+0x3f6>
    1be8:	70 92 3a 01 	sts	0x013A, r7
    1bec:	60 92 39 01 	sts	0x0139, r6
		{
			lcd_clear();
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("Broke path ");
    1bf8:	8a e6       	ldi	r24, 0x6A	; 106
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(2);
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <get_path+0x424>
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	ipl=0;
	while(map_array[x][y]!=0)
    1c0a:	db 01       	movw	r26, r22
    1c0c:	34 e0       	ldi	r19, 0x04	; 4
    1c0e:	aa 0f       	add	r26, r26
    1c10:	bb 1f       	adc	r27, r27
    1c12:	3a 95       	dec	r19
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <get_path+0x3fa>
    1c16:	a4 0f       	add	r26, r20
    1c18:	b5 1f       	adc	r27, r21
    1c1a:	fd 01       	movw	r30, r26
    1c1c:	ee 0f       	add	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	e1 5c       	subi	r30, 0xC1	; 193
    1c22:	fe 4f       	sbci	r31, 0xFE	; 254
    1c24:	a0 80       	ld	r10, Z
    1c26:	b1 80       	ldd	r11, Z+1	; 0x01
    1c28:	a1 14       	cp	r10, r1
    1c2a:	b1 04       	cpc	r11, r1
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <get_path+0x41c>
    1c2e:	1b ce       	rjmp	.-970    	; 0x1866 <get_path+0x52>
    1c30:	70 92 3a 01 	sts	0x013A, r7
    1c34:	60 92 39 01 	sts	0x0139, r6
			lcd_write_string("Broke path ");
			delay_sec(2);
			break;
		}
	}
}
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	bf 90       	pop	r11
    1c4a:	af 90       	pop	r10
    1c4c:	9f 90       	pop	r9
    1c4e:	8f 90       	pop	r8
    1c50:	7f 90       	pop	r7
    1c52:	6f 90       	pop	r6
    1c54:	08 95       	ret

00001c56 <build_map>:
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
    1c56:	4f 92       	push	r4
    1c58:	5f 92       	push	r5
    1c5a:	6f 92       	push	r6
    1c5c:	7f 92       	push	r7
    1c5e:	8f 92       	push	r8
    1c60:	9f 92       	push	r9
    1c62:	af 92       	push	r10
    1c64:	bf 92       	push	r11
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	5c 01       	movw	r10, r24
    1c78:	4b 01       	movw	r8, r22
    1c7a:	3a 01       	movw	r6, r20
    1c7c:	29 01       	movw	r4, r18
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
		{
			map_array[i][j] = 100;
    1c82:	44 e6       	ldi	r20, 0x64	; 100
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	0b c0       	rjmp	.+22     	; 0x1c9e <build_map+0x48>
    1c88:	41 93       	st	Z+, r20
    1c8a:	51 93       	st	Z+, r21
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	80 31       	cpi	r24, 0x10	; 16
    1c90:	91 05       	cpc	r25, r1
    1c92:	d1 f7       	brne	.-12     	; 0x1c88 <build_map+0x32>
		}
	}
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 16; i++)
    1c94:	2f 5f       	subi	r18, 0xFF	; 255
    1c96:	3f 4f       	sbci	r19, 0xFF	; 255
    1c98:	20 31       	cpi	r18, 0x10	; 16
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	59 f0       	breq	.+22     	; 0x1cb4 <build_map+0x5e>
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	65 e0       	ldi	r22, 0x05	; 5
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	6a 95       	dec	r22
    1ca8:	e1 f7       	brne	.-8      	; 0x1ca2 <build_map+0x4c>
    1caa:	e1 5c       	subi	r30, 0xC1	; 193
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	ea cf       	rjmp	.-44     	; 0x1c88 <build_map+0x32>
		}
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
    1cb4:	f3 01       	movw	r30, r6
    1cb6:	54 e0       	ldi	r21, 0x04	; 4
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	5a 95       	dec	r21
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <build_map+0x62>
    1cc0:	e4 0d       	add	r30, r4
    1cc2:	f5 1d       	adc	r31, r5
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	e1 5c       	subi	r30, 0xC1	; 193
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	11 82       	std	Z+1, r1	; 0x01
    1cce:	10 82       	st	Z, r1
    1cd0:	ee 24       	eor	r14, r14
    1cd2:	ff 24       	eor	r15, r15
	while(map_array[start_x][start_y]==100)
    1cd4:	a5 01       	movw	r20, r10
    1cd6:	34 e0       	ldi	r19, 0x04	; 4
    1cd8:	44 0f       	add	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	3a 95       	dec	r19
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <build_map+0x82>
    1ce0:	48 0d       	add	r20, r8
    1ce2:	59 1d       	adc	r21, r9
    1ce4:	44 0f       	add	r20, r20
    1ce6:	55 1f       	adc	r21, r21
    1ce8:	41 5c       	subi	r20, 0xC1	; 193
    1cea:	5e 4f       	sbci	r21, 0xFE	; 254
    1cec:	b4 c0       	rjmp	.+360    	; 0x1e56 <build_map+0x200>
		
		for(int l=0; l<16; l++)
		{
			for(int s=0; s<16; s++)
			{
				if(map_array[l][s]==fi)
    1cee:	90 96       	adiw	r26, 0x20	; 32
    1cf0:	8d 91       	ld	r24, X+
    1cf2:	9c 91       	ld	r25, X
    1cf4:	91 97       	sbiw	r26, 0x21	; 33
    1cf6:	8e 15       	cp	r24, r14
    1cf8:	9f 05       	cpc	r25, r15
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <build_map+0xa8>
    1cfc:	40 c0       	rjmp	.+128    	; 0x1d7e <build_map+0x128>
				{
					if(dir_array[l][s][0]=='T' && dir_array[l][s+1][2]=='T')
    1cfe:	84 81       	ldd	r24, Z+4	; 0x04
    1d00:	84 35       	cpi	r24, 0x54	; 84
    1d02:	51 f4       	brne	.+20     	; 0x1d18 <build_map+0xc2>
    1d04:	82 85       	ldd	r24, Z+10	; 0x0a
    1d06:	84 35       	cpi	r24, 0x54	; 84
    1d08:	39 f4       	brne	.+14     	; 0x1d18 <build_map+0xc2>
					{
						if(map_array[l][s+1]==100)
    1d0a:	88 81       	ld	r24, Y
    1d0c:	99 81       	ldd	r25, Y+1	; 0x01
    1d0e:	84 36       	cpi	r24, 0x64	; 100
    1d10:	91 05       	cpc	r25, r1
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <build_map+0xc2>
						{
							map_array[l][s+1]=(fi+1);
    1d14:	19 83       	std	Y+1, r17	; 0x01
    1d16:	08 83       	st	Y, r16
						}
					}
					if(dir_array[l][s][1]=='T' && dir_array[l+1][s][3]=='T')
    1d18:	85 81       	ldd	r24, Z+5	; 0x05
    1d1a:	84 35       	cpi	r24, 0x54	; 84
    1d1c:	71 f4       	brne	.+28     	; 0x1d3a <build_map+0xe4>
    1d1e:	e9 5b       	subi	r30, 0xB9	; 185
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	e7 54       	subi	r30, 0x47	; 71
    1d26:	f0 40       	sbci	r31, 0x00	; 0
    1d28:	84 35       	cpi	r24, 0x54	; 84
    1d2a:	39 f4       	brne	.+14     	; 0x1d3a <build_map+0xe4>
					{
						if(map_array[l+1][s]==100)
    1d2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d30:	84 36       	cpi	r24, 0x64	; 100
    1d32:	91 05       	cpc	r25, r1
    1d34:	11 f4       	brne	.+4      	; 0x1d3a <build_map+0xe4>
						{
							map_array[l+1][s]=(fi+1);
    1d36:	1f 8f       	std	Y+31, r17	; 0x1f
    1d38:	0e 8f       	std	Y+30, r16	; 0x1e
						}
					}
					if(dir_array[l][s][2]=='T' && dir_array[l][s-1][0]=='T')
    1d3a:	86 81       	ldd	r24, Z+6	; 0x06
    1d3c:	84 35       	cpi	r24, 0x54	; 84
    1d3e:	71 f4       	brne	.+28     	; 0x1d5c <build_map+0x106>
    1d40:	80 81       	ld	r24, Z
    1d42:	84 35       	cpi	r24, 0x54	; 84
    1d44:	59 f4       	brne	.+22     	; 0x1d5c <build_map+0x106>
					{
						if(map_array[l][s-1]==100)
    1d46:	5e 96       	adiw	r26, 0x1e	; 30
    1d48:	8d 91       	ld	r24, X+
    1d4a:	9c 91       	ld	r25, X
    1d4c:	5f 97       	sbiw	r26, 0x1f	; 31
    1d4e:	84 36       	cpi	r24, 0x64	; 100
    1d50:	91 05       	cpc	r25, r1
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <build_map+0x106>
						{
							map_array[l][s-1]=(fi+1);
    1d54:	5f 96       	adiw	r26, 0x1f	; 31
    1d56:	1c 93       	st	X, r17
    1d58:	0e 93       	st	-X, r16
    1d5a:	5e 97       	sbiw	r26, 0x1e	; 30
						}
					}
					if(dir_array[l][s][3]=='T' && dir_array[l-1][s][1]=='T')
    1d5c:	87 81       	ldd	r24, Z+7	; 0x07
    1d5e:	84 35       	cpi	r24, 0x54	; 84
    1d60:	71 f4       	brne	.+28     	; 0x1d7e <build_map+0x128>
    1d62:	fb 97       	sbiw	r30, 0x3b	; 59
    1d64:	80 81       	ld	r24, Z
    1d66:	fb 96       	adiw	r30, 0x3b	; 59
    1d68:	84 35       	cpi	r24, 0x54	; 84
    1d6a:	49 f4       	brne	.+18     	; 0x1d7e <build_map+0x128>
					{
						if(map_array[l-1][s]==100)
    1d6c:	8d 91       	ld	r24, X+
    1d6e:	9c 91       	ld	r25, X
    1d70:	11 97       	sbiw	r26, 0x01	; 1
    1d72:	84 36       	cpi	r24, 0x64	; 100
    1d74:	91 05       	cpc	r25, r1
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <build_map+0x128>
						{
							map_array[l-1][s]=(fi+1);
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	1c 93       	st	X, r17
    1d7c:	0e 93       	st	-X, r16
    1d7e:	12 96       	adiw	r26, 0x02	; 2
    1d80:	34 96       	adiw	r30, 0x04	; 4
    1d82:	22 96       	adiw	r28, 0x02	; 2
	{
		//l=x ,s=y
		
		for(int l=0; l<16; l++)
		{
			for(int s=0; s<16; s++)
    1d84:	ac 15       	cp	r26, r12
    1d86:	bd 05       	cpc	r27, r13
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <build_map+0x136>
    1d8a:	b1 cf       	rjmp	.-158    	; 0x1cee <build_map+0x98>
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<16; l++)
    1d8c:	6f 5f       	subi	r22, 0xFF	; 255
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	90 e2       	ldi	r25, 0x20	; 32
    1d92:	c9 2e       	mov	r12, r25
    1d94:	d1 2c       	mov	r13, r1
    1d96:	ca 0e       	add	r12, r26
    1d98:	db 1e       	adc	r13, r27
    1d9a:	60 31       	cpi	r22, 0x10	; 16
    1d9c:	71 05       	cpc	r23, r1
    1d9e:	19 f1       	breq	.+70     	; 0x1de6 <build_map+0x190>
    1da0:	db 01       	movw	r26, r22
    1da2:	85 e0       	ldi	r24, 0x05	; 5
    1da4:	aa 0f       	add	r26, r26
    1da6:	bb 1f       	adc	r27, r27
    1da8:	8a 95       	dec	r24
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <build_map+0x14e>
    1dac:	a1 5e       	subi	r26, 0xE1	; 225
    1dae:	be 4f       	sbci	r27, 0xFE	; 254
    1db0:	9b 01       	movw	r18, r22
    1db2:	f4 e0       	ldi	r31, 0x04	; 4
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	fa 95       	dec	r31
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <build_map+0x15e>
    1dbc:	88 27       	eor	r24, r24
    1dbe:	99 27       	eor	r25, r25
    1dc0:	82 1b       	sub	r24, r18
    1dc2:	93 0b       	sbc	r25, r19
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	ee 27       	eor	r30, r30
    1dd0:	ff 27       	eor	r31, r31
    1dd2:	e8 1b       	sub	r30, r24
    1dd4:	f9 0b       	sbc	r31, r25
    1dd6:	e1 5c       	subi	r30, 0xC1	; 193
    1dd8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dda:	e9 01       	movw	r28, r18
    1ddc:	cc 0f       	add	r28, r28
    1dde:	dd 1f       	adc	r29, r29
    1de0:	cf 5b       	subi	r28, 0xBF	; 191
    1de2:	de 4f       	sbci	r29, 0xFE	; 254
    1de4:	84 cf       	rjmp	.-248    	; 0x1cee <build_map+0x98>
						}
					}
				}
			}
		}
		fi++;
    1de6:	08 94       	sec
    1de8:	e1 1c       	adc	r14, r1
    1dea:	f1 1c       	adc	r15, r1
		if(fi>50)
    1dec:	83 e3       	ldi	r24, 0x33	; 51
    1dee:	e8 16       	cp	r14, r24
    1df0:	f1 04       	cpc	r15, r1
    1df2:	89 f5       	brne	.+98     	; 0x1e56 <build_map+0x200>
		{
		lcd_clear();
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_string("Broke build");
    1dfc:	86 e7       	ldi	r24, 0x76	; 118
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		lcd_write_int_xy(0,1,start_x,2);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	a5 01       	movw	r20, r10
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(3,1,start_y,2);
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	61 e0       	ldi	r22, 0x01	; 1
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	a4 01       	movw	r20, r8
    1e20:	22 e0       	ldi	r18, 0x02	; 2
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(8,1,destn_x,2);
    1e28:	88 e0       	ldi	r24, 0x08	; 8
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	a3 01       	movw	r20, r6
    1e32:	22 e0       	ldi	r18, 0x02	; 2
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(11,1,destn_y,2);
    1e3a:	8b e0       	ldi	r24, 0x0B	; 11
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	a2 01       	movw	r20, r4
    1e44:	22 e0       	ldi	r18, 0x02	; 2
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		delay_sec(2);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    1e54:	10 c0       	rjmp	.+32     	; 0x1e76 <build_map+0x220>
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
    1e56:	fa 01       	movw	r30, r20
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	84 36       	cpi	r24, 0x64	; 100
    1e5e:	91 05       	cpc	r25, r1
    1e60:	51 f4       	brne	.+20     	; 0x1e76 <build_map+0x220>
    1e62:	9f e3       	ldi	r25, 0x3F	; 63
    1e64:	c9 2e       	mov	r12, r25
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	d9 2e       	mov	r13, r25
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
					}
					if(dir_array[l][s][3]=='T' && dir_array[l-1][s][1]=='T')
					{
						if(map_array[l-1][s]==100)
						{
							map_array[l-1][s]=(fi+1);
    1e6e:	87 01       	movw	r16, r14
    1e70:	0f 5f       	subi	r16, 0xFF	; 255
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	95 cf       	rjmp	.-214    	; 0x1da0 <build_map+0x14a>
		lcd_write_int_xy(11,1,destn_y,2);
		delay_sec(2);
		break;
		}
	}
}
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	9f 90       	pop	r9
    1e8c:	8f 90       	pop	r8
    1e8e:	7f 90       	pop	r7
    1e90:	6f 90       	pop	r6
    1e92:	5f 90       	pop	r5
    1e94:	4f 90       	pop	r4
    1e96:	08 95       	ret

00001e98 <checkAndCorrectDirection>:
	bot_brake();
	//delay_millisec(500);
}

void checkAndCorrectDirection(int req_dir)
{
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	ec 01       	movw	r28, r24
	if(req_dir == 1)
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	39 f5       	brne	.+78     	; 0x1ef2 <checkAndCorrectDirection+0x5a>
	{
		switch(dir)
    1ea4:	80 91 16 01 	lds	r24, 0x0116
    1ea8:	90 91 17 01 	lds	r25, 0x0117
    1eac:	2f ef       	ldi	r18, 0xFF	; 255
    1eae:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb0:	92 07       	cpc	r25, r18
    1eb2:	49 f0       	breq	.+18     	; 0x1ec6 <checkAndCorrectDirection+0x2e>
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <checkAndCorrectDirection+0x24>
    1eba:	57 c0       	rjmp	.+174    	; 0x1f6a <checkAndCorrectDirection+0xd2>
    1ebc:	8e 5f       	subi	r24, 0xFE	; 254
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <checkAndCorrectDirection+0x2c>
    1ec2:	a3 c0       	rjmp	.+326    	; 0x200a <checkAndCorrectDirection+0x172>
    1ec4:	7f c0       	rjmp	.+254    	; 0x1fc4 <checkAndCorrectDirection+0x12c>
			case +2: turn_right();sense_of_directon();break;

			case -2:turn_left();sense_of_directon();break;

			case -1:
			if(dir_array[x_coordinate][y_coordinate][0]=='T')
    1ec6:	e0 91 18 01 	lds	r30, 0x0118
    1eca:	f0 91 19 01 	lds	r31, 0x0119
    1ece:	44 e0       	ldi	r20, 0x04	; 4
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	4a 95       	dec	r20
    1ed6:	e1 f7       	brne	.-8      	; 0x1ed0 <checkAndCorrectDirection+0x38>
    1ed8:	80 91 1a 01 	lds	r24, 0x011A
    1edc:	90 91 1b 01 	lds	r25, 0x011B
    1ee0:	e8 0f       	add	r30, r24
    1ee2:	f9 1f       	adc	r31, r25
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	ee 0f       	add	r30, r30
    1eea:	ff 1f       	adc	r31, r31
    1eec:	e1 5c       	subi	r30, 0xC1	; 193
    1eee:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef0:	56 c0       	rjmp	.+172    	; 0x1f9e <checkAndCorrectDirection+0x106>
			

		}
	}

	else if(req_dir == 2)
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	39 f5       	brne	.+78     	; 0x1f46 <checkAndCorrectDirection+0xae>
	{
		switch(dir)
    1ef8:	80 91 16 01 	lds	r24, 0x0116
    1efc:	90 91 17 01 	lds	r25, 0x0117
    1f00:	2f ef       	ldi	r18, 0xFF	; 255
    1f02:	8f 3f       	cpi	r24, 0xFF	; 255
    1f04:	92 07       	cpc	r25, r18
    1f06:	89 f1       	breq	.+98     	; 0x1f6a <checkAndCorrectDirection+0xd2>
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <checkAndCorrectDirection+0x78>
    1f0e:	5a c0       	rjmp	.+180    	; 0x1fc4 <checkAndCorrectDirection+0x12c>
    1f10:	8e 5f       	subi	r24, 0xFE	; 254
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <checkAndCorrectDirection+0x80>
    1f16:	79 c0       	rjmp	.+242    	; 0x200a <checkAndCorrectDirection+0x172>
		{	
			case +1: turn_left();sense_of_directon();break;
			case -1:turn_right();sense_of_directon();break;
			case -2:
			if(dir_array[x_coordinate][y_coordinate][3]=='T')
    1f18:	e0 91 18 01 	lds	r30, 0x0118
    1f1c:	f0 91 19 01 	lds	r31, 0x0119
    1f20:	24 e0       	ldi	r18, 0x04	; 4
    1f22:	ee 0f       	add	r30, r30
    1f24:	ff 1f       	adc	r31, r31
    1f26:	2a 95       	dec	r18
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <checkAndCorrectDirection+0x8a>
    1f2a:	80 91 1a 01 	lds	r24, 0x011A
    1f2e:	90 91 1b 01 	lds	r25, 0x011B
    1f32:	e8 0f       	add	r30, r24
    1f34:	f9 1f       	adc	r31, r25
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e1 5c       	subi	r30, 0xC1	; 193
    1f40:	fc 4f       	sbci	r31, 0xFC	; 252
    1f42:	83 81       	ldd	r24, Z+3	; 0x03
    1f44:	58 c0       	rjmp	.+176    	; 0x1ff6 <checkAndCorrectDirection+0x15e>
				dir = 2;
			}
		}
	}

	else if(req_dir == -1)
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	cf 3f       	cpi	r28, 0xFF	; 255
    1f4a:	d8 07       	cpc	r29, r24
    1f4c:	51 f5       	brne	.+84     	; 0x1fa2 <checkAndCorrectDirection+0x10a>
	{
		switch(dir)
    1f4e:	80 91 16 01 	lds	r24, 0x0116
    1f52:	90 91 17 01 	lds	r25, 0x0117
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	61 f0       	breq	.+24     	; 0x1f74 <checkAndCorrectDirection+0xdc>
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	91 05       	cpc	r25, r1
    1f60:	89 f1       	breq	.+98     	; 0x1fc4 <checkAndCorrectDirection+0x12c>
    1f62:	8e 5f       	subi	r24, 0xFE	; 254
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <checkAndCorrectDirection+0xd2>
    1f68:	50 c0       	rjmp	.+160    	; 0x200a <checkAndCorrectDirection+0x172>
		{	
			case +2: turn_left();sense_of_directon();break;
		
			case -2:turn_right();sense_of_directon();break;
    1f6a:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
    1f6e:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
    1f72:	4b c0       	rjmp	.+150    	; 0x200a <checkAndCorrectDirection+0x172>

			case 1:
			if(dir_array[x_coordinate][y_coordinate][2]=='T')
    1f74:	e0 91 18 01 	lds	r30, 0x0118
    1f78:	f0 91 19 01 	lds	r31, 0x0119
    1f7c:	84 e0       	ldi	r24, 0x04	; 4
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	8a 95       	dec	r24
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <checkAndCorrectDirection+0xe6>
    1f86:	80 91 1a 01 	lds	r24, 0x011A
    1f8a:	90 91 1b 01 	lds	r25, 0x011B
    1f8e:	e8 0f       	add	r30, r24
    1f90:	f9 1f       	adc	r31, r25
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	ef 5b       	subi	r30, 0xBF	; 191
    1f9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f9e:	80 81       	ld	r24, Z
    1fa0:	2a c0       	rjmp	.+84     	; 0x1ff6 <checkAndCorrectDirection+0x15e>
			default:break;
		}
	}


	else if(req_dir == -2)
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	ce 3f       	cpi	r28, 0xFE	; 254
    1fa6:	d8 07       	cpc	r29, r24
    1fa8:	81 f5       	brne	.+96     	; 0x200a <checkAndCorrectDirection+0x172>
	{
		switch(dir)
    1faa:	80 91 16 01 	lds	r24, 0x0116
    1fae:	90 91 17 01 	lds	r25, 0x0117
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	c9 f2       	breq	.-78     	; 0x1f6a <checkAndCorrectDirection+0xd2>
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	91 05       	cpc	r25, r1
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <checkAndCorrectDirection+0x132>
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	19 f5       	brne	.+70     	; 0x200a <checkAndCorrectDirection+0x172>
		{	
			case +1:turn_right();sense_of_directon();break; 
				
			case -1: turn_left();sense_of_directon();break;
    1fc4:	0e 94 65 05 	call	0xaca	; 0xaca <turn_left>
    1fc8:	d2 cf       	rjmp	.-92     	; 0x1f6e <checkAndCorrectDirection+0xd6>
					
			case 2:
			if(dir_array[x_coordinate][y_coordinate][1]=='T')
    1fca:	e0 91 18 01 	lds	r30, 0x0118
    1fce:	f0 91 19 01 	lds	r31, 0x0119
    1fd2:	a4 e0       	ldi	r26, 0x04	; 4
    1fd4:	ee 0f       	add	r30, r30
    1fd6:	ff 1f       	adc	r31, r31
    1fd8:	aa 95       	dec	r26
    1fda:	e1 f7       	brne	.-8      	; 0x1fd4 <checkAndCorrectDirection+0x13c>
    1fdc:	80 91 1a 01 	lds	r24, 0x011A
    1fe0:	90 91 1b 01 	lds	r25, 0x011B
    1fe4:	e8 0f       	add	r30, r24
    1fe6:	f9 1f       	adc	r31, r25
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e1 5c       	subi	r30, 0xC1	; 193
    1ff2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ff4:	81 81       	ldd	r24, Z+1	; 0x01
    1ff6:	84 35       	cpi	r24, 0x54	; 84
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <checkAndCorrectDirection+0x166>
			{
				turn_right();
    1ffa:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
				turn_right();
				dir = -2;
			}
			else
			{
				turn_right();
    1ffe:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
				dir = -2;
    2002:	d0 93 17 01 	sts	0x0117, r29
    2006:	c0 93 16 01 	sts	0x0116, r28
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    200a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    200c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    200e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2010:	af 9a       	sbi	0x15, 7	; 21

		}
	}
	bot_brake();
	//delay_sec(1);
}
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	08 95       	ret

00002018 <go_to_coordinate>:
		}
	}
}

void go_to_coordinate(int next_x, int next_y)
{
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	ec 01       	movw	r28, r24
    2022:	8b 01       	movw	r16, r22
	if (next_x > x_coordinate)
    2024:	80 91 18 01 	lds	r24, 0x0118
    2028:	90 91 19 01 	lds	r25, 0x0119
    202c:	8c 17       	cp	r24, r28
    202e:	9d 07       	cpc	r25, r29
    2030:	9c f4       	brge	.+38     	; 0x2058 <go_to_coordinate+0x40>
	{	
		checkAndCorrectDirection(1);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <checkAndCorrectDirection>
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <go_to_coordinate+0x28>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    203c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
void go_to_coordinate(int next_x, int next_y)
{
	if (next_x > x_coordinate)
	{	
		checkAndCorrectDirection(1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    2040:	cd 9b       	sbis	0x19, 5	; 25
    2042:	05 c0       	rjmp	.+10     	; 0x204e <go_to_coordinate+0x36>
    2044:	cf 99       	sbic	0x19, 7	; 25
    2046:	fa cf       	rjmp	.-12     	; 0x203c <go_to_coordinate+0x24>
    2048:	02 c0       	rjmp	.+4      	; 0x204e <go_to_coordinate+0x36>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    204a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    204e:	cc 9b       	sbis	0x19, 4	; 25
    2050:	4c c0       	rjmp	.+152    	; 0x20ea <go_to_coordinate+0xd2>
    2052:	87 99       	sbic	0x10, 7	; 16
    2054:	fa cf       	rjmp	.-12     	; 0x204a <go_to_coordinate+0x32>
    2056:	49 c0       	rjmp	.+146    	; 0x20ea <go_to_coordinate+0xd2>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
    2058:	c8 17       	cp	r28, r24
    205a:	d9 07       	cpc	r29, r25
    205c:	9c f4       	brge	.+38     	; 0x2084 <go_to_coordinate+0x6c>
	{
		checkAndCorrectDirection(-1);
    205e:	8f ef       	ldi	r24, 0xFF	; 255
    2060:	9f ef       	ldi	r25, 0xFF	; 255
    2062:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <checkAndCorrectDirection>
    2066:	02 c0       	rjmp	.+4      	; 0x206c <go_to_coordinate+0x54>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    2068:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
	{
		checkAndCorrectDirection(-1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    206c:	cd 9b       	sbis	0x19, 5	; 25
    206e:	05 c0       	rjmp	.+10     	; 0x207a <go_to_coordinate+0x62>
    2070:	cf 99       	sbic	0x19, 7	; 25
    2072:	fa cf       	rjmp	.-12     	; 0x2068 <go_to_coordinate+0x50>
    2074:	02 c0       	rjmp	.+4      	; 0x207a <go_to_coordinate+0x62>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    2076:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    207a:	cc 9b       	sbis	0x19, 4	; 25
    207c:	36 c0       	rjmp	.+108    	; 0x20ea <go_to_coordinate+0xd2>
    207e:	87 99       	sbic	0x10, 7	; 16
    2080:	fa cf       	rjmp	.-12     	; 0x2076 <go_to_coordinate+0x5e>
    2082:	33 c0       	rjmp	.+102    	; 0x20ea <go_to_coordinate+0xd2>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}

	else if (next_y>y_coordinate)
    2084:	80 91 1a 01 	lds	r24, 0x011A
    2088:	90 91 1b 01 	lds	r25, 0x011B
    208c:	86 17       	cp	r24, r22
    208e:	97 07       	cpc	r25, r23
    2090:	9c f4       	brge	.+38     	; 0x20b8 <go_to_coordinate+0xa0>
	{	
		checkAndCorrectDirection(2);
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <checkAndCorrectDirection>
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <go_to_coordinate+0x88>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    209c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}

	else if (next_y>y_coordinate)
	{	
		checkAndCorrectDirection(2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    20a0:	cd 9b       	sbis	0x19, 5	; 25
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <go_to_coordinate+0x96>
    20a4:	cf 99       	sbic	0x19, 7	; 25
    20a6:	fa cf       	rjmp	.-12     	; 0x209c <go_to_coordinate+0x84>
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <go_to_coordinate+0x96>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    20aa:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    20ae:	cc 9b       	sbis	0x19, 4	; 25
    20b0:	1c c0       	rjmp	.+56     	; 0x20ea <go_to_coordinate+0xd2>
    20b2:	87 99       	sbic	0x10, 7	; 16
    20b4:	fa cf       	rjmp	.-12     	; 0x20aa <go_to_coordinate+0x92>
    20b6:	19 c0       	rjmp	.+50     	; 0x20ea <go_to_coordinate+0xd2>
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}
	else if(next_y<y_coordinate)
    20b8:	68 17       	cp	r22, r24
    20ba:	79 07       	cpc	r23, r25
    20bc:	04 f5       	brge	.+64     	; 0x20fe <go_to_coordinate+0xe6>
	{
		right=0;
    20be:	10 92 40 07 	sts	0x0740, r1
    20c2:	10 92 3f 07 	sts	0x073F, r1
		checkAndCorrectDirection(-2);
    20c6:	8e ef       	ldi	r24, 0xFE	; 254
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <checkAndCorrectDirection>
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <go_to_coordinate+0xbc>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    20d0:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}
	else if(next_y<y_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    20d4:	cd 9b       	sbis	0x19, 5	; 25
    20d6:	05 c0       	rjmp	.+10     	; 0x20e2 <go_to_coordinate+0xca>
    20d8:	cf 99       	sbic	0x19, 7	; 25
    20da:	fa cf       	rjmp	.-12     	; 0x20d0 <go_to_coordinate+0xb8>
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <go_to_coordinate+0xca>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    20de:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    20e2:	cc 9b       	sbis	0x19, 4	; 25
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <go_to_coordinate+0xd2>
    20e6:	87 99       	sbic	0x10, 7	; 16
    20e8:	fa cf       	rjmp	.-12     	; 0x20de <go_to_coordinate+0xc6>
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    20ea:	8f e8       	ldi	r24, 0x8F	; 143
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	99 bd       	out	0x29, r25	; 41
    20f0:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    20f2:	9b bd       	out	0x2b, r25	; 43
    20f4:	8a bd       	out	0x2a, r24	; 42
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    20f6:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    20f8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    20fa:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    20fc:	af 9a       	sbi	0x15, 7	; 21
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}	
	x_coordinate = next_x;               ///good work
    20fe:	d0 93 19 01 	sts	0x0119, r29
    2102:	c0 93 18 01 	sts	0x0118, r28
	y_coordinate = next_y;
    2106:	10 93 1b 01 	sts	0x011B, r17
    210a:	00 93 1a 01 	sts	0x011A, r16
	lcd_clear();
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,1,x_coordinate,2);
    2116:	40 91 18 01 	lds	r20, 0x0118
    211a:	50 91 19 01 	lds	r21, 0x0119
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	22 e0       	ldi	r18, 0x02	; 2
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(5,1,y_coordinate,2);
    212e:	40 91 1a 01 	lds	r20, 0x011A
    2132:	50 91 1b 01 	lds	r21, 0x011B
    2136:	85 e0       	ldi	r24, 0x05	; 5
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	22 e0       	ldi	r18, 0x02	; 2
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(3,0,irc,5);
    2146:	40 91 2b 01 	lds	r20, 0x012B
    214a:	50 91 2c 01 	lds	r21, 0x012C
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	25 e0       	ldi	r18, 0x05	; 5
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    215e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2160:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2162:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2164:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	//delay_millisec(500);
}
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	08 95       	ret

00002170 <print_path>:
		}
	}
}

void print_path()
{
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
	int a=0,b=0;
	lcd_clear();
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
    2188:	05 e4       	ldi	r16, 0x45	; 69
    218a:	17 e0       	ldi	r17, 0x07	; 7
    218c:	c0 e0       	ldi	r28, 0x00	; 0
    218e:	d0 e0       	ldi	r29, 0x00	; 0
    2190:	ee 24       	eor	r14, r14
    2192:	ff 24       	eor	r15, r15
    2194:	cc 24       	eor	r12, r12
    2196:	dd 24       	eor	r13, r13
    2198:	21 c0       	rjmp	.+66     	; 0x21dc <print_path+0x6c>
	for(int i = 0; i<=ipl;i++)
	{
		lcd_write_int_xy(a,b, path_array[i][0],2);
    219a:	f8 01       	movw	r30, r16
    219c:	40 81       	ld	r20, Z
    219e:	51 81       	ldd	r21, Z+1	; 0x01
    21a0:	ce 01       	movw	r24, r28
    21a2:	b7 01       	movw	r22, r14
    21a4:	22 e0       	ldi	r18, 0x02	; 2
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		a+=2;
		lcd_write_int_xy(a,b, path_array[i][1],2);
    21ac:	f8 01       	movw	r30, r16
    21ae:	42 81       	ldd	r20, Z+2	; 0x02
    21b0:	53 81       	ldd	r21, Z+3	; 0x03
    21b2:	ce 01       	movw	r24, r28
    21b4:	02 96       	adiw	r24, 0x02	; 2
    21b6:	b7 01       	movw	r22, r14
    21b8:	22 e0       	ldi	r18, 0x02	; 2
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		a+=3;
    21c0:	25 96       	adiw	r28, 0x05	; 5
		if(a>13)
    21c2:	ce 30       	cpi	r28, 0x0E	; 14
    21c4:	d1 05       	cpc	r29, r1
    21c6:	2c f0       	brlt	.+10     	; 0x21d2 <print_path+0x62>
    21c8:	c0 e0       	ldi	r28, 0x00	; 0
    21ca:	d0 e0       	ldi	r29, 0x00	; 0
    21cc:	51 e0       	ldi	r21, 0x01	; 1
    21ce:	e5 2e       	mov	r14, r21
    21d0:	f1 2c       	mov	r15, r1

void print_path()
{
	int a=0,b=0;
	lcd_clear();
	for(int i = 0; i<=ipl;i++)
    21d2:	08 94       	sec
    21d4:	c1 1c       	adc	r12, r1
    21d6:	d1 1c       	adc	r13, r1
    21d8:	0c 5f       	subi	r16, 0xFC	; 252
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	80 91 39 01 	lds	r24, 0x0139
    21e0:	90 91 3a 01 	lds	r25, 0x013A
    21e4:	8c 15       	cp	r24, r12
    21e6:	9d 05       	cpc	r25, r13
    21e8:	c4 f6       	brge	.-80     	; 0x219a <print_path+0x2a>
		{
			b=1;
			a=0;
		}
	}
}
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	ff 90       	pop	r15
    21f4:	ef 90       	pop	r14
    21f6:	df 90       	pop	r13
    21f8:	cf 90       	pop	r12
    21fa:	08 95       	ret

000021fc <end_zone>:
void end_zone()
{
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
	int endx = x_coordinate, endy = y_coordinate;
    2218:	60 90 18 01 	lds	r6, 0x0118
    221c:	70 90 19 01 	lds	r7, 0x0119
    2220:	80 90 1a 01 	lds	r8, 0x011A
    2224:	90 90 1b 01 	lds	r9, 0x011B
			update_array('F','F','T','F');
    2228:	86 e4       	ldi	r24, 0x46	; 70
    222a:	66 e4       	ldi	r22, 0x46	; 70
    222c:	44 e5       	ldi	r20, 0x54	; 84
    222e:	26 e4       	ldi	r18, 0x46	; 70
    2230:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_clear();
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    223c:	8f e8       	ldi	r24, 0x8F	; 143
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	9b bd       	out	0x2b, r25	; 43
    2242:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2244:	99 bd       	out	0x29, r25	; 41
    2246:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2248:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    224a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    224c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    224e:	af 9a       	sbi	0x15, 7	; 21
			set_pwm1a(399);
			set_pwm1b(399);
			bot_brake();
			flick();
    2250:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
			//delay_sec(1);
			build_map(7,7,endx,endy);
    2254:	87 e0       	ldi	r24, 0x07	; 7
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	67 e0       	ldi	r22, 0x07	; 7
    225a:	70 e0       	ldi	r23, 0x00	; 0
    225c:	a3 01       	movw	r20, r6
    225e:	94 01       	movw	r18, r8
    2260:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <build_map>
			int tempx = x_coordinate, tempy = y_coordinate;
    2264:	a0 90 18 01 	lds	r10, 0x0118
    2268:	b0 90 19 01 	lds	r11, 0x0119
    226c:	c0 90 1a 01 	lds	r12, 0x011A
    2270:	d0 90 1b 01 	lds	r13, 0x011B
			x_coordinate = 7;
    2274:	87 e0       	ldi	r24, 0x07	; 7
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	90 93 19 01 	sts	0x0119, r25
    227c:	80 93 18 01 	sts	0x0118, r24
			y_coordinate = 7;
    2280:	90 93 1b 01 	sts	0x011B, r25
    2284:	80 93 1a 01 	sts	0x011A, r24
			get_path();
    2288:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_path>
    228c:	65 e4       	ldi	r22, 0x45	; 69
    228e:	e6 2e       	mov	r14, r22
    2290:	67 e0       	ldi	r22, 0x07	; 7
    2292:	f6 2e       	mov	r15, r22
    2294:	87 01       	movw	r16, r14
    2296:	c0 e0       	ldi	r28, 0x00	; 0
    2298:	d0 e0       	ldi	r29, 0x00	; 0
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
			{
				eeprom_write_word(eeprom_addr,path_array[i][0]);
    229a:	f8 01       	movw	r30, r16
    229c:	60 81       	ld	r22, Z
    229e:	71 81       	ldd	r23, Z+1	; 0x01
    22a0:	ce 01       	movw	r24, r28
    22a2:	0e 94 3e 19 	call	0x327c	; 0x327c <__eewr_word_m32>
				eeprom_addr+=2;
				eeprom_write_word(eeprom_addr,path_array[i][1]);
    22a6:	f8 01       	movw	r30, r16
    22a8:	62 81       	ldd	r22, Z+2	; 0x02
    22aa:	73 81       	ldd	r23, Z+3	; 0x03
    22ac:	ce 01       	movw	r24, r28
    22ae:	02 96       	adiw	r24, 0x02	; 2
    22b0:	0e 94 3e 19 	call	0x327c	; 0x327c <__eewr_word_m32>
    22b4:	0c 5f       	subi	r16, 0xFC	; 252
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	24 96       	adiw	r28, 0x04	; 4
			int tempx = x_coordinate, tempy = y_coordinate;
			x_coordinate = 7;
			y_coordinate = 7;
			get_path();
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
    22ba:	cc 33       	cpi	r28, 0x3C	; 60
    22bc:	d1 05       	cpc	r29, r1
    22be:	69 f7       	brne	.-38     	; 0x229a <end_zone+0x9e>
				eeprom_write_word(eeprom_addr,path_array[i][0]);
				eeprom_addr+=2;
				eeprom_write_word(eeprom_addr,path_array[i][1]);
				eeprom_addr+=2;
			}
			x_coordinate = tempx;
    22c0:	b0 92 19 01 	sts	0x0119, r11
    22c4:	a0 92 18 01 	sts	0x0118, r10
			y_coordinate = tempy;
    22c8:	d0 92 1b 01 	sts	0x011B, r13
    22cc:	c0 92 1a 01 	sts	0x011A, r12
			end_zone_uturn();
    22d0:	0e 94 27 05 	call	0xa4e	; 0xa4e <end_zone_uturn>
			sense_of_directon();
    22d4:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
			fill_missed_array();
    22d8:	0e 94 41 09 	call	0x1282	; 0x1282 <fill_missed_array>
			coordinates_tobe_reached();
    22dc:	0e 94 dd 09 	call	0x13ba	; 0x13ba <coordinates_tobe_reached>
			
			lcd_clear();
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			
			lcd_write_string_xy(0,0,"mx: ");
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	60 e0       	ldi	r22, 0x00	; 0
    22ee:	70 e0       	ldi	r23, 0x00	; 0
    22f0:	42 e8       	ldi	r20, 0x82	; 130
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,0,mx,2);
    22f8:	40 91 31 01 	lds	r20, 0x0131
    22fc:	50 91 32 01 	lds	r21, 0x0132
    2300:	84 e0       	ldi	r24, 0x04	; 4
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	60 e0       	ldi	r22, 0x00	; 0
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	22 e0       	ldi	r18, 0x02	; 2
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,0,"my: ");
    2310:	87 e0       	ldi	r24, 0x07	; 7
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	60 e0       	ldi	r22, 0x00	; 0
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	47 e8       	ldi	r20, 0x87	; 135
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,0,my,2);
    2320:	40 91 33 01 	lds	r20, 0x0133
    2324:	50 91 34 01 	lds	r21, 0x0134
    2328:	8b e0       	ldi	r24, 0x0B	; 11
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	22 e0       	ldi	r18, 0x02	; 2
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(0,1,"x: ");
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	4c e8       	ldi	r20, 0x8C	; 140
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,1,x_coordinate,2);
    2348:	40 91 18 01 	lds	r20, 0x0118
    234c:	50 91 19 01 	lds	r21, 0x0119
    2350:	84 e0       	ldi	r24, 0x04	; 4
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	22 e0       	ldi	r18, 0x02	; 2
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,1,"y: ");
    2360:	87 e0       	ldi	r24, 0x07	; 7
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	40 e9       	ldi	r20, 0x90	; 144
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,1,y_coordinate,2);
    2370:	40 91 1a 01 	lds	r20, 0x011A
    2374:	50 91 1b 01 	lds	r21, 0x011B
    2378:	8b e0       	ldi	r24, 0x0B	; 11
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	61 e0       	ldi	r22, 0x01	; 1
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	22 e0       	ldi	r18, 0x02	; 2
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			//delay_sec(5);
			if(mx!=0 && my!=0)
    2388:	80 91 31 01 	lds	r24, 0x0131
    238c:	90 91 32 01 	lds	r25, 0x0132
    2390:	89 2b       	or	r24, r25
    2392:	41 f0       	breq	.+16     	; 0x23a4 <end_zone+0x1a8>
    2394:	80 91 33 01 	lds	r24, 0x0133
    2398:	90 91 34 01 	lds	r25, 0x0134
    239c:	89 2b       	or	r24, r25
    239e:	11 f0       	breq	.+4      	; 0x23a4 <end_zone+0x1a8>
			{
				map_all();
    23a0:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <map_all>
			}
			x_coordinate = 7;
    23a4:	87 e0       	ldi	r24, 0x07	; 7
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	90 93 19 01 	sts	0x0119, r25
    23ac:	80 93 18 01 	sts	0x0118, r24
			y_coordinate = 7;
    23b0:	90 93 1b 01 	sts	0x011B, r25
    23b4:	80 93 1a 01 	sts	0x011A, r24
			dir = 2;
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	90 93 17 01 	sts	0x0117, r25
    23c0:	80 93 16 01 	sts	0x0116, r24
			
			
			lcd_write_string("Press Any Key");
    23c4:	84 e9       	ldi	r24, 0x94	; 148
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    23cc:	82 99       	sbic	0x10, 2	; 16
    23ce:	5f c0       	rjmp	.+190    	; 0x248e <end_zone+0x292>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					build_map(7,7,endx,endy);
    23d0:	87 e0       	ldi	r24, 0x07	; 7
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	67 e0       	ldi	r22, 0x07	; 7
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	a3 01       	movw	r20, r6
    23da:	94 01       	movw	r18, r8
    23dc:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <build_map>
					get_path();
    23e0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_path>
    23e4:	05 e4       	ldi	r16, 0x45	; 69
    23e6:	17 e0       	ldi	r17, 0x07	; 7
    23e8:	c0 e0       	ldi	r28, 0x00	; 0
    23ea:	d0 e0       	ldi	r29, 0x00	; 0
					unsigned char eeprom_addr=0x0000;
					for(int i=0;i<15;i++)
					{
						eeprom_write_word(eeprom_addr,path_array[i][0]);
    23ec:	f8 01       	movw	r30, r16
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	ce 01       	movw	r24, r28
    23f4:	0e 94 3e 19 	call	0x327c	; 0x327c <__eewr_word_m32>
						eeprom_addr+=2;
						eeprom_write_word(eeprom_addr,path_array[i][1]);
    23f8:	f8 01       	movw	r30, r16
    23fa:	62 81       	ldd	r22, Z+2	; 0x02
    23fc:	73 81       	ldd	r23, Z+3	; 0x03
    23fe:	ce 01       	movw	r24, r28
    2400:	02 96       	adiw	r24, 0x02	; 2
    2402:	0e 94 3e 19 	call	0x327c	; 0x327c <__eewr_word_m32>
    2406:	0c 5f       	subi	r16, 0xFC	; 252
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	24 96       	adiw	r28, 0x04	; 4
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					build_map(7,7,endx,endy);
					get_path();
					unsigned char eeprom_addr=0x0000;
					for(int i=0;i<15;i++)
    240c:	cc 33       	cpi	r28, 0x3C	; 60
    240e:	d1 05       	cpc	r29, r1
    2410:	69 f7       	brne	.-38     	; 0x23ec <end_zone+0x1f0>
						eeprom_write_word(eeprom_addr,path_array[i][0]);
						eeprom_addr+=2;
						eeprom_write_word(eeprom_addr,path_array[i][1]);
						eeprom_addr+=2;
					}
					lcd_clear();
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Stored In EP");
    241a:	82 ea       	ldi	r24, 0xA2	; 162
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					right = 0;
    242a:	10 92 40 07 	sts	0x0740, r1
    242e:	10 92 3f 07 	sts	0x073F, r1
					print_path();
    2432:	0e 94 b8 10 	call	0x2170	; 0x2170 <print_path>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2436:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2438:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    243a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    243c:	af 9a       	sbi	0x15, 7	; 21
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    243e:	82 99       	sbic	0x10, 2	; 16
    2440:	2d c0       	rjmp	.+90     	; 0x249c <end_zone+0x2a0>
					while(1)
					{
						
						if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
						{	
							lcd_clear();
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
							delay_sec(1);
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
							break;
						}
					}
					for(int i=0; i<15; i++)
					{
						if(path_array[i][0]==0 && path_array[i][1]==0)
    2452:	f7 01       	movw	r30, r14
    2454:	20 81       	ld	r18, Z
    2456:	31 81       	ldd	r19, Z+1	; 0x01
    2458:	21 15       	cp	r18, r1
    245a:	31 05       	cpc	r19, r1
    245c:	21 f4       	brne	.+8      	; 0x2466 <end_zone+0x26a>
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	89 2b       	or	r24, r25
    2464:	79 f0       	breq	.+30     	; 0x2484 <end_zone+0x288>
						{
							break;
						}
						
						go_to_coordinate(path_array[i][0], path_array[i][1]);
    2466:	f7 01       	movw	r30, r14
    2468:	62 81       	ldd	r22, Z+2	; 0x02
    246a:	73 81       	ldd	r23, Z+3	; 0x03
    246c:	c9 01       	movw	r24, r18
    246e:	0e 94 0c 10 	call	0x2018	; 0x2018 <go_to_coordinate>
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	e8 0e       	add	r14, r24
    2478:	f9 1e       	adc	r15, r25
							lcd_clear();
							delay_sec(1);
							break;
						}
					}
					for(int i=0; i<15; i++)
    247a:	91 e8       	ldi	r25, 0x81	; 129
    247c:	e9 16       	cp	r14, r25
    247e:	97 e0       	ldi	r25, 0x07	; 7
    2480:	f9 06       	cpc	r15, r25
    2482:	39 f7       	brne	.-50     	; 0x2452 <end_zone+0x256>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_stop(void)
{
 MOTOR1A=0;
    2484:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
    2486:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
    2488:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
    248a:	af 98       	cbi	0x15, 7	; 21
    248c:	fb cf       	rjmp	.-10     	; 0x2484 <end_zone+0x288>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    248e:	80 9b       	sbis	0x10, 0	; 16
    2490:	9f cf       	rjmp	.-194    	; 0x23d0 <end_zone+0x1d4>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2492:	81 9b       	sbis	0x10, 1	; 16
    2494:	9d cf       	rjmp	.-198    	; 0x23d0 <end_zone+0x1d4>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2496:	83 9b       	sbis	0x10, 3	; 16
    2498:	9b cf       	rjmp	.-202    	; 0x23d0 <end_zone+0x1d4>
    249a:	98 cf       	rjmp	.-208    	; 0x23cc <end_zone+0x1d0>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    249c:	80 9b       	sbis	0x10, 0	; 16
    249e:	d1 cf       	rjmp	.-94     	; 0x2442 <end_zone+0x246>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    24a0:	81 9b       	sbis	0x10, 1	; 16
    24a2:	cf cf       	rjmp	.-98     	; 0x2442 <end_zone+0x246>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    24a4:	83 9b       	sbis	0x10, 3	; 16
    24a6:	cd cf       	rjmp	.-102    	; 0x2442 <end_zone+0x246>
    24a8:	ca cf       	rjmp	.-108    	; 0x243e <end_zone+0x242>

000024aa <right_junc_check>:
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    24aa:	8f e8       	ldi	r24, 0x8F	; 143
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	9b bd       	out	0x2b, r25	; 43
    24b0:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    24b2:	99 bd       	out	0x29, r25	; 41
    24b4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    24b6:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    24b8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    24ba:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    24bc:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	// lcd_clear();
	// lcd_write_int_xy(0,0,irc,5);
	//delay_sec(1);
	
	lcd_clear();
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	if(irc>2000)
    24c6:	20 91 2b 01 	lds	r18, 0x012B
    24ca:	30 91 2c 01 	lds	r19, 0x012C
    24ce:	87 e0       	ldi	r24, 0x07	; 7
    24d0:	21 3d       	cpi	r18, 0xD1	; 209
    24d2:	38 07       	cpc	r19, r24
    24d4:	1c f0       	brlt	.+6      	; 0x24dc <right_junc_check+0x32>
	{
		// lcd_write_string("Sixty");
		
		Coordinates_changed_by = 2;
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <right_junc_check+0x36>
	}
	else
	{
		// lcd_write_string("Thirty");
		Coordinates_changed_by = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	90 93 30 01 	sts	0x0130, r25
    24e4:	80 93 2f 01 	sts	0x012F, r24
	}

	
	//delay_sec(2);
	if(irc==0)
    24e8:	23 2b       	or	r18, r19
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <right_junc_check+0x4a>
	{
		Coordinates_changed_by = 0;
    24ec:	10 92 30 01 	sts	0x0130, r1
    24f0:	10 92 2f 01 	sts	0x012F, r1
	}
	update_coordinates();
    24f4:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_coordinates>
	lcountPrev = lcount;
    24f8:	80 91 23 01 	lds	r24, 0x0123
    24fc:	90 91 24 01 	lds	r25, 0x0124
    2500:	90 93 28 01 	sts	0x0128, r25
    2504:	80 93 27 01 	sts	0x0127, r24
    2508:	04 c0       	rjmp	.+8      	; 0x2512 <right_junc_check+0x68>
	while(bit_is_set(PIND, 7))
	{
		line_track_new();
    250a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		left_count();
    250e:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
	{
		Coordinates_changed_by = 0;
	}
	update_coordinates();
	lcountPrev = lcount;
	while(bit_is_set(PIND, 7))
    2512:	87 99       	sbic	0x10, 7	; 16
    2514:	fa cf       	rjmp	.-12     	; 0x250a <right_junc_check+0x60>
	{
		line_track_new();
		left_count();
	}
	if(bit_is_clear(PINA,6) && bit_is_clear(PIND,6) && bit_is_clear(PINA,5) && bit_is_clear(PINA,7))
    2516:	ce 99       	sbic	0x19, 6	; 25
    2518:	08 c0       	rjmp	.+16     	; 0x252a <right_junc_check+0x80>
    251a:	86 99       	sbic	0x10, 6	; 16
    251c:	06 c0       	rjmp	.+12     	; 0x252a <right_junc_check+0x80>
    251e:	cd 99       	sbic	0x19, 5	; 25
    2520:	04 c0       	rjmp	.+8      	; 0x252a <right_junc_check+0x80>
    2522:	cf 99       	sbic	0x19, 7	; 25
    2524:	02 c0       	rjmp	.+4      	; 0x252a <right_junc_check+0x80>
	{
		end_zone();
    2526:	0e 94 fe 10 	call	0x21fc	; 0x21fc <end_zone>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    252a:	8f e8       	ldi	r24, 0x8F	; 143
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	9b bd       	out	0x2b, r25	; 43
    2530:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2532:	99 bd       	out	0x29, r25	; 41
    2534:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2536:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2538:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    253a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    253c:	af 9a       	sbi	0x15, 7	; 21
	
	//left_count();
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	lcd_clear();
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,0,lcount,1);
    2546:	40 91 23 01 	lds	r20, 0x0123
    254a:	50 91 24 01 	lds	r21, 0x0124
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	//delay_sec(2);
	if(repeat<=2)
    255e:	80 91 37 01 	lds	r24, 0x0137
    2562:	90 91 38 01 	lds	r25, 0x0138
    2566:	03 97       	sbiw	r24, 0x03	; 3
    2568:	0c f0       	brlt	.+2      	; 0x256c <right_junc_check+0xc2>
    256a:	a7 c0       	rjmp	.+334    	; 0x26ba <right_junc_check+0x210>
	{
		
		//End Condition
		
		if(bit_is_clear(PINA,6) || bit_is_clear(PIND,6))
    256c:	ce 9b       	sbis	0x19, 6	; 25
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <right_junc_check+0xca>
    2570:	86 99       	sbic	0x10, 6	; 16
    2572:	07 c0       	rjmp	.+14     	; 0x2582 <right_junc_check+0xd8>
		{
			straight = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	90 93 26 01 	sts	0x0126, r25
    257c:	80 93 25 01 	sts	0x0125, r24
    2580:	04 c0       	rjmp	.+8      	; 0x258a <right_junc_check+0xe0>
		}
		else
		{
			straight = 0;
    2582:	10 92 26 01 	sts	0x0126, r1
    2586:	10 92 25 01 	sts	0x0125, r1
		}
		
		
		turn_right();						////actual turn
    258a:	0e 94 b3 05 	call	0xb66	; 0xb66 <turn_right>
		
		l = 0;
    258e:	10 92 22 01 	sts	0x0122, r1
    2592:	10 92 21 01 	sts	0x0121, r1
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2596:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2598:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    259a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    259c:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		//delay_millisec(100);
		flag1 = 0;
    259e:	10 92 2a 01 	sts	0x012A, r1
    25a2:	10 92 29 01 	sts	0x0129, r1
		irc = 0;
    25a6:	10 92 2c 01 	sts	0x012C, r1
    25aa:	10 92 2b 01 	sts	0x012B, r1
		temp = lcount - lcountPrev;
    25ae:	20 91 23 01 	lds	r18, 0x0123
    25b2:	30 91 24 01 	lds	r19, 0x0124
    25b6:	80 91 27 01 	lds	r24, 0x0127
    25ba:	90 91 28 01 	lds	r25, 0x0128
    25be:	28 1b       	sub	r18, r24
    25c0:	39 0b       	sbc	r19, r25
    25c2:	30 93 2e 01 	sts	0x012E, r19
    25c6:	20 93 2d 01 	sts	0x012D, r18
		//delay_millisec(2000);
		// lcd_clear();
		
		//delay_sec(2);
		//lcd_clear();
		if(straight==1 && temp>=1)
    25ca:	80 91 25 01 	lds	r24, 0x0125
    25ce:	90 91 26 01 	lds	r25, 0x0126
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	91 05       	cpc	r25, r1
    25d6:	a9 f4       	brne	.+42     	; 0x2602 <right_junc_check+0x158>
    25d8:	12 16       	cp	r1, r18
    25da:	13 06       	cpc	r1, r19
    25dc:	0c f0       	brlt	.+2      	; 0x25e0 <right_junc_check+0x136>
    25de:	4b c0       	rjmp	.+150    	; 0x2676 <right_junc_check+0x1cc>
		{
			lcd_write_string_xy(0,1,"+ Detected");
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	61 e0       	ldi	r22, 0x01	; 1
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	4f ea       	ldi	r20, 0xAF	; 175
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('T','T','T','T');
    25f0:	84 e5       	ldi	r24, 0x54	; 84
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	64 e5       	ldi	r22, 0x54	; 84
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	44 e5       	ldi	r20, 0x54	; 84
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	24 e5       	ldi	r18, 0x54	; 84
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4c c0       	rjmp	.+152    	; 0x269a <right_junc_check+0x1f0>
			lcd_write_string_xy(4,0,"TTTF");
		} 
		else if(straight==0 && temp>=1)
    2602:	89 2b       	or	r24, r25
    2604:	09 f0       	breq	.+2      	; 0x2608 <right_junc_check+0x15e>
    2606:	53 c0       	rjmp	.+166    	; 0x26ae <right_junc_check+0x204>
    2608:	12 16       	cp	r1, r18
    260a:	13 06       	cpc	r1, r19
    260c:	cc f4       	brge	.+50     	; 0x2640 <right_junc_check+0x196>
		{
			lcd_write_string_xy(0,1,"T Detected");
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	4f eb       	ldi	r20, 0xBF	; 191
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('F','T','T','T');
    261e:	86 e4       	ldi	r24, 0x46	; 70
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	64 e5       	ldi	r22, 0x54	; 84
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	44 e5       	ldi	r20, 0x54	; 84
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	24 e5       	ldi	r18, 0x54	; 84
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_write_string_xy(4,0,"FTTT");
    2632:	84 e0       	ldi	r24, 0x04	; 4
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	4a ec       	ldi	r20, 0xCA	; 202
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	35 c0       	rjmp	.+106    	; 0x26aa <right_junc_check+0x200>
		}
		else if(straight==0 && temp==0)
    2640:	23 2b       	or	r18, r19
    2642:	a9 f5       	brne	.+106    	; 0x26ae <right_junc_check+0x204>
		{
			lcd_write_string_xy(0,1,"L Detected");
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	61 e0       	ldi	r22, 0x01	; 1
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	4f ec       	ldi	r20, 0xCF	; 207
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('F','T','T','F');
    2654:	86 e4       	ldi	r24, 0x46	; 70
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	64 e5       	ldi	r22, 0x54	; 84
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	44 e5       	ldi	r20, 0x54	; 84
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	26 e4       	ldi	r18, 0x46	; 70
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_write_string_xy(4,0,"FTTF");
    2668:	84 e0       	ldi	r24, 0x04	; 4
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	4a ed       	ldi	r20, 0xDA	; 218
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	1a c0       	rjmp	.+52     	; 0x26aa <right_junc_check+0x200>
		}
		else if(straight==1 && temp==0)
    2676:	23 2b       	or	r18, r19
    2678:	d1 f4       	brne	.+52     	; 0x26ae <right_junc_check+0x204>
		{
			lcd_write_string_xy(0,1,"|- Detected");
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	61 e0       	ldi	r22, 0x01	; 1
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	4f ed       	ldi	r20, 0xDF	; 223
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('T','T','T','F');
    268a:	84 e5       	ldi	r24, 0x54	; 84
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	64 e5       	ldi	r22, 0x54	; 84
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	44 e5       	ldi	r20, 0x54	; 84
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	26 e4       	ldi	r18, 0x46	; 70
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
			lcd_write_string_xy(4,0,"TTTF");
    269e:	84 e0       	ldi	r24, 0x04	; 4
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	4a eb       	ldi	r20, 0xBA	; 186
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		}
		//delay_millisec(1000);
		temp = 0;
    26ae:	10 92 2e 01 	sts	0x012E, r1
    26b2:	10 92 2d 01 	sts	0x012D, r1
		sense_of_directon();
    26b6:	0e 94 03 06 	call	0xc06	; 0xc06 <sense_of_directon>
    26ba:	08 95       	ret

000026bc <main>:
				}

			}
}
int main(void)
{
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
	init_devices();
    26c8:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0 ; j<16; j++)
		{
			for(k=0 ; k<4 ; k++)
			{
				dir_array[i][j][k] = 'F';
    26d8:	46 e4       	ldi	r20, 0x46	; 70
    26da:	0e c0       	rjmp	.+28     	; 0x26f8 <main+0x3c>
    26dc:	40 83       	st	Z, r20
    26de:	41 83       	std	Z+1, r20	; 0x01
    26e0:	42 83       	std	Z+2, r20	; 0x02
    26e2:	43 83       	std	Z+3, r20	; 0x03
	lcd_clear();
	int i, j, k;
	//array initializing to false
	for(i=0 ; i<16 ; i++)
	{
		for(j=0 ; j<16; j++)
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	34 96       	adiw	r30, 0x04	; 4
    26e8:	80 31       	cpi	r24, 0x10	; 16
    26ea:	91 05       	cpc	r25, r1
    26ec:	b9 f7       	brne	.-18     	; 0x26dc <main+0x20>
{
	init_devices();
	lcd_clear();
	int i, j, k;
	//array initializing to false
	for(i=0 ; i<16 ; i++)
    26ee:	2f 5f       	subi	r18, 0xFF	; 255
    26f0:	3f 4f       	sbci	r19, 0xFF	; 255
    26f2:	20 31       	cpi	r18, 0x10	; 16
    26f4:	31 05       	cpc	r19, r1
    26f6:	59 f0       	breq	.+22     	; 0x270e <main+0x52>
    26f8:	f9 01       	movw	r30, r18
    26fa:	66 e0       	ldi	r22, 0x06	; 6
    26fc:	ee 0f       	add	r30, r30
    26fe:	ff 1f       	adc	r31, r31
    2700:	6a 95       	dec	r22
    2702:	e1 f7       	brne	.-8      	; 0x26fc <main+0x40>
    2704:	e1 5c       	subi	r30, 0xC1	; 193
    2706:	fc 4f       	sbci	r31, 0xFC	; 252
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	e7 cf       	rjmp	.-50     	; 0x26dc <main+0x20>
			{
				dir_array[i][j][k] = 'F';
			}
		}
	}
	lcd_clear();
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("D3 for dry run");
    2716:	8b ee       	ldi	r24, 0xEB	; 235
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
	lcd_write_string_xy(0,1,"D0 for Stst path");
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	4a ef       	ldi	r20, 0xFA	; 250
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	update_array('T','F','F','F');
    272e:	84 e5       	ldi	r24, 0x54	; 84
    2730:	66 e4       	ldi	r22, 0x46	; 70
    2732:	46 e4       	ldi	r20, 0x46	; 70
    2734:	26 e4       	ldi	r18, 0x46	; 70
    2736:	0e 94 99 06 	call	0xd32	; 0xd32 <update_array>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    273a:	83 99       	sbic	0x10, 3	; 16
    273c:	c0 c1       	rjmp	.+896    	; 0x2abe <main+0x402>
	{
		if(pressed_switch3())
		{
			while(1)
			{
				repeat = 0;
    273e:	10 92 38 01 	sts	0x0138, r1
    2742:	10 92 37 01 	sts	0x0137, r1
    2746:	1b c0       	rjmp	.+54     	; 0x277e <main+0xc2>
				while(repeat<=2)
				{
					line_track_new();	
    2748:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
					LED&=0b11110000;
    274c:	85 b3       	in	r24, 0x15	; 21
    274e:	80 7f       	andi	r24, 0xF0	; 240
    2750:	85 bb       	out	0x15, r24	; 21
					LED|=sensorbyte;
    2752:	85 b3       	in	r24, 0x15	; 21
    2754:	90 91 1c 01 	lds	r25, 0x011C
    2758:	89 2b       	or	r24, r25
    275a:	85 bb       	out	0x15, r24	; 21
					if(bit_is_clear(PINA,7))
    275c:	cf 99       	sbic	0x19, 7	; 25
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <main+0xa8>
					{
						right_junc_check();
    2760:	0e 94 55 12 	call	0x24aa	; 0x24aa <right_junc_check>
					}
					left_junc_check();
    2764:	0e 94 74 08 	call	0x10e8	; 0x10e8 <left_junc_check>
					frSensorCheck();
    2768:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <frSensorCheck>
					irc++;
    276c:	80 91 2b 01 	lds	r24, 0x012B
    2770:	90 91 2c 01 	lds	r25, 0x012C
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	90 93 2c 01 	sts	0x012C, r25
    277a:	80 93 2b 01 	sts	0x012B, r24
		if(pressed_switch3())
		{
			while(1)
			{
				repeat = 0;
				while(repeat<=2)
    277e:	80 91 37 01 	lds	r24, 0x0137
    2782:	90 91 38 01 	lds	r25, 0x0138
    2786:	03 97       	sbiw	r24, 0x03	; 3
    2788:	fc f2       	brlt	.-66     	; 0x2748 <main+0x8c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    278a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    278c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    278e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2790:	af 9a       	sbi	0x15, 7	; 21
					left_junc_check();
					frSensorCheck();
					irc++;
				}
				bot_brake();
				fill_missed_array();
    2792:	0e 94 41 09 	call	0x1282	; 0x1282 <fill_missed_array>
				mx = 0;
    2796:	10 92 32 01 	sts	0x0132, r1
    279a:	10 92 31 01 	sts	0x0131, r1
				my = 0;
    279e:	10 92 34 01 	sts	0x0134, r1
    27a2:	10 92 33 01 	sts	0x0133, r1
				coordinates_tobe_reached();
    27a6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <coordinates_tobe_reached>
				// if(mx==0 && my == 0)
				// {
				// 	break;
				// }
				build_map(x_coordinate, y_coordinate, mx, my);
    27aa:	60 91 1a 01 	lds	r22, 0x011A
    27ae:	70 91 1b 01 	lds	r23, 0x011B
    27b2:	40 91 31 01 	lds	r20, 0x0131
    27b6:	50 91 32 01 	lds	r21, 0x0132
    27ba:	20 91 33 01 	lds	r18, 0x0133
    27be:	30 91 34 01 	lds	r19, 0x0134
    27c2:	80 91 18 01 	lds	r24, 0x0118
    27c6:	90 91 19 01 	lds	r25, 0x0119
    27ca:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <build_map>
				get_path();
    27ce:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_path>
				right = 0;
    27d2:	10 92 40 07 	sts	0x0740, r1
    27d6:	10 92 3f 07 	sts	0x073F, r1
				print_path();
    27da:	0e 94 b8 10 	call	0x2170	; 0x2170 <print_path>
    27de:	c5 e4       	ldi	r28, 0x45	; 69
    27e0:	d7 e0       	ldi	r29, 0x07	; 7
				//delay_sec(4);
				for(int i=0; i<15; i++)
				{
					if(path_array[i][0]==0 && path_array[i][1]==0)
    27e2:	28 81       	ld	r18, Y
    27e4:	39 81       	ldd	r19, Y+1	; 0x01
    27e6:	21 15       	cp	r18, r1
    27e8:	31 05       	cpc	r19, r1
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <main+0x138>
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	9b 81       	ldd	r25, Y+3	; 0x03
    27f0:	89 2b       	or	r24, r25
    27f2:	51 f0       	breq	.+20     	; 0x2808 <main+0x14c>
					{
						break;
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
    27f4:	6a 81       	ldd	r22, Y+2	; 0x02
    27f6:	7b 81       	ldd	r23, Y+3	; 0x03
    27f8:	c9 01       	movw	r24, r18
    27fa:	0e 94 0c 10 	call	0x2018	; 0x2018 <go_to_coordinate>
    27fe:	24 96       	adiw	r28, 0x04	; 4
				build_map(x_coordinate, y_coordinate, mx, my);
				get_path();
				right = 0;
				print_path();
				//delay_sec(4);
				for(int i=0; i<15; i++)
    2800:	87 e0       	ldi	r24, 0x07	; 7
    2802:	c1 38       	cpi	r28, 0x81	; 129
    2804:	d8 07       	cpc	r29, r24
    2806:	69 f7       	brne	.-38     	; 0x27e2 <main+0x126>
					{
						break;
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
				}
				if(dir_array[x_coordinate][y_coordinate][0]=='T' && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    2808:	00 91 18 01 	lds	r16, 0x0118
    280c:	10 91 19 01 	lds	r17, 0x0119
    2810:	c0 91 1a 01 	lds	r28, 0x011A
    2814:	d0 91 1b 01 	lds	r29, 0x011B
    2818:	f8 01       	movw	r30, r16
    281a:	54 e0       	ldi	r21, 0x04	; 4
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	5a 95       	dec	r21
    2822:	e1 f7       	brne	.-8      	; 0x281c <main+0x160>
    2824:	ec 0f       	add	r30, r28
    2826:	fd 1f       	adc	r31, r29
    2828:	ee 0f       	add	r30, r30
    282a:	ff 1f       	adc	r31, r31
    282c:	ee 0f       	add	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	e1 5c       	subi	r30, 0xC1	; 193
    2832:	fc 4f       	sbci	r31, 0xFC	; 252
    2834:	80 81       	ld	r24, Z
    2836:	84 35       	cpi	r24, 0x54	; 84
    2838:	59 f4       	brne	.+22     	; 0x2850 <main+0x194>
    283a:	be 01       	movw	r22, r28
    283c:	6f 5f       	subi	r22, 0xFF	; 255
    283e:	7f 4f       	sbci	r23, 0xFF	; 255
    2840:	c8 01       	movw	r24, r16
    2842:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2846:	89 2b       	or	r24, r25
    2848:	19 f0       	breq	.+6      	; 0x2850 <main+0x194>
				{		
					checkAndCorrectDirection(2);
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	51 c0       	rjmp	.+162    	; 0x28f2 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][1]=='T' && is_coordinate_null(x_coordinate+1,y_coordinate))
    2850:	f8 01       	movw	r30, r16
    2852:	34 e0       	ldi	r19, 0x04	; 4
    2854:	ee 0f       	add	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	3a 95       	dec	r19
    285a:	e1 f7       	brne	.-8      	; 0x2854 <main+0x198>
    285c:	ec 0f       	add	r30, r28
    285e:	fd 1f       	adc	r31, r29
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	e1 5c       	subi	r30, 0xC1	; 193
    286a:	fc 4f       	sbci	r31, 0xFC	; 252
    286c:	81 81       	ldd	r24, Z+1	; 0x01
    286e:	84 35       	cpi	r24, 0x54	; 84
    2870:	51 f4       	brne	.+20     	; 0x2886 <main+0x1ca>
    2872:	c8 01       	movw	r24, r16
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	be 01       	movw	r22, r28
    2878:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    287c:	89 2b       	or	r24, r25
    287e:	19 f0       	breq	.+6      	; 0x2886 <main+0x1ca>
				{
					checkAndCorrectDirection(1);
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	36 c0       	rjmp	.+108    	; 0x28f2 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][2]=='T' && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    2886:	f8 01       	movw	r30, r16
    2888:	94 e0       	ldi	r25, 0x04	; 4
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	9a 95       	dec	r25
    2890:	e1 f7       	brne	.-8      	; 0x288a <main+0x1ce>
    2892:	ec 0f       	add	r30, r28
    2894:	fd 1f       	adc	r31, r29
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	ef 5b       	subi	r30, 0xBF	; 191
    28a0:	fc 4f       	sbci	r31, 0xFC	; 252
    28a2:	80 81       	ld	r24, Z
    28a4:	84 35       	cpi	r24, 0x54	; 84
    28a6:	59 f4       	brne	.+22     	; 0x28be <main+0x202>
    28a8:	be 01       	movw	r22, r28
    28aa:	61 50       	subi	r22, 0x01	; 1
    28ac:	70 40       	sbci	r23, 0x00	; 0
    28ae:	c8 01       	movw	r24, r16
    28b0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    28b4:	89 2b       	or	r24, r25
    28b6:	19 f0       	breq	.+6      	; 0x28be <main+0x202>
				{
					checkAndCorrectDirection(-2);
    28b8:	8e ef       	ldi	r24, 0xFE	; 254
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	1a c0       	rjmp	.+52     	; 0x28f2 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
    28be:	f8 01       	movw	r30, r16
    28c0:	b4 e0       	ldi	r27, 0x04	; 4
    28c2:	ee 0f       	add	r30, r30
    28c4:	ff 1f       	adc	r31, r31
    28c6:	ba 95       	dec	r27
    28c8:	e1 f7       	brne	.-8      	; 0x28c2 <main+0x206>
    28ca:	ec 0f       	add	r30, r28
    28cc:	fd 1f       	adc	r31, r29
    28ce:	ee 0f       	add	r30, r30
    28d0:	ff 1f       	adc	r31, r31
    28d2:	ee 0f       	add	r30, r30
    28d4:	ff 1f       	adc	r31, r31
    28d6:	e1 5c       	subi	r30, 0xC1	; 193
    28d8:	fc 4f       	sbci	r31, 0xFC	; 252
    28da:	83 81       	ldd	r24, Z+3	; 0x03
    28dc:	84 35       	cpi	r24, 0x54	; 84
    28de:	71 f4       	brne	.+28     	; 0x28fc <main+0x240>
    28e0:	c8 01       	movw	r24, r16
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	be 01       	movw	r22, r28
    28e6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    28ea:	89 2b       	or	r24, r25
    28ec:	39 f0       	breq	.+14     	; 0x28fc <main+0x240>
				{
					checkAndCorrectDirection(-1);
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <checkAndCorrectDirection>
    28f6:	02 c0       	rjmp	.+4      	; 0x28fc <main+0x240>
				}		
				while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
				{
					line_track_new();
    28f8:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
				}
				else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
				{
					checkAndCorrectDirection(-1);
				}		
				while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
    28fc:	cc 9b       	sbis	0x19, 4	; 25
    28fe:	fc cf       	rjmp	.-8      	; 0x28f8 <main+0x23c>
    2900:	87 9b       	sbis	0x10, 7	; 16
    2902:	fa cf       	rjmp	.-12     	; 0x28f8 <main+0x23c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2904:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2906:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2908:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    290a:	af 9a       	sbi	0x15, 7	; 21
					line_track_new();
				}
				bot_brake();
				//delay_sec(2);
				irc=0;
				Coordinates_changed_by = 0;
    290c:	10 92 30 01 	sts	0x0130, r1
    2910:	10 92 2f 01 	sts	0x012F, r1
				// else
				// {
				// 	special_flag = 1;
				// 	left_junc_check();
				// }
				irc = 0;
    2914:	10 92 2c 01 	sts	0x012C, r1
    2918:	10 92 2b 01 	sts	0x012B, r1
				special_flag = 0;
    291c:	10 92 36 01 	sts	0x0136, r1
    2920:	10 92 35 01 	sts	0x0135, r1
    2924:	0c cf       	rjmp	.-488    	; 0x273e <main+0x82>
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
			{
				path_array[i][0] = eeprom_read_word(eeprom_addr);
    2926:	ce 01       	movw	r24, r28
    2928:	0e 94 2b 19 	call	0x3256	; 0x3256 <__eerd_word_m32>
    292c:	f8 01       	movw	r30, r16
    292e:	91 83       	std	Z+1, r25	; 0x01
    2930:	80 83       	st	Z, r24
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
    2932:	ce 01       	movw	r24, r28
    2934:	02 96       	adiw	r24, 0x02	; 2
    2936:	0e 94 2b 19 	call	0x3256	; 0x3256 <__eerd_word_m32>
    293a:	f8 01       	movw	r30, r16
    293c:	93 83       	std	Z+3, r25	; 0x03
    293e:	82 83       	std	Z+2, r24	; 0x02
    2940:	24 96       	adiw	r28, 0x04	; 4
    2942:	0c 5f       	subi	r16, 0xFC	; 252
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
    2946:	cc 33       	cpi	r28, 0x3C	; 60
    2948:	d1 05       	cpc	r29, r1
    294a:	69 f7       	brne	.-38     	; 0x2926 <main+0x26a>
				path_array[i][0] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
			}
			lcd_clear();
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_int_xy(0,0,path_array[0][0],1);
    2954:	40 91 45 07 	lds	r20, 0x0745
    2958:	50 91 46 07 	lds	r21, 0x0746
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	21 e0       	ldi	r18, 0x01	; 1
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,0,path_array[0][1],1);
    296c:	40 91 47 07 	lds	r20, 0x0747
    2970:	50 91 48 07 	lds	r21, 0x0748
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	21 e0       	ldi	r18, 0x01	; 1
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(3,0,path_array[1][0],1);
    2984:	40 91 49 07 	lds	r20, 0x0749
    2988:	50 91 4a 07 	lds	r21, 0x074A
    298c:	83 e0       	ldi	r24, 0x03	; 3
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	21 e0       	ldi	r18, 0x01	; 1
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(4,0,path_array[1][1],1);
    299c:	40 91 4b 07 	lds	r20, 0x074B
    29a0:	50 91 4c 07 	lds	r21, 0x074C
    29a4:	84 e0       	ldi	r24, 0x04	; 4
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	21 e0       	ldi	r18, 0x01	; 1
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(6,0,path_array[2][0],1);
    29b4:	40 91 4d 07 	lds	r20, 0x074D
    29b8:	50 91 4e 07 	lds	r21, 0x074E
    29bc:	86 e0       	ldi	r24, 0x06	; 6
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	70 e0       	ldi	r23, 0x00	; 0
    29c4:	21 e0       	ldi	r18, 0x01	; 1
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(7,0,path_array[2][1],1);
    29cc:	40 91 4f 07 	lds	r20, 0x074F
    29d0:	50 91 50 07 	lds	r21, 0x0750
    29d4:	87 e0       	ldi	r24, 0x07	; 7
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	21 e0       	ldi	r18, 0x01	; 1
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(9,0,path_array[3][0],1);
    29e4:	40 91 51 07 	lds	r20, 0x0751
    29e8:	50 91 52 07 	lds	r21, 0x0752
    29ec:	89 e0       	ldi	r24, 0x09	; 9
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	21 e0       	ldi	r18, 0x01	; 1
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(10,0,path_array[3][1],1);
    29fc:	40 91 53 07 	lds	r20, 0x0753
    2a00:	50 91 54 07 	lds	r21, 0x0754
    2a04:	8a e0       	ldi	r24, 0x0A	; 10
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	21 e0       	ldi	r18, 0x01	; 1
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(12,0,path_array[4][0],1);
    2a14:	40 91 55 07 	lds	r20, 0x0755
    2a18:	50 91 56 07 	lds	r21, 0x0756
    2a1c:	8c e0       	ldi	r24, 0x0C	; 12
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	21 e0       	ldi	r18, 0x01	; 1
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(13,0,path_array[4][1],1);
    2a2c:	40 91 57 07 	lds	r20, 0x0757
    2a30:	50 91 58 07 	lds	r21, 0x0758
    2a34:	8d e0       	ldi	r24, 0x0D	; 13
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	21 e0       	ldi	r18, 0x01	; 1
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(0,1,path_array[5][0],1);
    2a44:	40 91 59 07 	lds	r20, 0x0759
    2a48:	50 91 5a 07 	lds	r21, 0x075A
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	21 e0       	ldi	r18, 0x01	; 1
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,1,path_array[5][1],1);
    2a5c:	40 91 5b 07 	lds	r20, 0x075B
    2a60:	50 91 5c 07 	lds	r21, 0x075C
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	21 e0       	ldi	r18, 0x01	; 1
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2a74:	82 99       	sbic	0x10, 2	; 16
    2a76:	2d c0       	rjmp	.+90     	; 0x2ad2 <main+0x416>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					lcd_clear();
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					delay_sec(1);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					break;
				}
			}
			for(int i=0; i<15; i++)
			{
				if(path_array[i][0]==0 && path_array[i][1]==0)
    2a88:	f7 01       	movw	r30, r14
    2a8a:	20 81       	ld	r18, Z
    2a8c:	31 81       	ldd	r19, Z+1	; 0x01
    2a8e:	21 15       	cp	r18, r1
    2a90:	31 05       	cpc	r19, r1
    2a92:	29 f4       	brne	.+10     	; 0x2a9e <main+0x3e2>
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	89 2b       	or	r24, r25
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <main+0x3e2>
    2a9c:	4e ce       	rjmp	.-868    	; 0x273a <main+0x7e>
				{
					break;
				}
				go_to_coordinate(path_array[i][0], path_array[i][1]);
    2a9e:	f7 01       	movw	r30, r14
    2aa0:	62 81       	ldd	r22, Z+2	; 0x02
    2aa2:	73 81       	ldd	r23, Z+3	; 0x03
    2aa4:	c9 01       	movw	r24, r18
    2aa6:	0e 94 0c 10 	call	0x2018	; 0x2018 <go_to_coordinate>
    2aaa:	84 e0       	ldi	r24, 0x04	; 4
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	e8 0e       	add	r14, r24
    2ab0:	f9 1e       	adc	r15, r25
					lcd_clear();
					delay_sec(1);
					break;
				}
			}
			for(int i=0; i<15; i++)
    2ab2:	91 e8       	ldi	r25, 0x81	; 129
    2ab4:	e9 16       	cp	r14, r25
    2ab6:	97 e0       	ldi	r25, 0x07	; 7
    2ab8:	f9 06       	cpc	r15, r25
    2aba:	31 f7       	brne	.-52     	; 0x2a88 <main+0x3cc>
    2abc:	3e ce       	rjmp	.-900    	; 0x273a <main+0x7e>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2abe:	80 99       	sbic	0x10, 0	; 16
    2ac0:	3c ce       	rjmp	.-904    	; 0x273a <main+0x7e>
    2ac2:	75 e4       	ldi	r23, 0x45	; 69
    2ac4:	e7 2e       	mov	r14, r23
    2ac6:	77 e0       	ldi	r23, 0x07	; 7
    2ac8:	f7 2e       	mov	r15, r23
    2aca:	87 01       	movw	r16, r14
    2acc:	c0 e0       	ldi	r28, 0x00	; 0
    2ace:	d0 e0       	ldi	r29, 0x00	; 0
    2ad0:	2a cf       	rjmp	.-428    	; 0x2926 <main+0x26a>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2ad2:	80 9b       	sbis	0x10, 0	; 16
    2ad4:	d1 cf       	rjmp	.-94     	; 0x2a78 <main+0x3bc>
    2ad6:	81 9b       	sbis	0x10, 1	; 16
    2ad8:	cf cf       	rjmp	.-98     	; 0x2a78 <main+0x3bc>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2ada:	83 9b       	sbis	0x10, 3	; 16
    2adc:	cd cf       	rjmp	.-102    	; 0x2a78 <main+0x3bc>
    2ade:	ca cf       	rjmp	.-108    	; 0x2a74 <main+0x3b8>

00002ae0 <map_all>:
	}
	bot_brake();
	//delay_sec(1);
}
void map_all()
{
    2ae0:	ef 92       	push	r14
    2ae2:	ff 92       	push	r15
    2ae4:	0f 93       	push	r16
    2ae6:	1f 93       	push	r17
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2aec:	5f e8       	ldi	r21, 0x8F	; 143
    2aee:	e5 2e       	mov	r14, r21
    2af0:	51 e0       	ldi	r21, 0x01	; 1
    2af2:	f5 2e       	mov	r15, r21
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2af4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2af6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2af8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2afa:	af 9a       	sbi	0x15, 7	; 21
	while(1)
	{
		bot_brake();
		build_map(x_coordinate, y_coordinate, mx, my);
    2afc:	60 91 1a 01 	lds	r22, 0x011A
    2b00:	70 91 1b 01 	lds	r23, 0x011B
    2b04:	40 91 31 01 	lds	r20, 0x0131
    2b08:	50 91 32 01 	lds	r21, 0x0132
    2b0c:	20 91 33 01 	lds	r18, 0x0133
    2b10:	30 91 34 01 	lds	r19, 0x0134
    2b14:	80 91 18 01 	lds	r24, 0x0118
    2b18:	90 91 19 01 	lds	r25, 0x0119
    2b1c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <build_map>
		get_path();
    2b20:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_path>
		
		right = 0;
    2b24:	10 92 40 07 	sts	0x0740, r1
    2b28:	10 92 3f 07 	sts	0x073F, r1
		print_path();
    2b2c:	0e 94 b8 10 	call	0x2170	; 0x2170 <print_path>
    2b30:	c5 e4       	ldi	r28, 0x45	; 69
    2b32:	d7 e0       	ldi	r29, 0x07	; 7
		//delay_sec(4);
		for(int i=0; i<15; i++)
		{
			if(path_array[i][0]==0 && path_array[i][1]==0)
    2b34:	28 81       	ld	r18, Y
    2b36:	39 81       	ldd	r19, Y+1	; 0x01
    2b38:	21 15       	cp	r18, r1
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	21 f4       	brne	.+8      	; 0x2b46 <map_all+0x66>
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	9b 81       	ldd	r25, Y+3	; 0x03
    2b42:	89 2b       	or	r24, r25
    2b44:	51 f0       	breq	.+20     	; 0x2b5a <map_all+0x7a>
			{
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);
    2b46:	6a 81       	ldd	r22, Y+2	; 0x02
    2b48:	7b 81       	ldd	r23, Y+3	; 0x03
    2b4a:	c9 01       	movw	r24, r18
    2b4c:	0e 94 0c 10 	call	0x2018	; 0x2018 <go_to_coordinate>
    2b50:	24 96       	adiw	r28, 0x04	; 4
		get_path();
		
		right = 0;
		print_path();
		//delay_sec(4);
		for(int i=0; i<15; i++)
    2b52:	87 e0       	ldi	r24, 0x07	; 7
    2b54:	c1 38       	cpi	r28, 0x81	; 129
    2b56:	d8 07       	cpc	r29, r24
    2b58:	69 f7       	brne	.-38     	; 0x2b34 <map_all+0x54>
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);

		}
		if(dir_array[x_coordinate][y_coordinate][0]=='T' && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    2b5a:	00 91 18 01 	lds	r16, 0x0118
    2b5e:	10 91 19 01 	lds	r17, 0x0119
    2b62:	c0 91 1a 01 	lds	r28, 0x011A
    2b66:	d0 91 1b 01 	lds	r29, 0x011B
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	44 e0       	ldi	r20, 0x04	; 4
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	4a 95       	dec	r20
    2b74:	e1 f7       	brne	.-8      	; 0x2b6e <map_all+0x8e>
    2b76:	ec 0f       	add	r30, r28
    2b78:	fd 1f       	adc	r31, r29
    2b7a:	ee 0f       	add	r30, r30
    2b7c:	ff 1f       	adc	r31, r31
    2b7e:	ee 0f       	add	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	e1 5c       	subi	r30, 0xC1	; 193
    2b84:	fc 4f       	sbci	r31, 0xFC	; 252
    2b86:	80 81       	ld	r24, Z
    2b88:	84 35       	cpi	r24, 0x54	; 84
    2b8a:	59 f4       	brne	.+22     	; 0x2ba2 <map_all+0xc2>
    2b8c:	be 01       	movw	r22, r28
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	c8 01       	movw	r24, r16
    2b94:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2b98:	89 2b       	or	r24, r25
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <map_all+0xc2>
		{
			checkAndCorrectDirection(2);
    2b9c:	82 e0       	ldi	r24, 0x02	; 2
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	51 c0       	rjmp	.+162    	; 0x2c44 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][1]=='T' && is_coordinate_null(x_coordinate+1,y_coordinate))
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	24 e0       	ldi	r18, 0x04	; 4
    2ba6:	ee 0f       	add	r30, r30
    2ba8:	ff 1f       	adc	r31, r31
    2baa:	2a 95       	dec	r18
    2bac:	e1 f7       	brne	.-8      	; 0x2ba6 <map_all+0xc6>
    2bae:	ec 0f       	add	r30, r28
    2bb0:	fd 1f       	adc	r31, r29
    2bb2:	ee 0f       	add	r30, r30
    2bb4:	ff 1f       	adc	r31, r31
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	e1 5c       	subi	r30, 0xC1	; 193
    2bbc:	fc 4f       	sbci	r31, 0xFC	; 252
    2bbe:	81 81       	ldd	r24, Z+1	; 0x01
    2bc0:	84 35       	cpi	r24, 0x54	; 84
    2bc2:	51 f4       	brne	.+20     	; 0x2bd8 <map_all+0xf8>
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	be 01       	movw	r22, r28
    2bca:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2bce:	89 2b       	or	r24, r25
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <map_all+0xf8>
		{
			checkAndCorrectDirection(1);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	36 c0       	rjmp	.+108    	; 0x2c44 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][2]=='T' && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    2bd8:	f8 01       	movw	r30, r16
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	ee 0f       	add	r30, r30
    2bde:	ff 1f       	adc	r31, r31
    2be0:	8a 95       	dec	r24
    2be2:	e1 f7       	brne	.-8      	; 0x2bdc <map_all+0xfc>
    2be4:	ec 0f       	add	r30, r28
    2be6:	fd 1f       	adc	r31, r29
    2be8:	ee 0f       	add	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	ee 0f       	add	r30, r30
    2bee:	ff 1f       	adc	r31, r31
    2bf0:	ef 5b       	subi	r30, 0xBF	; 191
    2bf2:	fc 4f       	sbci	r31, 0xFC	; 252
    2bf4:	80 81       	ld	r24, Z
    2bf6:	84 35       	cpi	r24, 0x54	; 84
    2bf8:	59 f4       	brne	.+22     	; 0x2c10 <map_all+0x130>
    2bfa:	be 01       	movw	r22, r28
    2bfc:	61 50       	subi	r22, 0x01	; 1
    2bfe:	70 40       	sbci	r23, 0x00	; 0
    2c00:	c8 01       	movw	r24, r16
    2c02:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2c06:	89 2b       	or	r24, r25
    2c08:	19 f0       	breq	.+6      	; 0x2c10 <map_all+0x130>
		{
			checkAndCorrectDirection(-2);
    2c0a:	8e ef       	ldi	r24, 0xFE	; 254
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	1a c0       	rjmp	.+52     	; 0x2c44 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
    2c10:	f8 01       	movw	r30, r16
    2c12:	a4 e0       	ldi	r26, 0x04	; 4
    2c14:	ee 0f       	add	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	aa 95       	dec	r26
    2c1a:	e1 f7       	brne	.-8      	; 0x2c14 <map_all+0x134>
    2c1c:	ec 0f       	add	r30, r28
    2c1e:	fd 1f       	adc	r31, r29
    2c20:	ee 0f       	add	r30, r30
    2c22:	ff 1f       	adc	r31, r31
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	e1 5c       	subi	r30, 0xC1	; 193
    2c2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2c2c:	83 81       	ldd	r24, Z+3	; 0x03
    2c2e:	84 35       	cpi	r24, 0x54	; 84
    2c30:	71 f4       	brne	.+28     	; 0x2c4e <map_all+0x16e>
    2c32:	c8 01       	movw	r24, r16
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	be 01       	movw	r22, r28
    2c38:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <is_coordinate_null>
    2c3c:	89 2b       	or	r24, r25
    2c3e:	39 f0       	breq	.+14     	; 0x2c4e <map_all+0x16e>
		{
			checkAndCorrectDirection(-1);
    2c40:	8f ef       	ldi	r24, 0xFF	; 255
    2c42:	9f ef       	ldi	r25, 0xFF	; 255
    2c44:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <checkAndCorrectDirection>
    2c48:	02 c0       	rjmp	.+4      	; 0x2c4e <map_all+0x16e>
		}
		while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
		{
			line_track_new();
    2c4a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
		{
			checkAndCorrectDirection(-1);
		}
		while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
    2c4e:	cc 9b       	sbis	0x19, 4	; 25
    2c50:	fc cf       	rjmp	.-8      	; 0x2c4a <map_all+0x16a>
    2c52:	87 9b       	sbis	0x10, 7	; 16
    2c54:	fa cf       	rjmp	.-12     	; 0x2c4a <map_all+0x16a>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2c56:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2c58:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2c5a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2c5c:	af 9a       	sbi	0x15, 7	; 21
			line_track_new();
		}
		bot_brake();
		//delay_sec(2);
		irc=0;
		Coordinates_changed_by = 0;
    2c5e:	10 92 30 01 	sts	0x0130, r1
    2c62:	10 92 2f 01 	sts	0x012F, r1
		// else
		// {
		// 	special_flag = 1;
		// 	left_junc_check();
		// }
		irc = 0;
    2c66:	10 92 2c 01 	sts	0x012C, r1
    2c6a:	10 92 2b 01 	sts	0x012B, r1
		special_flag = 0;
    2c6e:	10 92 36 01 	sts	0x0136, r1
    2c72:	10 92 35 01 	sts	0x0135, r1
		repeat = 0;
    2c76:	10 92 38 01 	sts	0x0138, r1
    2c7a:	10 92 37 01 	sts	0x0137, r1
    2c7e:	1b c0       	rjmp	.+54     	; 0x2cb6 <map_all+0x1d6>
		while(repeat<=2)      //lsr (copied from int main) 
		{
			line_track_new();	
    2c80:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
			LED&=0b11110000;
    2c84:	85 b3       	in	r24, 0x15	; 21
    2c86:	80 7f       	andi	r24, 0xF0	; 240
    2c88:	85 bb       	out	0x15, r24	; 21
			LED|=sensorbyte;
    2c8a:	85 b3       	in	r24, 0x15	; 21
    2c8c:	90 91 1c 01 	lds	r25, 0x011C
    2c90:	89 2b       	or	r24, r25
    2c92:	85 bb       	out	0x15, r24	; 21
			if(bit_is_clear(PINA,7))
    2c94:	cf 99       	sbic	0x19, 7	; 25
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <map_all+0x1bc>
			{
				right_junc_check();
    2c98:	0e 94 55 12 	call	0x24aa	; 0x24aa <right_junc_check>
			}
			left_junc_check();
    2c9c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <left_junc_check>
			frSensorCheck();
    2ca0:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <frSensorCheck>
			irc++;
    2ca4:	80 91 2b 01 	lds	r24, 0x012B
    2ca8:	90 91 2c 01 	lds	r25, 0x012C
    2cac:	01 96       	adiw	r24, 0x01	; 1
    2cae:	90 93 2c 01 	sts	0x012C, r25
    2cb2:	80 93 2b 01 	sts	0x012B, r24
		// 	left_junc_check();
		// }
		irc = 0;
		special_flag = 0;
		repeat = 0;
		while(repeat<=2)      //lsr (copied from int main) 
    2cb6:	80 91 37 01 	lds	r24, 0x0137
    2cba:	90 91 38 01 	lds	r25, 0x0138
    2cbe:	03 97       	sbiw	r24, 0x03	; 3
    2cc0:	fc f2       	brlt	.-66     	; 0x2c80 <map_all+0x1a0>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2cc2:	fb bc       	out	0x2b, r15	; 43
    2cc4:	ea bc       	out	0x2a, r14	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2cc6:	f9 bc       	out	0x29, r15	; 41
    2cc8:	e8 bc       	out	0x28, r14	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2cca:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2ccc:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2cce:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2cd0:	af 9a       	sbi	0x15, 7	; 21
			irc++;
		}
		set_pwm1a(399);
		set_pwm1b(399);
		bot_brake();
		fill_missed_array();
    2cd2:	0e 94 41 09 	call	0x1282	; 0x1282 <fill_missed_array>
		mx = 0;
    2cd6:	10 92 32 01 	sts	0x0132, r1
    2cda:	10 92 31 01 	sts	0x0131, r1
		my = 0;
    2cde:	10 92 34 01 	sts	0x0134, r1
    2ce2:	10 92 33 01 	sts	0x0133, r1
		coordinates_tobe_reached();
    2ce6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <coordinates_tobe_reached>
		if(mx==0 && my == 0)
    2cea:	80 91 31 01 	lds	r24, 0x0131
    2cee:	90 91 32 01 	lds	r25, 0x0132
    2cf2:	89 2b       	or	r24, r25
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <map_all+0x218>
    2cf6:	fe ce       	rjmp	.-516    	; 0x2af4 <map_all+0x14>
    2cf8:	80 91 33 01 	lds	r24, 0x0133
    2cfc:	90 91 34 01 	lds	r25, 0x0134
    2d00:	89 2b       	or	r24, r25
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <map_all+0x226>
    2d04:	f7 ce       	rjmp	.-530    	; 0x2af4 <map_all+0x14>
		{
			break;
		}
	}
}
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	1f 91       	pop	r17
    2d0c:	0f 91       	pop	r16
    2d0e:	ff 90       	pop	r15
    2d10:	ef 90       	pop	r14
    2d12:	08 95       	ret

00002d14 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 23 19 	call	0x3246	; 0x3246 <__eerd_byte_m32>
    2d1c:	80 93 81 07 	sts	0x0781, r24
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 23 19 	call	0x3246	; 0x3246 <__eerd_byte_m32>
    2d28:	80 93 82 07 	sts	0x0782, r24
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 23 19 	call	0x3246	; 0x3246 <__eerd_byte_m32>
    2d34:	80 93 83 07 	sts	0x0783, r24
    2d38:	83 e0       	ldi	r24, 0x03	; 3
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	0e 94 23 19 	call	0x3246	; 0x3246 <__eerd_byte_m32>
    2d40:	80 93 84 07 	sts	0x0784, r24
		eeprom_addr++;
	}
}
    2d44:	08 95       	ret

00002d46 <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    2d4a:	20 91 85 07 	lds	r18, 0x0785
    2d4e:	80 91 41 07 	lds	r24, 0x0741
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	82 0f       	add	r24, r18
    2d56:	91 1d       	adc	r25, r1
    2d58:	95 95       	asr	r25
    2d5a:	87 95       	ror	r24
    2d5c:	80 93 81 07 	sts	0x0781, r24
    2d60:	20 91 86 07 	lds	r18, 0x0786
    2d64:	80 91 42 07 	lds	r24, 0x0742
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	82 0f       	add	r24, r18
    2d6c:	91 1d       	adc	r25, r1
    2d6e:	95 95       	asr	r25
    2d70:	87 95       	ror	r24
    2d72:	80 93 82 07 	sts	0x0782, r24
    2d76:	20 91 87 07 	lds	r18, 0x0787
    2d7a:	80 91 43 07 	lds	r24, 0x0743
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	82 0f       	add	r24, r18
    2d82:	91 1d       	adc	r25, r1
    2d84:	95 95       	asr	r25
    2d86:	87 95       	ror	r24
    2d88:	80 93 83 07 	sts	0x0783, r24
    2d8c:	20 91 88 07 	lds	r18, 0x0788
    2d90:	80 91 44 07 	lds	r24, 0x0744
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	82 0f       	add	r24, r18
    2d98:	91 1d       	adc	r25, r1
    2d9a:	95 95       	asr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	80 93 84 07 	sts	0x0784, r24
    2da2:	c0 e0       	ldi	r28, 0x00	; 0
    2da4:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    2da6:	fe 01       	movw	r30, r28
    2da8:	ef 57       	subi	r30, 0x7F	; 127
    2daa:	f8 4f       	sbci	r31, 0xF8	; 248
    2dac:	ce 01       	movw	r24, r28
    2dae:	60 81       	ld	r22, Z
    2db0:	0e 94 31 19 	call	0x3262	; 0x3262 <__eewr_byte_m32>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    2db4:	21 96       	adiw	r28, 0x01	; 1
    2db6:	c4 30       	cpi	r28, 0x04	; 4
    2db8:	d1 05       	cpc	r29, r1
    2dba:	a9 f7       	brne	.-22     	; 0x2da6 <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	08 95       	ret

00002dc2 <__subsf3>:
    2dc2:	50 58       	subi	r21, 0x80	; 128

00002dc4 <__addsf3>:
    2dc4:	bb 27       	eor	r27, r27
    2dc6:	aa 27       	eor	r26, r26
    2dc8:	0e d0       	rcall	.+28     	; 0x2de6 <__addsf3x>
    2dca:	75 c1       	rjmp	.+746    	; 0x30b6 <__fp_round>
    2dcc:	66 d1       	rcall	.+716    	; 0x309a <__fp_pscA>
    2dce:	30 f0       	brcs	.+12     	; 0x2ddc <__addsf3+0x18>
    2dd0:	6b d1       	rcall	.+726    	; 0x30a8 <__fp_pscB>
    2dd2:	20 f0       	brcs	.+8      	; 0x2ddc <__addsf3+0x18>
    2dd4:	31 f4       	brne	.+12     	; 0x2de2 <__addsf3+0x1e>
    2dd6:	9f 3f       	cpi	r25, 0xFF	; 255
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <__addsf3+0x1a>
    2dda:	1e f4       	brtc	.+6      	; 0x2de2 <__addsf3+0x1e>
    2ddc:	5b c1       	rjmp	.+694    	; 0x3094 <__fp_nan>
    2dde:	0e f4       	brtc	.+2      	; 0x2de2 <__addsf3+0x1e>
    2de0:	e0 95       	com	r30
    2de2:	e7 fb       	bst	r30, 7
    2de4:	51 c1       	rjmp	.+674    	; 0x3088 <__fp_inf>

00002de6 <__addsf3x>:
    2de6:	e9 2f       	mov	r30, r25
    2de8:	77 d1       	rcall	.+750    	; 0x30d8 <__fp_split3>
    2dea:	80 f3       	brcs	.-32     	; 0x2dcc <__addsf3+0x8>
    2dec:	ba 17       	cp	r27, r26
    2dee:	62 07       	cpc	r22, r18
    2df0:	73 07       	cpc	r23, r19
    2df2:	84 07       	cpc	r24, r20
    2df4:	95 07       	cpc	r25, r21
    2df6:	18 f0       	brcs	.+6      	; 0x2dfe <__addsf3x+0x18>
    2df8:	71 f4       	brne	.+28     	; 0x2e16 <__addsf3x+0x30>
    2dfa:	9e f5       	brtc	.+102    	; 0x2e62 <__addsf3x+0x7c>
    2dfc:	8f c1       	rjmp	.+798    	; 0x311c <__fp_zero>
    2dfe:	0e f4       	brtc	.+2      	; 0x2e02 <__addsf3x+0x1c>
    2e00:	e0 95       	com	r30
    2e02:	0b 2e       	mov	r0, r27
    2e04:	ba 2f       	mov	r27, r26
    2e06:	a0 2d       	mov	r26, r0
    2e08:	0b 01       	movw	r0, r22
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	90 01       	movw	r18, r0
    2e0e:	0c 01       	movw	r0, r24
    2e10:	ca 01       	movw	r24, r20
    2e12:	a0 01       	movw	r20, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	ff 27       	eor	r31, r31
    2e18:	59 1b       	sub	r21, r25
    2e1a:	99 f0       	breq	.+38     	; 0x2e42 <__addsf3x+0x5c>
    2e1c:	59 3f       	cpi	r21, 0xF9	; 249
    2e1e:	50 f4       	brcc	.+20     	; 0x2e34 <__addsf3x+0x4e>
    2e20:	50 3e       	cpi	r21, 0xE0	; 224
    2e22:	68 f1       	brcs	.+90     	; 0x2e7e <__addsf3x+0x98>
    2e24:	1a 16       	cp	r1, r26
    2e26:	f0 40       	sbci	r31, 0x00	; 0
    2e28:	a2 2f       	mov	r26, r18
    2e2a:	23 2f       	mov	r18, r19
    2e2c:	34 2f       	mov	r19, r20
    2e2e:	44 27       	eor	r20, r20
    2e30:	58 5f       	subi	r21, 0xF8	; 248
    2e32:	f3 cf       	rjmp	.-26     	; 0x2e1a <__addsf3x+0x34>
    2e34:	46 95       	lsr	r20
    2e36:	37 95       	ror	r19
    2e38:	27 95       	ror	r18
    2e3a:	a7 95       	ror	r26
    2e3c:	f0 40       	sbci	r31, 0x00	; 0
    2e3e:	53 95       	inc	r21
    2e40:	c9 f7       	brne	.-14     	; 0x2e34 <__addsf3x+0x4e>
    2e42:	7e f4       	brtc	.+30     	; 0x2e62 <__addsf3x+0x7c>
    2e44:	1f 16       	cp	r1, r31
    2e46:	ba 0b       	sbc	r27, r26
    2e48:	62 0b       	sbc	r22, r18
    2e4a:	73 0b       	sbc	r23, r19
    2e4c:	84 0b       	sbc	r24, r20
    2e4e:	ba f0       	brmi	.+46     	; 0x2e7e <__addsf3x+0x98>
    2e50:	91 50       	subi	r25, 0x01	; 1
    2e52:	a1 f0       	breq	.+40     	; 0x2e7c <__addsf3x+0x96>
    2e54:	ff 0f       	add	r31, r31
    2e56:	bb 1f       	adc	r27, r27
    2e58:	66 1f       	adc	r22, r22
    2e5a:	77 1f       	adc	r23, r23
    2e5c:	88 1f       	adc	r24, r24
    2e5e:	c2 f7       	brpl	.-16     	; 0x2e50 <__addsf3x+0x6a>
    2e60:	0e c0       	rjmp	.+28     	; 0x2e7e <__addsf3x+0x98>
    2e62:	ba 0f       	add	r27, r26
    2e64:	62 1f       	adc	r22, r18
    2e66:	73 1f       	adc	r23, r19
    2e68:	84 1f       	adc	r24, r20
    2e6a:	48 f4       	brcc	.+18     	; 0x2e7e <__addsf3x+0x98>
    2e6c:	87 95       	ror	r24
    2e6e:	77 95       	ror	r23
    2e70:	67 95       	ror	r22
    2e72:	b7 95       	ror	r27
    2e74:	f7 95       	ror	r31
    2e76:	9e 3f       	cpi	r25, 0xFE	; 254
    2e78:	08 f0       	brcs	.+2      	; 0x2e7c <__addsf3x+0x96>
    2e7a:	b3 cf       	rjmp	.-154    	; 0x2de2 <__addsf3+0x1e>
    2e7c:	93 95       	inc	r25
    2e7e:	88 0f       	add	r24, r24
    2e80:	08 f0       	brcs	.+2      	; 0x2e84 <__addsf3x+0x9e>
    2e82:	99 27       	eor	r25, r25
    2e84:	ee 0f       	add	r30, r30
    2e86:	97 95       	ror	r25
    2e88:	87 95       	ror	r24
    2e8a:	08 95       	ret

00002e8c <__cmpsf2>:
    2e8c:	d9 d0       	rcall	.+434    	; 0x3040 <__fp_cmp>
    2e8e:	08 f4       	brcc	.+2      	; 0x2e92 <__cmpsf2+0x6>
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	08 95       	ret

00002e94 <__divsf3>:
    2e94:	0c d0       	rcall	.+24     	; 0x2eae <__divsf3x>
    2e96:	0f c1       	rjmp	.+542    	; 0x30b6 <__fp_round>
    2e98:	07 d1       	rcall	.+526    	; 0x30a8 <__fp_pscB>
    2e9a:	40 f0       	brcs	.+16     	; 0x2eac <__divsf3+0x18>
    2e9c:	fe d0       	rcall	.+508    	; 0x309a <__fp_pscA>
    2e9e:	30 f0       	brcs	.+12     	; 0x2eac <__divsf3+0x18>
    2ea0:	21 f4       	brne	.+8      	; 0x2eaa <__divsf3+0x16>
    2ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ea4:	19 f0       	breq	.+6      	; 0x2eac <__divsf3+0x18>
    2ea6:	f0 c0       	rjmp	.+480    	; 0x3088 <__fp_inf>
    2ea8:	51 11       	cpse	r21, r1
    2eaa:	39 c1       	rjmp	.+626    	; 0x311e <__fp_szero>
    2eac:	f3 c0       	rjmp	.+486    	; 0x3094 <__fp_nan>

00002eae <__divsf3x>:
    2eae:	14 d1       	rcall	.+552    	; 0x30d8 <__fp_split3>
    2eb0:	98 f3       	brcs	.-26     	; 0x2e98 <__divsf3+0x4>

00002eb2 <__divsf3_pse>:
    2eb2:	99 23       	and	r25, r25
    2eb4:	c9 f3       	breq	.-14     	; 0x2ea8 <__divsf3+0x14>
    2eb6:	55 23       	and	r21, r21
    2eb8:	b1 f3       	breq	.-20     	; 0x2ea6 <__divsf3+0x12>
    2eba:	95 1b       	sub	r25, r21
    2ebc:	55 0b       	sbc	r21, r21
    2ebe:	bb 27       	eor	r27, r27
    2ec0:	aa 27       	eor	r26, r26
    2ec2:	62 17       	cp	r22, r18
    2ec4:	73 07       	cpc	r23, r19
    2ec6:	84 07       	cpc	r24, r20
    2ec8:	38 f0       	brcs	.+14     	; 0x2ed8 <__divsf3_pse+0x26>
    2eca:	9f 5f       	subi	r25, 0xFF	; 255
    2ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ece:	22 0f       	add	r18, r18
    2ed0:	33 1f       	adc	r19, r19
    2ed2:	44 1f       	adc	r20, r20
    2ed4:	aa 1f       	adc	r26, r26
    2ed6:	a9 f3       	breq	.-22     	; 0x2ec2 <__divsf3_pse+0x10>
    2ed8:	33 d0       	rcall	.+102    	; 0x2f40 <__divsf3_pse+0x8e>
    2eda:	0e 2e       	mov	r0, r30
    2edc:	3a f0       	brmi	.+14     	; 0x2eec <__divsf3_pse+0x3a>
    2ede:	e0 e8       	ldi	r30, 0x80	; 128
    2ee0:	30 d0       	rcall	.+96     	; 0x2f42 <__divsf3_pse+0x90>
    2ee2:	91 50       	subi	r25, 0x01	; 1
    2ee4:	50 40       	sbci	r21, 0x00	; 0
    2ee6:	e6 95       	lsr	r30
    2ee8:	00 1c       	adc	r0, r0
    2eea:	ca f7       	brpl	.-14     	; 0x2ede <__divsf3_pse+0x2c>
    2eec:	29 d0       	rcall	.+82     	; 0x2f40 <__divsf3_pse+0x8e>
    2eee:	fe 2f       	mov	r31, r30
    2ef0:	27 d0       	rcall	.+78     	; 0x2f40 <__divsf3_pse+0x8e>
    2ef2:	66 0f       	add	r22, r22
    2ef4:	77 1f       	adc	r23, r23
    2ef6:	88 1f       	adc	r24, r24
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	26 17       	cp	r18, r22
    2efc:	37 07       	cpc	r19, r23
    2efe:	48 07       	cpc	r20, r24
    2f00:	ab 07       	cpc	r26, r27
    2f02:	b0 e8       	ldi	r27, 0x80	; 128
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <__divsf3_pse+0x56>
    2f06:	bb 0b       	sbc	r27, r27
    2f08:	80 2d       	mov	r24, r0
    2f0a:	bf 01       	movw	r22, r30
    2f0c:	ff 27       	eor	r31, r31
    2f0e:	93 58       	subi	r25, 0x83	; 131
    2f10:	5f 4f       	sbci	r21, 0xFF	; 255
    2f12:	2a f0       	brmi	.+10     	; 0x2f1e <__divsf3_pse+0x6c>
    2f14:	9e 3f       	cpi	r25, 0xFE	; 254
    2f16:	51 05       	cpc	r21, r1
    2f18:	68 f0       	brcs	.+26     	; 0x2f34 <__divsf3_pse+0x82>
    2f1a:	b6 c0       	rjmp	.+364    	; 0x3088 <__fp_inf>
    2f1c:	00 c1       	rjmp	.+512    	; 0x311e <__fp_szero>
    2f1e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f20:	ec f3       	brlt	.-6      	; 0x2f1c <__divsf3_pse+0x6a>
    2f22:	98 3e       	cpi	r25, 0xE8	; 232
    2f24:	dc f3       	brlt	.-10     	; 0x2f1c <__divsf3_pse+0x6a>
    2f26:	86 95       	lsr	r24
    2f28:	77 95       	ror	r23
    2f2a:	67 95       	ror	r22
    2f2c:	b7 95       	ror	r27
    2f2e:	f7 95       	ror	r31
    2f30:	9f 5f       	subi	r25, 0xFF	; 255
    2f32:	c9 f7       	brne	.-14     	; 0x2f26 <__divsf3_pse+0x74>
    2f34:	88 0f       	add	r24, r24
    2f36:	91 1d       	adc	r25, r1
    2f38:	96 95       	lsr	r25
    2f3a:	87 95       	ror	r24
    2f3c:	97 f9       	bld	r25, 7
    2f3e:	08 95       	ret
    2f40:	e1 e0       	ldi	r30, 0x01	; 1
    2f42:	66 0f       	add	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	88 1f       	adc	r24, r24
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	62 17       	cp	r22, r18
    2f4c:	73 07       	cpc	r23, r19
    2f4e:	84 07       	cpc	r24, r20
    2f50:	ba 07       	cpc	r27, r26
    2f52:	20 f0       	brcs	.+8      	; 0x2f5c <__divsf3_pse+0xaa>
    2f54:	62 1b       	sub	r22, r18
    2f56:	73 0b       	sbc	r23, r19
    2f58:	84 0b       	sbc	r24, r20
    2f5a:	ba 0b       	sbc	r27, r26
    2f5c:	ee 1f       	adc	r30, r30
    2f5e:	88 f7       	brcc	.-30     	; 0x2f42 <__divsf3_pse+0x90>
    2f60:	e0 95       	com	r30
    2f62:	08 95       	ret

00002f64 <__fixsfsi>:
    2f64:	04 d0       	rcall	.+8      	; 0x2f6e <__fixunssfsi>
    2f66:	68 94       	set
    2f68:	b1 11       	cpse	r27, r1
    2f6a:	d9 c0       	rjmp	.+434    	; 0x311e <__fp_szero>
    2f6c:	08 95       	ret

00002f6e <__fixunssfsi>:
    2f6e:	bc d0       	rcall	.+376    	; 0x30e8 <__fp_splitA>
    2f70:	88 f0       	brcs	.+34     	; 0x2f94 <__fixunssfsi+0x26>
    2f72:	9f 57       	subi	r25, 0x7F	; 127
    2f74:	90 f0       	brcs	.+36     	; 0x2f9a <__fixunssfsi+0x2c>
    2f76:	b9 2f       	mov	r27, r25
    2f78:	99 27       	eor	r25, r25
    2f7a:	b7 51       	subi	r27, 0x17	; 23
    2f7c:	a0 f0       	brcs	.+40     	; 0x2fa6 <__fixunssfsi+0x38>
    2f7e:	d1 f0       	breq	.+52     	; 0x2fb4 <__fixunssfsi+0x46>
    2f80:	66 0f       	add	r22, r22
    2f82:	77 1f       	adc	r23, r23
    2f84:	88 1f       	adc	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	1a f0       	brmi	.+6      	; 0x2f90 <__fixunssfsi+0x22>
    2f8a:	ba 95       	dec	r27
    2f8c:	c9 f7       	brne	.-14     	; 0x2f80 <__fixunssfsi+0x12>
    2f8e:	12 c0       	rjmp	.+36     	; 0x2fb4 <__fixunssfsi+0x46>
    2f90:	b1 30       	cpi	r27, 0x01	; 1
    2f92:	81 f0       	breq	.+32     	; 0x2fb4 <__fixunssfsi+0x46>
    2f94:	c3 d0       	rcall	.+390    	; 0x311c <__fp_zero>
    2f96:	b1 e0       	ldi	r27, 0x01	; 1
    2f98:	08 95       	ret
    2f9a:	c0 c0       	rjmp	.+384    	; 0x311c <__fp_zero>
    2f9c:	67 2f       	mov	r22, r23
    2f9e:	78 2f       	mov	r23, r24
    2fa0:	88 27       	eor	r24, r24
    2fa2:	b8 5f       	subi	r27, 0xF8	; 248
    2fa4:	39 f0       	breq	.+14     	; 0x2fb4 <__fixunssfsi+0x46>
    2fa6:	b9 3f       	cpi	r27, 0xF9	; 249
    2fa8:	cc f3       	brlt	.-14     	; 0x2f9c <__fixunssfsi+0x2e>
    2faa:	86 95       	lsr	r24
    2fac:	77 95       	ror	r23
    2fae:	67 95       	ror	r22
    2fb0:	b3 95       	inc	r27
    2fb2:	d9 f7       	brne	.-10     	; 0x2faa <__fixunssfsi+0x3c>
    2fb4:	3e f4       	brtc	.+14     	; 0x2fc4 <__fixunssfsi+0x56>
    2fb6:	90 95       	com	r25
    2fb8:	80 95       	com	r24
    2fba:	70 95       	com	r23
    2fbc:	61 95       	neg	r22
    2fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc0:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc4:	08 95       	ret

00002fc6 <__floatunsisf>:
    2fc6:	e8 94       	clt
    2fc8:	09 c0       	rjmp	.+18     	; 0x2fdc <__floatsisf+0x12>

00002fca <__floatsisf>:
    2fca:	97 fb       	bst	r25, 7
    2fcc:	3e f4       	brtc	.+14     	; 0x2fdc <__floatsisf+0x12>
    2fce:	90 95       	com	r25
    2fd0:	80 95       	com	r24
    2fd2:	70 95       	com	r23
    2fd4:	61 95       	neg	r22
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    2fda:	9f 4f       	sbci	r25, 0xFF	; 255
    2fdc:	99 23       	and	r25, r25
    2fde:	a9 f0       	breq	.+42     	; 0x300a <__floatsisf+0x40>
    2fe0:	f9 2f       	mov	r31, r25
    2fe2:	96 e9       	ldi	r25, 0x96	; 150
    2fe4:	bb 27       	eor	r27, r27
    2fe6:	93 95       	inc	r25
    2fe8:	f6 95       	lsr	r31
    2fea:	87 95       	ror	r24
    2fec:	77 95       	ror	r23
    2fee:	67 95       	ror	r22
    2ff0:	b7 95       	ror	r27
    2ff2:	f1 11       	cpse	r31, r1
    2ff4:	f8 cf       	rjmp	.-16     	; 0x2fe6 <__floatsisf+0x1c>
    2ff6:	fa f4       	brpl	.+62     	; 0x3036 <__floatsisf+0x6c>
    2ff8:	bb 0f       	add	r27, r27
    2ffa:	11 f4       	brne	.+4      	; 0x3000 <__floatsisf+0x36>
    2ffc:	60 ff       	sbrs	r22, 0
    2ffe:	1b c0       	rjmp	.+54     	; 0x3036 <__floatsisf+0x6c>
    3000:	6f 5f       	subi	r22, 0xFF	; 255
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	8f 4f       	sbci	r24, 0xFF	; 255
    3006:	9f 4f       	sbci	r25, 0xFF	; 255
    3008:	16 c0       	rjmp	.+44     	; 0x3036 <__floatsisf+0x6c>
    300a:	88 23       	and	r24, r24
    300c:	11 f0       	breq	.+4      	; 0x3012 <__floatsisf+0x48>
    300e:	96 e9       	ldi	r25, 0x96	; 150
    3010:	11 c0       	rjmp	.+34     	; 0x3034 <__floatsisf+0x6a>
    3012:	77 23       	and	r23, r23
    3014:	21 f0       	breq	.+8      	; 0x301e <__floatsisf+0x54>
    3016:	9e e8       	ldi	r25, 0x8E	; 142
    3018:	87 2f       	mov	r24, r23
    301a:	76 2f       	mov	r23, r22
    301c:	05 c0       	rjmp	.+10     	; 0x3028 <__floatsisf+0x5e>
    301e:	66 23       	and	r22, r22
    3020:	71 f0       	breq	.+28     	; 0x303e <__floatsisf+0x74>
    3022:	96 e8       	ldi	r25, 0x86	; 134
    3024:	86 2f       	mov	r24, r22
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	2a f0       	brmi	.+10     	; 0x3036 <__floatsisf+0x6c>
    302c:	9a 95       	dec	r25
    302e:	66 0f       	add	r22, r22
    3030:	77 1f       	adc	r23, r23
    3032:	88 1f       	adc	r24, r24
    3034:	da f7       	brpl	.-10     	; 0x302c <__floatsisf+0x62>
    3036:	88 0f       	add	r24, r24
    3038:	96 95       	lsr	r25
    303a:	87 95       	ror	r24
    303c:	97 f9       	bld	r25, 7
    303e:	08 95       	ret

00003040 <__fp_cmp>:
    3040:	99 0f       	add	r25, r25
    3042:	00 08       	sbc	r0, r0
    3044:	55 0f       	add	r21, r21
    3046:	aa 0b       	sbc	r26, r26
    3048:	e0 e8       	ldi	r30, 0x80	; 128
    304a:	fe ef       	ldi	r31, 0xFE	; 254
    304c:	16 16       	cp	r1, r22
    304e:	17 06       	cpc	r1, r23
    3050:	e8 07       	cpc	r30, r24
    3052:	f9 07       	cpc	r31, r25
    3054:	c0 f0       	brcs	.+48     	; 0x3086 <__fp_cmp+0x46>
    3056:	12 16       	cp	r1, r18
    3058:	13 06       	cpc	r1, r19
    305a:	e4 07       	cpc	r30, r20
    305c:	f5 07       	cpc	r31, r21
    305e:	98 f0       	brcs	.+38     	; 0x3086 <__fp_cmp+0x46>
    3060:	62 1b       	sub	r22, r18
    3062:	73 0b       	sbc	r23, r19
    3064:	84 0b       	sbc	r24, r20
    3066:	95 0b       	sbc	r25, r21
    3068:	39 f4       	brne	.+14     	; 0x3078 <__fp_cmp+0x38>
    306a:	0a 26       	eor	r0, r26
    306c:	61 f0       	breq	.+24     	; 0x3086 <__fp_cmp+0x46>
    306e:	23 2b       	or	r18, r19
    3070:	24 2b       	or	r18, r20
    3072:	25 2b       	or	r18, r21
    3074:	21 f4       	brne	.+8      	; 0x307e <__fp_cmp+0x3e>
    3076:	08 95       	ret
    3078:	0a 26       	eor	r0, r26
    307a:	09 f4       	brne	.+2      	; 0x307e <__fp_cmp+0x3e>
    307c:	a1 40       	sbci	r26, 0x01	; 1
    307e:	a6 95       	lsr	r26
    3080:	8f ef       	ldi	r24, 0xFF	; 255
    3082:	81 1d       	adc	r24, r1
    3084:	81 1d       	adc	r24, r1
    3086:	08 95       	ret

00003088 <__fp_inf>:
    3088:	97 f9       	bld	r25, 7
    308a:	9f 67       	ori	r25, 0x7F	; 127
    308c:	80 e8       	ldi	r24, 0x80	; 128
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	60 e0       	ldi	r22, 0x00	; 0
    3092:	08 95       	ret

00003094 <__fp_nan>:
    3094:	9f ef       	ldi	r25, 0xFF	; 255
    3096:	80 ec       	ldi	r24, 0xC0	; 192
    3098:	08 95       	ret

0000309a <__fp_pscA>:
    309a:	00 24       	eor	r0, r0
    309c:	0a 94       	dec	r0
    309e:	16 16       	cp	r1, r22
    30a0:	17 06       	cpc	r1, r23
    30a2:	18 06       	cpc	r1, r24
    30a4:	09 06       	cpc	r0, r25
    30a6:	08 95       	ret

000030a8 <__fp_pscB>:
    30a8:	00 24       	eor	r0, r0
    30aa:	0a 94       	dec	r0
    30ac:	12 16       	cp	r1, r18
    30ae:	13 06       	cpc	r1, r19
    30b0:	14 06       	cpc	r1, r20
    30b2:	05 06       	cpc	r0, r21
    30b4:	08 95       	ret

000030b6 <__fp_round>:
    30b6:	09 2e       	mov	r0, r25
    30b8:	03 94       	inc	r0
    30ba:	00 0c       	add	r0, r0
    30bc:	11 f4       	brne	.+4      	; 0x30c2 <__fp_round+0xc>
    30be:	88 23       	and	r24, r24
    30c0:	52 f0       	brmi	.+20     	; 0x30d6 <__fp_round+0x20>
    30c2:	bb 0f       	add	r27, r27
    30c4:	40 f4       	brcc	.+16     	; 0x30d6 <__fp_round+0x20>
    30c6:	bf 2b       	or	r27, r31
    30c8:	11 f4       	brne	.+4      	; 0x30ce <__fp_round+0x18>
    30ca:	60 ff       	sbrs	r22, 0
    30cc:	04 c0       	rjmp	.+8      	; 0x30d6 <__fp_round+0x20>
    30ce:	6f 5f       	subi	r22, 0xFF	; 255
    30d0:	7f 4f       	sbci	r23, 0xFF	; 255
    30d2:	8f 4f       	sbci	r24, 0xFF	; 255
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	08 95       	ret

000030d8 <__fp_split3>:
    30d8:	57 fd       	sbrc	r21, 7
    30da:	90 58       	subi	r25, 0x80	; 128
    30dc:	44 0f       	add	r20, r20
    30de:	55 1f       	adc	r21, r21
    30e0:	59 f0       	breq	.+22     	; 0x30f8 <__fp_splitA+0x10>
    30e2:	5f 3f       	cpi	r21, 0xFF	; 255
    30e4:	71 f0       	breq	.+28     	; 0x3102 <__fp_splitA+0x1a>
    30e6:	47 95       	ror	r20

000030e8 <__fp_splitA>:
    30e8:	88 0f       	add	r24, r24
    30ea:	97 fb       	bst	r25, 7
    30ec:	99 1f       	adc	r25, r25
    30ee:	61 f0       	breq	.+24     	; 0x3108 <__fp_splitA+0x20>
    30f0:	9f 3f       	cpi	r25, 0xFF	; 255
    30f2:	79 f0       	breq	.+30     	; 0x3112 <__fp_splitA+0x2a>
    30f4:	87 95       	ror	r24
    30f6:	08 95       	ret
    30f8:	12 16       	cp	r1, r18
    30fa:	13 06       	cpc	r1, r19
    30fc:	14 06       	cpc	r1, r20
    30fe:	55 1f       	adc	r21, r21
    3100:	f2 cf       	rjmp	.-28     	; 0x30e6 <__fp_split3+0xe>
    3102:	46 95       	lsr	r20
    3104:	f1 df       	rcall	.-30     	; 0x30e8 <__fp_splitA>
    3106:	08 c0       	rjmp	.+16     	; 0x3118 <__fp_splitA+0x30>
    3108:	16 16       	cp	r1, r22
    310a:	17 06       	cpc	r1, r23
    310c:	18 06       	cpc	r1, r24
    310e:	99 1f       	adc	r25, r25
    3110:	f1 cf       	rjmp	.-30     	; 0x30f4 <__fp_splitA+0xc>
    3112:	86 95       	lsr	r24
    3114:	71 05       	cpc	r23, r1
    3116:	61 05       	cpc	r22, r1
    3118:	08 94       	sec
    311a:	08 95       	ret

0000311c <__fp_zero>:
    311c:	e8 94       	clt

0000311e <__fp_szero>:
    311e:	bb 27       	eor	r27, r27
    3120:	66 27       	eor	r22, r22
    3122:	77 27       	eor	r23, r23
    3124:	cb 01       	movw	r24, r22
    3126:	97 f9       	bld	r25, 7
    3128:	08 95       	ret

0000312a <__gesf2>:
    312a:	8a df       	rcall	.-236    	; 0x3040 <__fp_cmp>
    312c:	08 f4       	brcc	.+2      	; 0x3130 <__gesf2+0x6>
    312e:	8f ef       	ldi	r24, 0xFF	; 255
    3130:	08 95       	ret

00003132 <__mulsf3>:
    3132:	0b d0       	rcall	.+22     	; 0x314a <__mulsf3x>
    3134:	c0 cf       	rjmp	.-128    	; 0x30b6 <__fp_round>
    3136:	b1 df       	rcall	.-158    	; 0x309a <__fp_pscA>
    3138:	28 f0       	brcs	.+10     	; 0x3144 <__mulsf3+0x12>
    313a:	b6 df       	rcall	.-148    	; 0x30a8 <__fp_pscB>
    313c:	18 f0       	brcs	.+6      	; 0x3144 <__mulsf3+0x12>
    313e:	95 23       	and	r25, r21
    3140:	09 f0       	breq	.+2      	; 0x3144 <__mulsf3+0x12>
    3142:	a2 cf       	rjmp	.-188    	; 0x3088 <__fp_inf>
    3144:	a7 cf       	rjmp	.-178    	; 0x3094 <__fp_nan>
    3146:	11 24       	eor	r1, r1
    3148:	ea cf       	rjmp	.-44     	; 0x311e <__fp_szero>

0000314a <__mulsf3x>:
    314a:	c6 df       	rcall	.-116    	; 0x30d8 <__fp_split3>
    314c:	a0 f3       	brcs	.-24     	; 0x3136 <__mulsf3+0x4>

0000314e <__mulsf3_pse>:
    314e:	95 9f       	mul	r25, r21
    3150:	d1 f3       	breq	.-12     	; 0x3146 <__mulsf3+0x14>
    3152:	95 0f       	add	r25, r21
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	55 1f       	adc	r21, r21
    3158:	62 9f       	mul	r22, r18
    315a:	f0 01       	movw	r30, r0
    315c:	72 9f       	mul	r23, r18
    315e:	bb 27       	eor	r27, r27
    3160:	f0 0d       	add	r31, r0
    3162:	b1 1d       	adc	r27, r1
    3164:	63 9f       	mul	r22, r19
    3166:	aa 27       	eor	r26, r26
    3168:	f0 0d       	add	r31, r0
    316a:	b1 1d       	adc	r27, r1
    316c:	aa 1f       	adc	r26, r26
    316e:	64 9f       	mul	r22, r20
    3170:	66 27       	eor	r22, r22
    3172:	b0 0d       	add	r27, r0
    3174:	a1 1d       	adc	r26, r1
    3176:	66 1f       	adc	r22, r22
    3178:	82 9f       	mul	r24, r18
    317a:	22 27       	eor	r18, r18
    317c:	b0 0d       	add	r27, r0
    317e:	a1 1d       	adc	r26, r1
    3180:	62 1f       	adc	r22, r18
    3182:	73 9f       	mul	r23, r19
    3184:	b0 0d       	add	r27, r0
    3186:	a1 1d       	adc	r26, r1
    3188:	62 1f       	adc	r22, r18
    318a:	83 9f       	mul	r24, r19
    318c:	a0 0d       	add	r26, r0
    318e:	61 1d       	adc	r22, r1
    3190:	22 1f       	adc	r18, r18
    3192:	74 9f       	mul	r23, r20
    3194:	33 27       	eor	r19, r19
    3196:	a0 0d       	add	r26, r0
    3198:	61 1d       	adc	r22, r1
    319a:	23 1f       	adc	r18, r19
    319c:	84 9f       	mul	r24, r20
    319e:	60 0d       	add	r22, r0
    31a0:	21 1d       	adc	r18, r1
    31a2:	82 2f       	mov	r24, r18
    31a4:	76 2f       	mov	r23, r22
    31a6:	6a 2f       	mov	r22, r26
    31a8:	11 24       	eor	r1, r1
    31aa:	9f 57       	subi	r25, 0x7F	; 127
    31ac:	50 40       	sbci	r21, 0x00	; 0
    31ae:	8a f0       	brmi	.+34     	; 0x31d2 <__mulsf3_pse+0x84>
    31b0:	e1 f0       	breq	.+56     	; 0x31ea <__mulsf3_pse+0x9c>
    31b2:	88 23       	and	r24, r24
    31b4:	4a f0       	brmi	.+18     	; 0x31c8 <__mulsf3_pse+0x7a>
    31b6:	ee 0f       	add	r30, r30
    31b8:	ff 1f       	adc	r31, r31
    31ba:	bb 1f       	adc	r27, r27
    31bc:	66 1f       	adc	r22, r22
    31be:	77 1f       	adc	r23, r23
    31c0:	88 1f       	adc	r24, r24
    31c2:	91 50       	subi	r25, 0x01	; 1
    31c4:	50 40       	sbci	r21, 0x00	; 0
    31c6:	a9 f7       	brne	.-22     	; 0x31b2 <__mulsf3_pse+0x64>
    31c8:	9e 3f       	cpi	r25, 0xFE	; 254
    31ca:	51 05       	cpc	r21, r1
    31cc:	70 f0       	brcs	.+28     	; 0x31ea <__mulsf3_pse+0x9c>
    31ce:	5c cf       	rjmp	.-328    	; 0x3088 <__fp_inf>
    31d0:	a6 cf       	rjmp	.-180    	; 0x311e <__fp_szero>
    31d2:	5f 3f       	cpi	r21, 0xFF	; 255
    31d4:	ec f3       	brlt	.-6      	; 0x31d0 <__mulsf3_pse+0x82>
    31d6:	98 3e       	cpi	r25, 0xE8	; 232
    31d8:	dc f3       	brlt	.-10     	; 0x31d0 <__mulsf3_pse+0x82>
    31da:	86 95       	lsr	r24
    31dc:	77 95       	ror	r23
    31de:	67 95       	ror	r22
    31e0:	b7 95       	ror	r27
    31e2:	f7 95       	ror	r31
    31e4:	e7 95       	ror	r30
    31e6:	9f 5f       	subi	r25, 0xFF	; 255
    31e8:	c1 f7       	brne	.-16     	; 0x31da <__mulsf3_pse+0x8c>
    31ea:	fe 2b       	or	r31, r30
    31ec:	88 0f       	add	r24, r24
    31ee:	91 1d       	adc	r25, r1
    31f0:	96 95       	lsr	r25
    31f2:	87 95       	ror	r24
    31f4:	97 f9       	bld	r25, 7
    31f6:	08 95       	ret

000031f8 <__divmodhi4>:
    31f8:	97 fb       	bst	r25, 7
    31fa:	09 2e       	mov	r0, r25
    31fc:	07 26       	eor	r0, r23
    31fe:	0a d0       	rcall	.+20     	; 0x3214 <__divmodhi4_neg1>
    3200:	77 fd       	sbrc	r23, 7
    3202:	04 d0       	rcall	.+8      	; 0x320c <__divmodhi4_neg2>
    3204:	0c d0       	rcall	.+24     	; 0x321e <__udivmodhi4>
    3206:	06 d0       	rcall	.+12     	; 0x3214 <__divmodhi4_neg1>
    3208:	00 20       	and	r0, r0
    320a:	1a f4       	brpl	.+6      	; 0x3212 <__divmodhi4_exit>

0000320c <__divmodhi4_neg2>:
    320c:	70 95       	com	r23
    320e:	61 95       	neg	r22
    3210:	7f 4f       	sbci	r23, 0xFF	; 255

00003212 <__divmodhi4_exit>:
    3212:	08 95       	ret

00003214 <__divmodhi4_neg1>:
    3214:	f6 f7       	brtc	.-4      	; 0x3212 <__divmodhi4_exit>
    3216:	90 95       	com	r25
    3218:	81 95       	neg	r24
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	08 95       	ret

0000321e <__udivmodhi4>:
    321e:	aa 1b       	sub	r26, r26
    3220:	bb 1b       	sub	r27, r27
    3222:	51 e1       	ldi	r21, 0x11	; 17
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <__udivmodhi4_ep>

00003226 <__udivmodhi4_loop>:
    3226:	aa 1f       	adc	r26, r26
    3228:	bb 1f       	adc	r27, r27
    322a:	a6 17       	cp	r26, r22
    322c:	b7 07       	cpc	r27, r23
    322e:	10 f0       	brcs	.+4      	; 0x3234 <__udivmodhi4_ep>
    3230:	a6 1b       	sub	r26, r22
    3232:	b7 0b       	sbc	r27, r23

00003234 <__udivmodhi4_ep>:
    3234:	88 1f       	adc	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	5a 95       	dec	r21
    323a:	a9 f7       	brne	.-22     	; 0x3226 <__udivmodhi4_loop>
    323c:	80 95       	com	r24
    323e:	90 95       	com	r25
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	08 95       	ret

00003246 <__eerd_byte_m32>:
    3246:	e1 99       	sbic	0x1c, 1	; 28
    3248:	fe cf       	rjmp	.-4      	; 0x3246 <__eerd_byte_m32>
    324a:	9f bb       	out	0x1f, r25	; 31
    324c:	8e bb       	out	0x1e, r24	; 30
    324e:	e0 9a       	sbi	0x1c, 0	; 28
    3250:	99 27       	eor	r25, r25
    3252:	8d b3       	in	r24, 0x1d	; 29
    3254:	08 95       	ret

00003256 <__eerd_word_m32>:
    3256:	a8 e1       	ldi	r26, 0x18	; 24
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	42 e0       	ldi	r20, 0x02	; 2
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	0c 94 45 19 	jmp	0x328a	; 0x328a <__eerd_blraw_m32>

00003262 <__eewr_byte_m32>:
    3262:	26 2f       	mov	r18, r22

00003264 <__eewr_r18_m32>:
    3264:	e1 99       	sbic	0x1c, 1	; 28
    3266:	fe cf       	rjmp	.-4      	; 0x3264 <__eewr_r18_m32>
    3268:	9f bb       	out	0x1f, r25	; 31
    326a:	8e bb       	out	0x1e, r24	; 30
    326c:	2d bb       	out	0x1d, r18	; 29
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	e2 9a       	sbi	0x1c, 2	; 28
    3274:	e1 9a       	sbi	0x1c, 1	; 28
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	08 95       	ret

0000327c <__eewr_word_m32>:
    327c:	0e 94 31 19 	call	0x3262	; 0x3262 <__eewr_byte_m32>
    3280:	27 2f       	mov	r18, r23
    3282:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__eewr_r18_m32>

00003286 <__eerd_block_m32>:
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22

0000328a <__eerd_blraw_m32>:
    328a:	fc 01       	movw	r30, r24
    328c:	e1 99       	sbic	0x1c, 1	; 28
    328e:	fe cf       	rjmp	.-4      	; 0x328c <__eerd_blraw_m32+0x2>
    3290:	06 c0       	rjmp	.+12     	; 0x329e <__eerd_blraw_m32+0x14>
    3292:	ff bb       	out	0x1f, r31	; 31
    3294:	ee bb       	out	0x1e, r30	; 30
    3296:	e0 9a       	sbi	0x1c, 0	; 28
    3298:	31 96       	adiw	r30, 0x01	; 1
    329a:	0d b2       	in	r0, 0x1d	; 29
    329c:	0d 92       	st	X+, r0
    329e:	41 50       	subi	r20, 0x01	; 1
    32a0:	50 40       	sbci	r21, 0x00	; 0
    32a2:	b8 f7       	brcc	.-18     	; 0x3292 <__eerd_blraw_m32+0x8>
    32a4:	08 95       	ret

000032a6 <_exit>:
    32a6:	f8 94       	cli

000032a8 <__stop_program>:
    32a8:	ff cf       	rjmp	.-2      	; 0x32a8 <__stop_program>
