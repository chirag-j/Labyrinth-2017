
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  000031bc  00003250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000675  00800122  00800122  00003312  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003312  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000697  00000000  00000000  00003332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d7f  00000000  00000000  000039c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e4  00000000  00000000  00005748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025c8  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  000080f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000670  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bca  00000000  00000000  00008be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000240  00000000  00000000  000097ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e7 12 	call	0x25ce	; 0x25ce <main>
      8a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 1e 18 	call	0x303c	; 0x303c <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     18e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 1e 18 	call	0x303c	; 0x303c <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 1e 18 	call	0x303c	; 0x303c <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     286:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 22 01 	sts	0x0122, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 22 01 	lds	r24, 0x0122
     300:	82 2b       	or	r24, r18
     302:	80 93 22 01 	sts	0x0122, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 47 07 	sts	0x0747, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 48 07 	sts	0x0748, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 49 07 	sts	0x0749, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 4a 07 	sts	0x074A, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 8b 07 	sts	0x078B, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 8c 07 	sts	0x078C, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 8d 07 	sts	0x078D, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 8e 07 	sts	0x078E, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
int path_array[15][2];
int special_flag = 0, repeat=0;
int right;
int ipl = 0;
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 22 01 	lds	r24, 0x0122
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 24 01 	sts	0x0124, r25
     778:	80 93 23 01 	sts	0x0123, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 2f 01 	lds	r24, 0x012F
     780:	90 91 30 01 	lds	r25, 0x0130
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 24 01 	sts	0x0124, r1
     78c:	10 92 23 01 	sts	0x0123, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 24 01 	sts	0x0124, r25
     7a0:	80 93 23 01 	sts	0x0123, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 23 01 	lds	r22, 0x0123
     7a8:	70 91 24 01 	lds	r23, 0x0124
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 6e 17 	call	0x2edc	; 0x2edc <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 8f 07 	lds	r22, 0x078F
     7c0:	70 91 90 07 	lds	r23, 0x0790
     7c4:	80 91 91 07 	lds	r24, 0x0791
     7c8:	90 91 92 07 	lds	r25, 0x0792
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 93 07 	sts	0x0793, r22
     7dc:	70 93 94 07 	sts	0x0794, r23
     7e0:	80 93 95 07 	sts	0x0795, r24
     7e4:	90 93 96 07 	sts	0x0796, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 12 01 	lds	r18, 0x0112
     7f0:	30 91 13 01 	lds	r19, 0x0113
     7f4:	40 91 14 01 	lds	r20, 0x0114
     7f8:	50 91 15 01 	lds	r21, 0x0115
     7fc:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 16 01 	lds	r18, 0x0116
     80c:	30 91 17 01 	lds	r19, 0x0117
     810:	40 91 18 01 	lds	r20, 0x0118
     814:	50 91 19 01 	lds	r21, 0x0119
     818:	0e 94 22 18 	call	0x3044	; 0x3044 <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 41 01 	sts	0x0141, r22
     830:	70 93 42 01 	sts	0x0142, r23
     834:	80 93 43 01 	sts	0x0143, r24
     838:	90 93 44 01 	sts	0x0144, r25
	prev_error = mpos ;
     83c:	a0 92 8f 07 	sts	0x078F, r10
     840:	b0 92 90 07 	sts	0x0790, r11
     844:	c0 92 91 07 	sts	0x0791, r12
     848:	d0 92 92 07 	sts	0x0792, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 10 01 	lds	r22, 0x0110
     850:	70 91 11 01 	lds	r23, 0x0111
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__subsf3>
     868:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__addsf3>
     87c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 1a 01 	sts	0x011A, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
		//left_count();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     92a:	82 e3       	ldi	r24, 0x32	; 50
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
	//delay_sec(2);
}
     932:	08 95       	ret

00000934 <left_count>:
	delay_millisec(50);
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     934:	cc 99       	sbic	0x19, 4	; 25
     936:	16 c0       	rjmp	.+44     	; 0x964 <left_count+0x30>
	{
		if(l==0)
     938:	80 91 27 01 	lds	r24, 0x0127
     93c:	90 91 28 01 	lds	r25, 0x0128
     940:	89 2b       	or	r24, r25
     942:	a1 f4       	brne	.+40     	; 0x96c <left_count+0x38>
		{
			lcount++;
     944:	80 91 29 01 	lds	r24, 0x0129
     948:	90 91 2a 01 	lds	r25, 0x012A
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	90 93 2a 01 	sts	0x012A, r25
     952:	80 93 29 01 	sts	0x0129, r24
			l = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 28 01 	sts	0x0128, r25
     95e:	80 93 27 01 	sts	0x0127, r24
     962:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     964:	10 92 28 01 	sts	0x0128, r1
     968:	10 92 27 01 	sts	0x0127, r1
     96c:	08 95       	ret

0000096e <special_case_check>:
	bot_brake();
	delay_millisec(50);
}
void special_case_check()         ////called inside left_junc_check
{
	if(bit_is_clear(PINA,5) || flag1 == 1)
     96e:	cd 9b       	sbis	0x19, 5	; 25
     970:	06 c0       	rjmp	.+12     	; 0x97e <special_case_check+0x10>
     972:	80 91 2f 01 	lds	r24, 0x012F
     976:	90 91 30 01 	lds	r25, 0x0130
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	79 f5       	brne	.+94     	; 0x9dc <special_case_check+0x6e>
	{
		flag1 = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	90 93 30 01 	sts	0x0130, r25
     986:	80 93 2f 01 	sts	0x012F, r24
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
     98a:	cc 99       	sbic	0x19, 4	; 25
     98c:	27 c0       	rjmp	.+78     	; 0x9dc <special_case_check+0x6e>
     98e:	86 9b       	sbis	0x10, 6	; 16
     990:	14 c0       	rjmp	.+40     	; 0x9ba <special_case_check+0x4c>
     992:	ce 9b       	sbis	0x19, 6	; 25
     994:	12 c0       	rjmp	.+36     	; 0x9ba <special_case_check+0x4c>
     996:	08 95       	ret
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     998:	3b bd       	out	0x2b, r19	; 43
     99a:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     99c:	39 bd       	out	0x29, r19	; 41
     99e:	28 bd       	out	0x28, r18	; 40
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9a0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9a2:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9a4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9a6:	af 98       	cbi	0x15, 7	; 21
			{
				set_pwm1a(240);
				set_pwm1b(240);
				bot_forward();
				flag1 = 0;
				if(bit_is_clear(PIND, 7))
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	87 99       	sbic	0x10, 7	; 16
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <special_case_check+0x54>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9b0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9b2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9b4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9b6:	af 9a       	sbi	0x15, 7	; 21
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <special_case_check+0x54>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9be:	20 ef       	ldi	r18, 0xF0	; 240
     9c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		flag1 = 1;
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
		{
			while(bit_is_clear(PINA,4) && bit_is_set(PIND, 7)) 
     9c2:	cc 9b       	sbis	0x19, 4	; 25
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <special_case_check+0x62>
     9c6:	90 93 30 01 	sts	0x0130, r25
     9ca:	80 93 2f 01 	sts	0x012F, r24
     9ce:	08 95       	ret
     9d0:	87 99       	sbic	0x10, 7	; 16
     9d2:	e2 cf       	rjmp	.-60     	; 0x998 <special_case_check+0x2a>
     9d4:	90 93 30 01 	sts	0x0130, r25
     9d8:	80 93 2f 01 	sts	0x012F, r24
     9dc:	08 95       	ret

000009de <line_track_new>:
	
}

void line_track_new()
{
	check_sensors();
     9de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9e2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9e4:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9e6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9e8:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     9ea:	ce 9b       	sbis	0x19, 6	; 25
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <line_track_new+0x26>
     9ee:	86 99       	sbic	0x10, 6	; 16
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <line_track_new+0x26>
	{
		set_pwm1a(opt-30);
     9f2:	80 91 10 01 	lds	r24, 0x0110
     9f6:	90 91 11 01 	lds	r25, 0x0111
     9fa:	4e 97       	sbiw	r24, 0x1e	; 30
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9fc:	9b bd       	out	0x2b, r25	; 43
     9fe:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt+30);
     a00:	cc 96       	adiw	r24, 0x3c	; 60
     a02:	1e c0       	rjmp	.+60     	; 0xa40 <line_track_new+0x62>

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     a04:	86 9b       	sbis	0x10, 6	; 16
     a06:	0b c0       	rjmp	.+22     	; 0xa1e <line_track_new+0x40>
     a08:	ce 99       	sbic	0x19, 6	; 25
     a0a:	09 c0       	rjmp	.+18     	; 0xa1e <line_track_new+0x40>
	{
		set_pwm1a(opt+30);
     a0c:	80 91 10 01 	lds	r24, 0x0110
     a10:	90 91 11 01 	lds	r25, 0x0111
     a14:	4e 96       	adiw	r24, 0x1e	; 30
     a16:	9b bd       	out	0x2b, r25	; 43
     a18:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt-30);
     a1a:	cc 97       	sbiw	r24, 0x3c	; 60
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <line_track_new+0x62>
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     a1e:	86 9b       	sbis	0x10, 6	; 16
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <line_track_new+0x4e>
     a22:	ce 9b       	sbis	0x19, 6	; 25
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <line_track_new+0x4e>
	{
		line_track();
     a26:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <line_track_new+0x66>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     a2c:	86 99       	sbic	0x10, 6	; 16
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <line_track_new+0x66>
     a30:	ce 99       	sbic	0x19, 6	; 25
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <line_track_new+0x66>
	{
		set_pwm1a(opt);
     a34:	80 91 10 01 	lds	r24, 0x0110
     a38:	90 91 11 01 	lds	r25, 0x0111
     a3c:	9b bd       	out	0x2b, r25	; 43
     a3e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a40:	99 bd       	out	0x29, r25	; 41
     a42:	88 bd       	out	0x28, r24	; 40
		set_pwm1b(opt);
	}
		delay_microsec(10);
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     a4c:	08 95       	ret

00000a4e <end_zone_uturn>:
	
}

void end_zone_uturn()
{
	turn = 'u';
     a4e:	85 e7       	ldi	r24, 0x75	; 117
     a50:	80 93 1a 01 	sts	0x011A, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a54:	24 e0       	ldi	r18, 0x04	; 4
     a56:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a58:	88 e1       	ldi	r24, 0x18	; 24
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <end_zone_uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a5e:	3b bd       	out	0x2b, r19	; 43
     a60:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a62:	99 bd       	out	0x29, r25	; 41
     a64:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a66:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a68:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a6a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a6c:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_clear(PINA,5))
     a6e:	cd 9b       	sbis	0x19, 5	; 25
     a70:	f6 cf       	rjmp	.-20     	; 0xa5e <end_zone_uturn+0x10>
	{
		set_pwm1a(260);
		set_pwm1b(280);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,6) || bit_is_clear(PIND,6));
     a72:	ce 9b       	sbis	0x19, 6	; 25
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <end_zone_uturn+0x24>
     a76:	86 9b       	sbis	0x10, 6	; 16
     a78:	fc cf       	rjmp	.-8      	; 0xa72 <end_zone_uturn+0x24>
	while(bit_is_set(PINA,5));
     a7a:	cd 99       	sbic	0x19, 5	; 25
     a7c:	fe cf       	rjmp	.-4      	; 0xa7a <end_zone_uturn+0x2c>
     a7e:	09 c0       	rjmp	.+18     	; 0xa92 <end_zone_uturn+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a80:	9b bd       	out	0x2b, r25	; 43
     a82:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a84:	99 bd       	out	0x29, r25	; 41
     a86:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a88:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a8a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a8c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a8e:	af 98       	cbi	0x15, 7	; 21
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <end_zone_uturn+0x48>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a92:	82 ed       	ldi	r24, 0xD2	; 210
     a94:	90 e0       	ldi	r25, 0x00	; 0
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a96:	ce 9b       	sbis	0x19, 6	; 25
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <end_zone_uturn+0x56>
     a9a:	86 99       	sbic	0x10, 6	; 16
     a9c:	f1 cf       	rjmp	.-30     	; 0xa80 <end_zone_uturn+0x32>
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <end_zone_uturn+0x56>
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     aa0:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	{
		set_pwm1a(210);
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     aa4:	cc 9b       	sbis	0x19, 4	; 25
     aa6:	fc cf       	rjmp	.-8      	; 0xaa0 <end_zone_uturn+0x52>
     aa8:	87 9b       	sbis	0x10, 7	; 16
     aaa:	fa cf       	rjmp	.-12     	; 0xaa0 <end_zone_uturn+0x52>
     aac:	8f e8       	ldi	r24, 0x8F	; 143
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	9b bd       	out	0x2b, r25	; 43
     ab2:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ab4:	99 bd       	out	0x29, r25	; 41
     ab6:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     ab8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     aba:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     abc:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     abe:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     ac0:	82 e3       	ldi	r24, 0x32	; 50
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     ac8:	08 95       	ret

00000aca <turn_left>:
	delay_millisec(50);
}

void turn_left()
{	
	turn = 'l';
     aca:	8c e6       	ldi	r24, 0x6C	; 108
     acc:	80 93 1a 01 	sts	0x011A, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ad0:	85 ef       	ldi	r24, 0xF5	; 245
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	08 c0       	rjmp	.+16     	; 0xae6 <turn_left+0x1c>
     ad6:	9b bd       	out	0x2b, r25	; 43
     ad8:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ada:	99 bd       	out	0x29, r25	; 41
     adc:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     ade:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     ae0:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ae2:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     ae4:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_set(PINA,5))
     ae6:	cd 99       	sbic	0x19, 5	; 25
     ae8:	f6 cf       	rjmp	.-20     	; 0xad6 <turn_left+0xc>
     aea:	09 c0       	rjmp	.+18     	; 0xafe <turn_left+0x34>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     aec:	9b bd       	out	0x2b, r25	; 43
     aee:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     af0:	99 bd       	out	0x29, r25	; 41
     af2:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     af4:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     af6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     af8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     afa:	af 98       	cbi	0x15, 7	; 21
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <turn_left+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     afe:	80 ef       	ldi	r24, 0xF0	; 240
     b00:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     b02:	ce 9b       	sbis	0x19, 6	; 25
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <turn_left+0x46>
     b06:	86 99       	sbic	0x10, 6	; 16
     b08:	f1 cf       	rjmp	.-30     	; 0xaec <turn_left+0x22>
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <turn_left+0x46>
		set_pwm1b(240);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b0c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	{
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b10:	cc 9b       	sbis	0x19, 4	; 25
     b12:	fc cf       	rjmp	.-8      	; 0xb0c <turn_left+0x42>
     b14:	87 9b       	sbis	0x10, 7	; 16
     b16:	fa cf       	rjmp	.-12     	; 0xb0c <turn_left+0x42>
     b18:	8f e8       	ldi	r24, 0x8F	; 143
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	9b bd       	out	0x2b, r25	; 43
     b1e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b20:	99 bd       	out	0x29, r25	; 41
     b22:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b24:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b26:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b28:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b2a:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b2c:	82 e3       	ldi	r24, 0x32	; 50
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     b34:	08 95       	ret

00000b36 <turn_right>:
	bot_brake();
	delay_millisec(50);
	//delay_sec(2);
}
void turn_right()
{	
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
	turn = 'r';
     b3a:	82 e7       	ldi	r24, 0x72	; 114
     b3c:	80 93 1a 01 	sts	0x011A, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b40:	c5 ef       	ldi	r28, 0xF5	; 245
     b42:	d0 e0       	ldi	r29, 0x00	; 0
     b44:	0a c0       	rjmp	.+20     	; 0xb5a <turn_right+0x24>
     b46:	db bd       	out	0x2b, r29	; 43
     b48:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b4a:	d9 bd       	out	0x29, r29	; 41
     b4c:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     b4e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     b50:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     b52:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b54:	af 9a       	sbi	0x15, 7	; 21
	while(bit_is_set(PINA,7))
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_right();
		left_count();
     b56:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_set(PINA,7))
     b5a:	cf 99       	sbic	0x19, 7	; 25
     b5c:	f4 cf       	rjmp	.-24     	; 0xb46 <turn_right+0x10>
     b5e:	0b c0       	rjmp	.+22     	; 0xb76 <turn_right+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b60:	db bd       	out	0x2b, r29	; 43
     b62:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b64:	d9 bd       	out	0x29, r29	; 41
     b66:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     b68:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     b6a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     b6c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b6e:	af 9a       	sbi	0x15, 7	; 21
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
	{
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_right();
		left_count();
     b70:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <turn_right+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b76:	c0 ef       	ldi	r28, 0xF0	; 240
     b78:	d0 e0       	ldi	r29, 0x00	; 0
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_right();
		left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     b7a:	ce 9b       	sbis	0x19, 6	; 25
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <turn_right+0x52>
     b7e:	86 99       	sbic	0x10, 6	; 16
     b80:	ef cf       	rjmp	.-34     	; 0xb60 <turn_right+0x2a>
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <turn_right+0x52>
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b84:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b88:	cc 9b       	sbis	0x19, 4	; 25
     b8a:	fc cf       	rjmp	.-8      	; 0xb84 <turn_right+0x4e>
     b8c:	87 9b       	sbis	0x10, 7	; 16
     b8e:	fa cf       	rjmp	.-12     	; 0xb84 <turn_right+0x4e>
     b90:	8f e8       	ldi	r24, 0x8F	; 143
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	9b bd       	out	0x2b, r25	; 43
     b96:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b98:	99 bd       	out	0x29, r25	; 41
     b9a:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b9c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b9e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ba0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     ba2:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     ba4:	82 e3       	ldi	r24, 0x32	; 50
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <sense_of_directon>:
}


void sense_of_directon(void)
{
	if(turn == 'r')	
     bb2:	80 91 1a 01 	lds	r24, 0x011A
     bb6:	82 37       	cpi	r24, 0x72	; 114
     bb8:	d1 f4       	brne	.+52     	; 0xbee <sense_of_directon+0x3c>
	{
		switch(dir)
     bba:	80 91 1b 01 	lds	r24, 0x011B
     bbe:	90 91 1c 01 	lds	r25, 0x011C
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	92 07       	cpc	r25, r18
     bc8:	59 f1       	breq	.+86     	; 0xc20 <sense_of_directon+0x6e>
     bca:	2f ef       	ldi	r18, 0xFF	; 255
     bcc:	8f 3f       	cpi	r24, 0xFF	; 255
     bce:	92 07       	cpc	r25, r18
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <sense_of_directon+0x22>
     bd2:	2c f4       	brge	.+10     	; 0xbde <sense_of_directon+0x2c>
     bd4:	8e 5f       	subi	r24, 0xFE	; 254
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	09 f0       	breq	.+2      	; 0xbdc <sense_of_directon+0x2a>
     bda:	51 c0       	rjmp	.+162    	; 0xc7e <sense_of_directon+0xcc>
     bdc:	3d c0       	rjmp	.+122    	; 0xc58 <sense_of_directon+0xa6>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <sense_of_directon+0x34>
     be4:	3f c0       	rjmp	.+126    	; 0xc64 <sense_of_directon+0xb2>
     be6:	02 97       	sbiw	r24, 0x02	; 2
     be8:	09 f0       	breq	.+2      	; 0xbec <sense_of_directon+0x3a>
     bea:	49 c0       	rjmp	.+146    	; 0xc7e <sense_of_directon+0xcc>
     bec:	38 c0       	rjmp	.+112    	; 0xc5e <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     bee:	8c 36       	cpi	r24, 0x6C	; 108
     bf0:	d1 f4       	brne	.+52     	; 0xc26 <sense_of_directon+0x74>
	{
		switch(dir)
     bf2:	80 91 1b 01 	lds	r24, 0x011B
     bf6:	90 91 1c 01 	lds	r25, 0x011C
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	92 07       	cpc	r25, r18
     c00:	89 f1       	breq	.+98     	; 0xc64 <sense_of_directon+0xb2>
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	8f 3f       	cpi	r24, 0xFF	; 255
     c06:	92 07       	cpc	r25, r18
     c08:	09 f0       	breq	.+2      	; 0xc0c <sense_of_directon+0x5a>
     c0a:	24 f4       	brge	.+8      	; 0xc14 <sense_of_directon+0x62>
     c0c:	8e 5f       	subi	r24, 0xFE	; 254
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	b1 f5       	brne	.+108    	; 0xc7e <sense_of_directon+0xcc>
     c12:	25 c0       	rjmp	.+74     	; 0xc5e <sense_of_directon+0xac>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	91 05       	cpc	r25, r1
     c18:	19 f0       	breq	.+6      	; 0xc20 <sense_of_directon+0x6e>
     c1a:	02 97       	sbiw	r24, 0x02	; 2
     c1c:	81 f5       	brne	.+96     	; 0xc7e <sense_of_directon+0xcc>
     c1e:	1c c0       	rjmp	.+56     	; 0xc58 <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     c20:	82 e0       	ldi	r24, 0x02	; 2
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	21 c0       	rjmp	.+66     	; 0xc68 <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     c26:	85 37       	cpi	r24, 0x75	; 117
     c28:	51 f5       	brne	.+84     	; 0xc7e <sense_of_directon+0xcc>
	{
		switch(dir)
     c2a:	80 91 1b 01 	lds	r24, 0x011B
     c2e:	90 91 1c 01 	lds	r25, 0x011C
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	92 07       	cpc	r25, r18
     c38:	91 f0       	breq	.+36     	; 0xc5e <sense_of_directon+0xac>
     c3a:	2f ef       	ldi	r18, 0xFF	; 255
     c3c:	8f 3f       	cpi	r24, 0xFF	; 255
     c3e:	92 07       	cpc	r25, r18
     c40:	09 f0       	breq	.+2      	; 0xc44 <sense_of_directon+0x92>
     c42:	24 f4       	brge	.+8      	; 0xc4c <sense_of_directon+0x9a>
     c44:	8e 5f       	subi	r24, 0xFE	; 254
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	d1 f4       	brne	.+52     	; 0xc7e <sense_of_directon+0xcc>
     c4a:	13 c0       	rjmp	.+38     	; 0xc72 <sense_of_directon+0xc0>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	19 f0       	breq	.+6      	; 0xc58 <sense_of_directon+0xa6>
     c52:	02 97       	sbiw	r24, 0x02	; 2
     c54:	a1 f4       	brne	.+40     	; 0xc7e <sense_of_directon+0xcc>
     c56:	06 c0       	rjmp	.+12     	; 0xc64 <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     c64:	8e ef       	ldi	r24, 0xFE	; 254
     c66:	9f ef       	ldi	r25, 0xFF	; 255
     c68:	90 93 1c 01 	sts	0x011C, r25
     c6c:	80 93 1b 01 	sts	0x011B, r24
     c70:	08 95       	ret
			case -2: dir = +2; break;	
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	90 93 1c 01 	sts	0x011C, r25
     c7a:	80 93 1b 01 	sts	0x011B, r24
     c7e:	08 95       	ret

00000c80 <is_coordinate_null>:
	
}

int is_coordinate_null(int x,int y)
{
	if(dir_array[x][y][0]=='F' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='F')
     c80:	fc 01       	movw	r30, r24
     c82:	a4 e0       	ldi	r26, 0x04	; 4
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	aa 95       	dec	r26
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <is_coordinate_null+0x4>
     c8c:	e6 0f       	add	r30, r22
     c8e:	f7 1f       	adc	r31, r23
     c90:	df 01       	movw	r26, r30
     c92:	aa 0f       	add	r26, r26
     c94:	bb 1f       	adc	r27, r27
     c96:	aa 0f       	add	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	ab 5b       	subi	r26, 0xBB	; 187
     c9c:	bc 4f       	sbci	r27, 0xFC	; 252
     c9e:	8c 91       	ld	r24, X
     ca0:	86 34       	cpi	r24, 0x46	; 70
     ca2:	c9 f4       	brne	.+50     	; 0xcd6 <is_coordinate_null+0x56>
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	8c 91       	ld	r24, X
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	86 34       	cpi	r24, 0x46	; 70
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <is_coordinate_null+0x56>
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	e9 5b       	subi	r30, 0xB9	; 185
     cb8:	fc 4f       	sbci	r31, 0xFC	; 252
     cba:	80 81       	ld	r24, Z
     cbc:	86 34       	cpi	r24, 0x46	; 70
     cbe:	59 f4       	brne	.+22     	; 0xcd6 <is_coordinate_null+0x56>
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	8c 91       	ld	r24, X
     cc6:	86 34       	cpi	r24, 0x46	; 70
     cc8:	09 f0       	breq	.+2      	; 0xccc <is_coordinate_null+0x4c>
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	98 27       	eor	r25, r24
     cd0:	29 2f       	mov	r18, r25
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <is_coordinate_null+0x5a>
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     cda:	c9 01       	movw	r24, r18
     cdc:	08 95       	ret

00000cde <update_array>:
	}
	
}

void update_array(char y,char x,char ny,char nx)
{
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	f8 2e       	mov	r15, r24
     cf0:	e6 2e       	mov	r14, r22
     cf2:	d4 2e       	mov	r13, r20
     cf4:	c2 2e       	mov	r12, r18
	////checking if the path is already traversed before i.e(if all 4 values is zero)
	if(is_coordinate_null(x_coordinate,y_coordinate))
     cf6:	c0 91 1d 01 	lds	r28, 0x011D
     cfa:	d0 91 1e 01 	lds	r29, 0x011E
     cfe:	00 91 1f 01 	lds	r16, 0x011F
     d02:	10 91 20 01 	lds	r17, 0x0120
     d06:	ce 01       	movw	r24, r28
     d08:	b8 01       	movw	r22, r16
     d0a:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     d0e:	89 2b       	or	r24, r25
     d10:	09 f4       	brne	.+2      	; 0xd14 <update_array+0x36>
     d12:	7a c0       	rjmp	.+244    	; 0xe08 <update_array+0x12a>
	{	
		switch(dir)
     d14:	80 91 1b 01 	lds	r24, 0x011B
     d18:	90 91 1c 01 	lds	r25, 0x011C
     d1c:	2f ef       	ldi	r18, 0xFF	; 255
     d1e:	8f 3f       	cpi	r24, 0xFF	; 255
     d20:	92 07       	cpc	r25, r18
     d22:	09 f4       	brne	.+2      	; 0xd26 <update_array+0x48>
     d24:	59 c0       	rjmp	.+178    	; 0xdd8 <update_array+0xfa>
     d26:	2f ef       	ldi	r18, 0xFF	; 255
     d28:	8f 3f       	cpi	r24, 0xFF	; 255
     d2a:	92 07       	cpc	r25, r18
     d2c:	09 f0       	breq	.+2      	; 0xd30 <update_array+0x52>
     d2e:	2c f4       	brge	.+10     	; 0xd3a <update_array+0x5c>
     d30:	8e 5f       	subi	r24, 0xFE	; 254
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	09 f0       	breq	.+2      	; 0xd38 <update_array+0x5a>
     d36:	68 c0       	rjmp	.+208    	; 0xe08 <update_array+0x12a>
     d38:	39 c0       	rjmp	.+114    	; 0xdac <update_array+0xce>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	91 05       	cpc	r25, r1
     d3e:	e1 f0       	breq	.+56     	; 0xd78 <update_array+0x9a>
     d40:	02 97       	sbiw	r24, 0x02	; 2
     d42:	09 f0       	breq	.+2      	; 0xd46 <update_array+0x68>
     d44:	61 c0       	rjmp	.+194    	; 0xe08 <update_array+0x12a>
		{
			case 2:
			dir_array[x_coordinate][y_coordinate][0] = y;
     d46:	fe 01       	movw	r30, r28
     d48:	b4 e0       	ldi	r27, 0x04	; 4
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	ba 95       	dec	r27
     d50:	e1 f7       	brne	.-8      	; 0xd4a <update_array+0x6c>
     d52:	e0 0f       	add	r30, r16
     d54:	f1 1f       	adc	r31, r17
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	df 01       	movw	r26, r30
     d60:	ab 5b       	subi	r26, 0xBB	; 187
     d62:	bc 4f       	sbci	r27, 0xFC	; 252
     d64:	fc 92       	st	X, r15
			dir_array[x_coordinate][y_coordinate][1] = x;
     d66:	11 96       	adiw	r26, 0x01	; 1
     d68:	ec 92       	st	X, r14
     d6a:	11 97       	sbiw	r26, 0x01	; 1
			dir_array[x_coordinate][y_coordinate][2] = ny;
     d6c:	e9 5b       	subi	r30, 0xB9	; 185
     d6e:	fc 4f       	sbci	r31, 0xFC	; 252
     d70:	d0 82       	st	Z, r13
			dir_array[x_coordinate][y_coordinate][3] = nx;
     d72:	13 96       	adiw	r26, 0x03	; 3
     d74:	cc 92       	st	X, r12
     d76:	48 c0       	rjmp	.+144    	; 0xe08 <update_array+0x12a>
			break;
			case 1:
			dir_array[x_coordinate][y_coordinate][1] = y;
     d78:	fe 01       	movw	r30, r28
     d7a:	64 e0       	ldi	r22, 0x04	; 4
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	6a 95       	dec	r22
     d82:	e1 f7       	brne	.-8      	; 0xd7c <update_array+0x9e>
     d84:	e0 0f       	add	r30, r16
     d86:	f1 1f       	adc	r31, r17
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	df 01       	movw	r26, r30
     d92:	ab 5b       	subi	r26, 0xBB	; 187
     d94:	bc 4f       	sbci	r27, 0xFC	; 252
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	fc 92       	st	X, r15
     d9a:	11 97       	sbiw	r26, 0x01	; 1
			dir_array[x_coordinate][y_coordinate][2] = x;
     d9c:	e9 5b       	subi	r30, 0xB9	; 185
     d9e:	fc 4f       	sbci	r31, 0xFC	; 252
     da0:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][3] = ny;
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	dc 92       	st	X, r13
     da6:	13 97       	sbiw	r26, 0x03	; 3
			dir_array[x_coordinate][y_coordinate][0] = nx;
     da8:	cc 92       	st	X, r12
     daa:	2e c0       	rjmp	.+92     	; 0xe08 <update_array+0x12a>
			break;
			case -2:
			dir_array[x_coordinate][y_coordinate][2] = y;
     dac:	fe 01       	movw	r30, r28
     dae:	34 e0       	ldi	r19, 0x04	; 4
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	3a 95       	dec	r19
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <update_array+0xd2>
     db8:	e0 0f       	add	r30, r16
     dba:	f1 1f       	adc	r31, r17
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	df 01       	movw	r26, r30
     dc6:	a9 5b       	subi	r26, 0xB9	; 185
     dc8:	bc 4f       	sbci	r27, 0xFC	; 252
     dca:	fc 92       	st	X, r15
			dir_array[x_coordinate][y_coordinate][3] = x;
     dcc:	eb 5b       	subi	r30, 0xBB	; 187
     dce:	fc 4f       	sbci	r31, 0xFC	; 252
     dd0:	e3 82       	std	Z+3, r14	; 0x03
			dir_array[x_coordinate][y_coordinate][0] = ny;
     dd2:	d0 82       	st	Z, r13
			dir_array[x_coordinate][y_coordinate][1] = nx;
     dd4:	c1 82       	std	Z+1, r12	; 0x01
     dd6:	18 c0       	rjmp	.+48     	; 0xe08 <update_array+0x12a>
			break;
			case -1:
			dir_array[x_coordinate][y_coordinate][3] = y;
     dd8:	fe 01       	movw	r30, r28
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	8a 95       	dec	r24
     de2:	e1 f7       	brne	.-8      	; 0xddc <update_array+0xfe>
     de4:	e0 0f       	add	r30, r16
     de6:	f1 1f       	adc	r31, r17
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	df 01       	movw	r26, r30
     df2:	ab 5b       	subi	r26, 0xBB	; 187
     df4:	bc 4f       	sbci	r27, 0xFC	; 252
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	fc 92       	st	X, r15
     dfa:	13 97       	sbiw	r26, 0x03	; 3
			dir_array[x_coordinate][y_coordinate][0] = x;
     dfc:	ec 92       	st	X, r14
			dir_array[x_coordinate][y_coordinate][1] = ny;
     dfe:	11 96       	adiw	r26, 0x01	; 1
     e00:	dc 92       	st	X, r13
			dir_array[x_coordinate][y_coordinate][2] = nx;
     e02:	e9 5b       	subi	r30, 0xB9	; 185
     e04:	fc 4f       	sbci	r31, 0xFC	; 252
     e06:	c0 82       	st	Z, r12
			break;
		}
	}
	
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	08 95       	ret

00000e1a <update_coordinates>:
}


void update_coordinates(void)
{	
	int value = Coordinates_changed_by;
     e1a:	80 91 35 01 	lds	r24, 0x0135
     e1e:	90 91 36 01 	lds	r25, 0x0136
	
	if(value==2)		//to store the middle point in 60cm shift i.e to make it continous
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	91 05       	cpc	r25, r1
     e26:	09 f0       	breq	.+2      	; 0xe2a <update_coordinates+0x10>
     e28:	a7 c0       	rjmp	.+334    	; 0xf78 <update_coordinates+0x15e>
	{
		switch(dir)
     e2a:	80 91 1b 01 	lds	r24, 0x011B
     e2e:	90 91 1c 01 	lds	r25, 0x011C
     e32:	2f ef       	ldi	r18, 0xFF	; 255
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	92 07       	cpc	r25, r18
     e38:	a1 f1       	breq	.+104    	; 0xea2 <update_coordinates+0x88>
     e3a:	2f ef       	ldi	r18, 0xFF	; 255
     e3c:	8f 3f       	cpi	r24, 0xFF	; 255
     e3e:	92 07       	cpc	r25, r18
     e40:	09 f0       	breq	.+2      	; 0xe44 <update_coordinates+0x2a>
     e42:	2c f4       	brge	.+10     	; 0xe4e <update_coordinates+0x34>
     e44:	8e 5f       	subi	r24, 0xFE	; 254
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	09 f0       	breq	.+2      	; 0xe4c <update_coordinates+0x32>
     e4a:	03 c1       	rjmp	.+518    	; 0x1052 <update_coordinates+0x238>
     e4c:	71 c0       	rjmp	.+226    	; 0xf30 <update_coordinates+0x116>
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	21 f0       	breq	.+8      	; 0xe5c <update_coordinates+0x42>
     e54:	02 97       	sbiw	r24, 0x02	; 2
     e56:	09 f0       	breq	.+2      	; 0xe5a <update_coordinates+0x40>
     e58:	fc c0       	rjmp	.+504    	; 0x1052 <update_coordinates+0x238>
     e5a:	46 c0       	rjmp	.+140    	; 0xee8 <update_coordinates+0xce>
		{
			case +1 :	x_coordinate+=1;						
     e5c:	80 91 1d 01 	lds	r24, 0x011D
     e60:	90 91 1e 01 	lds	r25, 0x011E
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	90 93 1e 01 	sts	0x011E, r25
     e6a:	80 93 1d 01 	sts	0x011D, r24
						update_array('T','F','T','F');
     e6e:	84 e5       	ldi	r24, 0x54	; 84
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	66 e4       	ldi	r22, 0x46	; 70
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	44 e5       	ldi	r20, 0x54	; 84
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	26 e4       	ldi	r18, 0x46	; 70
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
						x_coordinate+=1;
     e82:	80 91 1d 01 	lds	r24, 0x011D
     e86:	90 91 1e 01 	lds	r25, 0x011E
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 1e 01 	sts	0x011E, r25
     e90:	80 93 1d 01 	sts	0x011D, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     e94:	60 91 1f 01 	lds	r22, 0x011F
     e98:	70 91 20 01 	lds	r23, 0x0120
     e9c:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     ea0:	c8 c0       	rjmp	.+400    	; 0x1032 <update_coordinates+0x218>
						{
							repeat = 0;
						}
						break;

			case -1 :	x_coordinate-=1;						
     ea2:	80 91 1d 01 	lds	r24, 0x011D
     ea6:	90 91 1e 01 	lds	r25, 0x011E
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	90 93 1e 01 	sts	0x011E, r25
     eb0:	80 93 1d 01 	sts	0x011D, r24
						update_array('T','F','T','F');
     eb4:	84 e5       	ldi	r24, 0x54	; 84
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	66 e4       	ldi	r22, 0x46	; 70
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	44 e5       	ldi	r20, 0x54	; 84
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	26 e4       	ldi	r18, 0x46	; 70
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
						x_coordinate-=1;
     ec8:	80 91 1d 01 	lds	r24, 0x011D
     ecc:	90 91 1e 01 	lds	r25, 0x011E
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	90 93 1e 01 	sts	0x011E, r25
     ed6:	80 93 1d 01 	sts	0x011D, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     eda:	60 91 1f 01 	lds	r22, 0x011F
     ede:	70 91 20 01 	lds	r23, 0x0120
     ee2:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     ee6:	a5 c0       	rjmp	.+330    	; 0x1032 <update_coordinates+0x218>
						{
							repeat = 0;
						}
						break;
					
			case +2 :	y_coordinate+=1;						
     ee8:	80 91 1f 01 	lds	r24, 0x011F
     eec:	90 91 20 01 	lds	r25, 0x0120
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	90 93 20 01 	sts	0x0120, r25
     ef6:	80 93 1f 01 	sts	0x011F, r24
						update_array('T','F','T','F');
     efa:	84 e5       	ldi	r24, 0x54	; 84
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	66 e4       	ldi	r22, 0x46	; 70
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	44 e5       	ldi	r20, 0x54	; 84
     f04:	50 e0       	ldi	r21, 0x00	; 0
     f06:	26 e4       	ldi	r18, 0x46	; 70
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
						y_coordinate+=1;
     f0e:	60 91 1f 01 	lds	r22, 0x011F
     f12:	70 91 20 01 	lds	r23, 0x0120
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	70 93 20 01 	sts	0x0120, r23
     f1e:	60 93 1f 01 	sts	0x011F, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     f22:	80 91 1d 01 	lds	r24, 0x011D
     f26:	90 91 1e 01 	lds	r25, 0x011E
     f2a:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     f2e:	81 c0       	rjmp	.+258    	; 0x1032 <update_coordinates+0x218>
							repeat = 0;
						}
						
						break;

			case -2 :	y_coordinate-=1;						
     f30:	80 91 1f 01 	lds	r24, 0x011F
     f34:	90 91 20 01 	lds	r25, 0x0120
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	90 93 20 01 	sts	0x0120, r25
     f3e:	80 93 1f 01 	sts	0x011F, r24
						update_array('T','F','T','F');
     f42:	84 e5       	ldi	r24, 0x54	; 84
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	66 e4       	ldi	r22, 0x46	; 70
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	44 e5       	ldi	r20, 0x54	; 84
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	26 e4       	ldi	r18, 0x46	; 70
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
						y_coordinate-=1;
     f56:	60 91 1f 01 	lds	r22, 0x011F
     f5a:	70 91 20 01 	lds	r23, 0x0120
     f5e:	61 50       	subi	r22, 0x01	; 1
     f60:	70 40       	sbci	r23, 0x00	; 0
     f62:	70 93 20 01 	sts	0x0120, r23
     f66:	60 93 1f 01 	sts	0x011F, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     f6a:	80 91 1d 01 	lds	r24, 0x011D
     f6e:	90 91 1e 01 	lds	r25, 0x011E
     f72:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     f76:	5d c0       	rjmp	.+186    	; 0x1032 <update_coordinates+0x218>
							repeat = 0;
						}
						break;	
		}
	}
	else if(value==1)
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <update_coordinates+0x164>
     f7c:	6a c0       	rjmp	.+212    	; 0x1052 <update_coordinates+0x238>
	{
		switch(dir)
     f7e:	80 91 1b 01 	lds	r24, 0x011B
     f82:	90 91 1c 01 	lds	r25, 0x011C
     f86:	2f ef       	ldi	r18, 0xFF	; 255
     f88:	8f 3f       	cpi	r24, 0xFF	; 255
     f8a:	92 07       	cpc	r25, r18
     f8c:	09 f1       	breq	.+66     	; 0xfd0 <update_coordinates+0x1b6>
     f8e:	2f ef       	ldi	r18, 0xFF	; 255
     f90:	8f 3f       	cpi	r24, 0xFF	; 255
     f92:	92 07       	cpc	r25, r18
     f94:	09 f0       	breq	.+2      	; 0xf98 <update_coordinates+0x17e>
     f96:	2c f4       	brge	.+10     	; 0xfa2 <update_coordinates+0x188>
     f98:	8e 5f       	subi	r24, 0xFE	; 254
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <update_coordinates+0x186>
     f9e:	59 c0       	rjmp	.+178    	; 0x1052 <update_coordinates+0x238>
     fa0:	38 c0       	rjmp	.+112    	; 0x1012 <update_coordinates+0x1f8>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <update_coordinates+0x196>
     fa8:	02 97       	sbiw	r24, 0x02	; 2
     faa:	09 f0       	breq	.+2      	; 0xfae <update_coordinates+0x194>
     fac:	52 c0       	rjmp	.+164    	; 0x1052 <update_coordinates+0x238>
     fae:	20 c0       	rjmp	.+64     	; 0xff0 <update_coordinates+0x1d6>
		{
			case +1 : 
			x_coordinate+=value;
     fb0:	80 91 1d 01 	lds	r24, 0x011D
     fb4:	90 91 1e 01 	lds	r25, 0x011E
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	90 93 1e 01 	sts	0x011E, r25
     fbe:	80 93 1d 01 	sts	0x011D, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     fc2:	60 91 1f 01 	lds	r22, 0x011F
     fc6:	70 91 20 01 	lds	r23, 0x0120
     fca:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     fce:	31 c0       	rjmp	.+98     	; 0x1032 <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case -1 : 
			x_coordinate-=value;
     fd0:	80 91 1d 01 	lds	r24, 0x011D
     fd4:	90 91 1e 01 	lds	r25, 0x011E
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	90 93 1e 01 	sts	0x011E, r25
     fde:	80 93 1d 01 	sts	0x011D, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
     fe2:	60 91 1f 01 	lds	r22, 0x011F
     fe6:	70 91 20 01 	lds	r23, 0x0120
     fea:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
     fee:	21 c0       	rjmp	.+66     	; 0x1032 <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case +2 : 
			y_coordinate+=value;
     ff0:	60 91 1f 01 	lds	r22, 0x011F
     ff4:	70 91 20 01 	lds	r23, 0x0120
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	70 93 20 01 	sts	0x0120, r23
    1000:	60 93 1f 01 	sts	0x011F, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1004:	80 91 1d 01 	lds	r24, 0x011D
    1008:	90 91 1e 01 	lds	r25, 0x011E
    100c:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case -2 : 
			y_coordinate-=value; 
    1012:	60 91 1f 01 	lds	r22, 0x011F
    1016:	70 91 20 01 	lds	r23, 0x0120
    101a:	61 50       	subi	r22, 0x01	; 1
    101c:	70 40       	sbci	r23, 0x00	; 0
    101e:	70 93 20 01 	sts	0x0120, r23
    1022:	60 93 1f 01 	sts	0x011F, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1026:	80 91 1d 01 	lds	r24, 0x011D
    102a:	90 91 1e 01 	lds	r25, 0x011E
    102e:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1032:	89 2b       	or	r24, r25
    1034:	51 f4       	brne	.+20     	; 0x104a <update_coordinates+0x230>
			{
				repeat++;
    1036:	80 91 3d 01 	lds	r24, 0x013D
    103a:	90 91 3e 01 	lds	r25, 0x013E
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	90 93 3e 01 	sts	0x013E, r25
    1044:	80 93 3d 01 	sts	0x013D, r24
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <update_coordinates+0x238>
			}
			else
			{
				repeat = 0;
    104a:	10 92 3e 01 	sts	0x013E, r1
    104e:	10 92 3d 01 	sts	0x013D, r1
			}
			break;
		}
	}
	lcd_clear();
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(4,0,x_coordinate,2);
    105a:	40 91 1d 01 	lds	r20, 0x011D
    105e:	50 91 1e 01 	lds	r21, 0x011E
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	22 e0       	ldi	r18, 0x02	; 2
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(8,0,y_coordinate,2);
    1072:	40 91 1f 01 	lds	r20, 0x011F
    1076:	50 91 20 01 	lds	r21, 0x0120
    107a:	88 e0       	ldi	r24, 0x08	; 8
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	22 e0       	ldi	r18, 0x02	; 2
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	Coordinates_changed_by = 0;
    108a:	10 92 36 01 	sts	0x0136, r1
    108e:	10 92 35 01 	sts	0x0135, r1
}
    1092:	08 95       	ret

00001094 <left_junc_check>:
		set_pwm1b(opt);
	}
		delay_microsec(10);
}
void left_junc_check()                                 
{
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29

	if(bit_is_clear(PINA,5))
    1098:	cd 99       	sbic	0x19, 5	; 25
    109a:	2a c0       	rjmp	.+84     	; 0x10f0 <left_junc_check+0x5c>
	{
		flag1 = 1;
    109c:	c1 e0       	ldi	r28, 0x01	; 1
    109e:	d0 e0       	ldi	r29, 0x00	; 0
    10a0:	d0 93 30 01 	sts	0x0130, r29
    10a4:	c0 93 2f 01 	sts	0x012F, r28
		//bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		if(irc>2000)
    10a8:	80 91 31 01 	lds	r24, 0x0131
    10ac:	90 91 32 01 	lds	r25, 0x0132
    10b0:	81 5d       	subi	r24, 0xD1	; 209
    10b2:	97 40       	sbci	r25, 0x07	; 7
    10b4:	5c f0       	brlt	.+22     	; 0x10cc <left_junc_check+0x38>
		{	
			lcd_clear();
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("sixty");
			Coordinates_changed_by = 2;
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	90 93 36 01 	sts	0x0136, r25
    10c6:	80 93 35 01 	sts	0x0135, r24
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <left_junc_check+0x48>
		}
		else
		{
			lcd_clear();
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
    10d4:	d0 93 36 01 	sts	0x0136, r29
    10d8:	c0 93 35 01 	sts	0x0135, r28
		}
		if(irc==0)
    10dc:	80 91 31 01 	lds	r24, 0x0131
    10e0:	90 91 32 01 	lds	r25, 0x0132
    10e4:	89 2b       	or	r24, r25
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <left_junc_check+0x5c>
		{
			Coordinates_changed_by = 0;
    10e8:	10 92 36 01 	sts	0x0136, r1
    10ec:	10 92 35 01 	sts	0x0135, r1
		}				
	}
	if((bit_is_clear(PINA,6) || bit_is_clear(PIND,6)) && (bit_is_clear(PINA,4) || special_flag == 1))
    10f0:	ce 9b       	sbis	0x19, 6	; 25
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <left_junc_check+0x64>
    10f4:	86 99       	sbic	0x10, 6	; 16
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <left_junc_check+0x96>
    10f8:	cc 9b       	sbis	0x19, 4	; 25
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <left_junc_check+0x74>
    10fc:	80 91 3b 01 	lds	r24, 0x013B
    1100:	90 91 3c 01 	lds	r25, 0x013C
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	89 f4       	brne	.+34     	; 0x112a <left_junc_check+0x96>
	{
		//bot_brake();
		update_coordinates();
    1108:	0e 94 0d 07 	call	0xe1a	; 0xe1a <update_coordinates>
		//delay_sec(2);
		//lcd_clear();
		update_array('T','F','T','T');			
    110c:	84 e5       	ldi	r24, 0x54	; 84
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	66 e4       	ldi	r22, 0x46	; 70
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	44 e5       	ldi	r20, 0x54	; 84
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	24 e5       	ldi	r18, 0x54	; 84
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
		// lcd_write_string("-| detected");
		//delay_millisec(500);
		irc = 0;
    1120:	10 92 32 01 	sts	0x0132, r1
    1124:	10 92 31 01 	sts	0x0131, r1
    1128:	32 c0       	rjmp	.+100    	; 0x118e <left_junc_check+0xfa>
		special_flag = 0;       ///one time use
	}
	
	else if((bit_is_clear(PINA,4) || special_flag==1) && bit_is_set(PINA,6) && bit_is_set(PIND,6))
    112a:	cc 9b       	sbis	0x19, 4	; 25
    112c:	06 c0       	rjmp	.+12     	; 0x113a <left_junc_check+0xa6>
    112e:	80 91 3b 01 	lds	r24, 0x013B
    1132:	90 91 3c 01 	lds	r25, 0x013C
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	71 f5       	brne	.+92     	; 0x1196 <left_junc_check+0x102>
    113a:	ce 9b       	sbis	0x19, 6	; 25
    113c:	2c c0       	rjmp	.+88     	; 0x1196 <left_junc_check+0x102>
    113e:	86 9b       	sbis	0x10, 6	; 16
    1140:	2a c0       	rjmp	.+84     	; 0x1196 <left_junc_check+0x102>
	{
		// lcd_clear();
		// bot_brake();
		// lcd_write_string("L detected");
		update_coordinates();
    1142:	0e 94 0d 07 	call	0xe1a	; 0xe1a <update_coordinates>
		//delay_sec(2);
		irc = 0;
    1146:	10 92 32 01 	sts	0x0132, r1
    114a:	10 92 31 01 	sts	0x0131, r1
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    114e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1150:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1152:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1154:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		if(repeat<=2)
    1156:	80 91 3d 01 	lds	r24, 0x013D
    115a:	90 91 3e 01 	lds	r25, 0x013E
    115e:	03 97       	sbiw	r24, 0x03	; 3
    1160:	d4 f4       	brge	.+52     	; 0x1196 <left_junc_check+0x102>
		{
			turn_left();						
    1162:	0e 94 65 05 	call	0xaca	; 0xaca <turn_left>

			update_array('F','F','T','T');
    1166:	86 e4       	ldi	r24, 0x46	; 70
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	66 e4       	ldi	r22, 0x46	; 70
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	44 e5       	ldi	r20, 0x54	; 84
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	24 e5       	ldi	r18, 0x54	; 84
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    117a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    117c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    117e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1180:	af 9a       	sbi	0x15, 7	; 21
			bot_brake();
			sense_of_directon();
    1182:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <sense_of_directon>
			// lcd_clear();
			// lcd_write_int_xy(0,0,dir,3);
			// delay_millisec(2000);
			flag1 = 0;
    1186:	10 92 30 01 	sts	0x0130, r1
    118a:	10 92 2f 01 	sts	0x012F, r1
			special_flag = 0;
    118e:	10 92 3c 01 	sts	0x013C, r1
    1192:	10 92 3b 01 	sts	0x013B, r1
		}
	}

	//special_case_check();       ///////////
	
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <frSensorCheck>:
	
}

void frSensorCheck()
{
	if(bit_is_set(PINA,6) && bit_is_set(PIND,6))
    119c:	ce 9b       	sbis	0x19, 6	; 25
    119e:	1a c0       	rjmp	.+52     	; 0x11d4 <frSensorCheck+0x38>
    11a0:	86 9b       	sbis	0x10, 6	; 16
    11a2:	18 c0       	rjmp	.+48     	; 0x11d4 <frSensorCheck+0x38>
		////just confirming if its really a dead end or the bot has simply just wobbled
		
			
		//lcd_clear();
		// lcd_write_string("Uturn Detected");
		if(irc>2000)
    11a4:	80 91 31 01 	lds	r24, 0x0131
    11a8:	90 91 32 01 	lds	r25, 0x0132
    11ac:	20 91 35 01 	lds	r18, 0x0135
    11b0:	30 91 36 01 	lds	r19, 0x0136
    11b4:	81 5d       	subi	r24, 0xD1	; 209
    11b6:	97 40       	sbci	r25, 0x07	; 7
    11b8:	2c f0       	brlt	.+10     	; 0x11c4 <frSensorCheck+0x28>
		{
			// lcd_write_string("Sixty");
			if(Coordinates_changed_by ==0)
    11ba:	23 2b       	or	r18, r19
    11bc:	59 f4       	brne	.+22     	; 0x11d4 <frSensorCheck+0x38>
			{
				Coordinates_changed_by = 2;
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <frSensorCheck+0x30>
			}
		}
		else
		{
			// lcd_write_string("Thirty");
			if(Coordinates_changed_by ==0)
    11c4:	23 2b       	or	r18, r19
    11c6:	31 f4       	brne	.+12     	; 0x11d4 <frSensorCheck+0x38>
			{
				Coordinates_changed_by = 1;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	90 93 36 01 	sts	0x0136, r25
    11d0:	80 93 35 01 	sts	0x0135, r24
		
			
		
	}
	
	if(sensorbyte==0b0000 && bit_is_set(PINA,4) && bit_is_set(PINA,5) && bit_is_set(PINA,6) && bit_is_set(PINA,7) && bit_is_set(PIND, 6) && bit_is_set(PIND, 7))
    11d4:	80 91 22 01 	lds	r24, 0x0122
    11d8:	88 23       	and	r24, r24
    11da:	41 f5       	brne	.+80     	; 0x122c <frSensorCheck+0x90>
    11dc:	cc 9b       	sbis	0x19, 4	; 25
    11de:	26 c0       	rjmp	.+76     	; 0x122c <frSensorCheck+0x90>
    11e0:	cd 9b       	sbis	0x19, 5	; 25
    11e2:	24 c0       	rjmp	.+72     	; 0x122c <frSensorCheck+0x90>
    11e4:	ce 9b       	sbis	0x19, 6	; 25
    11e6:	22 c0       	rjmp	.+68     	; 0x122c <frSensorCheck+0x90>
    11e8:	cf 9b       	sbis	0x19, 7	; 25
    11ea:	20 c0       	rjmp	.+64     	; 0x122c <frSensorCheck+0x90>
    11ec:	86 9b       	sbis	0x10, 6	; 16
    11ee:	1e c0       	rjmp	.+60     	; 0x122c <frSensorCheck+0x90>
    11f0:	87 9b       	sbis	0x10, 7	; 16
    11f2:	1c c0       	rjmp	.+56     	; 0x122c <frSensorCheck+0x90>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    11f4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    11f6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    11f8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    11fa:	af 9a       	sbi	0x15, 7	; 21
	{
		//lcd_clear();
		//lcd_write_string("Uturn");
		bot_brake();
		update_coordinates();
    11fc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <update_coordinates>
		update_array('F','F','T','F');
    1200:	86 e4       	ldi	r24, 0x46	; 70
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	66 e4       	ldi	r22, 0x46	; 70
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	44 e5       	ldi	r20, 0x54	; 84
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	26 e4       	ldi	r18, 0x46	; 70
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
		//delay_sec(2);

		Uturn();
    1214:	0e 94 67 04 	call	0x8ce	; 0x8ce <Uturn>
		//bot_brake();
		sense_of_directon();
    1218:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_sec(2);
		flag1 = 0;
    121c:	10 92 30 01 	sts	0x0130, r1
    1220:	10 92 2f 01 	sts	0x012F, r1
		irc = 0;
    1224:	10 92 32 01 	sts	0x0132, r1
    1228:	10 92 31 01 	sts	0x0131, r1
    122c:	08 95       	ret

0000122e <fill_missed_array>:
		return 0;
	}
}

void fill_missed_array()
{
    122e:	6f 92       	push	r6
    1230:	7f 92       	push	r7
    1232:	8f 92       	push	r8
    1234:	9f 92       	push	r9
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	e8 2e       	mov	r14, r24
    124c:	f1 2c       	mov	r15, r1
					{
						dir_array[i][j][2] = 'T';
					}
					else
					{
						dir_array[i][j][2] = 'F';
    124e:	06 e4       	ldi	r16, 0x46	; 70
    1250:	b0 2e       	mov	r11, r16
    1252:	65 c0       	rjmp	.+202    	; 0x131e <fill_missed_array+0xf0>
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
	{
		for(int j = 1 ; j<15 ; j++)
		{
			if(is_coordinate_null(i,j))
    1254:	c7 01       	movw	r24, r14
    1256:	b8 01       	movw	r22, r16
    1258:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    125c:	89 2b       	or	r24, r25
    125e:	09 f4       	brne	.+2      	; 0x1262 <fill_missed_array+0x34>
    1260:	4c c0       	rjmp	.+152    	; 0x12fa <fill_missed_array+0xcc>
			{
				hx = i+1;
				hy = j+1;
				lx = i-1;
				ly = j-1;
				lcd_clear();
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    126a:	c3 01       	movw	r24, r6
    126c:	b8 01       	movw	r22, r16
    126e:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1272:	89 2b       	or	r24, r25
    1274:	09 f0       	breq	.+2      	; 0x1278 <fill_missed_array+0x4a>
    1276:	41 c0       	rjmp	.+130    	; 0x12fa <fill_missed_array+0xcc>
    1278:	c4 01       	movw	r24, r8
    127a:	b8 01       	movw	r22, r16
    127c:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1280:	89 2b       	or	r24, r25
    1282:	d9 f5       	brne	.+118    	; 0x12fa <fill_missed_array+0xcc>
    1284:	b8 01       	movw	r22, r16
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	70 40       	sbci	r23, 0x00	; 0
    128a:	c7 01       	movw	r24, r14
    128c:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1290:	89 2b       	or	r24, r25
    1292:	99 f5       	brne	.+102    	; 0x12fa <fill_missed_array+0xcc>
    1294:	b8 01       	movw	r22, r16
    1296:	6f 5f       	subi	r22, 0xFF	; 255
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	c7 01       	movw	r24, r14
    129c:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    12a0:	89 2b       	or	r24, r25
    12a2:	59 f5       	brne	.+86     	; 0x12fa <fill_missed_array+0xcc>
				{
					lcd_clear();
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Filliable");
    12ac:	80 e6       	ldi	r24, 0x60	; 96
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_millisec(2000);
    12b4:	80 ed       	ldi	r24, 0xD0	; 208
    12b6:	97 e0       	ldi	r25, 0x07	; 7
    12b8:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
					if(dir_array[hx][j][3]=='T')
    12bc:	cd 5b       	subi	r28, 0xBD	; 189
    12be:	df 4f       	sbci	r29, 0xFF	; 255
    12c0:	88 81       	ld	r24, Y
    12c2:	c3 54       	subi	r28, 0x43	; 67
    12c4:	d0 40       	sbci	r29, 0x00	; 0
    12c6:	84 35       	cpi	r24, 0x54	; 84
    12c8:	11 f4       	brne	.+4      	; 0x12ce <fill_missed_array+0xa0>
					{
						dir_array[i][j][1] = 'T';
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <fill_missed_array+0xa2>
					}
					else
					{
						dir_array[i][j][1] = 'F';
    12ce:	b9 82       	std	Y+1, r11	; 0x01
					}
					if(dir_array[lx][j][1]=='T')
    12d0:	ef 97       	sbiw	r28, 0x3f	; 63
    12d2:	88 81       	ld	r24, Y
    12d4:	ef 96       	adiw	r28, 0x3f	; 63
    12d6:	84 35       	cpi	r24, 0x54	; 84
    12d8:	11 f4       	brne	.+4      	; 0x12de <fill_missed_array+0xb0>
					{
						dir_array[i][j][3] = 'T';
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <fill_missed_array+0xb2>
					}
					else
					{
						dir_array[i][j][3] = 'F';
    12de:	bb 82       	std	Y+3, r11	; 0x03
					}
					if(dir_array[i][hy][2]=='T')
    12e0:	8e 81       	ldd	r24, Y+6	; 0x06
    12e2:	84 35       	cpi	r24, 0x54	; 84
    12e4:	11 f4       	brne	.+4      	; 0x12ea <fill_missed_array+0xbc>
					{
						dir_array[i][j][0] = 'T';
    12e6:	88 83       	st	Y, r24
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <fill_missed_array+0xbe>
					}
					else
					{
						dir_array[i][j][0] ='F';
    12ea:	b8 82       	st	Y, r11
					}
					if(dir_array[i][j][ly]=='T')
    12ec:	f6 01       	movw	r30, r12
    12ee:	80 81       	ld	r24, Z
    12f0:	84 35       	cpi	r24, 0x54	; 84
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <fill_missed_array+0xca>
					{
						dir_array[i][j][2] = 'T';
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <fill_missed_array+0xcc>
					}
					else
					{
						dir_array[i][j][2] = 'F';
    12f8:	ba 82       	std	Y+2, r11	; 0x02
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
	{
		for(int j = 1 ; j<15 ; j++)
    12fa:	0f 5f       	subi	r16, 0xFF	; 255
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	85 e0       	ldi	r24, 0x05	; 5
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	c8 0e       	add	r12, r24
    1304:	d9 1e       	adc	r13, r25
    1306:	24 96       	adiw	r28, 0x04	; 4
    1308:	0f 30       	cpi	r16, 0x0F	; 15
    130a:	11 05       	cpc	r17, r1
    130c:	09 f0       	breq	.+2      	; 0x1310 <fill_missed_array+0xe2>
    130e:	a2 cf       	rjmp	.-188    	; 0x1254 <fill_missed_array+0x26>
}

void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<15 ; i++)
    1310:	08 94       	sec
    1312:	e1 1c       	adc	r14, r1
    1314:	f1 1c       	adc	r15, r1
    1316:	9f e0       	ldi	r25, 0x0F	; 15
    1318:	e9 16       	cp	r14, r25
    131a:	f1 04       	cpc	r15, r1
    131c:	b1 f0       	breq	.+44     	; 0x134a <fill_missed_array+0x11c>
    131e:	67 01       	movw	r12, r14
    1320:	16 e0       	ldi	r17, 0x06	; 6
    1322:	cc 0c       	add	r12, r12
    1324:	dd 1c       	adc	r13, r13
    1326:	1a 95       	dec	r17
    1328:	e1 f7       	brne	.-8      	; 0x1322 <fill_missed_array+0xf4>
    132a:	e9 e4       	ldi	r30, 0x49	; 73
    132c:	f3 e0       	ldi	r31, 0x03	; 3
    132e:	ce 0e       	add	r12, r30
    1330:	df 1e       	adc	r13, r31
    1332:	e6 01       	movw	r28, r12
    1334:	01 e0       	ldi	r16, 0x01	; 1
    1336:	10 e0       	ldi	r17, 0x00	; 0
				lcd_clear();
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    1338:	37 01       	movw	r6, r14
    133a:	08 94       	sec
    133c:	61 1c       	adc	r6, r1
    133e:	71 1c       	adc	r7, r1
    1340:	47 01       	movw	r8, r14
    1342:	08 94       	sec
    1344:	81 08       	sbc	r8, r1
    1346:	91 08       	sbc	r9, r1
    1348:	85 cf       	rjmp	.-246    	; 0x1254 <fill_missed_array+0x26>
					}
				}
			}
		}
	}
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	7f 90       	pop	r7
    1362:	6f 90       	pop	r6
    1364:	08 95       	ret

00001366 <coordinates_tobe_reached>:

void coordinates_tobe_reached()
{
    1366:	2f 92       	push	r2
    1368:	3f 92       	push	r3
    136a:	4f 92       	push	r4
    136c:	5f 92       	push	r5
    136e:	6f 92       	push	r6
    1370:	7f 92       	push	r7
    1372:	8f 92       	push	r8
    1374:	9f 92       	push	r9
    1376:	af 92       	push	r10
    1378:	bf 92       	push	r11
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	68 97       	sbiw	r28, 0x18	; 24
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
	int stop=0, t1, t2;
	mx = 0;
    139a:	10 92 38 01 	sts	0x0138, r1
    139e:	10 92 37 01 	sts	0x0137, r1
	my = 0;
    13a2:	10 92 3a 01 	sts	0x013A, r1
    13a6:	10 92 39 01 	sts	0x0139, r1
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    13aa:	80 90 1d 01 	lds	r8, 0x011D
    13ae:	90 90 1e 01 	lds	r9, 0x011E
    13b2:	a0 90 1f 01 	lds	r10, 0x011F
    13b6:	b0 90 20 01 	lds	r11, 0x0120
    13ba:	cc 24       	eor	r12, r12
    13bc:	dd 24       	eor	r13, r13
    13be:	c8 18       	sub	r12, r8
    13c0:	d9 08       	sbc	r13, r9
    13c2:	de 82       	std	Y+6, r13	; 0x06
    13c4:	cd 82       	std	Y+5, r12	; 0x05
    13c6:	dc 82       	std	Y+4, r13	; 0x04
    13c8:	cb 82       	std	Y+3, r12	; 0x03
    13ca:	da 82       	std	Y+2, r13	; 0x02
    13cc:	c9 82       	std	Y+1, r12	; 0x01
    13ce:	00 e0       	ldi	r16, 0x00	; 0
    13d0:	10 e0       	ldi	r17, 0x00	; 0
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    13d2:	22 27       	eor	r18, r18
    13d4:	33 27       	eor	r19, r19
    13d6:	2a 19       	sub	r18, r10
    13d8:	3b 09       	sbc	r19, r11
    13da:	3e 8b       	std	Y+22, r19	; 0x16
    13dc:	2d 8b       	std	Y+21, r18	; 0x15
    13de:	90 c1       	rjmp	.+800    	; 0x1700 <coordinates_tobe_reached+0x39a>
	my = 0;
	for(int i = 0 ; i<16 ; i++)
	{
		for(int j = 0 ; j<16 ; j++)
		{
			if(!(is_coordinate_null(i,j)))
    13e0:	c8 01       	movw	r24, r16
    13e2:	6f 89       	ldd	r22, Y+23	; 0x17
    13e4:	78 8d       	ldd	r23, Y+24	; 0x18
    13e6:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    13ea:	89 2b       	or	r24, r25
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <coordinates_tobe_reached+0x8a>
    13ee:	55 c1       	rjmp	.+682    	; 0x169a <coordinates_tobe_reached+0x334>
			{
				if(dir_array[i][j][0]=='T')
    13f0:	f7 01       	movw	r30, r14
    13f2:	80 81       	ld	r24, Z
    13f4:	84 35       	cpi	r24, 0x54	; 84
    13f6:	09 f0       	breq	.+2      	; 0x13fa <coordinates_tobe_reached+0x94>
    13f8:	4a c0       	rjmp	.+148    	; 0x148e <coordinates_tobe_reached+0x128>
				{
					if(is_coordinate_null(i,j+1))
    13fa:	6f 89       	ldd	r22, Y+23	; 0x17
    13fc:	78 8d       	ldd	r23, Y+24	; 0x18
    13fe:	6f 5f       	subi	r22, 0xFF	; 255
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	c8 01       	movw	r24, r16
    1404:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1408:	89 2b       	or	r24, r25
    140a:	09 f4       	brne	.+2      	; 0x140e <coordinates_tobe_reached+0xa8>
    140c:	40 c0       	rjmp	.+128    	; 0x148e <coordinates_tobe_reached+0x128>
					{
						if(mx==0 && my==0)
    140e:	60 91 37 01 	lds	r22, 0x0137
    1412:	70 91 38 01 	lds	r23, 0x0138
    1416:	61 15       	cp	r22, r1
    1418:	71 05       	cpc	r23, r1
    141a:	31 f4       	brne	.+12     	; 0x1428 <coordinates_tobe_reached+0xc2>
    141c:	80 91 39 01 	lds	r24, 0x0139
    1420:	90 91 3a 01 	lds	r25, 0x013A
    1424:	89 2b       	or	r24, r25
    1426:	49 f1       	breq	.+82     	; 0x147a <coordinates_tobe_reached+0x114>
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    1428:	68 19       	sub	r22, r8
    142a:	79 09       	sbc	r23, r9
    142c:	80 91 39 01 	lds	r24, 0x0139
    1430:	90 91 3a 01 	lds	r25, 0x013A
    1434:	8a 19       	sub	r24, r10
    1436:	9b 09       	sbc	r25, r11
							if(t1<t2)
    1438:	ed 85       	ldd	r30, Y+13	; 0x0d
    143a:	fe 85       	ldd	r31, Y+14	; 0x0e
    143c:	ee 9f       	mul	r30, r30
    143e:	a0 01       	movw	r20, r0
    1440:	ef 9f       	mul	r30, r31
    1442:	50 0d       	add	r21, r0
    1444:	fe 9f       	mul	r31, r30
    1446:	50 0d       	add	r21, r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 85       	ldd	r18, Y+15	; 0x0f
    144c:	38 89       	ldd	r19, Y+16	; 0x10
    144e:	42 0f       	add	r20, r18
    1450:	53 1f       	adc	r21, r19
    1452:	fc 01       	movw	r30, r24
    1454:	ee 9f       	mul	r30, r30
    1456:	c0 01       	movw	r24, r0
    1458:	ef 9f       	mul	r30, r31
    145a:	90 0d       	add	r25, r0
    145c:	fe 9f       	mul	r31, r30
    145e:	90 0d       	add	r25, r0
    1460:	11 24       	eor	r1, r1
    1462:	66 9f       	mul	r22, r22
    1464:	90 01       	movw	r18, r0
    1466:	67 9f       	mul	r22, r23
    1468:	30 0d       	add	r19, r0
    146a:	76 9f       	mul	r23, r22
    146c:	30 0d       	add	r19, r0
    146e:	11 24       	eor	r1, r1
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	48 17       	cp	r20, r24
    1476:	59 07       	cpc	r21, r25
    1478:	54 f4       	brge	.+20     	; 0x148e <coordinates_tobe_reached+0x128>
							{
								mx = i;
    147a:	10 93 38 01 	sts	0x0138, r17
    147e:	00 93 37 01 	sts	0x0137, r16
								my = j;
    1482:	2f 89       	ldd	r18, Y+23	; 0x17
    1484:	38 8d       	ldd	r19, Y+24	; 0x18
    1486:	30 93 3a 01 	sts	0x013A, r19
    148a:	20 93 39 01 	sts	0x0139, r18
							}
						}
					}
				}
				if(dir_array[i][j][1]=='T')
    148e:	f7 01       	movw	r30, r14
    1490:	81 81       	ldd	r24, Z+1	; 0x01
    1492:	84 35       	cpi	r24, 0x54	; 84
    1494:	09 f0       	breq	.+2      	; 0x1498 <coordinates_tobe_reached+0x132>
    1496:	52 c0       	rjmp	.+164    	; 0x153c <coordinates_tobe_reached+0x1d6>
				{
					if(is_coordinate_null(i+1,j))
    1498:	8b 89       	ldd	r24, Y+19	; 0x13
    149a:	9c 89       	ldd	r25, Y+20	; 0x14
    149c:	6f 89       	ldd	r22, Y+23	; 0x17
    149e:	78 8d       	ldd	r23, Y+24	; 0x18
    14a0:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    14a4:	89 2b       	or	r24, r25
    14a6:	09 f4       	brne	.+2      	; 0x14aa <coordinates_tobe_reached+0x144>
    14a8:	49 c0       	rjmp	.+146    	; 0x153c <coordinates_tobe_reached+0x1d6>
					{
						if(mx==0 && my==0)
    14aa:	60 91 37 01 	lds	r22, 0x0137
    14ae:	70 91 38 01 	lds	r23, 0x0138
    14b2:	61 15       	cp	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	89 f4       	brne	.+34     	; 0x14da <coordinates_tobe_reached+0x174>
    14b8:	80 91 39 01 	lds	r24, 0x0139
    14bc:	90 91 3a 01 	lds	r25, 0x013A
    14c0:	89 2b       	or	r24, r25
    14c2:	59 f4       	brne	.+22     	; 0x14da <coordinates_tobe_reached+0x174>
						{
							mx = i;
    14c4:	10 93 38 01 	sts	0x0138, r17
    14c8:	00 93 37 01 	sts	0x0137, r16
							my = j;
    14cc:	2f 89       	ldd	r18, Y+23	; 0x17
    14ce:	38 8d       	ldd	r19, Y+24	; 0x18
    14d0:	30 93 3a 01 	sts	0x013A, r19
    14d4:	20 93 39 01 	sts	0x0139, r18
    14d8:	31 c0       	rjmp	.+98     	; 0x153c <coordinates_tobe_reached+0x1d6>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    14da:	68 19       	sub	r22, r8
    14dc:	79 09       	sbc	r23, r9
    14de:	80 91 39 01 	lds	r24, 0x0139
    14e2:	90 91 3a 01 	lds	r25, 0x013A
    14e6:	8a 19       	sub	r24, r10
    14e8:	9b 09       	sbc	r25, r11
							
							if(t1<t2)
    14ea:	66 9c       	mul	r6, r6
    14ec:	a0 01       	movw	r20, r0
    14ee:	67 9c       	mul	r6, r7
    14f0:	50 0d       	add	r21, r0
    14f2:	76 9c       	mul	r7, r6
    14f4:	50 0d       	add	r21, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	eb 85       	ldd	r30, Y+11	; 0x0b
    14fa:	fc 85       	ldd	r31, Y+12	; 0x0c
    14fc:	4e 0f       	add	r20, r30
    14fe:	5f 1f       	adc	r21, r31
    1500:	9c 01       	movw	r18, r24
    1502:	22 9f       	mul	r18, r18
    1504:	c0 01       	movw	r24, r0
    1506:	23 9f       	mul	r18, r19
    1508:	90 0d       	add	r25, r0
    150a:	32 9f       	mul	r19, r18
    150c:	90 0d       	add	r25, r0
    150e:	11 24       	eor	r1, r1
    1510:	66 9f       	mul	r22, r22
    1512:	90 01       	movw	r18, r0
    1514:	67 9f       	mul	r22, r23
    1516:	30 0d       	add	r19, r0
    1518:	76 9f       	mul	r23, r22
    151a:	30 0d       	add	r19, r0
    151c:	11 24       	eor	r1, r1
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	48 17       	cp	r20, r24
    1524:	59 07       	cpc	r21, r25
    1526:	54 f4       	brge	.+20     	; 0x153c <coordinates_tobe_reached+0x1d6>
							{
								mx = i;
    1528:	10 93 38 01 	sts	0x0138, r17
    152c:	00 93 37 01 	sts	0x0137, r16
								my = j;
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	90 93 3a 01 	sts	0x013A, r25
    1538:	80 93 39 01 	sts	0x0139, r24
							}
						}
					}
				}
				if(dir_array[i][j][2]=='T')
    153c:	f7 01       	movw	r30, r14
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	84 35       	cpi	r24, 0x54	; 84
    1542:	09 f0       	breq	.+2      	; 0x1546 <coordinates_tobe_reached+0x1e0>
    1544:	53 c0       	rjmp	.+166    	; 0x15ec <coordinates_tobe_reached+0x286>
				{
					if(is_coordinate_null(i,j-1))
    1546:	6f 89       	ldd	r22, Y+23	; 0x17
    1548:	78 8d       	ldd	r23, Y+24	; 0x18
    154a:	61 50       	subi	r22, 0x01	; 1
    154c:	70 40       	sbci	r23, 0x00	; 0
    154e:	c8 01       	movw	r24, r16
    1550:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1554:	89 2b       	or	r24, r25
    1556:	09 f4       	brne	.+2      	; 0x155a <coordinates_tobe_reached+0x1f4>
    1558:	49 c0       	rjmp	.+146    	; 0x15ec <coordinates_tobe_reached+0x286>
					{
						if(mx==0 && my==0)
    155a:	60 91 37 01 	lds	r22, 0x0137
    155e:	70 91 38 01 	lds	r23, 0x0138
    1562:	61 15       	cp	r22, r1
    1564:	71 05       	cpc	r23, r1
    1566:	89 f4       	brne	.+34     	; 0x158a <coordinates_tobe_reached+0x224>
    1568:	80 91 39 01 	lds	r24, 0x0139
    156c:	90 91 3a 01 	lds	r25, 0x013A
    1570:	89 2b       	or	r24, r25
    1572:	59 f4       	brne	.+22     	; 0x158a <coordinates_tobe_reached+0x224>
						{
							mx = i;
    1574:	10 93 38 01 	sts	0x0138, r17
    1578:	00 93 37 01 	sts	0x0137, r16
							my = j;
    157c:	2f 89       	ldd	r18, Y+23	; 0x17
    157e:	38 8d       	ldd	r19, Y+24	; 0x18
    1580:	30 93 3a 01 	sts	0x013A, r19
    1584:	20 93 39 01 	sts	0x0139, r18
    1588:	31 c0       	rjmp	.+98     	; 0x15ec <coordinates_tobe_reached+0x286>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    158a:	68 19       	sub	r22, r8
    158c:	79 09       	sbc	r23, r9
    158e:	80 91 39 01 	lds	r24, 0x0139
    1592:	90 91 3a 01 	lds	r25, 0x013A
    1596:	8a 19       	sub	r24, r10
    1598:	9b 09       	sbc	r25, r11
							if(t1<t2)
    159a:	44 9c       	mul	r4, r4
    159c:	a0 01       	movw	r20, r0
    159e:	45 9c       	mul	r4, r5
    15a0:	50 0d       	add	r21, r0
    15a2:	54 9c       	mul	r5, r4
    15a4:	50 0d       	add	r21, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	e9 85       	ldd	r30, Y+9	; 0x09
    15aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    15ac:	4e 0f       	add	r20, r30
    15ae:	5f 1f       	adc	r21, r31
    15b0:	9c 01       	movw	r18, r24
    15b2:	22 9f       	mul	r18, r18
    15b4:	c0 01       	movw	r24, r0
    15b6:	23 9f       	mul	r18, r19
    15b8:	90 0d       	add	r25, r0
    15ba:	32 9f       	mul	r19, r18
    15bc:	90 0d       	add	r25, r0
    15be:	11 24       	eor	r1, r1
    15c0:	66 9f       	mul	r22, r22
    15c2:	90 01       	movw	r18, r0
    15c4:	67 9f       	mul	r22, r23
    15c6:	30 0d       	add	r19, r0
    15c8:	76 9f       	mul	r23, r22
    15ca:	30 0d       	add	r19, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	82 0f       	add	r24, r18
    15d0:	93 1f       	adc	r25, r19
    15d2:	48 17       	cp	r20, r24
    15d4:	59 07       	cpc	r21, r25
    15d6:	54 f4       	brge	.+20     	; 0x15ec <coordinates_tobe_reached+0x286>
							{
								mx = i;
    15d8:	10 93 38 01 	sts	0x0138, r17
    15dc:	00 93 37 01 	sts	0x0137, r16
								my = j;
    15e0:	8f 89       	ldd	r24, Y+23	; 0x17
    15e2:	98 8d       	ldd	r25, Y+24	; 0x18
    15e4:	90 93 3a 01 	sts	0x013A, r25
    15e8:	80 93 39 01 	sts	0x0139, r24
							}
						}
					}
				}
				if(dir_array[i][j][3]=='T')
    15ec:	f7 01       	movw	r30, r14
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	84 35       	cpi	r24, 0x54	; 84
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <coordinates_tobe_reached+0x290>
    15f4:	52 c0       	rjmp	.+164    	; 0x169a <coordinates_tobe_reached+0x334>
				{
					if(is_coordinate_null(i-1,j))
    15f6:	89 89       	ldd	r24, Y+17	; 0x11
    15f8:	9a 89       	ldd	r25, Y+18	; 0x12
    15fa:	6f 89       	ldd	r22, Y+23	; 0x17
    15fc:	78 8d       	ldd	r23, Y+24	; 0x18
    15fe:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    1602:	89 2b       	or	r24, r25
    1604:	09 f4       	brne	.+2      	; 0x1608 <coordinates_tobe_reached+0x2a2>
    1606:	49 c0       	rjmp	.+146    	; 0x169a <coordinates_tobe_reached+0x334>
					{
						if(mx==0 && my==0)
    1608:	60 91 37 01 	lds	r22, 0x0137
    160c:	70 91 38 01 	lds	r23, 0x0138
    1610:	61 15       	cp	r22, r1
    1612:	71 05       	cpc	r23, r1
    1614:	89 f4       	brne	.+34     	; 0x1638 <coordinates_tobe_reached+0x2d2>
    1616:	80 91 39 01 	lds	r24, 0x0139
    161a:	90 91 3a 01 	lds	r25, 0x013A
    161e:	89 2b       	or	r24, r25
    1620:	59 f4       	brne	.+22     	; 0x1638 <coordinates_tobe_reached+0x2d2>
						{
							mx = i;
    1622:	10 93 38 01 	sts	0x0138, r17
    1626:	00 93 37 01 	sts	0x0137, r16
							my = j;
    162a:	2f 89       	ldd	r18, Y+23	; 0x17
    162c:	38 8d       	ldd	r19, Y+24	; 0x18
    162e:	30 93 3a 01 	sts	0x013A, r19
    1632:	20 93 39 01 	sts	0x0139, r18
    1636:	31 c0       	rjmp	.+98     	; 0x169a <coordinates_tobe_reached+0x334>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    1638:	68 19       	sub	r22, r8
    163a:	79 09       	sbc	r23, r9
    163c:	80 91 39 01 	lds	r24, 0x0139
    1640:	90 91 3a 01 	lds	r25, 0x013A
    1644:	8a 19       	sub	r24, r10
    1646:	9b 09       	sbc	r25, r11
							if(t1<t2)
    1648:	22 9c       	mul	r2, r2
    164a:	a0 01       	movw	r20, r0
    164c:	23 9c       	mul	r2, r3
    164e:	50 0d       	add	r21, r0
    1650:	32 9c       	mul	r3, r2
    1652:	50 0d       	add	r21, r0
    1654:	11 24       	eor	r1, r1
    1656:	ef 81       	ldd	r30, Y+7	; 0x07
    1658:	f8 85       	ldd	r31, Y+8	; 0x08
    165a:	4e 0f       	add	r20, r30
    165c:	5f 1f       	adc	r21, r31
    165e:	9c 01       	movw	r18, r24
    1660:	22 9f       	mul	r18, r18
    1662:	c0 01       	movw	r24, r0
    1664:	23 9f       	mul	r18, r19
    1666:	90 0d       	add	r25, r0
    1668:	32 9f       	mul	r19, r18
    166a:	90 0d       	add	r25, r0
    166c:	11 24       	eor	r1, r1
    166e:	66 9f       	mul	r22, r22
    1670:	90 01       	movw	r18, r0
    1672:	67 9f       	mul	r22, r23
    1674:	30 0d       	add	r19, r0
    1676:	76 9f       	mul	r23, r22
    1678:	30 0d       	add	r19, r0
    167a:	11 24       	eor	r1, r1
    167c:	82 0f       	add	r24, r18
    167e:	93 1f       	adc	r25, r19
    1680:	48 17       	cp	r20, r24
    1682:	59 07       	cpc	r21, r25
    1684:	54 f4       	brge	.+20     	; 0x169a <coordinates_tobe_reached+0x334>
							{
								mx = i;
    1686:	10 93 38 01 	sts	0x0138, r17
    168a:	00 93 37 01 	sts	0x0137, r16
								my = j;
    168e:	8f 89       	ldd	r24, Y+23	; 0x17
    1690:	98 8d       	ldd	r25, Y+24	; 0x18
    1692:	90 93 3a 01 	sts	0x013A, r25
    1696:	80 93 39 01 	sts	0x0139, r24
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<16 ; i++)
	{
		for(int j = 0 ; j<16 ; j++)
    169a:	ef 89       	ldd	r30, Y+23	; 0x17
    169c:	f8 8d       	ldd	r31, Y+24	; 0x18
    169e:	31 96       	adiw	r30, 0x01	; 1
    16a0:	f8 8f       	std	Y+24, r31	; 0x18
    16a2:	ef 8b       	std	Y+23, r30	; 0x17
    16a4:	24 e0       	ldi	r18, 0x04	; 4
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	e2 0e       	add	r14, r18
    16aa:	f3 1e       	adc	r15, r19
    16ac:	08 94       	sec
    16ae:	21 1c       	adc	r2, r1
    16b0:	31 1c       	adc	r3, r1
    16b2:	08 94       	sec
    16b4:	41 1c       	adc	r4, r1
    16b6:	51 1c       	adc	r5, r1
    16b8:	08 94       	sec
    16ba:	61 1c       	adc	r6, r1
    16bc:	71 1c       	adc	r7, r1
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	9e 87       	std	Y+14, r25	; 0x0e
    16c6:	8d 87       	std	Y+13, r24	; 0x0d
    16c8:	70 97       	sbiw	r30, 0x10	; 16
    16ca:	09 f0       	breq	.+2      	; 0x16ce <coordinates_tobe_reached+0x368>
    16cc:	89 ce       	rjmp	.-750    	; 0x13e0 <coordinates_tobe_reached+0x7a>
void coordinates_tobe_reached()
{
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<16 ; i++)
    16ce:	0f 5f       	subi	r16, 0xFF	; 255
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	08 94       	sec
    16d4:	c1 1c       	adc	r12, r1
    16d6:	d1 1c       	adc	r13, r1
    16d8:	ed 81       	ldd	r30, Y+5	; 0x05
    16da:	fe 81       	ldd	r31, Y+6	; 0x06
    16dc:	31 96       	adiw	r30, 0x01	; 1
    16de:	fe 83       	std	Y+6, r31	; 0x06
    16e0:	ed 83       	std	Y+5, r30	; 0x05
    16e2:	2b 81       	ldd	r18, Y+3	; 0x03
    16e4:	3c 81       	ldd	r19, Y+4	; 0x04
    16e6:	2f 5f       	subi	r18, 0xFF	; 255
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	3c 83       	std	Y+4, r19	; 0x04
    16ec:	2b 83       	std	Y+3, r18	; 0x03
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	00 31       	cpi	r16, 0x10	; 16
    16fa:	11 05       	cpc	r17, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <coordinates_tobe_reached+0x39a>
    16fe:	47 c0       	rjmp	.+142    	; 0x178e <coordinates_tobe_reached+0x428>
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1700:	cc 9c       	mul	r12, r12
    1702:	f0 01       	movw	r30, r0
    1704:	cd 9c       	mul	r12, r13
    1706:	f0 0d       	add	r31, r0
    1708:	dc 9c       	mul	r13, r12
    170a:	f0 0d       	add	r31, r0
    170c:	11 24       	eor	r1, r1
    170e:	f8 8b       	std	Y+16, r31	; 0x10
    1710:	ef 87       	std	Y+15, r30	; 0x0f
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	88 9f       	mul	r24, r24
    1718:	90 01       	movw	r18, r0
    171a:	89 9f       	mul	r24, r25
    171c:	30 0d       	add	r19, r0
    171e:	98 9f       	mul	r25, r24
    1720:	30 0d       	add	r19, r0
    1722:	11 24       	eor	r1, r1
    1724:	3c 87       	std	Y+12, r19	; 0x0c
    1726:	2b 87       	std	Y+11, r18	; 0x0b
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	22 9f       	mul	r18, r18
    172e:	f0 01       	movw	r30, r0
    1730:	23 9f       	mul	r18, r19
    1732:	f0 0d       	add	r31, r0
    1734:	32 9f       	mul	r19, r18
    1736:	f0 0d       	add	r31, r0
    1738:	11 24       	eor	r1, r1
    173a:	fa 87       	std	Y+10, r31	; 0x0a
    173c:	e9 87       	std	Y+9, r30	; 0x09
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	ee 9f       	mul	r30, r30
    1744:	c0 01       	movw	r24, r0
    1746:	ef 9f       	mul	r30, r31
    1748:	90 0d       	add	r25, r0
    174a:	fe 9f       	mul	r31, r30
    174c:	90 0d       	add	r25, r0
    174e:	11 24       	eor	r1, r1
    1750:	98 87       	std	Y+8, r25	; 0x08
    1752:	8f 83       	std	Y+7, r24	; 0x07
    1754:	78 01       	movw	r14, r16
    1756:	96 e0       	ldi	r25, 0x06	; 6
    1758:	ee 0c       	add	r14, r14
    175a:	ff 1c       	adc	r15, r15
    175c:	9a 95       	dec	r25
    175e:	e1 f7       	brne	.-8      	; 0x1758 <coordinates_tobe_reached+0x3f2>
    1760:	25 e4       	ldi	r18, 0x45	; 69
    1762:	33 e0       	ldi	r19, 0x03	; 3
    1764:	e2 0e       	add	r14, r18
    1766:	f3 1e       	adc	r15, r19
    1768:	8d 89       	ldd	r24, Y+21	; 0x15
    176a:	9e 89       	ldd	r25, Y+22	; 0x16
    176c:	9e 87       	std	Y+14, r25	; 0x0e
    176e:	8d 87       	std	Y+13, r24	; 0x0d
    1770:	1c 01       	movw	r2, r24
    1772:	2c 01       	movw	r4, r24
    1774:	3c 01       	movw	r6, r24
    1776:	18 8e       	std	Y+24, r1	; 0x18
    1778:	1f 8a       	std	Y+23, r1	; 0x17
						}
					}
				}
				if(dir_array[i][j][3]=='T')
				{
					if(is_coordinate_null(i-1,j))
    177a:	f8 01       	movw	r30, r16
    177c:	31 97       	sbiw	r30, 0x01	; 1
    177e:	fa 8b       	std	Y+18, r31	; 0x12
    1780:	e9 8b       	std	Y+17, r30	; 0x11
						}
					}
				}
				if(dir_array[i][j][1]=='T')
				{
					if(is_coordinate_null(i+1,j))
    1782:	98 01       	movw	r18, r16
    1784:	2f 5f       	subi	r18, 0xFF	; 255
    1786:	3f 4f       	sbci	r19, 0xFF	; 255
    1788:	3c 8b       	std	Y+20, r19	; 0x14
    178a:	2b 8b       	std	Y+19, r18	; 0x13
    178c:	29 ce       	rjmp	.-942    	; 0x13e0 <coordinates_tobe_reached+0x7a>
					}
				}	
			}	
		}
	}
}
    178e:	68 96       	adiw	r28, 0x18	; 24
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	7f 90       	pop	r7
    17b4:	6f 90       	pop	r6
    17b6:	5f 90       	pop	r5
    17b8:	4f 90       	pop	r4
    17ba:	3f 90       	pop	r3
    17bc:	2f 90       	pop	r2
    17be:	08 95       	ret

000017c0 <get_path>:
void get_path()
{ 
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
	int x , y;
	y = y_coordinate;
    17dc:	40 91 1f 01 	lds	r20, 0x011F
    17e0:	50 91 20 01 	lds	r21, 0x0120
	x = x_coordinate;
    17e4:	60 91 1d 01 	lds	r22, 0x011D
    17e8:	70 91 1e 01 	lds	r23, 0x011E
    17ec:	0b e4       	ldi	r16, 0x4B	; 75
    17ee:	17 e0       	ldi	r17, 0x07	; 7
    17f0:	f8 01       	movw	r30, r16
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
	{
		path_array[ls][0] = 0;
    17f2:	11 82       	std	Z+1, r1	; 0x01
    17f4:	10 82       	st	Z, r1
		path_array[ls][1] = 0;
    17f6:	13 82       	std	Z+3, r1	; 0x03
    17f8:	12 82       	std	Z+2, r1	; 0x02
    17fa:	34 96       	adiw	r30, 0x04	; 4
{ 
	int x , y;
	y = y_coordinate;
	x = x_coordinate;
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
    17fc:	87 e0       	ldi	r24, 0x07	; 7
    17fe:	e7 38       	cpi	r30, 0x87	; 135
    1800:	f8 07       	cpc	r31, r24
    1802:	b9 f7       	brne	.-18     	; 0x17f2 <get_path+0x32>
	{
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	ipl=0;
    1804:	10 92 40 01 	sts	0x0140, r1
    1808:	10 92 3f 01 	sts	0x013F, r1
    180c:	66 24       	eor	r6, r6
    180e:	77 24       	eor	r7, r7
    1810:	d2 c1       	rjmp	.+932    	; 0x1bb6 <get_path+0x3f6>
	while(map_array[x][y]!=0)
	{
		if(map_array[x+1][y]<map_array[x][y] && dir_array[x][y][1]=='T' && dir_array[x+1][y][3]=='T' && x<15)
    1812:	6b 01       	movw	r12, r22
    1814:	08 94       	sec
    1816:	c1 1c       	adc	r12, r1
    1818:	d1 1c       	adc	r13, r1
    181a:	96 01       	movw	r18, r12
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	8a 95       	dec	r24
    1824:	e1 f7       	brne	.-8      	; 0x181e <get_path+0x5e>
    1826:	24 0f       	add	r18, r20
    1828:	35 1f       	adc	r19, r21
    182a:	79 01       	movw	r14, r18
    182c:	ee 0c       	add	r14, r14
    182e:	ff 1c       	adc	r15, r15
    1830:	f7 01       	movw	r30, r14
    1832:	eb 5b       	subi	r30, 0xBB	; 187
    1834:	fe 4f       	sbci	r31, 0xFE	; 254
    1836:	80 80       	ld	r8, Z
    1838:	91 80       	ldd	r9, Z+1	; 0x01
    183a:	8a 14       	cp	r8, r10
    183c:	9b 04       	cpc	r9, r11
    183e:	0c f0       	brlt	.+2      	; 0x1842 <get_path+0x82>
    1840:	59 c0       	rjmp	.+178    	; 0x18f4 <get_path+0x134>
    1842:	aa 0f       	add	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	aa 0f       	add	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	ab 5b       	subi	r26, 0xBB	; 187
    184c:	bc 4f       	sbci	r27, 0xFC	; 252
    184e:	11 96       	adiw	r26, 0x01	; 1
    1850:	8c 91       	ld	r24, X
    1852:	84 35       	cpi	r24, 0x54	; 84
    1854:	09 f0       	breq	.+2      	; 0x1858 <get_path+0x98>
    1856:	4e c0       	rjmp	.+156    	; 0x18f4 <get_path+0x134>
    1858:	e9 01       	movw	r28, r18
    185a:	cc 0f       	add	r28, r28
    185c:	dd 1f       	adc	r29, r29
    185e:	cc 0f       	add	r28, r28
    1860:	dd 1f       	adc	r29, r29
    1862:	cb 5b       	subi	r28, 0xBB	; 187
    1864:	dc 4f       	sbci	r29, 0xFC	; 252
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	84 35       	cpi	r24, 0x54	; 84
    186a:	09 f0       	breq	.+2      	; 0x186e <get_path+0xae>
    186c:	43 c0       	rjmp	.+134    	; 0x18f4 <get_path+0x134>
    186e:	6f 30       	cpi	r22, 0x0F	; 15
    1870:	71 05       	cpc	r23, r1
    1872:	0c f0       	brlt	.+2      	; 0x1876 <get_path+0xb6>
    1874:	3f c0       	rjmp	.+126    	; 0x18f4 <get_path+0x134>
		{
			x = x+1;
			path_array[ipl][0]=x;
    1876:	f8 01       	movw	r30, r16
    1878:	d1 82       	std	Z+1, r13	; 0x01
    187a:	c0 82       	st	Z, r12
			path_array[ipl][1]=y;
    187c:	53 83       	std	Z+3, r21	; 0x03
    187e:	42 83       	std	Z+2, r20	; 0x02
			if(map_array[x+1][y]<map_array[x][y] && dir_array[x+1][y][3]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x<15)
    1880:	b6 01       	movw	r22, r12
    1882:	6f 5f       	subi	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	db 01       	movw	r26, r22
    1888:	94 e0       	ldi	r25, 0x04	; 4
    188a:	aa 0f       	add	r26, r26
    188c:	bb 1f       	adc	r27, r27
    188e:	9a 95       	dec	r25
    1890:	e1 f7       	brne	.-8      	; 0x188a <get_path+0xca>
    1892:	a4 0f       	add	r26, r20
    1894:	b5 1f       	adc	r27, r21
    1896:	fd 01       	movw	r30, r26
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	eb 5b       	subi	r30, 0xBB	; 187
    189e:	fe 4f       	sbci	r31, 0xFE	; 254
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	88 15       	cp	r24, r8
    18a6:	99 05       	cpc	r25, r9
    18a8:	0c f0       	brlt	.+2      	; 0x18ac <get_path+0xec>
    18aa:	66 c1       	rjmp	.+716    	; 0x1b78 <get_path+0x3b8>
    18ac:	aa 0f       	add	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	aa 0f       	add	r26, r26
    18b2:	bb 1f       	adc	r27, r27
    18b4:	ab 5b       	subi	r26, 0xBB	; 187
    18b6:	bc 4f       	sbci	r27, 0xFC	; 252
    18b8:	13 96       	adiw	r26, 0x03	; 3
    18ba:	8c 91       	ld	r24, X
    18bc:	84 35       	cpi	r24, 0x54	; 84
    18be:	09 f0       	breq	.+2      	; 0x18c2 <get_path+0x102>
    18c0:	5b c1       	rjmp	.+694    	; 0x1b78 <get_path+0x3b8>
    18c2:	88 81       	ld	r24, Y
    18c4:	86 34       	cpi	r24, 0x46	; 70
    18c6:	09 f0       	breq	.+2      	; 0x18ca <get_path+0x10a>
    18c8:	57 c1       	rjmp	.+686    	; 0x1b78 <get_path+0x3b8>
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	84 35       	cpi	r24, 0x54	; 84
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <get_path+0x112>
    18d0:	53 c1       	rjmp	.+678    	; 0x1b78 <get_path+0x3b8>
    18d2:	ee 0c       	add	r14, r14
    18d4:	ff 1c       	adc	r15, r15
    18d6:	87 e4       	ldi	r24, 0x47	; 71
    18d8:	93 e0       	ldi	r25, 0x03	; 3
    18da:	e8 0e       	add	r14, r24
    18dc:	f9 1e       	adc	r15, r25
    18de:	f7 01       	movw	r30, r14
    18e0:	80 81       	ld	r24, Z
    18e2:	86 34       	cpi	r24, 0x46	; 70
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <get_path+0x128>
    18e6:	48 c1       	rjmp	.+656    	; 0x1b78 <get_path+0x3b8>
    18e8:	ff e0       	ldi	r31, 0x0F	; 15
    18ea:	cf 16       	cp	r12, r31
    18ec:	d1 04       	cpc	r13, r1
    18ee:	0c f0       	brlt	.+2      	; 0x18f2 <get_path+0x132>
    18f0:	43 c1       	rjmp	.+646    	; 0x1b78 <get_path+0x3b8>
    18f2:	76 c0       	rjmp	.+236    	; 0x19e0 <get_path+0x220>
				x = x+1;
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;
			}
		}
		else if(map_array[x-1][y]<map_array[x][y] && dir_array[x][y][3]=='T' && dir_array[x-1][y][1]=='T' && x>=1)
    18f4:	6b 01       	movw	r12, r22
    18f6:	08 94       	sec
    18f8:	c1 08       	sbc	r12, r1
    18fa:	d1 08       	sbc	r13, r1
    18fc:	96 01       	movw	r18, r12
    18fe:	94 e0       	ldi	r25, 0x04	; 4
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	9a 95       	dec	r25
    1906:	e1 f7       	brne	.-8      	; 0x1900 <get_path+0x140>
    1908:	24 0f       	add	r18, r20
    190a:	35 1f       	adc	r19, r21
    190c:	79 01       	movw	r14, r18
    190e:	ee 0c       	add	r14, r14
    1910:	ff 1c       	adc	r15, r15
    1912:	f7 01       	movw	r30, r14
    1914:	eb 5b       	subi	r30, 0xBB	; 187
    1916:	fe 4f       	sbci	r31, 0xFE	; 254
    1918:	80 80       	ld	r8, Z
    191a:	91 80       	ldd	r9, Z+1	; 0x01
    191c:	8a 14       	cp	r8, r10
    191e:	9b 04       	cpc	r9, r11
    1920:	0c f0       	brlt	.+2      	; 0x1924 <get_path+0x164>
    1922:	62 c0       	rjmp	.+196    	; 0x19e8 <get_path+0x228>
    1924:	fb 01       	movw	r30, r22
    1926:	b4 e0       	ldi	r27, 0x04	; 4
    1928:	ee 0f       	add	r30, r30
    192a:	ff 1f       	adc	r31, r31
    192c:	ba 95       	dec	r27
    192e:	e1 f7       	brne	.-8      	; 0x1928 <get_path+0x168>
    1930:	e4 0f       	add	r30, r20
    1932:	f5 1f       	adc	r31, r21
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	eb 5b       	subi	r30, 0xBB	; 187
    193e:	fc 4f       	sbci	r31, 0xFC	; 252
    1940:	83 81       	ldd	r24, Z+3	; 0x03
    1942:	84 35       	cpi	r24, 0x54	; 84
    1944:	09 f0       	breq	.+2      	; 0x1948 <get_path+0x188>
    1946:	50 c0       	rjmp	.+160    	; 0x19e8 <get_path+0x228>
    1948:	e9 01       	movw	r28, r18
    194a:	cc 0f       	add	r28, r28
    194c:	dd 1f       	adc	r29, r29
    194e:	cc 0f       	add	r28, r28
    1950:	dd 1f       	adc	r29, r29
    1952:	cb 5b       	subi	r28, 0xBB	; 187
    1954:	dc 4f       	sbci	r29, 0xFC	; 252
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	84 35       	cpi	r24, 0x54	; 84
    195a:	09 f0       	breq	.+2      	; 0x195e <get_path+0x19e>
    195c:	45 c0       	rjmp	.+138    	; 0x19e8 <get_path+0x228>
    195e:	16 16       	cp	r1, r22
    1960:	17 06       	cpc	r1, r23
    1962:	0c f0       	brlt	.+2      	; 0x1966 <get_path+0x1a6>
    1964:	41 c0       	rjmp	.+130    	; 0x19e8 <get_path+0x228>
		{

			x = x-1;
			path_array[ipl][0]=x;
    1966:	f8 01       	movw	r30, r16
    1968:	d1 82       	std	Z+1, r13	; 0x01
    196a:	c0 82       	st	Z, r12
			path_array[ipl][1]=y;
    196c:	53 83       	std	Z+3, r21	; 0x03
    196e:	42 83       	std	Z+2, r20	; 0x02
			if(map_array[x-1][y]<map_array[x][y] && dir_array[x-1][y][1]=='T'  && dir_array[x][y][0]=='F'  && dir_array[x][y][1]=='T' && dir_array[x][y][2]=='F' && dir_array[x][y][3]=='T' && x>=1)
    1970:	b6 01       	movw	r22, r12
    1972:	61 50       	subi	r22, 0x01	; 1
    1974:	70 40       	sbci	r23, 0x00	; 0
    1976:	db 01       	movw	r26, r22
    1978:	24 e0       	ldi	r18, 0x04	; 4
    197a:	aa 0f       	add	r26, r26
    197c:	bb 1f       	adc	r27, r27
    197e:	2a 95       	dec	r18
    1980:	e1 f7       	brne	.-8      	; 0x197a <get_path+0x1ba>
    1982:	a4 0f       	add	r26, r20
    1984:	b5 1f       	adc	r27, r21
    1986:	fd 01       	movw	r30, r26
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	eb 5b       	subi	r30, 0xBB	; 187
    198e:	fe 4f       	sbci	r31, 0xFE	; 254
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	88 15       	cp	r24, r8
    1996:	99 05       	cpc	r25, r9
    1998:	0c f0       	brlt	.+2      	; 0x199c <get_path+0x1dc>
    199a:	ee c0       	rjmp	.+476    	; 0x1b78 <get_path+0x3b8>
    199c:	aa 0f       	add	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	aa 0f       	add	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	ab 5b       	subi	r26, 0xBB	; 187
    19a6:	bc 4f       	sbci	r27, 0xFC	; 252
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	8c 91       	ld	r24, X
    19ac:	84 35       	cpi	r24, 0x54	; 84
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <get_path+0x1f2>
    19b0:	e3 c0       	rjmp	.+454    	; 0x1b78 <get_path+0x3b8>
    19b2:	88 81       	ld	r24, Y
    19b4:	86 34       	cpi	r24, 0x46	; 70
    19b6:	09 f0       	breq	.+2      	; 0x19ba <get_path+0x1fa>
    19b8:	df c0       	rjmp	.+446    	; 0x1b78 <get_path+0x3b8>
    19ba:	ee 0c       	add	r14, r14
    19bc:	ff 1c       	adc	r15, r15
    19be:	87 e4       	ldi	r24, 0x47	; 71
    19c0:	93 e0       	ldi	r25, 0x03	; 3
    19c2:	e8 0e       	add	r14, r24
    19c4:	f9 1e       	adc	r15, r25
    19c6:	f7 01       	movw	r30, r14
    19c8:	80 81       	ld	r24, Z
    19ca:	86 34       	cpi	r24, 0x46	; 70
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <get_path+0x210>
    19ce:	d4 c0       	rjmp	.+424    	; 0x1b78 <get_path+0x3b8>
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	84 35       	cpi	r24, 0x54	; 84
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <get_path+0x218>
    19d6:	d0 c0       	rjmp	.+416    	; 0x1b78 <get_path+0x3b8>
    19d8:	1c 14       	cp	r1, r12
    19da:	1d 04       	cpc	r1, r13
    19dc:	0c f0       	brlt	.+2      	; 0x19e0 <get_path+0x220>
    19de:	cc c0       	rjmp	.+408    	; 0x1b78 <get_path+0x3b8>
			{
				x = x-1;
				path_array[ipl][0]=x;
    19e0:	f8 01       	movw	r30, r16
    19e2:	71 83       	std	Z+1, r23	; 0x01
    19e4:	60 83       	st	Z, r22
    19e6:	cd c0       	rjmp	.+410    	; 0x1b82 <get_path+0x3c2>
				path_array[ipl][1]=y;

			}
		}

		else if(map_array[x][y+1]<map_array[x][y] && dir_array[x][y][0]=='T' && dir_array[x][y+1][2]=='T' && y<15)
    19e8:	ea 01       	movw	r28, r20
    19ea:	21 96       	adiw	r28, 0x01	; 1
    19ec:	9b 01       	movw	r18, r22
    19ee:	f4 e0       	ldi	r31, 0x04	; 4
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	fa 95       	dec	r31
    19f6:	e1 f7       	brne	.-8      	; 0x19f0 <get_path+0x230>
    19f8:	69 01       	movw	r12, r18
    19fa:	cc 0e       	add	r12, r28
    19fc:	dd 1e       	adc	r13, r29
    19fe:	d6 01       	movw	r26, r12
    1a00:	aa 0f       	add	r26, r26
    1a02:	bb 1f       	adc	r27, r27
    1a04:	fd 01       	movw	r30, r26
    1a06:	eb 5b       	subi	r30, 0xBB	; 187
    1a08:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0a:	e0 80       	ld	r14, Z
    1a0c:	f1 80       	ldd	r15, Z+1	; 0x01
    1a0e:	ea 14       	cp	r14, r10
    1a10:	fb 04       	cpc	r15, r11
    1a12:	0c f0       	brlt	.+2      	; 0x1a16 <get_path+0x256>
    1a14:	4d c0       	rjmp	.+154    	; 0x1ab0 <get_path+0x2f0>
    1a16:	f9 01       	movw	r30, r18
    1a18:	e4 0f       	add	r30, r20
    1a1a:	f5 1f       	adc	r31, r21
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	eb 5b       	subi	r30, 0xBB	; 187
    1a26:	fc 4f       	sbci	r31, 0xFC	; 252
    1a28:	80 81       	ld	r24, Z
    1a2a:	84 35       	cpi	r24, 0x54	; 84
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <get_path+0x270>
    1a2e:	40 c0       	rjmp	.+128    	; 0x1ab0 <get_path+0x2f0>
    1a30:	aa 0f       	add	r26, r26
    1a32:	bb 1f       	adc	r27, r27
    1a34:	a9 5b       	subi	r26, 0xB9	; 185
    1a36:	bc 4f       	sbci	r27, 0xFC	; 252
    1a38:	8c 91       	ld	r24, X
    1a3a:	84 35       	cpi	r24, 0x54	; 84
    1a3c:	c9 f5       	brne	.+114    	; 0x1ab0 <get_path+0x2f0>
    1a3e:	4f 30       	cpi	r20, 0x0F	; 15
    1a40:	51 05       	cpc	r21, r1
    1a42:	b4 f5       	brge	.+108    	; 0x1ab0 <get_path+0x2f0>
		{

			y = y+1;
			path_array[ipl][0]=x;
    1a44:	f8 01       	movw	r30, r16
    1a46:	71 83       	std	Z+1, r23	; 0x01
    1a48:	60 83       	st	Z, r22
			path_array[ipl][1]=y;
    1a4a:	d3 83       	std	Z+3, r29	; 0x03
    1a4c:	c2 83       	std	Z+2, r28	; 0x02
			if(map_array[x][y+1]<map_array[x][y]  && dir_array[x][y+1][2]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y<15)
    1a4e:	ae 01       	movw	r20, r28
    1a50:	4f 5f       	subi	r20, 0xFF	; 255
    1a52:	5f 4f       	sbci	r21, 0xFF	; 255
    1a54:	d9 01       	movw	r26, r18
    1a56:	a4 0f       	add	r26, r20
    1a58:	b5 1f       	adc	r27, r21
    1a5a:	aa 0f       	add	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	fd 01       	movw	r30, r26
    1a60:	eb 5b       	subi	r30, 0xBB	; 187
    1a62:	fe 4f       	sbci	r31, 0xFE	; 254
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	8e 15       	cp	r24, r14
    1a6a:	9f 05       	cpc	r25, r15
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <get_path+0x2b0>
    1a6e:	86 c0       	rjmp	.+268    	; 0x1b7c <get_path+0x3bc>
    1a70:	aa 0f       	add	r26, r26
    1a72:	bb 1f       	adc	r27, r27
    1a74:	a9 5b       	subi	r26, 0xB9	; 185
    1a76:	bc 4f       	sbci	r27, 0xFC	; 252
    1a78:	8c 91       	ld	r24, X
    1a7a:	84 35       	cpi	r24, 0x54	; 84
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <get_path+0x2c0>
    1a7e:	7e c0       	rjmp	.+252    	; 0x1b7c <get_path+0x3bc>
    1a80:	f6 01       	movw	r30, r12
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	eb 5b       	subi	r30, 0xBB	; 187
    1a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8e:	80 81       	ld	r24, Z
    1a90:	84 35       	cpi	r24, 0x54	; 84
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <get_path+0x2d6>
    1a94:	73 c0       	rjmp	.+230    	; 0x1b7c <get_path+0x3bc>
    1a96:	81 81       	ldd	r24, Z+1	; 0x01
    1a98:	86 34       	cpi	r24, 0x46	; 70
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <get_path+0x2de>
    1a9c:	6f c0       	rjmp	.+222    	; 0x1b7c <get_path+0x3bc>
    1a9e:	83 81       	ldd	r24, Z+3	; 0x03
    1aa0:	86 34       	cpi	r24, 0x46	; 70
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <get_path+0x2e6>
    1aa4:	6b c0       	rjmp	.+214    	; 0x1b7c <get_path+0x3bc>
    1aa6:	cf 30       	cpi	r28, 0x0F	; 15
    1aa8:	d1 05       	cpc	r29, r1
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <get_path+0x2ee>
    1aac:	67 c0       	rjmp	.+206    	; 0x1b7c <get_path+0x3bc>
    1aae:	60 c0       	rjmp	.+192    	; 0x1b70 <get_path+0x3b0>
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;

			}
		}
		else if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y][2]=='T' && dir_array[x][y-1][0]=='T' && y>=1)
    1ab0:	7a 01       	movw	r14, r20
    1ab2:	08 94       	sec
    1ab4:	e1 08       	sbc	r14, r1
    1ab6:	f1 08       	sbc	r15, r1
    1ab8:	db 01       	movw	r26, r22
    1aba:	24 e0       	ldi	r18, 0x04	; 4
    1abc:	aa 0f       	add	r26, r26
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	2a 95       	dec	r18
    1ac2:	e1 f7       	brne	.-8      	; 0x1abc <get_path+0x2fc>
    1ac4:	ed 01       	movw	r28, r26
    1ac6:	ce 0d       	add	r28, r14
    1ac8:	df 1d       	adc	r29, r15
    1aca:	9e 01       	movw	r18, r28
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	eb 5b       	subi	r30, 0xBB	; 187
    1ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad6:	c0 80       	ld	r12, Z
    1ad8:	d1 80       	ldd	r13, Z+1	; 0x01
    1ada:	ca 14       	cp	r12, r10
    1adc:	db 04       	cpc	r13, r11
    1ade:	0c f0       	brlt	.+2      	; 0x1ae2 <get_path+0x322>
    1ae0:	50 c0       	rjmp	.+160    	; 0x1b82 <get_path+0x3c2>
    1ae2:	fd 01       	movw	r30, r26
    1ae4:	e4 0f       	add	r30, r20
    1ae6:	f5 1f       	adc	r31, r21
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	ee 0f       	add	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	e9 5b       	subi	r30, 0xB9	; 185
    1af2:	fc 4f       	sbci	r31, 0xFC	; 252
    1af4:	80 81       	ld	r24, Z
    1af6:	84 35       	cpi	r24, 0x54	; 84
    1af8:	09 f0       	breq	.+2      	; 0x1afc <get_path+0x33c>
    1afa:	43 c0       	rjmp	.+134    	; 0x1b82 <get_path+0x3c2>
    1afc:	cc 0f       	add	r28, r28
    1afe:	dd 1f       	adc	r29, r29
    1b00:	cc 0f       	add	r28, r28
    1b02:	dd 1f       	adc	r29, r29
    1b04:	cb 5b       	subi	r28, 0xBB	; 187
    1b06:	dc 4f       	sbci	r29, 0xFC	; 252
    1b08:	88 81       	ld	r24, Y
    1b0a:	84 35       	cpi	r24, 0x54	; 84
    1b0c:	d1 f5       	brne	.+116    	; 0x1b82 <get_path+0x3c2>
    1b0e:	14 16       	cp	r1, r20
    1b10:	15 06       	cpc	r1, r21
    1b12:	bc f5       	brge	.+110    	; 0x1b82 <get_path+0x3c2>
		{

			y = y-1;
			path_array[ipl][0]=x;
    1b14:	f8 01       	movw	r30, r16
    1b16:	71 83       	std	Z+1, r23	; 0x01
    1b18:	60 83       	st	Z, r22
			path_array[ipl][1]=y;
    1b1a:	f3 82       	std	Z+3, r15	; 0x03
    1b1c:	e2 82       	std	Z+2, r14	; 0x02
			if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y-1][0]=='T' && dir_array[x][y][0]=='T' && dir_array[x][y][1]=='F' && dir_array[x][y][2]=='T' && dir_array[x][y][3]=='F' && y>=1)
    1b1e:	a7 01       	movw	r20, r14
    1b20:	41 50       	subi	r20, 0x01	; 1
    1b22:	50 40       	sbci	r21, 0x00	; 0
    1b24:	a4 0f       	add	r26, r20
    1b26:	b5 1f       	adc	r27, r21
    1b28:	fd 01       	movw	r30, r26
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	eb 5b       	subi	r30, 0xBB	; 187
    1b30:	fe 4f       	sbci	r31, 0xFE	; 254
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	8c 15       	cp	r24, r12
    1b38:	9d 05       	cpc	r25, r13
    1b3a:	14 f5       	brge	.+68     	; 0x1b80 <get_path+0x3c0>
    1b3c:	aa 0f       	add	r26, r26
    1b3e:	bb 1f       	adc	r27, r27
    1b40:	aa 0f       	add	r26, r26
    1b42:	bb 1f       	adc	r27, r27
    1b44:	ab 5b       	subi	r26, 0xBB	; 187
    1b46:	bc 4f       	sbci	r27, 0xFC	; 252
    1b48:	8c 91       	ld	r24, X
    1b4a:	84 35       	cpi	r24, 0x54	; 84
    1b4c:	c9 f4       	brne	.+50     	; 0x1b80 <get_path+0x3c0>
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	86 34       	cpi	r24, 0x46	; 70
    1b52:	b1 f4       	brne	.+44     	; 0x1b80 <get_path+0x3c0>
    1b54:	22 0f       	add	r18, r18
    1b56:	33 1f       	adc	r19, r19
    1b58:	29 5b       	subi	r18, 0xB9	; 185
    1b5a:	3c 4f       	sbci	r19, 0xFC	; 252
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	80 81       	ld	r24, Z
    1b60:	84 35       	cpi	r24, 0x54	; 84
    1b62:	71 f4       	brne	.+28     	; 0x1b80 <get_path+0x3c0>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	86 34       	cpi	r24, 0x46	; 70
    1b68:	59 f4       	brne	.+22     	; 0x1b80 <get_path+0x3c0>
    1b6a:	1e 14       	cp	r1, r14
    1b6c:	1f 04       	cpc	r1, r15
    1b6e:	44 f4       	brge	.+16     	; 0x1b80 <get_path+0x3c0>
			{
				y = y-1;
				path_array[ipl][0]=x;
    1b70:	f8 01       	movw	r30, r16
				path_array[ipl][1]=y;
    1b72:	53 83       	std	Z+3, r21	; 0x03
    1b74:	42 83       	std	Z+2, r20	; 0x02
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <get_path+0x3c2>
    1b78:	b6 01       	movw	r22, r12
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <get_path+0x3c2>
    1b7c:	ae 01       	movw	r20, r28
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <get_path+0x3c2>
    1b80:	a7 01       	movw	r20, r14
			}	
		}
	}
}
void get_path()
{ 
    1b82:	08 94       	sec
    1b84:	61 1c       	adc	r6, r1
    1b86:	71 1c       	adc	r7, r1
    1b88:	0c 5f       	subi	r16, 0xFC	; 252
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
		// if(is_coordinate_null(x,y))
		// {
		//   break;
		// }
		ipl++;
		if(ipl>15)
    1b8c:	f0 e1       	ldi	r31, 0x10	; 16
    1b8e:	6f 16       	cp	r6, r31
    1b90:	71 04       	cpc	r7, r1
    1b92:	8c f0       	brlt	.+34     	; 0x1bb6 <get_path+0x3f6>
    1b94:	70 92 40 01 	sts	0x0140, r7
    1b98:	60 92 3f 01 	sts	0x013F, r6
		{
			lcd_clear();
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("Broke path ");
    1ba4:	8a e6       	ldi	r24, 0x6A	; 106
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(2);
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    1bb4:	17 c0       	rjmp	.+46     	; 0x1be4 <get_path+0x424>
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	ipl=0;
	while(map_array[x][y]!=0)
    1bb6:	db 01       	movw	r26, r22
    1bb8:	34 e0       	ldi	r19, 0x04	; 4
    1bba:	aa 0f       	add	r26, r26
    1bbc:	bb 1f       	adc	r27, r27
    1bbe:	3a 95       	dec	r19
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <get_path+0x3fa>
    1bc2:	a4 0f       	add	r26, r20
    1bc4:	b5 1f       	adc	r27, r21
    1bc6:	fd 01       	movw	r30, r26
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	eb 5b       	subi	r30, 0xBB	; 187
    1bce:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd0:	a0 80       	ld	r10, Z
    1bd2:	b1 80       	ldd	r11, Z+1	; 0x01
    1bd4:	a1 14       	cp	r10, r1
    1bd6:	b1 04       	cpc	r11, r1
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <get_path+0x41c>
    1bda:	1b ce       	rjmp	.-970    	; 0x1812 <get_path+0x52>
    1bdc:	70 92 40 01 	sts	0x0140, r7
    1be0:	60 92 3f 01 	sts	0x013F, r6
			lcd_write_string("Broke path ");
			delay_sec(2);
			break;
		}
	}
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	9f 90       	pop	r9
    1bfa:	8f 90       	pop	r8
    1bfc:	7f 90       	pop	r7
    1bfe:	6f 90       	pop	r6
    1c00:	08 95       	ret

00001c02 <build_map>:
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
    1c02:	4f 92       	push	r4
    1c04:	5f 92       	push	r5
    1c06:	6f 92       	push	r6
    1c08:	7f 92       	push	r7
    1c0a:	8f 92       	push	r8
    1c0c:	9f 92       	push	r9
    1c0e:	af 92       	push	r10
    1c10:	bf 92       	push	r11
    1c12:	cf 92       	push	r12
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	5c 01       	movw	r10, r24
    1c24:	4b 01       	movw	r8, r22
    1c26:	3a 01       	movw	r6, r20
    1c28:	29 01       	movw	r4, r18
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
		{
			map_array[i][j] = 100;
    1c2e:	44 e6       	ldi	r20, 0x64	; 100
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <build_map+0x48>
    1c34:	41 93       	st	Z+, r20
    1c36:	51 93       	st	Z+, r21
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 16; i++)
	{
		for (int j = 0; j < 16; j++)
    1c38:	01 96       	adiw	r24, 0x01	; 1
    1c3a:	80 31       	cpi	r24, 0x10	; 16
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <build_map+0x32>
		}
	}
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 16; i++)
    1c40:	2f 5f       	subi	r18, 0xFF	; 255
    1c42:	3f 4f       	sbci	r19, 0xFF	; 255
    1c44:	20 31       	cpi	r18, 0x10	; 16
    1c46:	31 05       	cpc	r19, r1
    1c48:	59 f0       	breq	.+22     	; 0x1c60 <build_map+0x5e>
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	65 e0       	ldi	r22, 0x05	; 5
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	6a 95       	dec	r22
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <build_map+0x4c>
    1c56:	eb 5b       	subi	r30, 0xBB	; 187
    1c58:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	ea cf       	rjmp	.-44     	; 0x1c34 <build_map+0x32>
		}
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
    1c60:	f3 01       	movw	r30, r6
    1c62:	54 e0       	ldi	r21, 0x04	; 4
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	5a 95       	dec	r21
    1c6a:	e1 f7       	brne	.-8      	; 0x1c64 <build_map+0x62>
    1c6c:	e4 0d       	add	r30, r4
    1c6e:	f5 1d       	adc	r31, r5
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	eb 5b       	subi	r30, 0xBB	; 187
    1c76:	fe 4f       	sbci	r31, 0xFE	; 254
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	10 82       	st	Z, r1
    1c7c:	ee 24       	eor	r14, r14
    1c7e:	ff 24       	eor	r15, r15
	while(map_array[start_x][start_y]==100)
    1c80:	a5 01       	movw	r20, r10
    1c82:	34 e0       	ldi	r19, 0x04	; 4
    1c84:	44 0f       	add	r20, r20
    1c86:	55 1f       	adc	r21, r21
    1c88:	3a 95       	dec	r19
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <build_map+0x82>
    1c8c:	48 0d       	add	r20, r8
    1c8e:	59 1d       	adc	r21, r9
    1c90:	44 0f       	add	r20, r20
    1c92:	55 1f       	adc	r21, r21
    1c94:	4b 5b       	subi	r20, 0xBB	; 187
    1c96:	5e 4f       	sbci	r21, 0xFE	; 254
    1c98:	b4 c0       	rjmp	.+360    	; 0x1e02 <build_map+0x200>
		
		for(int l=0; l<16; l++)
		{
			for(int s=0; s<16; s++)
			{
				if(map_array[l][s]==fi)
    1c9a:	90 96       	adiw	r26, 0x20	; 32
    1c9c:	8d 91       	ld	r24, X+
    1c9e:	9c 91       	ld	r25, X
    1ca0:	91 97       	sbiw	r26, 0x21	; 33
    1ca2:	8e 15       	cp	r24, r14
    1ca4:	9f 05       	cpc	r25, r15
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <build_map+0xa8>
    1ca8:	40 c0       	rjmp	.+128    	; 0x1d2a <build_map+0x128>
				{
					if(dir_array[l][s][0]=='T' && dir_array[l][s+1][2]=='T')
    1caa:	84 81       	ldd	r24, Z+4	; 0x04
    1cac:	84 35       	cpi	r24, 0x54	; 84
    1cae:	51 f4       	brne	.+20     	; 0x1cc4 <build_map+0xc2>
    1cb0:	82 85       	ldd	r24, Z+10	; 0x0a
    1cb2:	84 35       	cpi	r24, 0x54	; 84
    1cb4:	39 f4       	brne	.+14     	; 0x1cc4 <build_map+0xc2>
					{
						if(map_array[l][s+1]==100)
    1cb6:	88 81       	ld	r24, Y
    1cb8:	99 81       	ldd	r25, Y+1	; 0x01
    1cba:	84 36       	cpi	r24, 0x64	; 100
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	11 f4       	brne	.+4      	; 0x1cc4 <build_map+0xc2>
						{
							map_array[l][s+1]=(fi+1);
    1cc0:	19 83       	std	Y+1, r17	; 0x01
    1cc2:	08 83       	st	Y, r16
						}
					}
					if(dir_array[l][s][1]=='T' && dir_array[l+1][s][3]=='T')
    1cc4:	85 81       	ldd	r24, Z+5	; 0x05
    1cc6:	84 35       	cpi	r24, 0x54	; 84
    1cc8:	71 f4       	brne	.+28     	; 0x1ce6 <build_map+0xe4>
    1cca:	e9 5b       	subi	r30, 0xB9	; 185
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 81       	ld	r24, Z
    1cd0:	e7 54       	subi	r30, 0x47	; 71
    1cd2:	f0 40       	sbci	r31, 0x00	; 0
    1cd4:	84 35       	cpi	r24, 0x54	; 84
    1cd6:	39 f4       	brne	.+14     	; 0x1ce6 <build_map+0xe4>
					{
						if(map_array[l+1][s]==100)
    1cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cdc:	84 36       	cpi	r24, 0x64	; 100
    1cde:	91 05       	cpc	r25, r1
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <build_map+0xe4>
						{
							map_array[l+1][s]=(fi+1);
    1ce2:	1f 8f       	std	Y+31, r17	; 0x1f
    1ce4:	0e 8f       	std	Y+30, r16	; 0x1e
						}
					}
					if(dir_array[l][s][2]=='T' && dir_array[l][s-1][0]=='T')
    1ce6:	86 81       	ldd	r24, Z+6	; 0x06
    1ce8:	84 35       	cpi	r24, 0x54	; 84
    1cea:	71 f4       	brne	.+28     	; 0x1d08 <build_map+0x106>
    1cec:	80 81       	ld	r24, Z
    1cee:	84 35       	cpi	r24, 0x54	; 84
    1cf0:	59 f4       	brne	.+22     	; 0x1d08 <build_map+0x106>
					{
						if(map_array[l][s-1]==100)
    1cf2:	5e 96       	adiw	r26, 0x1e	; 30
    1cf4:	8d 91       	ld	r24, X+
    1cf6:	9c 91       	ld	r25, X
    1cf8:	5f 97       	sbiw	r26, 0x1f	; 31
    1cfa:	84 36       	cpi	r24, 0x64	; 100
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	21 f4       	brne	.+8      	; 0x1d08 <build_map+0x106>
						{
							map_array[l][s-1]=(fi+1);
    1d00:	5f 96       	adiw	r26, 0x1f	; 31
    1d02:	1c 93       	st	X, r17
    1d04:	0e 93       	st	-X, r16
    1d06:	5e 97       	sbiw	r26, 0x1e	; 30
						}
					}
					if(dir_array[l][s][3]=='T' && dir_array[l-1][s][1]=='T')
    1d08:	87 81       	ldd	r24, Z+7	; 0x07
    1d0a:	84 35       	cpi	r24, 0x54	; 84
    1d0c:	71 f4       	brne	.+28     	; 0x1d2a <build_map+0x128>
    1d0e:	fb 97       	sbiw	r30, 0x3b	; 59
    1d10:	80 81       	ld	r24, Z
    1d12:	fb 96       	adiw	r30, 0x3b	; 59
    1d14:	84 35       	cpi	r24, 0x54	; 84
    1d16:	49 f4       	brne	.+18     	; 0x1d2a <build_map+0x128>
					{
						if(map_array[l-1][s]==100)
    1d18:	8d 91       	ld	r24, X+
    1d1a:	9c 91       	ld	r25, X
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
    1d1e:	84 36       	cpi	r24, 0x64	; 100
    1d20:	91 05       	cpc	r25, r1
    1d22:	19 f4       	brne	.+6      	; 0x1d2a <build_map+0x128>
						{
							map_array[l-1][s]=(fi+1);
    1d24:	11 96       	adiw	r26, 0x01	; 1
    1d26:	1c 93       	st	X, r17
    1d28:	0e 93       	st	-X, r16
    1d2a:	12 96       	adiw	r26, 0x02	; 2
    1d2c:	34 96       	adiw	r30, 0x04	; 4
    1d2e:	22 96       	adiw	r28, 0x02	; 2
	{
		//l=x ,s=y
		
		for(int l=0; l<16; l++)
		{
			for(int s=0; s<16; s++)
    1d30:	ac 15       	cp	r26, r12
    1d32:	bd 05       	cpc	r27, r13
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <build_map+0x136>
    1d36:	b1 cf       	rjmp	.-158    	; 0x1c9a <build_map+0x98>
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<16; l++)
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	90 e2       	ldi	r25, 0x20	; 32
    1d3e:	c9 2e       	mov	r12, r25
    1d40:	d1 2c       	mov	r13, r1
    1d42:	ca 0e       	add	r12, r26
    1d44:	db 1e       	adc	r13, r27
    1d46:	60 31       	cpi	r22, 0x10	; 16
    1d48:	71 05       	cpc	r23, r1
    1d4a:	19 f1       	breq	.+70     	; 0x1d92 <build_map+0x190>
    1d4c:	db 01       	movw	r26, r22
    1d4e:	85 e0       	ldi	r24, 0x05	; 5
    1d50:	aa 0f       	add	r26, r26
    1d52:	bb 1f       	adc	r27, r27
    1d54:	8a 95       	dec	r24
    1d56:	e1 f7       	brne	.-8      	; 0x1d50 <build_map+0x14e>
    1d58:	ab 5d       	subi	r26, 0xDB	; 219
    1d5a:	be 4f       	sbci	r27, 0xFE	; 254
    1d5c:	9b 01       	movw	r18, r22
    1d5e:	f4 e0       	ldi	r31, 0x04	; 4
    1d60:	22 0f       	add	r18, r18
    1d62:	33 1f       	adc	r19, r19
    1d64:	fa 95       	dec	r31
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <build_map+0x15e>
    1d68:	88 27       	eor	r24, r24
    1d6a:	99 27       	eor	r25, r25
    1d6c:	82 1b       	sub	r24, r18
    1d6e:	93 0b       	sbc	r25, r19
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	ee 27       	eor	r30, r30
    1d7c:	ff 27       	eor	r31, r31
    1d7e:	e8 1b       	sub	r30, r24
    1d80:	f9 0b       	sbc	r31, r25
    1d82:	eb 5b       	subi	r30, 0xBB	; 187
    1d84:	fc 4f       	sbci	r31, 0xFC	; 252
    1d86:	e9 01       	movw	r28, r18
    1d88:	cc 0f       	add	r28, r28
    1d8a:	dd 1f       	adc	r29, r29
    1d8c:	c9 5b       	subi	r28, 0xB9	; 185
    1d8e:	de 4f       	sbci	r29, 0xFE	; 254
    1d90:	84 cf       	rjmp	.-248    	; 0x1c9a <build_map+0x98>
						}
					}
				}
			}
		}
		fi++;
    1d92:	08 94       	sec
    1d94:	e1 1c       	adc	r14, r1
    1d96:	f1 1c       	adc	r15, r1
		if(fi>50)
    1d98:	83 e3       	ldi	r24, 0x33	; 51
    1d9a:	e8 16       	cp	r14, r24
    1d9c:	f1 04       	cpc	r15, r1
    1d9e:	89 f5       	brne	.+98     	; 0x1e02 <build_map+0x200>
		{
		lcd_clear();
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_string("Broke build");
    1da8:	86 e7       	ldi	r24, 0x76	; 118
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		lcd_write_int_xy(0,1,start_x,2);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	61 e0       	ldi	r22, 0x01	; 1
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	a5 01       	movw	r20, r10
    1dba:	22 e0       	ldi	r18, 0x02	; 2
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(3,1,start_y,2);
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	a4 01       	movw	r20, r8
    1dcc:	22 e0       	ldi	r18, 0x02	; 2
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(8,1,destn_x,2);
    1dd4:	88 e0       	ldi	r24, 0x08	; 8
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	a3 01       	movw	r20, r6
    1dde:	22 e0       	ldi	r18, 0x02	; 2
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(11,1,destn_y,2);
    1de6:	8b e0       	ldi	r24, 0x0B	; 11
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	a2 01       	movw	r20, r4
    1df0:	22 e0       	ldi	r18, 0x02	; 2
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		delay_sec(2);
    1df8:	82 e0       	ldi	r24, 0x02	; 2
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    1e00:	10 c0       	rjmp	.+32     	; 0x1e22 <build_map+0x220>
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
    1e02:	fa 01       	movw	r30, r20
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	84 36       	cpi	r24, 0x64	; 100
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	51 f4       	brne	.+20     	; 0x1e22 <build_map+0x220>
    1e0e:	95 e4       	ldi	r25, 0x45	; 69
    1e10:	c9 2e       	mov	r12, r25
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	d9 2e       	mov	r13, r25
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	70 e0       	ldi	r23, 0x00	; 0
					}
					if(dir_array[l][s][3]=='T' && dir_array[l-1][s][1]=='T')
					{
						if(map_array[l-1][s]==100)
						{
							map_array[l-1][s]=(fi+1);
    1e1a:	87 01       	movw	r16, r14
    1e1c:	0f 5f       	subi	r16, 0xFF	; 255
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	95 cf       	rjmp	.-214    	; 0x1d4c <build_map+0x14a>
		lcd_write_int_xy(11,1,destn_y,2);
		delay_sec(2);
		break;
		}
	}
}
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
    1e32:	bf 90       	pop	r11
    1e34:	af 90       	pop	r10
    1e36:	9f 90       	pop	r9
    1e38:	8f 90       	pop	r8
    1e3a:	7f 90       	pop	r7
    1e3c:	6f 90       	pop	r6
    1e3e:	5f 90       	pop	r5
    1e40:	4f 90       	pop	r4
    1e42:	08 95       	ret

00001e44 <checkAndCorrectDirection>:
	bot_brake();
	//delay_millisec(500);
}

void checkAndCorrectDirection(int req_dir)
{
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	ec 01       	movw	r28, r24
	if(req_dir == 1)
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	39 f5       	brne	.+78     	; 0x1e9e <checkAndCorrectDirection+0x5a>
	{
		switch(dir)
    1e50:	80 91 1b 01 	lds	r24, 0x011B
    1e54:	90 91 1c 01 	lds	r25, 0x011C
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5c:	92 07       	cpc	r25, r18
    1e5e:	49 f0       	breq	.+18     	; 0x1e72 <checkAndCorrectDirection+0x2e>
    1e60:	82 30       	cpi	r24, 0x02	; 2
    1e62:	91 05       	cpc	r25, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <checkAndCorrectDirection+0x24>
    1e66:	57 c0       	rjmp	.+174    	; 0x1f16 <checkAndCorrectDirection+0xd2>
    1e68:	8e 5f       	subi	r24, 0xFE	; 254
    1e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <checkAndCorrectDirection+0x2c>
    1e6e:	a3 c0       	rjmp	.+326    	; 0x1fb6 <checkAndCorrectDirection+0x172>
    1e70:	7f c0       	rjmp	.+254    	; 0x1f70 <checkAndCorrectDirection+0x12c>
			case +2: turn_right();sense_of_directon();break;

			case -2:turn_left();sense_of_directon();break;

			case -1:
			if(dir_array[x_coordinate][y_coordinate][0]=='T')
    1e72:	e0 91 1d 01 	lds	r30, 0x011D
    1e76:	f0 91 1e 01 	lds	r31, 0x011E
    1e7a:	44 e0       	ldi	r20, 0x04	; 4
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	4a 95       	dec	r20
    1e82:	e1 f7       	brne	.-8      	; 0x1e7c <checkAndCorrectDirection+0x38>
    1e84:	80 91 1f 01 	lds	r24, 0x011F
    1e88:	90 91 20 01 	lds	r25, 0x0120
    1e8c:	e8 0f       	add	r30, r24
    1e8e:	f9 1f       	adc	r31, r25
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	eb 5b       	subi	r30, 0xBB	; 187
    1e9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e9c:	56 c0       	rjmp	.+172    	; 0x1f4a <checkAndCorrectDirection+0x106>
			

		}
	}

	else if(req_dir == 2)
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	39 f5       	brne	.+78     	; 0x1ef2 <checkAndCorrectDirection+0xae>
	{
		switch(dir)
    1ea4:	80 91 1b 01 	lds	r24, 0x011B
    1ea8:	90 91 1c 01 	lds	r25, 0x011C
    1eac:	2f ef       	ldi	r18, 0xFF	; 255
    1eae:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb0:	92 07       	cpc	r25, r18
    1eb2:	89 f1       	breq	.+98     	; 0x1f16 <checkAndCorrectDirection+0xd2>
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <checkAndCorrectDirection+0x78>
    1eba:	5a c0       	rjmp	.+180    	; 0x1f70 <checkAndCorrectDirection+0x12c>
    1ebc:	8e 5f       	subi	r24, 0xFE	; 254
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <checkAndCorrectDirection+0x80>
    1ec2:	79 c0       	rjmp	.+242    	; 0x1fb6 <checkAndCorrectDirection+0x172>
		{	
			case +1: turn_left();sense_of_directon();break;
			case -1:turn_right();sense_of_directon();break;
			case -2:
			if(dir_array[x_coordinate][y_coordinate][3]=='T')
    1ec4:	e0 91 1d 01 	lds	r30, 0x011D
    1ec8:	f0 91 1e 01 	lds	r31, 0x011E
    1ecc:	24 e0       	ldi	r18, 0x04	; 4
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	2a 95       	dec	r18
    1ed4:	e1 f7       	brne	.-8      	; 0x1ece <checkAndCorrectDirection+0x8a>
    1ed6:	80 91 1f 01 	lds	r24, 0x011F
    1eda:	90 91 20 01 	lds	r25, 0x0120
    1ede:	e8 0f       	add	r30, r24
    1ee0:	f9 1f       	adc	r31, r25
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	eb 5b       	subi	r30, 0xBB	; 187
    1eec:	fc 4f       	sbci	r31, 0xFC	; 252
    1eee:	83 81       	ldd	r24, Z+3	; 0x03
    1ef0:	58 c0       	rjmp	.+176    	; 0x1fa2 <checkAndCorrectDirection+0x15e>
				dir = 2;
			}
		}
	}

	else if(req_dir == -1)
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	cf 3f       	cpi	r28, 0xFF	; 255
    1ef6:	d8 07       	cpc	r29, r24
    1ef8:	51 f5       	brne	.+84     	; 0x1f4e <checkAndCorrectDirection+0x10a>
	{
		switch(dir)
    1efa:	80 91 1b 01 	lds	r24, 0x011B
    1efe:	90 91 1c 01 	lds	r25, 0x011C
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	61 f0       	breq	.+24     	; 0x1f20 <checkAndCorrectDirection+0xdc>
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	89 f1       	breq	.+98     	; 0x1f70 <checkAndCorrectDirection+0x12c>
    1f0e:	8e 5f       	subi	r24, 0xFE	; 254
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <checkAndCorrectDirection+0xd2>
    1f14:	50 c0       	rjmp	.+160    	; 0x1fb6 <checkAndCorrectDirection+0x172>
		{	
			case +2: turn_left();sense_of_directon();break;
		
			case -2:turn_right();sense_of_directon();break;
    1f16:	0e 94 9b 05 	call	0xb36	; 0xb36 <turn_right>
    1f1a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <sense_of_directon>
    1f1e:	4b c0       	rjmp	.+150    	; 0x1fb6 <checkAndCorrectDirection+0x172>

			case 1:
			if(dir_array[x_coordinate][y_coordinate][2]=='T')
    1f20:	e0 91 1d 01 	lds	r30, 0x011D
    1f24:	f0 91 1e 01 	lds	r31, 0x011E
    1f28:	84 e0       	ldi	r24, 0x04	; 4
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	8a 95       	dec	r24
    1f30:	e1 f7       	brne	.-8      	; 0x1f2a <checkAndCorrectDirection+0xe6>
    1f32:	80 91 1f 01 	lds	r24, 0x011F
    1f36:	90 91 20 01 	lds	r25, 0x0120
    1f3a:	e8 0f       	add	r30, r24
    1f3c:	f9 1f       	adc	r31, r25
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	ee 0f       	add	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	e9 5b       	subi	r30, 0xB9	; 185
    1f48:	fc 4f       	sbci	r31, 0xFC	; 252
    1f4a:	80 81       	ld	r24, Z
    1f4c:	2a c0       	rjmp	.+84     	; 0x1fa2 <checkAndCorrectDirection+0x15e>
			default:break;
		}
	}


	else if(req_dir == -2)
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	ce 3f       	cpi	r28, 0xFE	; 254
    1f52:	d8 07       	cpc	r29, r24
    1f54:	81 f5       	brne	.+96     	; 0x1fb6 <checkAndCorrectDirection+0x172>
	{
		switch(dir)
    1f56:	80 91 1b 01 	lds	r24, 0x011B
    1f5a:	90 91 1c 01 	lds	r25, 0x011C
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	c9 f2       	breq	.-78     	; 0x1f16 <checkAndCorrectDirection+0xd2>
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	91 05       	cpc	r25, r1
    1f68:	31 f0       	breq	.+12     	; 0x1f76 <checkAndCorrectDirection+0x132>
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6e:	19 f5       	brne	.+70     	; 0x1fb6 <checkAndCorrectDirection+0x172>
		{	
			case +1:turn_right();sense_of_directon();break; 
				
			case -1: turn_left();sense_of_directon();break;
    1f70:	0e 94 65 05 	call	0xaca	; 0xaca <turn_left>
    1f74:	d2 cf       	rjmp	.-92     	; 0x1f1a <checkAndCorrectDirection+0xd6>
					
			case 2:
			if(dir_array[x_coordinate][y_coordinate][1]=='T')
    1f76:	e0 91 1d 01 	lds	r30, 0x011D
    1f7a:	f0 91 1e 01 	lds	r31, 0x011E
    1f7e:	a4 e0       	ldi	r26, 0x04	; 4
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	aa 95       	dec	r26
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <checkAndCorrectDirection+0x13c>
    1f88:	80 91 1f 01 	lds	r24, 0x011F
    1f8c:	90 91 20 01 	lds	r25, 0x0120
    1f90:	e8 0f       	add	r30, r24
    1f92:	f9 1f       	adc	r31, r25
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	eb 5b       	subi	r30, 0xBB	; 187
    1f9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa0:	81 81       	ldd	r24, Z+1	; 0x01
    1fa2:	84 35       	cpi	r24, 0x54	; 84
    1fa4:	11 f4       	brne	.+4      	; 0x1faa <checkAndCorrectDirection+0x166>
			{
				turn_right();
    1fa6:	0e 94 9b 05 	call	0xb36	; 0xb36 <turn_right>
				turn_right();
				dir = -2;
			}
			else
			{
				turn_right();
    1faa:	0e 94 9b 05 	call	0xb36	; 0xb36 <turn_right>
				dir = -2;
    1fae:	d0 93 1c 01 	sts	0x011C, r29
    1fb2:	c0 93 1b 01 	sts	0x011B, r28
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1fb6:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1fb8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1fba:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1fbc:	af 9a       	sbi	0x15, 7	; 21

		}
	}
	bot_brake();
	//delay_sec(1);
}
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <go_to_coordinate>:
		}
	}
}

void go_to_coordinate(int next_x, int next_y)
{
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	ec 01       	movw	r28, r24
    1fce:	8b 01       	movw	r16, r22
	if (next_x > x_coordinate)
    1fd0:	80 91 1d 01 	lds	r24, 0x011D
    1fd4:	90 91 1e 01 	lds	r25, 0x011E
    1fd8:	8c 17       	cp	r24, r28
    1fda:	9d 07       	cpc	r25, r29
    1fdc:	9c f4       	brge	.+38     	; 0x2004 <go_to_coordinate+0x40>
	{	
		checkAndCorrectDirection(1);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <checkAndCorrectDirection>
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <go_to_coordinate+0x28>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    1fe8:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
void go_to_coordinate(int next_x, int next_y)
{
	if (next_x > x_coordinate)
	{	
		checkAndCorrectDirection(1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    1fec:	cd 9b       	sbis	0x19, 5	; 25
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <go_to_coordinate+0x36>
    1ff0:	cf 99       	sbic	0x19, 7	; 25
    1ff2:	fa cf       	rjmp	.-12     	; 0x1fe8 <go_to_coordinate+0x24>
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <go_to_coordinate+0x36>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    1ff6:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    1ffa:	cc 9b       	sbis	0x19, 4	; 25
    1ffc:	4c c0       	rjmp	.+152    	; 0x2096 <go_to_coordinate+0xd2>
    1ffe:	87 99       	sbic	0x10, 7	; 16
    2000:	fa cf       	rjmp	.-12     	; 0x1ff6 <go_to_coordinate+0x32>
    2002:	49 c0       	rjmp	.+146    	; 0x2096 <go_to_coordinate+0xd2>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
    2004:	c8 17       	cp	r28, r24
    2006:	d9 07       	cpc	r29, r25
    2008:	9c f4       	brge	.+38     	; 0x2030 <go_to_coordinate+0x6c>
	{
		checkAndCorrectDirection(-1);
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	9f ef       	ldi	r25, 0xFF	; 255
    200e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <checkAndCorrectDirection>
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <go_to_coordinate+0x54>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    2014:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
	{
		checkAndCorrectDirection(-1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    2018:	cd 9b       	sbis	0x19, 5	; 25
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <go_to_coordinate+0x62>
    201c:	cf 99       	sbic	0x19, 7	; 25
    201e:	fa cf       	rjmp	.-12     	; 0x2014 <go_to_coordinate+0x50>
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <go_to_coordinate+0x62>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    2022:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    2026:	cc 9b       	sbis	0x19, 4	; 25
    2028:	36 c0       	rjmp	.+108    	; 0x2096 <go_to_coordinate+0xd2>
    202a:	87 99       	sbic	0x10, 7	; 16
    202c:	fa cf       	rjmp	.-12     	; 0x2022 <go_to_coordinate+0x5e>
    202e:	33 c0       	rjmp	.+102    	; 0x2096 <go_to_coordinate+0xd2>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}

	else if (next_y>y_coordinate)
    2030:	80 91 1f 01 	lds	r24, 0x011F
    2034:	90 91 20 01 	lds	r25, 0x0120
    2038:	86 17       	cp	r24, r22
    203a:	97 07       	cpc	r25, r23
    203c:	9c f4       	brge	.+38     	; 0x2064 <go_to_coordinate+0xa0>
	{	
		checkAndCorrectDirection(2);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <checkAndCorrectDirection>
    2046:	02 c0       	rjmp	.+4      	; 0x204c <go_to_coordinate+0x88>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    2048:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}

	else if (next_y>y_coordinate)
	{	
		checkAndCorrectDirection(2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    204c:	cd 9b       	sbis	0x19, 5	; 25
    204e:	05 c0       	rjmp	.+10     	; 0x205a <go_to_coordinate+0x96>
    2050:	cf 99       	sbic	0x19, 7	; 25
    2052:	fa cf       	rjmp	.-12     	; 0x2048 <go_to_coordinate+0x84>
    2054:	02 c0       	rjmp	.+4      	; 0x205a <go_to_coordinate+0x96>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    2056:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    205a:	cc 9b       	sbis	0x19, 4	; 25
    205c:	1c c0       	rjmp	.+56     	; 0x2096 <go_to_coordinate+0xd2>
    205e:	87 99       	sbic	0x10, 7	; 16
    2060:	fa cf       	rjmp	.-12     	; 0x2056 <go_to_coordinate+0x92>
    2062:	19 c0       	rjmp	.+50     	; 0x2096 <go_to_coordinate+0xd2>
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}
	else if(next_y<y_coordinate)
    2064:	68 17       	cp	r22, r24
    2066:	79 07       	cpc	r23, r25
    2068:	04 f5       	brge	.+64     	; 0x20aa <go_to_coordinate+0xe6>
	{
		right=0;
    206a:	10 92 46 07 	sts	0x0746, r1
    206e:	10 92 45 07 	sts	0x0745, r1
		checkAndCorrectDirection(-2);
    2072:	8e ef       	ldi	r24, 0xFE	; 254
    2074:	9f ef       	ldi	r25, 0xFF	; 255
    2076:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <checkAndCorrectDirection>
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <go_to_coordinate+0xbc>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    207c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
	}
	else if(next_y<y_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    2080:	cd 9b       	sbis	0x19, 5	; 25
    2082:	05 c0       	rjmp	.+10     	; 0x208e <go_to_coordinate+0xca>
    2084:	cf 99       	sbic	0x19, 7	; 25
    2086:	fa cf       	rjmp	.-12     	; 0x207c <go_to_coordinate+0xb8>
    2088:	02 c0       	rjmp	.+4      	; 0x208e <go_to_coordinate+0xca>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    208a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    208e:	cc 9b       	sbis	0x19, 4	; 25
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <go_to_coordinate+0xd2>
    2092:	87 99       	sbic	0x10, 7	; 16
    2094:	fa cf       	rjmp	.-12     	; 0x208a <go_to_coordinate+0xc6>
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2096:	8f e8       	ldi	r24, 0x8F	; 143
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	99 bd       	out	0x29, r25	; 41
    209c:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    209e:	9b bd       	out	0x2b, r25	; 43
    20a0:	8a bd       	out	0x2a, r24	; 42
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    20a2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    20a4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    20a6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    20a8:	af 9a       	sbi	0x15, 7	; 21
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}	
	x_coordinate = next_x;               ///good work
    20aa:	d0 93 1e 01 	sts	0x011E, r29
    20ae:	c0 93 1d 01 	sts	0x011D, r28
	y_coordinate = next_y;
    20b2:	10 93 20 01 	sts	0x0120, r17
    20b6:	00 93 1f 01 	sts	0x011F, r16
	lcd_clear();
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,1,x_coordinate,2);
    20c2:	40 91 1d 01 	lds	r20, 0x011D
    20c6:	50 91 1e 01 	lds	r21, 0x011E
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	22 e0       	ldi	r18, 0x02	; 2
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(5,1,y_coordinate,2);
    20da:	40 91 1f 01 	lds	r20, 0x011F
    20de:	50 91 20 01 	lds	r21, 0x0120
    20e2:	85 e0       	ldi	r24, 0x05	; 5
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	61 e0       	ldi	r22, 0x01	; 1
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	22 e0       	ldi	r18, 0x02	; 2
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(3,0,irc,5);
    20f2:	40 91 31 01 	lds	r20, 0x0131
    20f6:	50 91 32 01 	lds	r21, 0x0132
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	25 e0       	ldi	r18, 0x05	; 5
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    210a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    210c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    210e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2110:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	//delay_millisec(500);
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <print_path>:
		}
	}
}

void print_path()
{
    211c:	cf 92       	push	r12
    211e:	df 92       	push	r13
    2120:	ef 92       	push	r14
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
	int a=0,b=0;
	lcd_clear();
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
    2134:	0b e4       	ldi	r16, 0x4B	; 75
    2136:	17 e0       	ldi	r17, 0x07	; 7
    2138:	c0 e0       	ldi	r28, 0x00	; 0
    213a:	d0 e0       	ldi	r29, 0x00	; 0
    213c:	ee 24       	eor	r14, r14
    213e:	ff 24       	eor	r15, r15
    2140:	cc 24       	eor	r12, r12
    2142:	dd 24       	eor	r13, r13
    2144:	21 c0       	rjmp	.+66     	; 0x2188 <print_path+0x6c>
	for(int i = 0; i<=ipl;i++)
	{
		lcd_write_int_xy(a,b, path_array[i][0],2);
    2146:	f8 01       	movw	r30, r16
    2148:	40 81       	ld	r20, Z
    214a:	51 81       	ldd	r21, Z+1	; 0x01
    214c:	ce 01       	movw	r24, r28
    214e:	b7 01       	movw	r22, r14
    2150:	22 e0       	ldi	r18, 0x02	; 2
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		a+=2;
		lcd_write_int_xy(a,b, path_array[i][1],2);
    2158:	f8 01       	movw	r30, r16
    215a:	42 81       	ldd	r20, Z+2	; 0x02
    215c:	53 81       	ldd	r21, Z+3	; 0x03
    215e:	ce 01       	movw	r24, r28
    2160:	02 96       	adiw	r24, 0x02	; 2
    2162:	b7 01       	movw	r22, r14
    2164:	22 e0       	ldi	r18, 0x02	; 2
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		a+=3;
    216c:	25 96       	adiw	r28, 0x05	; 5
		if(a>13)
    216e:	ce 30       	cpi	r28, 0x0E	; 14
    2170:	d1 05       	cpc	r29, r1
    2172:	2c f0       	brlt	.+10     	; 0x217e <print_path+0x62>
    2174:	c0 e0       	ldi	r28, 0x00	; 0
    2176:	d0 e0       	ldi	r29, 0x00	; 0
    2178:	51 e0       	ldi	r21, 0x01	; 1
    217a:	e5 2e       	mov	r14, r21
    217c:	f1 2c       	mov	r15, r1

void print_path()
{
	int a=0,b=0;
	lcd_clear();
	for(int i = 0; i<=ipl;i++)
    217e:	08 94       	sec
    2180:	c1 1c       	adc	r12, r1
    2182:	d1 1c       	adc	r13, r1
    2184:	0c 5f       	subi	r16, 0xFC	; 252
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	80 91 3f 01 	lds	r24, 0x013F
    218c:	90 91 40 01 	lds	r25, 0x0140
    2190:	8c 15       	cp	r24, r12
    2192:	9d 05       	cpc	r25, r13
    2194:	c4 f6       	brge	.-80     	; 0x2146 <print_path+0x2a>
		{
			b=1;
			a=0;
		}
	}
}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	df 90       	pop	r13
    21a4:	cf 90       	pop	r12
    21a6:	08 95       	ret

000021a8 <right_junc_check>:
			}
		}
	}
}
void right_junc_check()
{	
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    21b4:	8f e8       	ldi	r24, 0x8F	; 143
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	9b bd       	out	0x2b, r25	; 43
    21ba:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    21bc:	99 bd       	out	0x29, r25	; 41
    21be:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    21c0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    21c2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    21c4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    21c6:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	// lcd_clear();
	// lcd_write_int_xy(0,0,irc,5);
	//delay_sec(1);
	
	lcd_clear();
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	if(irc>2000)
    21d0:	20 91 31 01 	lds	r18, 0x0131
    21d4:	30 91 32 01 	lds	r19, 0x0132
    21d8:	87 e0       	ldi	r24, 0x07	; 7
    21da:	21 3d       	cpi	r18, 0xD1	; 209
    21dc:	38 07       	cpc	r19, r24
    21de:	1c f0       	brlt	.+6      	; 0x21e6 <right_junc_check+0x3e>
	{
		// lcd_write_string("Sixty");
		
		Coordinates_changed_by = 2;
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <right_junc_check+0x42>
	}
	else
	{
		// lcd_write_string("Thirty");
		Coordinates_changed_by = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	90 93 36 01 	sts	0x0136, r25
    21ee:	80 93 35 01 	sts	0x0135, r24
	}

	
	//delay_sec(2);
	if(irc==0)
    21f2:	23 2b       	or	r18, r19
    21f4:	21 f4       	brne	.+8      	; 0x21fe <right_junc_check+0x56>
	{
		Coordinates_changed_by = 0;
    21f6:	10 92 36 01 	sts	0x0136, r1
    21fa:	10 92 35 01 	sts	0x0135, r1
	}
	update_coordinates();
    21fe:	0e 94 0d 07 	call	0xe1a	; 0xe1a <update_coordinates>
	lcountPrev = lcount;
    2202:	80 91 29 01 	lds	r24, 0x0129
    2206:	90 91 2a 01 	lds	r25, 0x012A
    220a:	90 93 2e 01 	sts	0x012E, r25
    220e:	80 93 2d 01 	sts	0x012D, r24
    2212:	04 c0       	rjmp	.+8      	; 0x221c <right_junc_check+0x74>
	while(bit_is_set(PIND, 7))
	{
		line_track_new();
    2214:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		left_count();
    2218:	0e 94 9a 04 	call	0x934	; 0x934 <left_count>
	{
		Coordinates_changed_by = 0;
	}
	update_coordinates();
	lcountPrev = lcount;
	while(bit_is_set(PIND, 7))
    221c:	87 99       	sbic	0x10, 7	; 16
    221e:	fa cf       	rjmp	.-12     	; 0x2214 <right_junc_check+0x6c>
	{
		line_track_new();
		left_count();
	}
	if(repeat<=2)
    2220:	80 91 3d 01 	lds	r24, 0x013D
    2224:	90 91 3e 01 	lds	r25, 0x013E
    2228:	03 97       	sbiw	r24, 0x03	; 3
    222a:	0c f0       	brlt	.+2      	; 0x222e <right_junc_check+0x86>
    222c:	c9 c1       	rjmp	.+914    	; 0x25c0 <right_junc_check+0x418>
	{
		
		//End Condition
		if(bit_is_clear(PINA,6) && bit_is_clear(PIND,6) && bit_is_clear(PINA,5) && bit_is_clear(PINA,7))
    222e:	ce 99       	sbic	0x19, 6	; 25
    2230:	04 c1       	rjmp	.+520    	; 0x243a <right_junc_check+0x292>
    2232:	86 99       	sbic	0x10, 6	; 16
    2234:	02 c1       	rjmp	.+516    	; 0x243a <right_junc_check+0x292>
    2236:	cd 99       	sbic	0x19, 5	; 25
    2238:	00 c1       	rjmp	.+512    	; 0x243a <right_junc_check+0x292>
    223a:	cf 99       	sbic	0x19, 7	; 25
    223c:	fe c0       	rjmp	.+508    	; 0x243a <right_junc_check+0x292>
		{
			int endx = x_coordinate, endy = y_coordinate;
    223e:	00 91 1d 01 	lds	r16, 0x011D
    2242:	10 91 1e 01 	lds	r17, 0x011E
    2246:	c0 91 1f 01 	lds	r28, 0x011F
    224a:	d0 91 20 01 	lds	r29, 0x0120
			update_array('F','F','T','F');
    224e:	86 e4       	ldi	r24, 0x46	; 70
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	66 e4       	ldi	r22, 0x46	; 70
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	44 e5       	ldi	r20, 0x54	; 84
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	26 e4       	ldi	r18, 0x46	; 70
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
			lcd_clear();
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    226a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    226c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    226e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2270:	af 9a       	sbi	0x15, 7	; 21
			//set_pwm1a(399);
			//set_pwm1b(399);
			bot_brake();
			flick();
    2272:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
			//delay_sec(1);
			end_zone_uturn();
    2276:	0e 94 27 05 	call	0xa4e	; 0xa4e <end_zone_uturn>
			sense_of_directon();
    227a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <sense_of_directon>
			fill_missed_array();
    227e:	0e 94 17 09 	call	0x122e	; 0x122e <fill_missed_array>
			coordinates_tobe_reached();
    2282:	0e 94 b3 09 	call	0x1366	; 0x1366 <coordinates_tobe_reached>
			
			lcd_clear();
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			
			lcd_write_string_xy(0,0,"mx: ");
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	42 e8       	ldi	r20, 0x82	; 130
    2298:	50 e0       	ldi	r21, 0x00	; 0
    229a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,0,mx,2);
    229e:	40 91 37 01 	lds	r20, 0x0137
    22a2:	50 91 38 01 	lds	r21, 0x0138
    22a6:	84 e0       	ldi	r24, 0x04	; 4
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	22 e0       	ldi	r18, 0x02	; 2
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,0,"my: ");
    22b6:	87 e0       	ldi	r24, 0x07	; 7
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	47 e8       	ldi	r20, 0x87	; 135
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,0,my,2);
    22c6:	40 91 39 01 	lds	r20, 0x0139
    22ca:	50 91 3a 01 	lds	r21, 0x013A
    22ce:	8b e0       	ldi	r24, 0x0B	; 11
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	22 e0       	ldi	r18, 0x02	; 2
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(0,1,"x: ");
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	61 e0       	ldi	r22, 0x01	; 1
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	4c e8       	ldi	r20, 0x8C	; 140
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,1,x_coordinate,2);
    22ee:	40 91 1d 01 	lds	r20, 0x011D
    22f2:	50 91 1e 01 	lds	r21, 0x011E
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	22 e0       	ldi	r18, 0x02	; 2
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,1,"y: ");
    2306:	87 e0       	ldi	r24, 0x07	; 7
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	61 e0       	ldi	r22, 0x01	; 1
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	40 e9       	ldi	r20, 0x90	; 144
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,1,y_coordinate,2);
    2316:	40 91 1f 01 	lds	r20, 0x011F
    231a:	50 91 20 01 	lds	r21, 0x0120
    231e:	8b e0       	ldi	r24, 0x0B	; 11
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	22 e0       	ldi	r18, 0x02	; 2
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			//delay_sec(5);
			if(mx!=0 && my!=0)
    232e:	80 91 37 01 	lds	r24, 0x0137
    2332:	90 91 38 01 	lds	r25, 0x0138
    2336:	89 2b       	or	r24, r25
    2338:	41 f0       	breq	.+16     	; 0x234a <right_junc_check+0x1a2>
    233a:	80 91 39 01 	lds	r24, 0x0139
    233e:	90 91 3a 01 	lds	r25, 0x013A
    2342:	89 2b       	or	r24, r25
    2344:	11 f0       	breq	.+4      	; 0x234a <right_junc_check+0x1a2>
			{
				map_all();
    2346:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <map_all>
			}
			x_coordinate = 7;
    234a:	87 e0       	ldi	r24, 0x07	; 7
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	90 93 1e 01 	sts	0x011E, r25
    2352:	80 93 1d 01 	sts	0x011D, r24
			y_coordinate = 7;
    2356:	90 93 20 01 	sts	0x0120, r25
    235a:	80 93 1f 01 	sts	0x011F, r24
			dir = 2;
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	90 93 1c 01 	sts	0x011C, r25
    2366:	80 93 1b 01 	sts	0x011B, r24
			
			
			lcd_write_string("Press Any Key");
    236a:	84 e9       	ldi	r24, 0x94	; 148
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2372:	82 99       	sbic	0x10, 2	; 16
    2374:	17 c1       	rjmp	.+558    	; 0x25a4 <right_junc_check+0x3fc>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					build_map(7,7,endx,endy);
    2376:	87 e0       	ldi	r24, 0x07	; 7
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	a8 01       	movw	r20, r16
    2380:	9e 01       	movw	r18, r28
    2382:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <build_map>
					get_path();
    2386:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <get_path>
    238a:	6b e4       	ldi	r22, 0x4B	; 75
    238c:	e6 2e       	mov	r14, r22
    238e:	67 e0       	ldi	r22, 0x07	; 7
    2390:	f6 2e       	mov	r15, r22
    2392:	87 01       	movw	r16, r14
    2394:	c0 e0       	ldi	r28, 0x00	; 0
    2396:	d0 e0       	ldi	r29, 0x00	; 0
					unsigned char eeprom_addr=0x0000;
					for(int i=0;i<15;i++)
					{
						eeprom_write_word(eeprom_addr,path_array[i][0]);
    2398:	f8 01       	movw	r30, r16
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	ce 01       	movw	r24, r28
    23a0:	0e 94 c7 18 	call	0x318e	; 0x318e <__eewr_word_m32>
						eeprom_addr+=2;
						eeprom_write_word(eeprom_addr,path_array[i][1]);
    23a4:	f8 01       	movw	r30, r16
    23a6:	62 81       	ldd	r22, Z+2	; 0x02
    23a8:	73 81       	ldd	r23, Z+3	; 0x03
    23aa:	ce 01       	movw	r24, r28
    23ac:	02 96       	adiw	r24, 0x02	; 2
    23ae:	0e 94 c7 18 	call	0x318e	; 0x318e <__eewr_word_m32>
    23b2:	0c 5f       	subi	r16, 0xFC	; 252
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	24 96       	adiw	r28, 0x04	; 4
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					build_map(7,7,endx,endy);
					get_path();
					unsigned char eeprom_addr=0x0000;
					for(int i=0;i<15;i++)
    23b8:	cc 33       	cpi	r28, 0x3C	; 60
    23ba:	d1 05       	cpc	r29, r1
    23bc:	69 f7       	brne	.-38     	; 0x2398 <right_junc_check+0x1f0>
						eeprom_write_word(eeprom_addr,path_array[i][0]);
						eeprom_addr+=2;
						eeprom_write_word(eeprom_addr,path_array[i][1]);
						eeprom_addr+=2;
					}
					lcd_clear();
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Stored In EP");
    23c6:	82 ea       	ldi	r24, 0xA2	; 162
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					right = 0;
    23d6:	10 92 46 07 	sts	0x0746, r1
    23da:	10 92 45 07 	sts	0x0745, r1
					print_path();
    23de:	0e 94 8e 10 	call	0x211c	; 0x211c <print_path>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    23e2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    23e4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    23e6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    23e8:	af 9a       	sbi	0x15, 7	; 21
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    23ea:	82 99       	sbic	0x10, 2	; 16
    23ec:	e2 c0       	rjmp	.+452    	; 0x25b2 <right_junc_check+0x40a>
					while(1)
					{
						
						if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
						{	
							lcd_clear();
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
							delay_sec(1);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
							break;
						}
					}
					for(int i=0; i<15; i++)
					{
						if(path_array[i][0]==0 && path_array[i][1]==0)
    23fe:	f7 01       	movw	r30, r14
    2400:	20 81       	ld	r18, Z
    2402:	31 81       	ldd	r19, Z+1	; 0x01
    2404:	21 15       	cp	r18, r1
    2406:	31 05       	cpc	r19, r1
    2408:	21 f4       	brne	.+8      	; 0x2412 <right_junc_check+0x26a>
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	89 2b       	or	r24, r25
    2410:	79 f0       	breq	.+30     	; 0x2430 <right_junc_check+0x288>
						{
							break;
						}
						
						go_to_coordinate(path_array[i][0], path_array[i][1]);
    2412:	f7 01       	movw	r30, r14
    2414:	62 81       	ldd	r22, Z+2	; 0x02
    2416:	73 81       	ldd	r23, Z+3	; 0x03
    2418:	c9 01       	movw	r24, r18
    241a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <go_to_coordinate>
    241e:	84 e0       	ldi	r24, 0x04	; 4
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	e8 0e       	add	r14, r24
    2424:	f9 1e       	adc	r15, r25
							lcd_clear();
							delay_sec(1);
							break;
						}
					}
					for(int i=0; i<15; i++)
    2426:	97 e8       	ldi	r25, 0x87	; 135
    2428:	e9 16       	cp	r14, r25
    242a:	97 e0       	ldi	r25, 0x07	; 7
    242c:	f9 06       	cpc	r15, r25
    242e:	39 f7       	brne	.-50     	; 0x23fe <right_junc_check+0x256>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_stop(void)
{
 MOTOR1A=0;
    2430:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
    2432:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
    2434:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
    2436:	af 98       	cbi	0x15, 7	; 21
    2438:	fb cf       	rjmp	.-10     	; 0x2430 <right_junc_check+0x288>
				}

			}
			
		}
		if(bit_is_clear(PINA,6) || bit_is_clear(PIND,6))
    243a:	ce 9b       	sbis	0x19, 6	; 25
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <right_junc_check+0x29a>
    243e:	86 99       	sbic	0x10, 6	; 16
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <right_junc_check+0x2a8>
		{
			straight = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	90 93 2c 01 	sts	0x012C, r25
    244a:	80 93 2b 01 	sts	0x012B, r24
    244e:	04 c0       	rjmp	.+8      	; 0x2458 <right_junc_check+0x2b0>
		}
		else
		{
			straight = 0;
    2450:	10 92 2c 01 	sts	0x012C, r1
    2454:	10 92 2b 01 	sts	0x012B, r1
		}
		
		
		turn_right();						////actual turn
    2458:	0e 94 9b 05 	call	0xb36	; 0xb36 <turn_right>
		
		l = 0;
    245c:	10 92 28 01 	sts	0x0128, r1
    2460:	10 92 27 01 	sts	0x0127, r1
}
void bot_brake(void)
{
MOTOR1A=1;
    2464:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2466:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2468:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    246a:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		//delay_millisec(100);
		flag1 = 0;
    246c:	10 92 30 01 	sts	0x0130, r1
    2470:	10 92 2f 01 	sts	0x012F, r1
		irc = 0;
    2474:	10 92 32 01 	sts	0x0132, r1
    2478:	10 92 31 01 	sts	0x0131, r1
		temp = lcount - lcountPrev;
    247c:	20 91 29 01 	lds	r18, 0x0129
    2480:	30 91 2a 01 	lds	r19, 0x012A
    2484:	80 91 2d 01 	lds	r24, 0x012D
    2488:	90 91 2e 01 	lds	r25, 0x012E
    248c:	28 1b       	sub	r18, r24
    248e:	39 0b       	sbc	r19, r25
    2490:	30 93 34 01 	sts	0x0134, r19
    2494:	20 93 33 01 	sts	0x0133, r18
		//delay_millisec(2000);
		// lcd_clear();
		
		//delay_sec(2);
		//lcd_clear();
		if(straight==1 && temp==1)
    2498:	80 91 2b 01 	lds	r24, 0x012B
    249c:	90 91 2c 01 	lds	r25, 0x012C
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	91 05       	cpc	r25, r1
    24a4:	e9 f4       	brne	.+58     	; 0x24e0 <right_junc_check+0x338>
    24a6:	21 30       	cpi	r18, 0x01	; 1
    24a8:	31 05       	cpc	r19, r1
    24aa:	09 f0       	breq	.+2      	; 0x24ae <right_junc_check+0x306>
    24ac:	53 c0       	rjmp	.+166    	; 0x2554 <right_junc_check+0x3ac>
		{
			lcd_write_string_xy(0,1,"|- Detected");
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	61 e0       	ldi	r22, 0x01	; 1
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	4f ea       	ldi	r20, 0xAF	; 175
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('T','T','T','F');
    24be:	84 e5       	ldi	r24, 0x54	; 84
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	64 e5       	ldi	r22, 0x54	; 84
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	44 e5       	ldi	r20, 0x54	; 84
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	26 e4       	ldi	r18, 0x46	; 70
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
			lcd_write_string_xy(4,0,"TTTF");
    24d2:	84 e0       	ldi	r24, 0x04	; 4
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	4b eb       	ldi	r20, 0xBB	; 187
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	55 c0       	rjmp	.+170    	; 0x258a <right_junc_check+0x3e2>
		} 
		else if(straight==0 && temp==1)
    24e0:	89 2b       	or	r24, r25
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <right_junc_check+0x33e>
    24e4:	54 c0       	rjmp	.+168    	; 0x258e <right_junc_check+0x3e6>
    24e6:	21 30       	cpi	r18, 0x01	; 1
    24e8:	31 05       	cpc	r19, r1
    24ea:	c9 f4       	brne	.+50     	; 0x251e <right_junc_check+0x376>
		{
			lcd_write_string_xy(0,1,"T Detected");
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	40 ec       	ldi	r20, 0xC0	; 192
    24f6:	50 e0       	ldi	r21, 0x00	; 0
    24f8:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('F','T','T','T');
    24fc:	86 e4       	ldi	r24, 0x46	; 70
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	64 e5       	ldi	r22, 0x54	; 84
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	44 e5       	ldi	r20, 0x54	; 84
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	24 e5       	ldi	r18, 0x54	; 84
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
			lcd_write_string_xy(4,0,"FTTT");
    2510:	84 e0       	ldi	r24, 0x04	; 4
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	4b ec       	ldi	r20, 0xCB	; 203
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	36 c0       	rjmp	.+108    	; 0x258a <right_junc_check+0x3e2>
		}
		else if(straight==0 && temp==0)
    251e:	23 2b       	or	r18, r19
    2520:	b1 f5       	brne	.+108    	; 0x258e <right_junc_check+0x3e6>
		{
			lcd_write_string_xy(0,1,"L Detected");
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	40 ed       	ldi	r20, 0xD0	; 208
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('F','T','T','F');
    2532:	86 e4       	ldi	r24, 0x46	; 70
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	64 e5       	ldi	r22, 0x54	; 84
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	44 e5       	ldi	r20, 0x54	; 84
    253c:	50 e0       	ldi	r21, 0x00	; 0
    253e:	26 e4       	ldi	r18, 0x46	; 70
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
			lcd_write_string_xy(4,0,"FTTF");
    2546:	84 e0       	ldi	r24, 0x04	; 4
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	4b ed       	ldi	r20, 0xDB	; 219
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	1b c0       	rjmp	.+54     	; 0x258a <right_junc_check+0x3e2>
		}
		else if(straight==1 && temp==2)
    2554:	22 30       	cpi	r18, 0x02	; 2
    2556:	31 05       	cpc	r19, r1
    2558:	d1 f4       	brne	.+52     	; 0x258e <right_junc_check+0x3e6>
		{
			lcd_write_string_xy(0,1,"+ Detected");
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	40 ee       	ldi	r20, 0xE0	; 224
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			update_array('T','T','T','T');
    256a:	84 e5       	ldi	r24, 0x54	; 84
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	64 e5       	ldi	r22, 0x54	; 84
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	44 e5       	ldi	r20, 0x54	; 84
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	24 e5       	ldi	r18, 0x54	; 84
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
			lcd_write_string_xy(4,0,"TTTT");
    257e:	84 e0       	ldi	r24, 0x04	; 4
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	70 e0       	ldi	r23, 0x00	; 0
    2586:	4b ee       	ldi	r20, 0xEB	; 235
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		}
		delay_millisec(1000);
    258e:	88 ee       	ldi	r24, 0xE8	; 232
    2590:	93 e0       	ldi	r25, 0x03	; 3
    2592:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		temp = 0;
    2596:	10 92 34 01 	sts	0x0134, r1
    259a:	10 92 33 01 	sts	0x0133, r1
		sense_of_directon();
    259e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <sense_of_directon>
    25a2:	0e c0       	rjmp	.+28     	; 0x25c0 <right_junc_check+0x418>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    25a4:	80 9b       	sbis	0x10, 0	; 16
    25a6:	e7 ce       	rjmp	.-562    	; 0x2376 <right_junc_check+0x1ce>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    25a8:	81 9b       	sbis	0x10, 1	; 16
    25aa:	e5 ce       	rjmp	.-566    	; 0x2376 <right_junc_check+0x1ce>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    25ac:	83 9b       	sbis	0x10, 3	; 16
    25ae:	e3 ce       	rjmp	.-570    	; 0x2376 <right_junc_check+0x1ce>
    25b0:	e0 ce       	rjmp	.-576    	; 0x2372 <right_junc_check+0x1ca>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    25b2:	80 9b       	sbis	0x10, 0	; 16
    25b4:	1c cf       	rjmp	.-456    	; 0x23ee <right_junc_check+0x246>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    25b6:	81 9b       	sbis	0x10, 1	; 16
    25b8:	1a cf       	rjmp	.-460    	; 0x23ee <right_junc_check+0x246>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    25ba:	83 9b       	sbis	0x10, 3	; 16
    25bc:	18 cf       	rjmp	.-464    	; 0x23ee <right_junc_check+0x246>
    25be:	15 cf       	rjmp	.-470    	; 0x23ea <right_junc_check+0x242>
	}
	// lcd_clear();
	// lcd_write_int_xy(0,0,dir,3);
	//delay_sec(2);
	
}
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	08 95       	ret

000025ce <main>:
			a=0;
		}
	}
}
int main(void)
{
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
	init_devices();
    25da:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(j=0 ; j<16; j++)
		{
			for(k=0 ; k<4 ; k++)
			{
				dir_array[i][j][k] = 'F';
    25ea:	46 e4       	ldi	r20, 0x46	; 70
    25ec:	0e c0       	rjmp	.+28     	; 0x260a <main+0x3c>
    25ee:	40 83       	st	Z, r20
    25f0:	41 83       	std	Z+1, r20	; 0x01
    25f2:	42 83       	std	Z+2, r20	; 0x02
    25f4:	43 83       	std	Z+3, r20	; 0x03
	lcd_clear();
	int i, j, k;
	//array initializing to false
	for(i=0 ; i<16 ; i++)
	{
		for(j=0 ; j<16; j++)
    25f6:	01 96       	adiw	r24, 0x01	; 1
    25f8:	34 96       	adiw	r30, 0x04	; 4
    25fa:	80 31       	cpi	r24, 0x10	; 16
    25fc:	91 05       	cpc	r25, r1
    25fe:	b9 f7       	brne	.-18     	; 0x25ee <main+0x20>
{
	init_devices();
	lcd_clear();
	int i, j, k;
	//array initializing to false
	for(i=0 ; i<16 ; i++)
    2600:	2f 5f       	subi	r18, 0xFF	; 255
    2602:	3f 4f       	sbci	r19, 0xFF	; 255
    2604:	20 31       	cpi	r18, 0x10	; 16
    2606:	31 05       	cpc	r19, r1
    2608:	59 f0       	breq	.+22     	; 0x2620 <main+0x52>
    260a:	f9 01       	movw	r30, r18
    260c:	66 e0       	ldi	r22, 0x06	; 6
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	6a 95       	dec	r22
    2614:	e1 f7       	brne	.-8      	; 0x260e <main+0x40>
    2616:	eb 5b       	subi	r30, 0xBB	; 187
    2618:	fc 4f       	sbci	r31, 0xFC	; 252
    261a:	80 e0       	ldi	r24, 0x00	; 0
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	e7 cf       	rjmp	.-50     	; 0x25ee <main+0x20>
			{
				dir_array[i][j][k] = 'F';
			}
		}
	}
	lcd_clear();
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("D3 for dry run");
    2628:	80 ef       	ldi	r24, 0xF0	; 240
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
	lcd_write_string_xy(0,1,"D0 for Stst path");
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	4f ef       	ldi	r20, 0xFF	; 255
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	update_array('T','F','F','F');
    2640:	84 e5       	ldi	r24, 0x54	; 84
    2642:	66 e4       	ldi	r22, 0x46	; 70
    2644:	46 e4       	ldi	r20, 0x46	; 70
    2646:	26 e4       	ldi	r18, 0x46	; 70
    2648:	0e 94 6f 06 	call	0xcde	; 0xcde <update_array>
    264c:	83 99       	sbic	0x10, 3	; 16
    264e:	c0 c1       	rjmp	.+896    	; 0x29d0 <main+0x402>
	{
		if(pressed_switch3())
		{
			while(1)
			{
				repeat = 0;
    2650:	10 92 3e 01 	sts	0x013E, r1
    2654:	10 92 3d 01 	sts	0x013D, r1
    2658:	1b c0       	rjmp	.+54     	; 0x2690 <main+0xc2>
				while(repeat<=2)
				{
					line_track_new();	
    265a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
					LED&=0b11110000;
    265e:	85 b3       	in	r24, 0x15	; 21
    2660:	80 7f       	andi	r24, 0xF0	; 240
    2662:	85 bb       	out	0x15, r24	; 21
					LED|=sensorbyte;
    2664:	85 b3       	in	r24, 0x15	; 21
    2666:	90 91 22 01 	lds	r25, 0x0122
    266a:	89 2b       	or	r24, r25
    266c:	85 bb       	out	0x15, r24	; 21
					if(bit_is_clear(PINA,7))
    266e:	cf 99       	sbic	0x19, 7	; 25
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <main+0xa8>
					{
						right_junc_check();
    2672:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <right_junc_check>
					}
					left_junc_check();
    2676:	0e 94 4a 08 	call	0x1094	; 0x1094 <left_junc_check>
					frSensorCheck();
    267a:	0e 94 ce 08 	call	0x119c	; 0x119c <frSensorCheck>
					irc++;
    267e:	80 91 31 01 	lds	r24, 0x0131
    2682:	90 91 32 01 	lds	r25, 0x0132
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	90 93 32 01 	sts	0x0132, r25
    268c:	80 93 31 01 	sts	0x0131, r24
		if(pressed_switch3())
		{
			while(1)
			{
				repeat = 0;
				while(repeat<=2)
    2690:	80 91 3d 01 	lds	r24, 0x013D
    2694:	90 91 3e 01 	lds	r25, 0x013E
    2698:	03 97       	sbiw	r24, 0x03	; 3
    269a:	fc f2       	brlt	.-66     	; 0x265a <main+0x8c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    269c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    269e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    26a0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    26a2:	af 9a       	sbi	0x15, 7	; 21
					left_junc_check();
					frSensorCheck();
					irc++;
				}
				bot_brake();
				fill_missed_array();
    26a4:	0e 94 17 09 	call	0x122e	; 0x122e <fill_missed_array>
				mx = 0;
    26a8:	10 92 38 01 	sts	0x0138, r1
    26ac:	10 92 37 01 	sts	0x0137, r1
				my = 0;
    26b0:	10 92 3a 01 	sts	0x013A, r1
    26b4:	10 92 39 01 	sts	0x0139, r1
				coordinates_tobe_reached();
    26b8:	0e 94 b3 09 	call	0x1366	; 0x1366 <coordinates_tobe_reached>
				// if(mx==0 && my == 0)
				// {
				// 	break;
				// }
				build_map(x_coordinate, y_coordinate, mx, my);
    26bc:	60 91 1f 01 	lds	r22, 0x011F
    26c0:	70 91 20 01 	lds	r23, 0x0120
    26c4:	40 91 37 01 	lds	r20, 0x0137
    26c8:	50 91 38 01 	lds	r21, 0x0138
    26cc:	20 91 39 01 	lds	r18, 0x0139
    26d0:	30 91 3a 01 	lds	r19, 0x013A
    26d4:	80 91 1d 01 	lds	r24, 0x011D
    26d8:	90 91 1e 01 	lds	r25, 0x011E
    26dc:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <build_map>
				get_path();
    26e0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <get_path>
				right = 0;
    26e4:	10 92 46 07 	sts	0x0746, r1
    26e8:	10 92 45 07 	sts	0x0745, r1
				print_path();
    26ec:	0e 94 8e 10 	call	0x211c	; 0x211c <print_path>
    26f0:	cb e4       	ldi	r28, 0x4B	; 75
    26f2:	d7 e0       	ldi	r29, 0x07	; 7
				//delay_sec(4);
				for(int i=0; i<15; i++)
				{
					if(path_array[i][0]==0 && path_array[i][1]==0)
    26f4:	28 81       	ld	r18, Y
    26f6:	39 81       	ldd	r19, Y+1	; 0x01
    26f8:	21 15       	cp	r18, r1
    26fa:	31 05       	cpc	r19, r1
    26fc:	21 f4       	brne	.+8      	; 0x2706 <main+0x138>
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	89 2b       	or	r24, r25
    2704:	51 f0       	breq	.+20     	; 0x271a <main+0x14c>
					{
						break;
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
    2706:	6a 81       	ldd	r22, Y+2	; 0x02
    2708:	7b 81       	ldd	r23, Y+3	; 0x03
    270a:	c9 01       	movw	r24, r18
    270c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <go_to_coordinate>
    2710:	24 96       	adiw	r28, 0x04	; 4
				build_map(x_coordinate, y_coordinate, mx, my);
				get_path();
				right = 0;
				print_path();
				//delay_sec(4);
				for(int i=0; i<15; i++)
    2712:	87 e0       	ldi	r24, 0x07	; 7
    2714:	c7 38       	cpi	r28, 0x87	; 135
    2716:	d8 07       	cpc	r29, r24
    2718:	69 f7       	brne	.-38     	; 0x26f4 <main+0x126>
					{
						break;
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
				}
				if(dir_array[x_coordinate][y_coordinate][0]=='T' && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    271a:	00 91 1d 01 	lds	r16, 0x011D
    271e:	10 91 1e 01 	lds	r17, 0x011E
    2722:	c0 91 1f 01 	lds	r28, 0x011F
    2726:	d0 91 20 01 	lds	r29, 0x0120
    272a:	f8 01       	movw	r30, r16
    272c:	54 e0       	ldi	r21, 0x04	; 4
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	5a 95       	dec	r21
    2734:	e1 f7       	brne	.-8      	; 0x272e <main+0x160>
    2736:	ec 0f       	add	r30, r28
    2738:	fd 1f       	adc	r31, r29
    273a:	ee 0f       	add	r30, r30
    273c:	ff 1f       	adc	r31, r31
    273e:	ee 0f       	add	r30, r30
    2740:	ff 1f       	adc	r31, r31
    2742:	eb 5b       	subi	r30, 0xBB	; 187
    2744:	fc 4f       	sbci	r31, 0xFC	; 252
    2746:	80 81       	ld	r24, Z
    2748:	84 35       	cpi	r24, 0x54	; 84
    274a:	59 f4       	brne	.+22     	; 0x2762 <main+0x194>
    274c:	be 01       	movw	r22, r28
    274e:	6f 5f       	subi	r22, 0xFF	; 255
    2750:	7f 4f       	sbci	r23, 0xFF	; 255
    2752:	c8 01       	movw	r24, r16
    2754:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    2758:	89 2b       	or	r24, r25
    275a:	19 f0       	breq	.+6      	; 0x2762 <main+0x194>
				{		
					checkAndCorrectDirection(2);
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	51 c0       	rjmp	.+162    	; 0x2804 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][1]=='T' && is_coordinate_null(x_coordinate+1,y_coordinate))
    2762:	f8 01       	movw	r30, r16
    2764:	34 e0       	ldi	r19, 0x04	; 4
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	3a 95       	dec	r19
    276c:	e1 f7       	brne	.-8      	; 0x2766 <main+0x198>
    276e:	ec 0f       	add	r30, r28
    2770:	fd 1f       	adc	r31, r29
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	ee 0f       	add	r30, r30
    2778:	ff 1f       	adc	r31, r31
    277a:	eb 5b       	subi	r30, 0xBB	; 187
    277c:	fc 4f       	sbci	r31, 0xFC	; 252
    277e:	81 81       	ldd	r24, Z+1	; 0x01
    2780:	84 35       	cpi	r24, 0x54	; 84
    2782:	51 f4       	brne	.+20     	; 0x2798 <main+0x1ca>
    2784:	c8 01       	movw	r24, r16
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	be 01       	movw	r22, r28
    278a:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    278e:	89 2b       	or	r24, r25
    2790:	19 f0       	breq	.+6      	; 0x2798 <main+0x1ca>
				{
					checkAndCorrectDirection(1);
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	36 c0       	rjmp	.+108    	; 0x2804 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][2]=='T' && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    2798:	f8 01       	movw	r30, r16
    279a:	94 e0       	ldi	r25, 0x04	; 4
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	9a 95       	dec	r25
    27a2:	e1 f7       	brne	.-8      	; 0x279c <main+0x1ce>
    27a4:	ec 0f       	add	r30, r28
    27a6:	fd 1f       	adc	r31, r29
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	e9 5b       	subi	r30, 0xB9	; 185
    27b2:	fc 4f       	sbci	r31, 0xFC	; 252
    27b4:	80 81       	ld	r24, Z
    27b6:	84 35       	cpi	r24, 0x54	; 84
    27b8:	59 f4       	brne	.+22     	; 0x27d0 <main+0x202>
    27ba:	be 01       	movw	r22, r28
    27bc:	61 50       	subi	r22, 0x01	; 1
    27be:	70 40       	sbci	r23, 0x00	; 0
    27c0:	c8 01       	movw	r24, r16
    27c2:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    27c6:	89 2b       	or	r24, r25
    27c8:	19 f0       	breq	.+6      	; 0x27d0 <main+0x202>
				{
					checkAndCorrectDirection(-2);
    27ca:	8e ef       	ldi	r24, 0xFE	; 254
    27cc:	9f ef       	ldi	r25, 0xFF	; 255
    27ce:	1a c0       	rjmp	.+52     	; 0x2804 <main+0x236>
				}
				else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
    27d0:	f8 01       	movw	r30, r16
    27d2:	b4 e0       	ldi	r27, 0x04	; 4
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	ba 95       	dec	r27
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <main+0x206>
    27dc:	ec 0f       	add	r30, r28
    27de:	fd 1f       	adc	r31, r29
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	eb 5b       	subi	r30, 0xBB	; 187
    27ea:	fc 4f       	sbci	r31, 0xFC	; 252
    27ec:	83 81       	ldd	r24, Z+3	; 0x03
    27ee:	84 35       	cpi	r24, 0x54	; 84
    27f0:	71 f4       	brne	.+28     	; 0x280e <main+0x240>
    27f2:	c8 01       	movw	r24, r16
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	be 01       	movw	r22, r28
    27f8:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    27fc:	89 2b       	or	r24, r25
    27fe:	39 f0       	breq	.+14     	; 0x280e <main+0x240>
				{
					checkAndCorrectDirection(-1);
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	9f ef       	ldi	r25, 0xFF	; 255
    2804:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <checkAndCorrectDirection>
    2808:	02 c0       	rjmp	.+4      	; 0x280e <main+0x240>
				}		
				while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
				{
					line_track_new();
    280a:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
				}
				else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
				{
					checkAndCorrectDirection(-1);
				}		
				while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
    280e:	cc 9b       	sbis	0x19, 4	; 25
    2810:	fc cf       	rjmp	.-8      	; 0x280a <main+0x23c>
    2812:	87 9b       	sbis	0x10, 7	; 16
    2814:	fa cf       	rjmp	.-12     	; 0x280a <main+0x23c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2816:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2818:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    281a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    281c:	af 9a       	sbi	0x15, 7	; 21
					line_track_new();
				}
				bot_brake();
				//delay_sec(2);
				irc=0;
				Coordinates_changed_by = 0;
    281e:	10 92 36 01 	sts	0x0136, r1
    2822:	10 92 35 01 	sts	0x0135, r1
				// else
				// {
				// 	special_flag = 1;
				// 	left_junc_check();
				// }
				irc = 0;
    2826:	10 92 32 01 	sts	0x0132, r1
    282a:	10 92 31 01 	sts	0x0131, r1
				special_flag = 0;
    282e:	10 92 3c 01 	sts	0x013C, r1
    2832:	10 92 3b 01 	sts	0x013B, r1
    2836:	0c cf       	rjmp	.-488    	; 0x2650 <main+0x82>
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
			{
				path_array[i][0] = eeprom_read_word(eeprom_addr);
    2838:	ce 01       	movw	r24, r28
    283a:	0e 94 b4 18 	call	0x3168	; 0x3168 <__eerd_word_m32>
    283e:	f8 01       	movw	r30, r16
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
    2844:	ce 01       	movw	r24, r28
    2846:	02 96       	adiw	r24, 0x02	; 2
    2848:	0e 94 b4 18 	call	0x3168	; 0x3168 <__eerd_word_m32>
    284c:	f8 01       	movw	r30, r16
    284e:	93 83       	std	Z+3, r25	; 0x03
    2850:	82 83       	std	Z+2, r24	; 0x02
    2852:	24 96       	adiw	r28, 0x04	; 4
    2854:	0c 5f       	subi	r16, 0xFC	; 252
    2856:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
    2858:	cc 33       	cpi	r28, 0x3C	; 60
    285a:	d1 05       	cpc	r29, r1
    285c:	69 f7       	brne	.-38     	; 0x2838 <main+0x26a>
				path_array[i][0] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
			}
			lcd_clear();
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_int_xy(0,0,path_array[0][0],1);
    2866:	40 91 4b 07 	lds	r20, 0x074B
    286a:	50 91 4c 07 	lds	r21, 0x074C
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	21 e0       	ldi	r18, 0x01	; 1
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,0,path_array[0][1],1);
    287e:	40 91 4d 07 	lds	r20, 0x074D
    2882:	50 91 4e 07 	lds	r21, 0x074E
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	21 e0       	ldi	r18, 0x01	; 1
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(3,0,path_array[1][0],1);
    2896:	40 91 4f 07 	lds	r20, 0x074F
    289a:	50 91 50 07 	lds	r21, 0x0750
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	21 e0       	ldi	r18, 0x01	; 1
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(4,0,path_array[1][1],1);
    28ae:	40 91 51 07 	lds	r20, 0x0751
    28b2:	50 91 52 07 	lds	r21, 0x0752
    28b6:	84 e0       	ldi	r24, 0x04	; 4
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	21 e0       	ldi	r18, 0x01	; 1
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(6,0,path_array[2][0],1);
    28c6:	40 91 53 07 	lds	r20, 0x0753
    28ca:	50 91 54 07 	lds	r21, 0x0754
    28ce:	86 e0       	ldi	r24, 0x06	; 6
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	21 e0       	ldi	r18, 0x01	; 1
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(7,0,path_array[2][1],1);
    28de:	40 91 55 07 	lds	r20, 0x0755
    28e2:	50 91 56 07 	lds	r21, 0x0756
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	21 e0       	ldi	r18, 0x01	; 1
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(9,0,path_array[3][0],1);
    28f6:	40 91 57 07 	lds	r20, 0x0757
    28fa:	50 91 58 07 	lds	r21, 0x0758
    28fe:	89 e0       	ldi	r24, 0x09	; 9
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	21 e0       	ldi	r18, 0x01	; 1
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(10,0,path_array[3][1],1);
    290e:	40 91 59 07 	lds	r20, 0x0759
    2912:	50 91 5a 07 	lds	r21, 0x075A
    2916:	8a e0       	ldi	r24, 0x0A	; 10
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	21 e0       	ldi	r18, 0x01	; 1
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(12,0,path_array[4][0],1);
    2926:	40 91 5b 07 	lds	r20, 0x075B
    292a:	50 91 5c 07 	lds	r21, 0x075C
    292e:	8c e0       	ldi	r24, 0x0C	; 12
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	21 e0       	ldi	r18, 0x01	; 1
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(13,0,path_array[4][1],1);
    293e:	40 91 5d 07 	lds	r20, 0x075D
    2942:	50 91 5e 07 	lds	r21, 0x075E
    2946:	8d e0       	ldi	r24, 0x0D	; 13
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	60 e0       	ldi	r22, 0x00	; 0
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(0,1,path_array[5][0],1);
    2956:	40 91 5f 07 	lds	r20, 0x075F
    295a:	50 91 60 07 	lds	r21, 0x0760
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	21 e0       	ldi	r18, 0x01	; 1
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,1,path_array[5][1],1);
    296e:	40 91 61 07 	lds	r20, 0x0761
    2972:	50 91 62 07 	lds	r21, 0x0762
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	21 e0       	ldi	r18, 0x01	; 1
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2986:	82 99       	sbic	0x10, 2	; 16
    2988:	2d c0       	rjmp	.+90     	; 0x29e4 <main+0x416>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					lcd_clear();
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	60 e0       	ldi	r22, 0x00	; 0
    298e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					delay_sec(1);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					break;
				}
			}
			for(int i=0; i<15; i++)
			{
				if(path_array[i][0]==0 && path_array[i][1]==0)
    299a:	f7 01       	movw	r30, r14
    299c:	20 81       	ld	r18, Z
    299e:	31 81       	ldd	r19, Z+1	; 0x01
    29a0:	21 15       	cp	r18, r1
    29a2:	31 05       	cpc	r19, r1
    29a4:	29 f4       	brne	.+10     	; 0x29b0 <main+0x3e2>
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	89 2b       	or	r24, r25
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <main+0x3e2>
    29ae:	4e ce       	rjmp	.-868    	; 0x264c <main+0x7e>
				{
					break;
				}
				go_to_coordinate(path_array[i][0], path_array[i][1]);
    29b0:	f7 01       	movw	r30, r14
    29b2:	62 81       	ldd	r22, Z+2	; 0x02
    29b4:	73 81       	ldd	r23, Z+3	; 0x03
    29b6:	c9 01       	movw	r24, r18
    29b8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <go_to_coordinate>
    29bc:	84 e0       	ldi	r24, 0x04	; 4
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	e8 0e       	add	r14, r24
    29c2:	f9 1e       	adc	r15, r25
					lcd_clear();
					delay_sec(1);
					break;
				}
			}
			for(int i=0; i<15; i++)
    29c4:	97 e8       	ldi	r25, 0x87	; 135
    29c6:	e9 16       	cp	r14, r25
    29c8:	97 e0       	ldi	r25, 0x07	; 7
    29ca:	f9 06       	cpc	r15, r25
    29cc:	31 f7       	brne	.-52     	; 0x299a <main+0x3cc>
    29ce:	3e ce       	rjmp	.-900    	; 0x264c <main+0x7e>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    29d0:	80 99       	sbic	0x10, 0	; 16
    29d2:	3c ce       	rjmp	.-904    	; 0x264c <main+0x7e>
    29d4:	7b e4       	ldi	r23, 0x4B	; 75
    29d6:	e7 2e       	mov	r14, r23
    29d8:	77 e0       	ldi	r23, 0x07	; 7
    29da:	f7 2e       	mov	r15, r23
    29dc:	87 01       	movw	r16, r14
    29de:	c0 e0       	ldi	r28, 0x00	; 0
    29e0:	d0 e0       	ldi	r29, 0x00	; 0
    29e2:	2a cf       	rjmp	.-428    	; 0x2838 <main+0x26a>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    29e4:	80 9b       	sbis	0x10, 0	; 16
    29e6:	d1 cf       	rjmp	.-94     	; 0x298a <main+0x3bc>
    29e8:	81 9b       	sbis	0x10, 1	; 16
    29ea:	cf cf       	rjmp	.-98     	; 0x298a <main+0x3bc>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    29ec:	83 9b       	sbis	0x10, 3	; 16
    29ee:	cd cf       	rjmp	.-102    	; 0x298a <main+0x3bc>
    29f0:	ca cf       	rjmp	.-108    	; 0x2986 <main+0x3b8>

000029f2 <map_all>:
	}
	bot_brake();
	//delay_sec(1);
}
void map_all()
{
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    29fe:	5f e8       	ldi	r21, 0x8F	; 143
    2a00:	e5 2e       	mov	r14, r21
    2a02:	51 e0       	ldi	r21, 0x01	; 1
    2a04:	f5 2e       	mov	r15, r21
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2a06:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2a08:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2a0a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2a0c:	af 9a       	sbi	0x15, 7	; 21
	while(1)
	{
		bot_brake();
		build_map(x_coordinate, y_coordinate, mx, my);
    2a0e:	60 91 1f 01 	lds	r22, 0x011F
    2a12:	70 91 20 01 	lds	r23, 0x0120
    2a16:	40 91 37 01 	lds	r20, 0x0137
    2a1a:	50 91 38 01 	lds	r21, 0x0138
    2a1e:	20 91 39 01 	lds	r18, 0x0139
    2a22:	30 91 3a 01 	lds	r19, 0x013A
    2a26:	80 91 1d 01 	lds	r24, 0x011D
    2a2a:	90 91 1e 01 	lds	r25, 0x011E
    2a2e:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <build_map>
		get_path();
    2a32:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <get_path>
		
		right = 0;
    2a36:	10 92 46 07 	sts	0x0746, r1
    2a3a:	10 92 45 07 	sts	0x0745, r1
		print_path();
    2a3e:	0e 94 8e 10 	call	0x211c	; 0x211c <print_path>
    2a42:	cb e4       	ldi	r28, 0x4B	; 75
    2a44:	d7 e0       	ldi	r29, 0x07	; 7
		//delay_sec(4);
		for(int i=0; i<15; i++)
		{
			if(path_array[i][0]==0 && path_array[i][1]==0)
    2a46:	28 81       	ld	r18, Y
    2a48:	39 81       	ldd	r19, Y+1	; 0x01
    2a4a:	21 15       	cp	r18, r1
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	21 f4       	brne	.+8      	; 0x2a58 <map_all+0x66>
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	89 2b       	or	r24, r25
    2a56:	51 f0       	breq	.+20     	; 0x2a6c <map_all+0x7a>
			{
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);
    2a58:	6a 81       	ldd	r22, Y+2	; 0x02
    2a5a:	7b 81       	ldd	r23, Y+3	; 0x03
    2a5c:	c9 01       	movw	r24, r18
    2a5e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <go_to_coordinate>
    2a62:	24 96       	adiw	r28, 0x04	; 4
		get_path();
		
		right = 0;
		print_path();
		//delay_sec(4);
		for(int i=0; i<15; i++)
    2a64:	87 e0       	ldi	r24, 0x07	; 7
    2a66:	c7 38       	cpi	r28, 0x87	; 135
    2a68:	d8 07       	cpc	r29, r24
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <map_all+0x54>
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);

		}
		if(dir_array[x_coordinate][y_coordinate][0]=='T' && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    2a6c:	00 91 1d 01 	lds	r16, 0x011D
    2a70:	10 91 1e 01 	lds	r17, 0x011E
    2a74:	c0 91 1f 01 	lds	r28, 0x011F
    2a78:	d0 91 20 01 	lds	r29, 0x0120
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	44 e0       	ldi	r20, 0x04	; 4
    2a80:	ee 0f       	add	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	4a 95       	dec	r20
    2a86:	e1 f7       	brne	.-8      	; 0x2a80 <map_all+0x8e>
    2a88:	ec 0f       	add	r30, r28
    2a8a:	fd 1f       	adc	r31, r29
    2a8c:	ee 0f       	add	r30, r30
    2a8e:	ff 1f       	adc	r31, r31
    2a90:	ee 0f       	add	r30, r30
    2a92:	ff 1f       	adc	r31, r31
    2a94:	eb 5b       	subi	r30, 0xBB	; 187
    2a96:	fc 4f       	sbci	r31, 0xFC	; 252
    2a98:	80 81       	ld	r24, Z
    2a9a:	84 35       	cpi	r24, 0x54	; 84
    2a9c:	59 f4       	brne	.+22     	; 0x2ab4 <map_all+0xc2>
    2a9e:	be 01       	movw	r22, r28
    2aa0:	6f 5f       	subi	r22, 0xFF	; 255
    2aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa4:	c8 01       	movw	r24, r16
    2aa6:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    2aaa:	89 2b       	or	r24, r25
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <map_all+0xc2>
		{
			checkAndCorrectDirection(2);
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	51 c0       	rjmp	.+162    	; 0x2b56 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][1]=='T' && is_coordinate_null(x_coordinate+1,y_coordinate))
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	24 e0       	ldi	r18, 0x04	; 4
    2ab8:	ee 0f       	add	r30, r30
    2aba:	ff 1f       	adc	r31, r31
    2abc:	2a 95       	dec	r18
    2abe:	e1 f7       	brne	.-8      	; 0x2ab8 <map_all+0xc6>
    2ac0:	ec 0f       	add	r30, r28
    2ac2:	fd 1f       	adc	r31, r29
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ee 0f       	add	r30, r30
    2aca:	ff 1f       	adc	r31, r31
    2acc:	eb 5b       	subi	r30, 0xBB	; 187
    2ace:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad0:	81 81       	ldd	r24, Z+1	; 0x01
    2ad2:	84 35       	cpi	r24, 0x54	; 84
    2ad4:	51 f4       	brne	.+20     	; 0x2aea <map_all+0xf8>
    2ad6:	c8 01       	movw	r24, r16
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	be 01       	movw	r22, r28
    2adc:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    2ae0:	89 2b       	or	r24, r25
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <map_all+0xf8>
		{
			checkAndCorrectDirection(1);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	36 c0       	rjmp	.+108    	; 0x2b56 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][2]=='T' && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    2aea:	f8 01       	movw	r30, r16
    2aec:	84 e0       	ldi	r24, 0x04	; 4
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	8a 95       	dec	r24
    2af4:	e1 f7       	brne	.-8      	; 0x2aee <map_all+0xfc>
    2af6:	ec 0f       	add	r30, r28
    2af8:	fd 1f       	adc	r31, r29
    2afa:	ee 0f       	add	r30, r30
    2afc:	ff 1f       	adc	r31, r31
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	e9 5b       	subi	r30, 0xB9	; 185
    2b04:	fc 4f       	sbci	r31, 0xFC	; 252
    2b06:	80 81       	ld	r24, Z
    2b08:	84 35       	cpi	r24, 0x54	; 84
    2b0a:	59 f4       	brne	.+22     	; 0x2b22 <map_all+0x130>
    2b0c:	be 01       	movw	r22, r28
    2b0e:	61 50       	subi	r22, 0x01	; 1
    2b10:	70 40       	sbci	r23, 0x00	; 0
    2b12:	c8 01       	movw	r24, r16
    2b14:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    2b18:	89 2b       	or	r24, r25
    2b1a:	19 f0       	breq	.+6      	; 0x2b22 <map_all+0x130>
		{
			checkAndCorrectDirection(-2);
    2b1c:	8e ef       	ldi	r24, 0xFE	; 254
    2b1e:	9f ef       	ldi	r25, 0xFF	; 255
    2b20:	1a c0       	rjmp	.+52     	; 0x2b56 <map_all+0x164>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
    2b22:	f8 01       	movw	r30, r16
    2b24:	a4 e0       	ldi	r26, 0x04	; 4
    2b26:	ee 0f       	add	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	aa 95       	dec	r26
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <map_all+0x134>
    2b2e:	ec 0f       	add	r30, r28
    2b30:	fd 1f       	adc	r31, r29
    2b32:	ee 0f       	add	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	ee 0f       	add	r30, r30
    2b38:	ff 1f       	adc	r31, r31
    2b3a:	eb 5b       	subi	r30, 0xBB	; 187
    2b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2b3e:	83 81       	ldd	r24, Z+3	; 0x03
    2b40:	84 35       	cpi	r24, 0x54	; 84
    2b42:	71 f4       	brne	.+28     	; 0x2b60 <map_all+0x16e>
    2b44:	c8 01       	movw	r24, r16
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	be 01       	movw	r22, r28
    2b4a:	0e 94 40 06 	call	0xc80	; 0xc80 <is_coordinate_null>
    2b4e:	89 2b       	or	r24, r25
    2b50:	39 f0       	breq	.+14     	; 0x2b60 <map_all+0x16e>
		{
			checkAndCorrectDirection(-1);
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	9f ef       	ldi	r25, 0xFF	; 255
    2b56:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <checkAndCorrectDirection>
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <map_all+0x16e>
		}
		while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
		{
			line_track_new();
    2b5c:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]=='T' && is_coordinate_null(x_coordinate-1,y_coordinate))
		{
			checkAndCorrectDirection(-1);
		}
		while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
    2b60:	cc 9b       	sbis	0x19, 4	; 25
    2b62:	fc cf       	rjmp	.-8      	; 0x2b5c <map_all+0x16a>
    2b64:	87 9b       	sbis	0x10, 7	; 16
    2b66:	fa cf       	rjmp	.-12     	; 0x2b5c <map_all+0x16a>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2b68:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2b6a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2b6c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2b6e:	af 9a       	sbi	0x15, 7	; 21
			line_track_new();
		}
		bot_brake();
		//delay_sec(2);
		irc=0;
		Coordinates_changed_by = 0;
    2b70:	10 92 36 01 	sts	0x0136, r1
    2b74:	10 92 35 01 	sts	0x0135, r1
		// else
		// {
		// 	special_flag = 1;
		// 	left_junc_check();
		// }
		irc = 0;
    2b78:	10 92 32 01 	sts	0x0132, r1
    2b7c:	10 92 31 01 	sts	0x0131, r1
		special_flag = 0;
    2b80:	10 92 3c 01 	sts	0x013C, r1
    2b84:	10 92 3b 01 	sts	0x013B, r1
		repeat = 0;
    2b88:	10 92 3e 01 	sts	0x013E, r1
    2b8c:	10 92 3d 01 	sts	0x013D, r1
    2b90:	1b c0       	rjmp	.+54     	; 0x2bc8 <map_all+0x1d6>
		while(repeat==0)      //lsr (copied from int main) 
		{
			line_track_new();	
    2b92:	0e 94 ef 04 	call	0x9de	; 0x9de <line_track_new>
			LED&=0b11110000;
    2b96:	85 b3       	in	r24, 0x15	; 21
    2b98:	80 7f       	andi	r24, 0xF0	; 240
    2b9a:	85 bb       	out	0x15, r24	; 21
			LED|=sensorbyte;
    2b9c:	85 b3       	in	r24, 0x15	; 21
    2b9e:	90 91 22 01 	lds	r25, 0x0122
    2ba2:	89 2b       	or	r24, r25
    2ba4:	85 bb       	out	0x15, r24	; 21
			if(bit_is_clear(PINA,7))
    2ba6:	cf 99       	sbic	0x19, 7	; 25
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <map_all+0x1bc>
			{
				right_junc_check();
    2baa:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <right_junc_check>
			}
			left_junc_check();
    2bae:	0e 94 4a 08 	call	0x1094	; 0x1094 <left_junc_check>
			frSensorCheck();
    2bb2:	0e 94 ce 08 	call	0x119c	; 0x119c <frSensorCheck>
			irc++;
    2bb6:	80 91 31 01 	lds	r24, 0x0131
    2bba:	90 91 32 01 	lds	r25, 0x0132
    2bbe:	01 96       	adiw	r24, 0x01	; 1
    2bc0:	90 93 32 01 	sts	0x0132, r25
    2bc4:	80 93 31 01 	sts	0x0131, r24
		// 	left_junc_check();
		// }
		irc = 0;
		special_flag = 0;
		repeat = 0;
		while(repeat==0)      //lsr (copied from int main) 
    2bc8:	80 91 3d 01 	lds	r24, 0x013D
    2bcc:	90 91 3e 01 	lds	r25, 0x013E
    2bd0:	89 2b       	or	r24, r25
    2bd2:	f9 f2       	breq	.-66     	; 0x2b92 <map_all+0x1a0>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2bd4:	fb bc       	out	0x2b, r15	; 43
    2bd6:	ea bc       	out	0x2a, r14	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2bd8:	f9 bc       	out	0x29, r15	; 41
    2bda:	e8 bc       	out	0x28, r14	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2bdc:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2bde:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2be0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2be2:	af 9a       	sbi	0x15, 7	; 21
			irc++;
		}
		set_pwm1a(399);
		set_pwm1b(399);
		bot_brake();
		fill_missed_array();
    2be4:	0e 94 17 09 	call	0x122e	; 0x122e <fill_missed_array>
		mx = 0;
    2be8:	10 92 38 01 	sts	0x0138, r1
    2bec:	10 92 37 01 	sts	0x0137, r1
		my = 0;
    2bf0:	10 92 3a 01 	sts	0x013A, r1
    2bf4:	10 92 39 01 	sts	0x0139, r1
		coordinates_tobe_reached();
    2bf8:	0e 94 b3 09 	call	0x1366	; 0x1366 <coordinates_tobe_reached>
		if(mx==0 && my == 0)
    2bfc:	80 91 37 01 	lds	r24, 0x0137
    2c00:	90 91 38 01 	lds	r25, 0x0138
    2c04:	89 2b       	or	r24, r25
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <map_all+0x218>
    2c08:	fe ce       	rjmp	.-516    	; 0x2a06 <map_all+0x14>
    2c0a:	80 91 39 01 	lds	r24, 0x0139
    2c0e:	90 91 3a 01 	lds	r25, 0x013A
    2c12:	89 2b       	or	r24, r25
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <map_all+0x226>
    2c16:	f7 ce       	rjmp	.-530    	; 0x2a06 <map_all+0x14>
		{
			break;
		}
	}
}
    2c18:	df 91       	pop	r29
    2c1a:	cf 91       	pop	r28
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	08 95       	ret

00002c26 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	0e 94 ac 18 	call	0x3158	; 0x3158 <__eerd_byte_m32>
    2c2e:	80 93 87 07 	sts	0x0787, r24
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0e 94 ac 18 	call	0x3158	; 0x3158 <__eerd_byte_m32>
    2c3a:	80 93 88 07 	sts	0x0788, r24
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 ac 18 	call	0x3158	; 0x3158 <__eerd_byte_m32>
    2c46:	80 93 89 07 	sts	0x0789, r24
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 ac 18 	call	0x3158	; 0x3158 <__eerd_byte_m32>
    2c52:	80 93 8a 07 	sts	0x078A, r24
		eeprom_addr++;
	}
}
    2c56:	08 95       	ret

00002c58 <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    2c5c:	20 91 8b 07 	lds	r18, 0x078B
    2c60:	80 91 47 07 	lds	r24, 0x0747
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	82 0f       	add	r24, r18
    2c68:	91 1d       	adc	r25, r1
    2c6a:	95 95       	asr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	80 93 87 07 	sts	0x0787, r24
    2c72:	20 91 8c 07 	lds	r18, 0x078C
    2c76:	80 91 48 07 	lds	r24, 0x0748
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	82 0f       	add	r24, r18
    2c7e:	91 1d       	adc	r25, r1
    2c80:	95 95       	asr	r25
    2c82:	87 95       	ror	r24
    2c84:	80 93 88 07 	sts	0x0788, r24
    2c88:	20 91 8d 07 	lds	r18, 0x078D
    2c8c:	80 91 49 07 	lds	r24, 0x0749
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	82 0f       	add	r24, r18
    2c94:	91 1d       	adc	r25, r1
    2c96:	95 95       	asr	r25
    2c98:	87 95       	ror	r24
    2c9a:	80 93 89 07 	sts	0x0789, r24
    2c9e:	20 91 8e 07 	lds	r18, 0x078E
    2ca2:	80 91 4a 07 	lds	r24, 0x074A
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	82 0f       	add	r24, r18
    2caa:	91 1d       	adc	r25, r1
    2cac:	95 95       	asr	r25
    2cae:	87 95       	ror	r24
    2cb0:	80 93 8a 07 	sts	0x078A, r24
    2cb4:	c0 e0       	ldi	r28, 0x00	; 0
    2cb6:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e9 57       	subi	r30, 0x79	; 121
    2cbc:	f8 4f       	sbci	r31, 0xF8	; 248
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	60 81       	ld	r22, Z
    2cc2:	0e 94 ba 18 	call	0x3174	; 0x3174 <__eewr_byte_m32>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    2cc6:	21 96       	adiw	r28, 0x01	; 1
    2cc8:	c4 30       	cpi	r28, 0x04	; 4
    2cca:	d1 05       	cpc	r29, r1
    2ccc:	a9 f7       	brne	.-22     	; 0x2cb8 <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <__subsf3>:
    2cd4:	50 58       	subi	r21, 0x80	; 128

00002cd6 <__addsf3>:
    2cd6:	bb 27       	eor	r27, r27
    2cd8:	aa 27       	eor	r26, r26
    2cda:	0e d0       	rcall	.+28     	; 0x2cf8 <__addsf3x>
    2cdc:	75 c1       	rjmp	.+746    	; 0x2fc8 <__fp_round>
    2cde:	66 d1       	rcall	.+716    	; 0x2fac <__fp_pscA>
    2ce0:	30 f0       	brcs	.+12     	; 0x2cee <__addsf3+0x18>
    2ce2:	6b d1       	rcall	.+726    	; 0x2fba <__fp_pscB>
    2ce4:	20 f0       	brcs	.+8      	; 0x2cee <__addsf3+0x18>
    2ce6:	31 f4       	brne	.+12     	; 0x2cf4 <__addsf3+0x1e>
    2ce8:	9f 3f       	cpi	r25, 0xFF	; 255
    2cea:	11 f4       	brne	.+4      	; 0x2cf0 <__addsf3+0x1a>
    2cec:	1e f4       	brtc	.+6      	; 0x2cf4 <__addsf3+0x1e>
    2cee:	5b c1       	rjmp	.+694    	; 0x2fa6 <__fp_nan>
    2cf0:	0e f4       	brtc	.+2      	; 0x2cf4 <__addsf3+0x1e>
    2cf2:	e0 95       	com	r30
    2cf4:	e7 fb       	bst	r30, 7
    2cf6:	51 c1       	rjmp	.+674    	; 0x2f9a <__fp_inf>

00002cf8 <__addsf3x>:
    2cf8:	e9 2f       	mov	r30, r25
    2cfa:	77 d1       	rcall	.+750    	; 0x2fea <__fp_split3>
    2cfc:	80 f3       	brcs	.-32     	; 0x2cde <__addsf3+0x8>
    2cfe:	ba 17       	cp	r27, r26
    2d00:	62 07       	cpc	r22, r18
    2d02:	73 07       	cpc	r23, r19
    2d04:	84 07       	cpc	r24, r20
    2d06:	95 07       	cpc	r25, r21
    2d08:	18 f0       	brcs	.+6      	; 0x2d10 <__addsf3x+0x18>
    2d0a:	71 f4       	brne	.+28     	; 0x2d28 <__addsf3x+0x30>
    2d0c:	9e f5       	brtc	.+102    	; 0x2d74 <__addsf3x+0x7c>
    2d0e:	8f c1       	rjmp	.+798    	; 0x302e <__fp_zero>
    2d10:	0e f4       	brtc	.+2      	; 0x2d14 <__addsf3x+0x1c>
    2d12:	e0 95       	com	r30
    2d14:	0b 2e       	mov	r0, r27
    2d16:	ba 2f       	mov	r27, r26
    2d18:	a0 2d       	mov	r26, r0
    2d1a:	0b 01       	movw	r0, r22
    2d1c:	b9 01       	movw	r22, r18
    2d1e:	90 01       	movw	r18, r0
    2d20:	0c 01       	movw	r0, r24
    2d22:	ca 01       	movw	r24, r20
    2d24:	a0 01       	movw	r20, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	ff 27       	eor	r31, r31
    2d2a:	59 1b       	sub	r21, r25
    2d2c:	99 f0       	breq	.+38     	; 0x2d54 <__addsf3x+0x5c>
    2d2e:	59 3f       	cpi	r21, 0xF9	; 249
    2d30:	50 f4       	brcc	.+20     	; 0x2d46 <__addsf3x+0x4e>
    2d32:	50 3e       	cpi	r21, 0xE0	; 224
    2d34:	68 f1       	brcs	.+90     	; 0x2d90 <__addsf3x+0x98>
    2d36:	1a 16       	cp	r1, r26
    2d38:	f0 40       	sbci	r31, 0x00	; 0
    2d3a:	a2 2f       	mov	r26, r18
    2d3c:	23 2f       	mov	r18, r19
    2d3e:	34 2f       	mov	r19, r20
    2d40:	44 27       	eor	r20, r20
    2d42:	58 5f       	subi	r21, 0xF8	; 248
    2d44:	f3 cf       	rjmp	.-26     	; 0x2d2c <__addsf3x+0x34>
    2d46:	46 95       	lsr	r20
    2d48:	37 95       	ror	r19
    2d4a:	27 95       	ror	r18
    2d4c:	a7 95       	ror	r26
    2d4e:	f0 40       	sbci	r31, 0x00	; 0
    2d50:	53 95       	inc	r21
    2d52:	c9 f7       	brne	.-14     	; 0x2d46 <__addsf3x+0x4e>
    2d54:	7e f4       	brtc	.+30     	; 0x2d74 <__addsf3x+0x7c>
    2d56:	1f 16       	cp	r1, r31
    2d58:	ba 0b       	sbc	r27, r26
    2d5a:	62 0b       	sbc	r22, r18
    2d5c:	73 0b       	sbc	r23, r19
    2d5e:	84 0b       	sbc	r24, r20
    2d60:	ba f0       	brmi	.+46     	; 0x2d90 <__addsf3x+0x98>
    2d62:	91 50       	subi	r25, 0x01	; 1
    2d64:	a1 f0       	breq	.+40     	; 0x2d8e <__addsf3x+0x96>
    2d66:	ff 0f       	add	r31, r31
    2d68:	bb 1f       	adc	r27, r27
    2d6a:	66 1f       	adc	r22, r22
    2d6c:	77 1f       	adc	r23, r23
    2d6e:	88 1f       	adc	r24, r24
    2d70:	c2 f7       	brpl	.-16     	; 0x2d62 <__addsf3x+0x6a>
    2d72:	0e c0       	rjmp	.+28     	; 0x2d90 <__addsf3x+0x98>
    2d74:	ba 0f       	add	r27, r26
    2d76:	62 1f       	adc	r22, r18
    2d78:	73 1f       	adc	r23, r19
    2d7a:	84 1f       	adc	r24, r20
    2d7c:	48 f4       	brcc	.+18     	; 0x2d90 <__addsf3x+0x98>
    2d7e:	87 95       	ror	r24
    2d80:	77 95       	ror	r23
    2d82:	67 95       	ror	r22
    2d84:	b7 95       	ror	r27
    2d86:	f7 95       	ror	r31
    2d88:	9e 3f       	cpi	r25, 0xFE	; 254
    2d8a:	08 f0       	brcs	.+2      	; 0x2d8e <__addsf3x+0x96>
    2d8c:	b3 cf       	rjmp	.-154    	; 0x2cf4 <__addsf3+0x1e>
    2d8e:	93 95       	inc	r25
    2d90:	88 0f       	add	r24, r24
    2d92:	08 f0       	brcs	.+2      	; 0x2d96 <__addsf3x+0x9e>
    2d94:	99 27       	eor	r25, r25
    2d96:	ee 0f       	add	r30, r30
    2d98:	97 95       	ror	r25
    2d9a:	87 95       	ror	r24
    2d9c:	08 95       	ret

00002d9e <__cmpsf2>:
    2d9e:	d9 d0       	rcall	.+434    	; 0x2f52 <__fp_cmp>
    2da0:	08 f4       	brcc	.+2      	; 0x2da4 <__cmpsf2+0x6>
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	08 95       	ret

00002da6 <__divsf3>:
    2da6:	0c d0       	rcall	.+24     	; 0x2dc0 <__divsf3x>
    2da8:	0f c1       	rjmp	.+542    	; 0x2fc8 <__fp_round>
    2daa:	07 d1       	rcall	.+526    	; 0x2fba <__fp_pscB>
    2dac:	40 f0       	brcs	.+16     	; 0x2dbe <__divsf3+0x18>
    2dae:	fe d0       	rcall	.+508    	; 0x2fac <__fp_pscA>
    2db0:	30 f0       	brcs	.+12     	; 0x2dbe <__divsf3+0x18>
    2db2:	21 f4       	brne	.+8      	; 0x2dbc <__divsf3+0x16>
    2db4:	5f 3f       	cpi	r21, 0xFF	; 255
    2db6:	19 f0       	breq	.+6      	; 0x2dbe <__divsf3+0x18>
    2db8:	f0 c0       	rjmp	.+480    	; 0x2f9a <__fp_inf>
    2dba:	51 11       	cpse	r21, r1
    2dbc:	39 c1       	rjmp	.+626    	; 0x3030 <__fp_szero>
    2dbe:	f3 c0       	rjmp	.+486    	; 0x2fa6 <__fp_nan>

00002dc0 <__divsf3x>:
    2dc0:	14 d1       	rcall	.+552    	; 0x2fea <__fp_split3>
    2dc2:	98 f3       	brcs	.-26     	; 0x2daa <__divsf3+0x4>

00002dc4 <__divsf3_pse>:
    2dc4:	99 23       	and	r25, r25
    2dc6:	c9 f3       	breq	.-14     	; 0x2dba <__divsf3+0x14>
    2dc8:	55 23       	and	r21, r21
    2dca:	b1 f3       	breq	.-20     	; 0x2db8 <__divsf3+0x12>
    2dcc:	95 1b       	sub	r25, r21
    2dce:	55 0b       	sbc	r21, r21
    2dd0:	bb 27       	eor	r27, r27
    2dd2:	aa 27       	eor	r26, r26
    2dd4:	62 17       	cp	r22, r18
    2dd6:	73 07       	cpc	r23, r19
    2dd8:	84 07       	cpc	r24, r20
    2dda:	38 f0       	brcs	.+14     	; 0x2dea <__divsf3_pse+0x26>
    2ddc:	9f 5f       	subi	r25, 0xFF	; 255
    2dde:	5f 4f       	sbci	r21, 0xFF	; 255
    2de0:	22 0f       	add	r18, r18
    2de2:	33 1f       	adc	r19, r19
    2de4:	44 1f       	adc	r20, r20
    2de6:	aa 1f       	adc	r26, r26
    2de8:	a9 f3       	breq	.-22     	; 0x2dd4 <__divsf3_pse+0x10>
    2dea:	33 d0       	rcall	.+102    	; 0x2e52 <__divsf3_pse+0x8e>
    2dec:	0e 2e       	mov	r0, r30
    2dee:	3a f0       	brmi	.+14     	; 0x2dfe <__divsf3_pse+0x3a>
    2df0:	e0 e8       	ldi	r30, 0x80	; 128
    2df2:	30 d0       	rcall	.+96     	; 0x2e54 <__divsf3_pse+0x90>
    2df4:	91 50       	subi	r25, 0x01	; 1
    2df6:	50 40       	sbci	r21, 0x00	; 0
    2df8:	e6 95       	lsr	r30
    2dfa:	00 1c       	adc	r0, r0
    2dfc:	ca f7       	brpl	.-14     	; 0x2df0 <__divsf3_pse+0x2c>
    2dfe:	29 d0       	rcall	.+82     	; 0x2e52 <__divsf3_pse+0x8e>
    2e00:	fe 2f       	mov	r31, r30
    2e02:	27 d0       	rcall	.+78     	; 0x2e52 <__divsf3_pse+0x8e>
    2e04:	66 0f       	add	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 1f       	adc	r24, r24
    2e0a:	bb 1f       	adc	r27, r27
    2e0c:	26 17       	cp	r18, r22
    2e0e:	37 07       	cpc	r19, r23
    2e10:	48 07       	cpc	r20, r24
    2e12:	ab 07       	cpc	r26, r27
    2e14:	b0 e8       	ldi	r27, 0x80	; 128
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <__divsf3_pse+0x56>
    2e18:	bb 0b       	sbc	r27, r27
    2e1a:	80 2d       	mov	r24, r0
    2e1c:	bf 01       	movw	r22, r30
    2e1e:	ff 27       	eor	r31, r31
    2e20:	93 58       	subi	r25, 0x83	; 131
    2e22:	5f 4f       	sbci	r21, 0xFF	; 255
    2e24:	2a f0       	brmi	.+10     	; 0x2e30 <__divsf3_pse+0x6c>
    2e26:	9e 3f       	cpi	r25, 0xFE	; 254
    2e28:	51 05       	cpc	r21, r1
    2e2a:	68 f0       	brcs	.+26     	; 0x2e46 <__divsf3_pse+0x82>
    2e2c:	b6 c0       	rjmp	.+364    	; 0x2f9a <__fp_inf>
    2e2e:	00 c1       	rjmp	.+512    	; 0x3030 <__fp_szero>
    2e30:	5f 3f       	cpi	r21, 0xFF	; 255
    2e32:	ec f3       	brlt	.-6      	; 0x2e2e <__divsf3_pse+0x6a>
    2e34:	98 3e       	cpi	r25, 0xE8	; 232
    2e36:	dc f3       	brlt	.-10     	; 0x2e2e <__divsf3_pse+0x6a>
    2e38:	86 95       	lsr	r24
    2e3a:	77 95       	ror	r23
    2e3c:	67 95       	ror	r22
    2e3e:	b7 95       	ror	r27
    2e40:	f7 95       	ror	r31
    2e42:	9f 5f       	subi	r25, 0xFF	; 255
    2e44:	c9 f7       	brne	.-14     	; 0x2e38 <__divsf3_pse+0x74>
    2e46:	88 0f       	add	r24, r24
    2e48:	91 1d       	adc	r25, r1
    2e4a:	96 95       	lsr	r25
    2e4c:	87 95       	ror	r24
    2e4e:	97 f9       	bld	r25, 7
    2e50:	08 95       	ret
    2e52:	e1 e0       	ldi	r30, 0x01	; 1
    2e54:	66 0f       	add	r22, r22
    2e56:	77 1f       	adc	r23, r23
    2e58:	88 1f       	adc	r24, r24
    2e5a:	bb 1f       	adc	r27, r27
    2e5c:	62 17       	cp	r22, r18
    2e5e:	73 07       	cpc	r23, r19
    2e60:	84 07       	cpc	r24, r20
    2e62:	ba 07       	cpc	r27, r26
    2e64:	20 f0       	brcs	.+8      	; 0x2e6e <__divsf3_pse+0xaa>
    2e66:	62 1b       	sub	r22, r18
    2e68:	73 0b       	sbc	r23, r19
    2e6a:	84 0b       	sbc	r24, r20
    2e6c:	ba 0b       	sbc	r27, r26
    2e6e:	ee 1f       	adc	r30, r30
    2e70:	88 f7       	brcc	.-30     	; 0x2e54 <__divsf3_pse+0x90>
    2e72:	e0 95       	com	r30
    2e74:	08 95       	ret

00002e76 <__fixsfsi>:
    2e76:	04 d0       	rcall	.+8      	; 0x2e80 <__fixunssfsi>
    2e78:	68 94       	set
    2e7a:	b1 11       	cpse	r27, r1
    2e7c:	d9 c0       	rjmp	.+434    	; 0x3030 <__fp_szero>
    2e7e:	08 95       	ret

00002e80 <__fixunssfsi>:
    2e80:	bc d0       	rcall	.+376    	; 0x2ffa <__fp_splitA>
    2e82:	88 f0       	brcs	.+34     	; 0x2ea6 <__fixunssfsi+0x26>
    2e84:	9f 57       	subi	r25, 0x7F	; 127
    2e86:	90 f0       	brcs	.+36     	; 0x2eac <__fixunssfsi+0x2c>
    2e88:	b9 2f       	mov	r27, r25
    2e8a:	99 27       	eor	r25, r25
    2e8c:	b7 51       	subi	r27, 0x17	; 23
    2e8e:	a0 f0       	brcs	.+40     	; 0x2eb8 <__fixunssfsi+0x38>
    2e90:	d1 f0       	breq	.+52     	; 0x2ec6 <__fixunssfsi+0x46>
    2e92:	66 0f       	add	r22, r22
    2e94:	77 1f       	adc	r23, r23
    2e96:	88 1f       	adc	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	1a f0       	brmi	.+6      	; 0x2ea2 <__fixunssfsi+0x22>
    2e9c:	ba 95       	dec	r27
    2e9e:	c9 f7       	brne	.-14     	; 0x2e92 <__fixunssfsi+0x12>
    2ea0:	12 c0       	rjmp	.+36     	; 0x2ec6 <__fixunssfsi+0x46>
    2ea2:	b1 30       	cpi	r27, 0x01	; 1
    2ea4:	81 f0       	breq	.+32     	; 0x2ec6 <__fixunssfsi+0x46>
    2ea6:	c3 d0       	rcall	.+390    	; 0x302e <__fp_zero>
    2ea8:	b1 e0       	ldi	r27, 0x01	; 1
    2eaa:	08 95       	ret
    2eac:	c0 c0       	rjmp	.+384    	; 0x302e <__fp_zero>
    2eae:	67 2f       	mov	r22, r23
    2eb0:	78 2f       	mov	r23, r24
    2eb2:	88 27       	eor	r24, r24
    2eb4:	b8 5f       	subi	r27, 0xF8	; 248
    2eb6:	39 f0       	breq	.+14     	; 0x2ec6 <__fixunssfsi+0x46>
    2eb8:	b9 3f       	cpi	r27, 0xF9	; 249
    2eba:	cc f3       	brlt	.-14     	; 0x2eae <__fixunssfsi+0x2e>
    2ebc:	86 95       	lsr	r24
    2ebe:	77 95       	ror	r23
    2ec0:	67 95       	ror	r22
    2ec2:	b3 95       	inc	r27
    2ec4:	d9 f7       	brne	.-10     	; 0x2ebc <__fixunssfsi+0x3c>
    2ec6:	3e f4       	brtc	.+14     	; 0x2ed6 <__fixunssfsi+0x56>
    2ec8:	90 95       	com	r25
    2eca:	80 95       	com	r24
    2ecc:	70 95       	com	r23
    2ece:	61 95       	neg	r22
    2ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed6:	08 95       	ret

00002ed8 <__floatunsisf>:
    2ed8:	e8 94       	clt
    2eda:	09 c0       	rjmp	.+18     	; 0x2eee <__floatsisf+0x12>

00002edc <__floatsisf>:
    2edc:	97 fb       	bst	r25, 7
    2ede:	3e f4       	brtc	.+14     	; 0x2eee <__floatsisf+0x12>
    2ee0:	90 95       	com	r25
    2ee2:	80 95       	com	r24
    2ee4:	70 95       	com	r23
    2ee6:	61 95       	neg	r22
    2ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eea:	8f 4f       	sbci	r24, 0xFF	; 255
    2eec:	9f 4f       	sbci	r25, 0xFF	; 255
    2eee:	99 23       	and	r25, r25
    2ef0:	a9 f0       	breq	.+42     	; 0x2f1c <__floatsisf+0x40>
    2ef2:	f9 2f       	mov	r31, r25
    2ef4:	96 e9       	ldi	r25, 0x96	; 150
    2ef6:	bb 27       	eor	r27, r27
    2ef8:	93 95       	inc	r25
    2efa:	f6 95       	lsr	r31
    2efc:	87 95       	ror	r24
    2efe:	77 95       	ror	r23
    2f00:	67 95       	ror	r22
    2f02:	b7 95       	ror	r27
    2f04:	f1 11       	cpse	r31, r1
    2f06:	f8 cf       	rjmp	.-16     	; 0x2ef8 <__floatsisf+0x1c>
    2f08:	fa f4       	brpl	.+62     	; 0x2f48 <__floatsisf+0x6c>
    2f0a:	bb 0f       	add	r27, r27
    2f0c:	11 f4       	brne	.+4      	; 0x2f12 <__floatsisf+0x36>
    2f0e:	60 ff       	sbrs	r22, 0
    2f10:	1b c0       	rjmp	.+54     	; 0x2f48 <__floatsisf+0x6c>
    2f12:	6f 5f       	subi	r22, 0xFF	; 255
    2f14:	7f 4f       	sbci	r23, 0xFF	; 255
    2f16:	8f 4f       	sbci	r24, 0xFF	; 255
    2f18:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1a:	16 c0       	rjmp	.+44     	; 0x2f48 <__floatsisf+0x6c>
    2f1c:	88 23       	and	r24, r24
    2f1e:	11 f0       	breq	.+4      	; 0x2f24 <__floatsisf+0x48>
    2f20:	96 e9       	ldi	r25, 0x96	; 150
    2f22:	11 c0       	rjmp	.+34     	; 0x2f46 <__floatsisf+0x6a>
    2f24:	77 23       	and	r23, r23
    2f26:	21 f0       	breq	.+8      	; 0x2f30 <__floatsisf+0x54>
    2f28:	9e e8       	ldi	r25, 0x8E	; 142
    2f2a:	87 2f       	mov	r24, r23
    2f2c:	76 2f       	mov	r23, r22
    2f2e:	05 c0       	rjmp	.+10     	; 0x2f3a <__floatsisf+0x5e>
    2f30:	66 23       	and	r22, r22
    2f32:	71 f0       	breq	.+28     	; 0x2f50 <__floatsisf+0x74>
    2f34:	96 e8       	ldi	r25, 0x86	; 134
    2f36:	86 2f       	mov	r24, r22
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	2a f0       	brmi	.+10     	; 0x2f48 <__floatsisf+0x6c>
    2f3e:	9a 95       	dec	r25
    2f40:	66 0f       	add	r22, r22
    2f42:	77 1f       	adc	r23, r23
    2f44:	88 1f       	adc	r24, r24
    2f46:	da f7       	brpl	.-10     	; 0x2f3e <__floatsisf+0x62>
    2f48:	88 0f       	add	r24, r24
    2f4a:	96 95       	lsr	r25
    2f4c:	87 95       	ror	r24
    2f4e:	97 f9       	bld	r25, 7
    2f50:	08 95       	ret

00002f52 <__fp_cmp>:
    2f52:	99 0f       	add	r25, r25
    2f54:	00 08       	sbc	r0, r0
    2f56:	55 0f       	add	r21, r21
    2f58:	aa 0b       	sbc	r26, r26
    2f5a:	e0 e8       	ldi	r30, 0x80	; 128
    2f5c:	fe ef       	ldi	r31, 0xFE	; 254
    2f5e:	16 16       	cp	r1, r22
    2f60:	17 06       	cpc	r1, r23
    2f62:	e8 07       	cpc	r30, r24
    2f64:	f9 07       	cpc	r31, r25
    2f66:	c0 f0       	brcs	.+48     	; 0x2f98 <__fp_cmp+0x46>
    2f68:	12 16       	cp	r1, r18
    2f6a:	13 06       	cpc	r1, r19
    2f6c:	e4 07       	cpc	r30, r20
    2f6e:	f5 07       	cpc	r31, r21
    2f70:	98 f0       	brcs	.+38     	; 0x2f98 <__fp_cmp+0x46>
    2f72:	62 1b       	sub	r22, r18
    2f74:	73 0b       	sbc	r23, r19
    2f76:	84 0b       	sbc	r24, r20
    2f78:	95 0b       	sbc	r25, r21
    2f7a:	39 f4       	brne	.+14     	; 0x2f8a <__fp_cmp+0x38>
    2f7c:	0a 26       	eor	r0, r26
    2f7e:	61 f0       	breq	.+24     	; 0x2f98 <__fp_cmp+0x46>
    2f80:	23 2b       	or	r18, r19
    2f82:	24 2b       	or	r18, r20
    2f84:	25 2b       	or	r18, r21
    2f86:	21 f4       	brne	.+8      	; 0x2f90 <__fp_cmp+0x3e>
    2f88:	08 95       	ret
    2f8a:	0a 26       	eor	r0, r26
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <__fp_cmp+0x3e>
    2f8e:	a1 40       	sbci	r26, 0x01	; 1
    2f90:	a6 95       	lsr	r26
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	81 1d       	adc	r24, r1
    2f96:	81 1d       	adc	r24, r1
    2f98:	08 95       	ret

00002f9a <__fp_inf>:
    2f9a:	97 f9       	bld	r25, 7
    2f9c:	9f 67       	ori	r25, 0x7F	; 127
    2f9e:	80 e8       	ldi	r24, 0x80	; 128
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	60 e0       	ldi	r22, 0x00	; 0
    2fa4:	08 95       	ret

00002fa6 <__fp_nan>:
    2fa6:	9f ef       	ldi	r25, 0xFF	; 255
    2fa8:	80 ec       	ldi	r24, 0xC0	; 192
    2faa:	08 95       	ret

00002fac <__fp_pscA>:
    2fac:	00 24       	eor	r0, r0
    2fae:	0a 94       	dec	r0
    2fb0:	16 16       	cp	r1, r22
    2fb2:	17 06       	cpc	r1, r23
    2fb4:	18 06       	cpc	r1, r24
    2fb6:	09 06       	cpc	r0, r25
    2fb8:	08 95       	ret

00002fba <__fp_pscB>:
    2fba:	00 24       	eor	r0, r0
    2fbc:	0a 94       	dec	r0
    2fbe:	12 16       	cp	r1, r18
    2fc0:	13 06       	cpc	r1, r19
    2fc2:	14 06       	cpc	r1, r20
    2fc4:	05 06       	cpc	r0, r21
    2fc6:	08 95       	ret

00002fc8 <__fp_round>:
    2fc8:	09 2e       	mov	r0, r25
    2fca:	03 94       	inc	r0
    2fcc:	00 0c       	add	r0, r0
    2fce:	11 f4       	brne	.+4      	; 0x2fd4 <__fp_round+0xc>
    2fd0:	88 23       	and	r24, r24
    2fd2:	52 f0       	brmi	.+20     	; 0x2fe8 <__fp_round+0x20>
    2fd4:	bb 0f       	add	r27, r27
    2fd6:	40 f4       	brcc	.+16     	; 0x2fe8 <__fp_round+0x20>
    2fd8:	bf 2b       	or	r27, r31
    2fda:	11 f4       	brne	.+4      	; 0x2fe0 <__fp_round+0x18>
    2fdc:	60 ff       	sbrs	r22, 0
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <__fp_round+0x20>
    2fe0:	6f 5f       	subi	r22, 0xFF	; 255
    2fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    2fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe8:	08 95       	ret

00002fea <__fp_split3>:
    2fea:	57 fd       	sbrc	r21, 7
    2fec:	90 58       	subi	r25, 0x80	; 128
    2fee:	44 0f       	add	r20, r20
    2ff0:	55 1f       	adc	r21, r21
    2ff2:	59 f0       	breq	.+22     	; 0x300a <__fp_splitA+0x10>
    2ff4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ff6:	71 f0       	breq	.+28     	; 0x3014 <__fp_splitA+0x1a>
    2ff8:	47 95       	ror	r20

00002ffa <__fp_splitA>:
    2ffa:	88 0f       	add	r24, r24
    2ffc:	97 fb       	bst	r25, 7
    2ffe:	99 1f       	adc	r25, r25
    3000:	61 f0       	breq	.+24     	; 0x301a <__fp_splitA+0x20>
    3002:	9f 3f       	cpi	r25, 0xFF	; 255
    3004:	79 f0       	breq	.+30     	; 0x3024 <__fp_splitA+0x2a>
    3006:	87 95       	ror	r24
    3008:	08 95       	ret
    300a:	12 16       	cp	r1, r18
    300c:	13 06       	cpc	r1, r19
    300e:	14 06       	cpc	r1, r20
    3010:	55 1f       	adc	r21, r21
    3012:	f2 cf       	rjmp	.-28     	; 0x2ff8 <__fp_split3+0xe>
    3014:	46 95       	lsr	r20
    3016:	f1 df       	rcall	.-30     	; 0x2ffa <__fp_splitA>
    3018:	08 c0       	rjmp	.+16     	; 0x302a <__fp_splitA+0x30>
    301a:	16 16       	cp	r1, r22
    301c:	17 06       	cpc	r1, r23
    301e:	18 06       	cpc	r1, r24
    3020:	99 1f       	adc	r25, r25
    3022:	f1 cf       	rjmp	.-30     	; 0x3006 <__fp_splitA+0xc>
    3024:	86 95       	lsr	r24
    3026:	71 05       	cpc	r23, r1
    3028:	61 05       	cpc	r22, r1
    302a:	08 94       	sec
    302c:	08 95       	ret

0000302e <__fp_zero>:
    302e:	e8 94       	clt

00003030 <__fp_szero>:
    3030:	bb 27       	eor	r27, r27
    3032:	66 27       	eor	r22, r22
    3034:	77 27       	eor	r23, r23
    3036:	cb 01       	movw	r24, r22
    3038:	97 f9       	bld	r25, 7
    303a:	08 95       	ret

0000303c <__gesf2>:
    303c:	8a df       	rcall	.-236    	; 0x2f52 <__fp_cmp>
    303e:	08 f4       	brcc	.+2      	; 0x3042 <__gesf2+0x6>
    3040:	8f ef       	ldi	r24, 0xFF	; 255
    3042:	08 95       	ret

00003044 <__mulsf3>:
    3044:	0b d0       	rcall	.+22     	; 0x305c <__mulsf3x>
    3046:	c0 cf       	rjmp	.-128    	; 0x2fc8 <__fp_round>
    3048:	b1 df       	rcall	.-158    	; 0x2fac <__fp_pscA>
    304a:	28 f0       	brcs	.+10     	; 0x3056 <__mulsf3+0x12>
    304c:	b6 df       	rcall	.-148    	; 0x2fba <__fp_pscB>
    304e:	18 f0       	brcs	.+6      	; 0x3056 <__mulsf3+0x12>
    3050:	95 23       	and	r25, r21
    3052:	09 f0       	breq	.+2      	; 0x3056 <__mulsf3+0x12>
    3054:	a2 cf       	rjmp	.-188    	; 0x2f9a <__fp_inf>
    3056:	a7 cf       	rjmp	.-178    	; 0x2fa6 <__fp_nan>
    3058:	11 24       	eor	r1, r1
    305a:	ea cf       	rjmp	.-44     	; 0x3030 <__fp_szero>

0000305c <__mulsf3x>:
    305c:	c6 df       	rcall	.-116    	; 0x2fea <__fp_split3>
    305e:	a0 f3       	brcs	.-24     	; 0x3048 <__mulsf3+0x4>

00003060 <__mulsf3_pse>:
    3060:	95 9f       	mul	r25, r21
    3062:	d1 f3       	breq	.-12     	; 0x3058 <__mulsf3+0x14>
    3064:	95 0f       	add	r25, r21
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	55 1f       	adc	r21, r21
    306a:	62 9f       	mul	r22, r18
    306c:	f0 01       	movw	r30, r0
    306e:	72 9f       	mul	r23, r18
    3070:	bb 27       	eor	r27, r27
    3072:	f0 0d       	add	r31, r0
    3074:	b1 1d       	adc	r27, r1
    3076:	63 9f       	mul	r22, r19
    3078:	aa 27       	eor	r26, r26
    307a:	f0 0d       	add	r31, r0
    307c:	b1 1d       	adc	r27, r1
    307e:	aa 1f       	adc	r26, r26
    3080:	64 9f       	mul	r22, r20
    3082:	66 27       	eor	r22, r22
    3084:	b0 0d       	add	r27, r0
    3086:	a1 1d       	adc	r26, r1
    3088:	66 1f       	adc	r22, r22
    308a:	82 9f       	mul	r24, r18
    308c:	22 27       	eor	r18, r18
    308e:	b0 0d       	add	r27, r0
    3090:	a1 1d       	adc	r26, r1
    3092:	62 1f       	adc	r22, r18
    3094:	73 9f       	mul	r23, r19
    3096:	b0 0d       	add	r27, r0
    3098:	a1 1d       	adc	r26, r1
    309a:	62 1f       	adc	r22, r18
    309c:	83 9f       	mul	r24, r19
    309e:	a0 0d       	add	r26, r0
    30a0:	61 1d       	adc	r22, r1
    30a2:	22 1f       	adc	r18, r18
    30a4:	74 9f       	mul	r23, r20
    30a6:	33 27       	eor	r19, r19
    30a8:	a0 0d       	add	r26, r0
    30aa:	61 1d       	adc	r22, r1
    30ac:	23 1f       	adc	r18, r19
    30ae:	84 9f       	mul	r24, r20
    30b0:	60 0d       	add	r22, r0
    30b2:	21 1d       	adc	r18, r1
    30b4:	82 2f       	mov	r24, r18
    30b6:	76 2f       	mov	r23, r22
    30b8:	6a 2f       	mov	r22, r26
    30ba:	11 24       	eor	r1, r1
    30bc:	9f 57       	subi	r25, 0x7F	; 127
    30be:	50 40       	sbci	r21, 0x00	; 0
    30c0:	8a f0       	brmi	.+34     	; 0x30e4 <__mulsf3_pse+0x84>
    30c2:	e1 f0       	breq	.+56     	; 0x30fc <__mulsf3_pse+0x9c>
    30c4:	88 23       	and	r24, r24
    30c6:	4a f0       	brmi	.+18     	; 0x30da <__mulsf3_pse+0x7a>
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	bb 1f       	adc	r27, r27
    30ce:	66 1f       	adc	r22, r22
    30d0:	77 1f       	adc	r23, r23
    30d2:	88 1f       	adc	r24, r24
    30d4:	91 50       	subi	r25, 0x01	; 1
    30d6:	50 40       	sbci	r21, 0x00	; 0
    30d8:	a9 f7       	brne	.-22     	; 0x30c4 <__mulsf3_pse+0x64>
    30da:	9e 3f       	cpi	r25, 0xFE	; 254
    30dc:	51 05       	cpc	r21, r1
    30de:	70 f0       	brcs	.+28     	; 0x30fc <__mulsf3_pse+0x9c>
    30e0:	5c cf       	rjmp	.-328    	; 0x2f9a <__fp_inf>
    30e2:	a6 cf       	rjmp	.-180    	; 0x3030 <__fp_szero>
    30e4:	5f 3f       	cpi	r21, 0xFF	; 255
    30e6:	ec f3       	brlt	.-6      	; 0x30e2 <__mulsf3_pse+0x82>
    30e8:	98 3e       	cpi	r25, 0xE8	; 232
    30ea:	dc f3       	brlt	.-10     	; 0x30e2 <__mulsf3_pse+0x82>
    30ec:	86 95       	lsr	r24
    30ee:	77 95       	ror	r23
    30f0:	67 95       	ror	r22
    30f2:	b7 95       	ror	r27
    30f4:	f7 95       	ror	r31
    30f6:	e7 95       	ror	r30
    30f8:	9f 5f       	subi	r25, 0xFF	; 255
    30fa:	c1 f7       	brne	.-16     	; 0x30ec <__mulsf3_pse+0x8c>
    30fc:	fe 2b       	or	r31, r30
    30fe:	88 0f       	add	r24, r24
    3100:	91 1d       	adc	r25, r1
    3102:	96 95       	lsr	r25
    3104:	87 95       	ror	r24
    3106:	97 f9       	bld	r25, 7
    3108:	08 95       	ret

0000310a <__divmodhi4>:
    310a:	97 fb       	bst	r25, 7
    310c:	09 2e       	mov	r0, r25
    310e:	07 26       	eor	r0, r23
    3110:	0a d0       	rcall	.+20     	; 0x3126 <__divmodhi4_neg1>
    3112:	77 fd       	sbrc	r23, 7
    3114:	04 d0       	rcall	.+8      	; 0x311e <__divmodhi4_neg2>
    3116:	0c d0       	rcall	.+24     	; 0x3130 <__udivmodhi4>
    3118:	06 d0       	rcall	.+12     	; 0x3126 <__divmodhi4_neg1>
    311a:	00 20       	and	r0, r0
    311c:	1a f4       	brpl	.+6      	; 0x3124 <__divmodhi4_exit>

0000311e <__divmodhi4_neg2>:
    311e:	70 95       	com	r23
    3120:	61 95       	neg	r22
    3122:	7f 4f       	sbci	r23, 0xFF	; 255

00003124 <__divmodhi4_exit>:
    3124:	08 95       	ret

00003126 <__divmodhi4_neg1>:
    3126:	f6 f7       	brtc	.-4      	; 0x3124 <__divmodhi4_exit>
    3128:	90 95       	com	r25
    312a:	81 95       	neg	r24
    312c:	9f 4f       	sbci	r25, 0xFF	; 255
    312e:	08 95       	ret

00003130 <__udivmodhi4>:
    3130:	aa 1b       	sub	r26, r26
    3132:	bb 1b       	sub	r27, r27
    3134:	51 e1       	ldi	r21, 0x11	; 17
    3136:	07 c0       	rjmp	.+14     	; 0x3146 <__udivmodhi4_ep>

00003138 <__udivmodhi4_loop>:
    3138:	aa 1f       	adc	r26, r26
    313a:	bb 1f       	adc	r27, r27
    313c:	a6 17       	cp	r26, r22
    313e:	b7 07       	cpc	r27, r23
    3140:	10 f0       	brcs	.+4      	; 0x3146 <__udivmodhi4_ep>
    3142:	a6 1b       	sub	r26, r22
    3144:	b7 0b       	sbc	r27, r23

00003146 <__udivmodhi4_ep>:
    3146:	88 1f       	adc	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	5a 95       	dec	r21
    314c:	a9 f7       	brne	.-22     	; 0x3138 <__udivmodhi4_loop>
    314e:	80 95       	com	r24
    3150:	90 95       	com	r25
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	08 95       	ret

00003158 <__eerd_byte_m32>:
    3158:	e1 99       	sbic	0x1c, 1	; 28
    315a:	fe cf       	rjmp	.-4      	; 0x3158 <__eerd_byte_m32>
    315c:	9f bb       	out	0x1f, r25	; 31
    315e:	8e bb       	out	0x1e, r24	; 30
    3160:	e0 9a       	sbi	0x1c, 0	; 28
    3162:	99 27       	eor	r25, r25
    3164:	8d b3       	in	r24, 0x1d	; 29
    3166:	08 95       	ret

00003168 <__eerd_word_m32>:
    3168:	a8 e1       	ldi	r26, 0x18	; 24
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	42 e0       	ldi	r20, 0x02	; 2
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__eerd_blraw_m32>

00003174 <__eewr_byte_m32>:
    3174:	26 2f       	mov	r18, r22

00003176 <__eewr_r18_m32>:
    3176:	e1 99       	sbic	0x1c, 1	; 28
    3178:	fe cf       	rjmp	.-4      	; 0x3176 <__eewr_r18_m32>
    317a:	9f bb       	out	0x1f, r25	; 31
    317c:	8e bb       	out	0x1e, r24	; 30
    317e:	2d bb       	out	0x1d, r18	; 29
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	e2 9a       	sbi	0x1c, 2	; 28
    3186:	e1 9a       	sbi	0x1c, 1	; 28
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	08 95       	ret

0000318e <__eewr_word_m32>:
    318e:	0e 94 ba 18 	call	0x3174	; 0x3174 <__eewr_byte_m32>
    3192:	27 2f       	mov	r18, r23
    3194:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__eewr_r18_m32>

00003198 <__eerd_block_m32>:
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22

0000319c <__eerd_blraw_m32>:
    319c:	fc 01       	movw	r30, r24
    319e:	e1 99       	sbic	0x1c, 1	; 28
    31a0:	fe cf       	rjmp	.-4      	; 0x319e <__eerd_blraw_m32+0x2>
    31a2:	06 c0       	rjmp	.+12     	; 0x31b0 <__eerd_blraw_m32+0x14>
    31a4:	ff bb       	out	0x1f, r31	; 31
    31a6:	ee bb       	out	0x1e, r30	; 30
    31a8:	e0 9a       	sbi	0x1c, 0	; 28
    31aa:	31 96       	adiw	r30, 0x01	; 1
    31ac:	0d b2       	in	r0, 0x1d	; 29
    31ae:	0d 92       	st	X+, r0
    31b0:	41 50       	subi	r20, 0x01	; 1
    31b2:	50 40       	sbci	r21, 0x00	; 0
    31b4:	b8 f7       	brcc	.-18     	; 0x31a4 <__eerd_blraw_m32+0x8>
    31b6:	08 95       	ret

000031b8 <_exit>:
    31b8:	f8 94       	cli

000031ba <__stop_program>:
    31ba:	ff cf       	rjmp	.-2      	; 0x31ba <__stop_program>
