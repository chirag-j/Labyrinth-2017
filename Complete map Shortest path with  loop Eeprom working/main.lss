
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00003862  000038f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000463  008000fe  008000fe  00003994  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006c8  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d77  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f3  00000000  00000000  00005df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000268b  00000000  00000000  000061e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00008874  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b7  00000000  00000000  00008ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c62  00000000  00000000  0000939b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00009ffd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 15 	call	0x2b30	; 0x2b30 <main>
      8a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 22 1a 	call	0x3444	; 0x3444 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     18e:	0e 94 93 1a 	call	0x3526	; 0x3526 <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 93 1a 	call	0x3526	; 0x3526 <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 22 1a 	call	0x3444	; 0x3444 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 26 1a 	call	0x344c	; 0x344c <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 22 1a 	call	0x3444	; 0x3444 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     286:	0e 94 93 1a 	call	0x3526	; 0x3526 <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 93 1a 	call	0x3526	; 0x3526 <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 93 1a 	call	0x3526	; 0x3526 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 fe 00 	sts	0x00FE, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 fe 00 	lds	r24, 0x00FE
     300:	82 2b       	or	r24, r18
     302:	80 93 fe 00 	sts	0x00FE, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 11 05 	sts	0x0511, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 12 05 	sts	0x0512, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 13 05 	sts	0x0513, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 14 05 	sts	0x0514, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 55 05 	sts	0x0555, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 56 05 	sts	0x0556, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 57 05 	sts	0x0557, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 58 05 	sts	0x0558, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
int mx=0, my=0;
int path_array[15][2];
int special_flag = 0, repeat=0, right_c=0, left_c=0;
int right;
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 fe 00 	lds	r24, 0x00FE
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 00 01 	sts	0x0100, r25
     778:	80 93 ff 00 	sts	0x00FF, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 0b 01 	lds	r24, 0x010B
     780:	90 91 0c 01 	lds	r25, 0x010C
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 00 01 	sts	0x0100, r1
     78c:	10 92 ff 00 	sts	0x00FF, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 00 01 	sts	0x0100, r25
     7a0:	80 93 ff 00 	sts	0x00FF, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 ff 00 	lds	r22, 0x00FF
     7a8:	70 91 00 01 	lds	r23, 0x0100
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 59 05 	lds	r22, 0x0559
     7c0:	70 91 5a 05 	lds	r23, 0x055A
     7c4:	80 91 5b 05 	lds	r24, 0x055B
     7c8:	90 91 5c 05 	lds	r25, 0x055C
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 bd 19 	call	0x337a	; 0x337a <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 5d 05 	sts	0x055D, r22
     7dc:	70 93 5e 05 	sts	0x055E, r23
     7e0:	80 93 5f 05 	sts	0x055F, r24
     7e4:	90 93 60 05 	sts	0x0560, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 ef 00 	lds	r18, 0x00EF
     7f0:	30 91 f0 00 	lds	r19, 0x00F0
     7f4:	40 91 f1 00 	lds	r20, 0x00F1
     7f8:	50 91 f2 00 	lds	r21, 0x00F2
     7fc:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 f3 00 	lds	r18, 0x00F3
     80c:	30 91 f4 00 	lds	r19, 0x00F4
     810:	40 91 f5 00 	lds	r20, 0x00F5
     814:	50 91 f6 00 	lds	r21, 0x00F6
     818:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 bd 19 	call	0x337a	; 0x337a <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 23 01 	sts	0x0123, r22
     830:	70 93 24 01 	sts	0x0124, r23
     834:	80 93 25 01 	sts	0x0125, r24
     838:	90 93 26 01 	sts	0x0126, r25
	prev_error = mpos ;
     83c:	a0 92 59 05 	sts	0x0559, r10
     840:	b0 92 5a 05 	sts	0x055A, r11
     844:	c0 92 5b 05 	sts	0x055B, r12
     848:	d0 92 5c 05 	sts	0x055C, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 ed 00 	lds	r22, 0x00ED
     850:	70 91 ee 00 	lds	r23, 0x00EE
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 bf 1a 	call	0x357e	; 0x357e <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 bd 19 	call	0x337a	; 0x337a <__subsf3>
     868:	0e 94 8e 1a 	call	0x351c	; 0x351c <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 be 19 	call	0x337c	; 0x337c <__addsf3>
     87c:	0e 94 8e 1a 	call	0x351c	; 0x351c <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 f7 00 	sts	0x00F7, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
     92a:	08 95       	ret

0000092c <left_count>:
	delay_millisec(50);
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     92c:	cc 99       	sbic	0x19, 4	; 25
     92e:	16 c0       	rjmp	.+44     	; 0x95c <left_count+0x30>
	{
		if(l==0)
     930:	80 91 03 01 	lds	r24, 0x0103
     934:	90 91 04 01 	lds	r25, 0x0104
     938:	89 2b       	or	r24, r25
     93a:	a1 f4       	brne	.+40     	; 0x964 <left_count+0x38>
		{
			lcount++;
     93c:	80 91 05 01 	lds	r24, 0x0105
     940:	90 91 06 01 	lds	r25, 0x0106
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	90 93 06 01 	sts	0x0106, r25
     94a:	80 93 05 01 	sts	0x0105, r24
			l = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 04 01 	sts	0x0104, r25
     956:	80 93 03 01 	sts	0x0103, r24
     95a:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     95c:	10 92 04 01 	sts	0x0104, r1
     960:	10 92 03 01 	sts	0x0103, r1
     964:	08 95       	ret

00000966 <special_case_check>:
	bot_brake();
	delay_sec(2);
}
void special_case_check()         ////called inside left_junc_check
{
	if(bit_is_clear(PINA,5) || flag1 == 1)
     966:	cd 9b       	sbis	0x19, 5	; 25
     968:	06 c0       	rjmp	.+12     	; 0x976 <special_case_check+0x10>
     96a:	80 91 0b 01 	lds	r24, 0x010B
     96e:	90 91 0c 01 	lds	r25, 0x010C
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	79 f5       	brne	.+94     	; 0x9d4 <special_case_check+0x6e>
	{
		flag1 = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 0c 01 	sts	0x010C, r25
     97e:	80 93 0b 01 	sts	0x010B, r24
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
     982:	cc 99       	sbic	0x19, 4	; 25
     984:	27 c0       	rjmp	.+78     	; 0x9d4 <special_case_check+0x6e>
     986:	86 9b       	sbis	0x10, 6	; 16
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <special_case_check+0x4c>
     98a:	ce 9b       	sbis	0x19, 6	; 25
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <special_case_check+0x4c>
     98e:	08 95       	ret
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     990:	3b bd       	out	0x2b, r19	; 43
     992:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     994:	39 bd       	out	0x29, r19	; 41
     996:	28 bd       	out	0x28, r18	; 40
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     998:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     99a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     99c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     99e:	af 98       	cbi	0x15, 7	; 21
			{
				set_pwm1a(240);
				set_pwm1b(240);
				bot_forward();
				flag1 = 0;
				if(bit_is_clear(PIND, 7))
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	87 99       	sbic	0x10, 7	; 16
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <special_case_check+0x54>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9a8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9aa:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9ac:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9ae:	af 9a       	sbi	0x15, 7	; 21
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <special_case_check+0x54>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9b6:	20 ef       	ldi	r18, 0xF0	; 240
     9b8:	30 e0       	ldi	r19, 0x00	; 0
	{
		flag1 = 1;
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
		{
			while(bit_is_clear(PINA,4) && bit_is_set(PIND, 7)) 
     9ba:	cc 9b       	sbis	0x19, 4	; 25
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <special_case_check+0x62>
     9be:	90 93 0c 01 	sts	0x010C, r25
     9c2:	80 93 0b 01 	sts	0x010B, r24
     9c6:	08 95       	ret
     9c8:	87 99       	sbic	0x10, 7	; 16
     9ca:	e2 cf       	rjmp	.-60     	; 0x990 <special_case_check+0x2a>
     9cc:	90 93 0c 01 	sts	0x010C, r25
     9d0:	80 93 0b 01 	sts	0x010B, r24
     9d4:	08 95       	ret

000009d6 <line_track_new>:
	
}

void line_track_new()
{
	check_sensors();
     9d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9da:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9dc:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9de:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9e0:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     9e2:	ce 9b       	sbis	0x19, 6	; 25
     9e4:	0b c0       	rjmp	.+22     	; 0x9fc <line_track_new+0x26>
     9e6:	86 99       	sbic	0x10, 6	; 16
     9e8:	09 c0       	rjmp	.+18     	; 0x9fc <line_track_new+0x26>
	{
		set_pwm1a(opt-30);
     9ea:	80 91 ed 00 	lds	r24, 0x00ED
     9ee:	90 91 ee 00 	lds	r25, 0x00EE
     9f2:	4e 97       	sbiw	r24, 0x1e	; 30
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9f4:	9b bd       	out	0x2b, r25	; 43
     9f6:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt+30);
     9f8:	cc 96       	adiw	r24, 0x3c	; 60
     9fa:	1e c0       	rjmp	.+60     	; 0xa38 <line_track_new+0x62>

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     9fc:	86 9b       	sbis	0x10, 6	; 16
     9fe:	0b c0       	rjmp	.+22     	; 0xa16 <line_track_new+0x40>
     a00:	ce 99       	sbic	0x19, 6	; 25
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <line_track_new+0x40>
	{
		set_pwm1a(opt+30);
     a04:	80 91 ed 00 	lds	r24, 0x00ED
     a08:	90 91 ee 00 	lds	r25, 0x00EE
     a0c:	4e 96       	adiw	r24, 0x1e	; 30
     a0e:	9b bd       	out	0x2b, r25	; 43
     a10:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt-30);
     a12:	cc 97       	sbiw	r24, 0x3c	; 60
     a14:	11 c0       	rjmp	.+34     	; 0xa38 <line_track_new+0x62>
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     a16:	86 9b       	sbis	0x10, 6	; 16
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <line_track_new+0x4e>
     a1a:	ce 9b       	sbis	0x19, 6	; 25
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <line_track_new+0x4e>
	{
		line_track();
     a1e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <line_track_new+0x66>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     a24:	86 99       	sbic	0x10, 6	; 16
     a26:	0a c0       	rjmp	.+20     	; 0xa3c <line_track_new+0x66>
     a28:	ce 99       	sbic	0x19, 6	; 25
     a2a:	08 c0       	rjmp	.+16     	; 0xa3c <line_track_new+0x66>
	{
		set_pwm1a(opt);
     a2c:	80 91 ed 00 	lds	r24, 0x00ED
     a30:	90 91 ee 00 	lds	r25, 0x00EE
     a34:	9b bd       	out	0x2b, r25	; 43
     a36:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a38:	99 bd       	out	0x29, r25	; 41
     a3a:	88 bd       	out	0x28, r24	; 40
		set_pwm1b(opt);
	}
		delay_microsec(10);
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     a44:	08 95       	ret

00000a46 <end_zone_uturn>:
	
}

void end_zone_uturn()
{
	turn = 'u';
     a46:	85 e7       	ldi	r24, 0x75	; 117
     a48:	80 93 f7 00 	sts	0x00F7, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a4c:	24 e0       	ldi	r18, 0x04	; 4
     a4e:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	08 c0       	rjmp	.+16     	; 0xa66 <end_zone_uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a56:	3b bd       	out	0x2b, r19	; 43
     a58:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a5a:	99 bd       	out	0x29, r25	; 41
     a5c:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a5e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a60:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a62:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a64:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_clear(PINA,5))
     a66:	cd 9b       	sbis	0x19, 5	; 25
     a68:	f6 cf       	rjmp	.-20     	; 0xa56 <end_zone_uturn+0x10>
	{
		set_pwm1a(260);
		set_pwm1b(280);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,6) || bit_is_clear(PIND,6));
     a6a:	ce 9b       	sbis	0x19, 6	; 25
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <end_zone_uturn+0x24>
     a6e:	86 9b       	sbis	0x10, 6	; 16
     a70:	fc cf       	rjmp	.-8      	; 0xa6a <end_zone_uturn+0x24>
	while(bit_is_set(PINA,5));
     a72:	cd 99       	sbic	0x19, 5	; 25
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <end_zone_uturn+0x2c>
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <end_zone_uturn+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a78:	9b bd       	out	0x2b, r25	; 43
     a7a:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a7c:	99 bd       	out	0x29, r25	; 41
     a7e:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a80:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a82:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a84:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a86:	af 98       	cbi	0x15, 7	; 21
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <end_zone_uturn+0x48>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a8a:	82 ed       	ldi	r24, 0xD2	; 210
     a8c:	90 e0       	ldi	r25, 0x00	; 0
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a8e:	ce 9b       	sbis	0x19, 6	; 25
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <end_zone_uturn+0x56>
     a92:	86 99       	sbic	0x10, 6	; 16
     a94:	f1 cf       	rjmp	.-30     	; 0xa78 <end_zone_uturn+0x32>
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <end_zone_uturn+0x56>
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     a98:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	{
		set_pwm1a(210);
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     a9c:	cc 9b       	sbis	0x19, 4	; 25
     a9e:	fc cf       	rjmp	.-8      	; 0xa98 <end_zone_uturn+0x52>
     aa0:	87 9b       	sbis	0x10, 7	; 16
     aa2:	fa cf       	rjmp	.-12     	; 0xa98 <end_zone_uturn+0x52>
     aa4:	8f e8       	ldi	r24, 0x8F	; 143
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	9b bd       	out	0x2b, r25	; 43
     aaa:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     aac:	99 bd       	out	0x29, r25	; 41
     aae:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     ab0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     ab2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ab4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     ab6:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_sec(2);
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
}
     ac0:	08 95       	ret

00000ac2 <turn_left>:
	delay_millisec(50);
}

void turn_left()
{	
	turn = 'l';
     ac2:	8c e6       	ldi	r24, 0x6C	; 108
     ac4:	80 93 f7 00 	sts	0x00F7, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ac8:	85 ef       	ldi	r24, 0xF5	; 245
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	08 c0       	rjmp	.+16     	; 0xade <turn_left+0x1c>
     ace:	9b bd       	out	0x2b, r25	; 43
     ad0:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ad2:	99 bd       	out	0x29, r25	; 41
     ad4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     ad6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     ad8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ada:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     adc:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_set(PINA,5))
     ade:	cd 99       	sbic	0x19, 5	; 25
     ae0:	f6 cf       	rjmp	.-20     	; 0xace <turn_left+0xc>
     ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <turn_left+0x34>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ae4:	9b bd       	out	0x2b, r25	; 43
     ae6:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ae8:	99 bd       	out	0x29, r25	; 41
     aea:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     aec:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     aee:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     af0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     af2:	af 98       	cbi	0x15, 7	; 21
     af4:	02 c0       	rjmp	.+4      	; 0xafa <turn_left+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     af6:	80 ef       	ldi	r24, 0xF0	; 240
     af8:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     afa:	ce 9b       	sbis	0x19, 6	; 25
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <turn_left+0x46>
     afe:	86 99       	sbic	0x10, 6	; 16
     b00:	f1 cf       	rjmp	.-30     	; 0xae4 <turn_left+0x22>
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <turn_left+0x46>
		set_pwm1b(240);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b04:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	{
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b08:	cc 9b       	sbis	0x19, 4	; 25
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <turn_left+0x42>
     b0c:	87 9b       	sbis	0x10, 7	; 16
     b0e:	fa cf       	rjmp	.-12     	; 0xb04 <turn_left+0x42>
     b10:	8f e8       	ldi	r24, 0x8F	; 143
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	9b bd       	out	0x2b, r25	; 43
     b16:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b18:	99 bd       	out	0x29, r25	; 41
     b1a:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b1c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b1e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b20:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b22:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b24:	82 e3       	ldi	r24, 0x32	; 50
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     b2c:	08 95       	ret

00000b2e <turn_right>:
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
void turn_right()
{	
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	turn = 'r';
     b32:	82 e7       	ldi	r24, 0x72	; 114
     b34:	80 93 f7 00 	sts	0x00F7, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b38:	c5 ef       	ldi	r28, 0xF5	; 245
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
     b3c:	0a c0       	rjmp	.+20     	; 0xb52 <turn_right+0x24>
     b3e:	db bd       	out	0x2b, r29	; 43
     b40:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b42:	d9 bd       	out	0x29, r29	; 41
     b44:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     b46:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     b48:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     b4a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b4c:	af 9a       	sbi	0x15, 7	; 21
	while(bit_is_set(PINA,7))
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_right();
		left_count();
     b4e:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_set(PINA,7))
     b52:	cf 99       	sbic	0x19, 7	; 25
     b54:	f4 cf       	rjmp	.-24     	; 0xb3e <turn_right+0x10>
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <turn_right+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b58:	db bd       	out	0x2b, r29	; 43
     b5a:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b5c:	d9 bd       	out	0x29, r29	; 41
     b5e:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     b60:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     b62:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     b64:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b66:	af 9a       	sbi	0x15, 7	; 21
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
	{
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_right();
		left_count();
     b68:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <turn_right+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b6e:	c0 ef       	ldi	r28, 0xF0	; 240
     b70:	d0 e0       	ldi	r29, 0x00	; 0
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_right();
		left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     b72:	ce 9b       	sbis	0x19, 6	; 25
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <turn_right+0x52>
     b76:	86 99       	sbic	0x10, 6	; 16
     b78:	ef cf       	rjmp	.-34     	; 0xb58 <turn_right+0x2a>
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <turn_right+0x52>
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b80:	cc 9b       	sbis	0x19, 4	; 25
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <turn_right+0x4e>
     b84:	87 9b       	sbis	0x10, 7	; 16
     b86:	fa cf       	rjmp	.-12     	; 0xb7c <turn_right+0x4e>
     b88:	8f e8       	ldi	r24, 0x8F	; 143
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	9b bd       	out	0x2b, r25	; 43
     b8e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b90:	99 bd       	out	0x29, r25	; 41
     b92:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b94:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b96:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b98:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b9a:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b9c:	82 e3       	ldi	r24, 0x32	; 50
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <sense_of_directon>:
}


void sense_of_directon(void)
{
	if(turn == 'r')	
     baa:	80 91 f7 00 	lds	r24, 0x00F7
     bae:	82 37       	cpi	r24, 0x72	; 114
     bb0:	d1 f4       	brne	.+52     	; 0xbe6 <sense_of_directon+0x3c>
	{
		switch(dir)
     bb2:	80 91 f8 00 	lds	r24, 0x00F8
     bb6:	90 91 f9 00 	lds	r25, 0x00F9
     bba:	2f ef       	ldi	r18, 0xFF	; 255
     bbc:	8f 3f       	cpi	r24, 0xFF	; 255
     bbe:	92 07       	cpc	r25, r18
     bc0:	59 f1       	breq	.+86     	; 0xc18 <sense_of_directon+0x6e>
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	92 07       	cpc	r25, r18
     bc8:	09 f0       	breq	.+2      	; 0xbcc <sense_of_directon+0x22>
     bca:	2c f4       	brge	.+10     	; 0xbd6 <sense_of_directon+0x2c>
     bcc:	8e 5f       	subi	r24, 0xFE	; 254
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <sense_of_directon+0x2a>
     bd2:	51 c0       	rjmp	.+162    	; 0xc76 <sense_of_directon+0xcc>
     bd4:	3d c0       	rjmp	.+122    	; 0xc50 <sense_of_directon+0xa6>
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <sense_of_directon+0x34>
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <sense_of_directon+0xb2>
     bde:	02 97       	sbiw	r24, 0x02	; 2
     be0:	09 f0       	breq	.+2      	; 0xbe4 <sense_of_directon+0x3a>
     be2:	49 c0       	rjmp	.+146    	; 0xc76 <sense_of_directon+0xcc>
     be4:	38 c0       	rjmp	.+112    	; 0xc56 <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     be6:	8c 36       	cpi	r24, 0x6C	; 108
     be8:	d1 f4       	brne	.+52     	; 0xc1e <sense_of_directon+0x74>
	{
		switch(dir)
     bea:	80 91 f8 00 	lds	r24, 0x00F8
     bee:	90 91 f9 00 	lds	r25, 0x00F9
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	8f 3f       	cpi	r24, 0xFF	; 255
     bf6:	92 07       	cpc	r25, r18
     bf8:	89 f1       	breq	.+98     	; 0xc5c <sense_of_directon+0xb2>
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	92 07       	cpc	r25, r18
     c00:	09 f0       	breq	.+2      	; 0xc04 <sense_of_directon+0x5a>
     c02:	24 f4       	brge	.+8      	; 0xc0c <sense_of_directon+0x62>
     c04:	8e 5f       	subi	r24, 0xFE	; 254
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	b1 f5       	brne	.+108    	; 0xc76 <sense_of_directon+0xcc>
     c0a:	25 c0       	rjmp	.+74     	; 0xc56 <sense_of_directon+0xac>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	91 05       	cpc	r25, r1
     c10:	19 f0       	breq	.+6      	; 0xc18 <sense_of_directon+0x6e>
     c12:	02 97       	sbiw	r24, 0x02	; 2
     c14:	81 f5       	brne	.+96     	; 0xc76 <sense_of_directon+0xcc>
     c16:	1c c0       	rjmp	.+56     	; 0xc50 <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	21 c0       	rjmp	.+66     	; 0xc60 <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     c1e:	85 37       	cpi	r24, 0x75	; 117
     c20:	51 f5       	brne	.+84     	; 0xc76 <sense_of_directon+0xcc>
	{
		switch(dir)
     c22:	80 91 f8 00 	lds	r24, 0x00F8
     c26:	90 91 f9 00 	lds	r25, 0x00F9
     c2a:	2f ef       	ldi	r18, 0xFF	; 255
     c2c:	8f 3f       	cpi	r24, 0xFF	; 255
     c2e:	92 07       	cpc	r25, r18
     c30:	91 f0       	breq	.+36     	; 0xc56 <sense_of_directon+0xac>
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	92 07       	cpc	r25, r18
     c38:	09 f0       	breq	.+2      	; 0xc3c <sense_of_directon+0x92>
     c3a:	24 f4       	brge	.+8      	; 0xc44 <sense_of_directon+0x9a>
     c3c:	8e 5f       	subi	r24, 0xFE	; 254
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	d1 f4       	brne	.+52     	; 0xc76 <sense_of_directon+0xcc>
     c42:	13 c0       	rjmp	.+38     	; 0xc6a <sense_of_directon+0xc0>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	19 f0       	breq	.+6      	; 0xc50 <sense_of_directon+0xa6>
     c4a:	02 97       	sbiw	r24, 0x02	; 2
     c4c:	a1 f4       	brne	.+40     	; 0xc76 <sense_of_directon+0xcc>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     c5c:	8e ef       	ldi	r24, 0xFE	; 254
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	90 93 f9 00 	sts	0x00F9, r25
     c64:	80 93 f8 00 	sts	0x00F8, r24
     c68:	08 95       	ret
			case -2: dir = +2; break;	
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	90 93 f9 00 	sts	0x00F9, r25
     c72:	80 93 f8 00 	sts	0x00F8, r24
     c76:	08 95       	ret

00000c78 <is_coordinate_null>:
	}
	
}

int is_coordinate_null(int x,int y)
{
     c78:	38 2f       	mov	r19, r24
     c7a:	49 2f       	mov	r20, r25
	if(dir_array[x][y][0]==0 && dir_array[x][y][1]==0 && dir_array[x][y][2]==0 && dir_array[x][y][3]==0)
     c7c:	fc 01       	movw	r30, r24
     c7e:	b3 e0       	ldi	r27, 0x03	; 3
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ba 95       	dec	r27
     c86:	e1 f7       	brne	.-8      	; 0xc80 <is_coordinate_null+0x8>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	e8 0f       	add	r30, r24
     c8e:	f9 1f       	adc	r31, r25
     c90:	e6 0f       	add	r30, r22
     c92:	f7 1f       	adc	r31, r23
     c94:	53 e0       	ldi	r21, 0x03	; 3
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	5a 95       	dec	r21
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <is_coordinate_null+0x1e>
     c9e:	e1 51       	subi	r30, 0x11	; 17
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	89 2b       	or	r24, r25
     ca8:	09 f0       	breq	.+2      	; 0xcac <is_coordinate_null+0x34>
     caa:	51 c0       	rjmp	.+162    	; 0xd4e <is_coordinate_null+0xd6>
     cac:	83 2f       	mov	r24, r19
     cae:	94 2f       	mov	r25, r20
     cb0:	fc 01       	movw	r30, r24
     cb2:	23 e0       	ldi	r18, 0x03	; 3
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	2a 95       	dec	r18
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <is_coordinate_null+0x3c>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	e8 0f       	add	r30, r24
     cc2:	f9 1f       	adc	r31, r25
     cc4:	e6 0f       	add	r30, r22
     cc6:	f7 1f       	adc	r31, r23
     cc8:	a3 e0       	ldi	r26, 0x03	; 3
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	aa 95       	dec	r26
     cd0:	e1 f7       	brne	.-8      	; 0xcca <is_coordinate_null+0x52>
     cd2:	ef 50       	subi	r30, 0x0F	; 15
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	89 2b       	or	r24, r25
     cdc:	c1 f5       	brne	.+112    	; 0xd4e <is_coordinate_null+0xd6>
     cde:	83 2f       	mov	r24, r19
     ce0:	94 2f       	mov	r25, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	53 e0       	ldi	r21, 0x03	; 3
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	5a 95       	dec	r21
     cec:	e1 f7       	brne	.-8      	; 0xce6 <is_coordinate_null+0x6e>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	e8 0f       	add	r30, r24
     cf4:	f9 1f       	adc	r31, r25
     cf6:	e6 0f       	add	r30, r22
     cf8:	f7 1f       	adc	r31, r23
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	8a 95       	dec	r24
     d02:	e1 f7       	brne	.-8      	; 0xcfc <is_coordinate_null+0x84>
     d04:	ed 50       	subi	r30, 0x0D	; 13
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	89 2b       	or	r24, r25
     d0e:	f9 f4       	brne	.+62     	; 0xd4e <is_coordinate_null+0xd6>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	83 2f       	mov	r24, r19
     d14:	94 2f       	mov	r25, r20
     d16:	fc 01       	movw	r30, r24
     d18:	b3 e0       	ldi	r27, 0x03	; 3
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	ba 95       	dec	r27
     d20:	e1 f7       	brne	.-8      	; 0xd1a <is_coordinate_null+0xa2>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	e8 0f       	add	r30, r24
     d28:	f9 1f       	adc	r31, r25
     d2a:	e6 0f       	add	r30, r22
     d2c:	f7 1f       	adc	r31, r23
     d2e:	53 e0       	ldi	r21, 0x03	; 3
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	5a 95       	dec	r21
     d36:	e1 f7       	brne	.-8      	; 0xd30 <is_coordinate_null+0xb8>
     d38:	e1 51       	subi	r30, 0x11	; 17
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	86 81       	ldd	r24, Z+6	; 0x06
     d3e:	97 81       	ldd	r25, Z+7	; 0x07
     d40:	89 2b       	or	r24, r25
     d42:	09 f0       	breq	.+2      	; 0xd46 <is_coordinate_null+0xce>
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	28 27       	eor	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <is_coordinate_null+0xda>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     d52:	c9 01       	movw	r24, r18
     d54:	08 95       	ret

00000d56 <update_array>:
	}
	
}

void update_array(int y,int x,int ny,int nx)
{
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	7c 01       	movw	r14, r24
     d70:	6b 01       	movw	r12, r22
     d72:	5a 01       	movw	r10, r20
     d74:	49 01       	movw	r8, r18
	////checking if the path is already traversed before i.e(if all 4 values is zero)
	if(is_coordinate_null(x_coordinate,y_coordinate))
     d76:	10 91 fa 00 	lds	r17, 0x00FA
     d7a:	00 91 fb 00 	lds	r16, 0x00FB
     d7e:	c0 91 fc 00 	lds	r28, 0x00FC
     d82:	d0 91 fd 00 	lds	r29, 0x00FD
     d86:	81 2f       	mov	r24, r17
     d88:	90 2f       	mov	r25, r16
     d8a:	be 01       	movw	r22, r28
     d8c:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
     d90:	89 2b       	or	r24, r25
     d92:	09 f4       	brne	.+2      	; 0xd96 <update_array+0x40>
     d94:	89 c1       	rjmp	.+786    	; 0x10a8 <update_array+0x352>
	{	
		switch(dir)
     d96:	80 91 f8 00 	lds	r24, 0x00F8
     d9a:	90 91 f9 00 	lds	r25, 0x00F9
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	8f 3f       	cpi	r24, 0xFF	; 255
     da2:	92 07       	cpc	r25, r18
     da4:	09 f4       	brne	.+2      	; 0xda8 <update_array+0x52>
     da6:	24 c1       	rjmp	.+584    	; 0xff0 <update_array+0x29a>
     da8:	2f ef       	ldi	r18, 0xFF	; 255
     daa:	8f 3f       	cpi	r24, 0xFF	; 255
     dac:	92 07       	cpc	r25, r18
     dae:	09 f0       	breq	.+2      	; 0xdb2 <update_array+0x5c>
     db0:	2c f4       	brge	.+10     	; 0xdbc <update_array+0x66>
     db2:	8e 5f       	subi	r24, 0xFE	; 254
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	09 f0       	breq	.+2      	; 0xdba <update_array+0x64>
     db8:	77 c1       	rjmp	.+750    	; 0x10a8 <update_array+0x352>
     dba:	bf c0       	rjmp	.+382    	; 0xf3a <update_array+0x1e4>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <update_array+0x6e>
     dc2:	60 c0       	rjmp	.+192    	; 0xe84 <update_array+0x12e>
     dc4:	02 97       	sbiw	r24, 0x02	; 2
     dc6:	09 f0       	breq	.+2      	; 0xdca <update_array+0x74>
     dc8:	6f c1       	rjmp	.+734    	; 0x10a8 <update_array+0x352>
		{
			case 2:
			dir_array[x_coordinate][y_coordinate][0] = y;
     dca:	81 2f       	mov	r24, r17
     dcc:	90 2f       	mov	r25, r16
     dce:	fc 01       	movw	r30, r24
     dd0:	33 e0       	ldi	r19, 0x03	; 3
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	3a 95       	dec	r19
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <update_array+0x7c>
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	e8 0f       	add	r30, r24
     de0:	f9 1f       	adc	r31, r25
     de2:	ec 0f       	add	r30, r28
     de4:	fd 1f       	adc	r31, r29
     de6:	b3 e0       	ldi	r27, 0x03	; 3
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	ba 95       	dec	r27
     dee:	e1 f7       	brne	.-8      	; 0xde8 <update_array+0x92>
     df0:	e1 51       	subi	r30, 0x11	; 17
     df2:	fe 4f       	sbci	r31, 0xFE	; 254
     df4:	f1 82       	std	Z+1, r15	; 0x01
     df6:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][1] = x;
     df8:	81 2f       	mov	r24, r17
     dfa:	90 2f       	mov	r25, r16
     dfc:	fc 01       	movw	r30, r24
     dfe:	a3 e0       	ldi	r26, 0x03	; 3
     e00:	ee 0f       	add	r30, r30
     e02:	ff 1f       	adc	r31, r31
     e04:	aa 95       	dec	r26
     e06:	e1 f7       	brne	.-8      	; 0xe00 <update_array+0xaa>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	e8 0f       	add	r30, r24
     e0e:	f9 1f       	adc	r31, r25
     e10:	ec 0f       	add	r30, r28
     e12:	fd 1f       	adc	r31, r29
     e14:	63 e0       	ldi	r22, 0x03	; 3
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	6a 95       	dec	r22
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <update_array+0xc0>
     e1e:	ef 50       	subi	r30, 0x0F	; 15
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	d1 82       	std	Z+1, r13	; 0x01
     e24:	c0 82       	st	Z, r12
			dir_array[x_coordinate][y_coordinate][2] = ny;
     e26:	81 2f       	mov	r24, r17
     e28:	90 2f       	mov	r25, r16
     e2a:	fc 01       	movw	r30, r24
     e2c:	53 e0       	ldi	r21, 0x03	; 3
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	5a 95       	dec	r21
     e34:	e1 f7       	brne	.-8      	; 0xe2e <update_array+0xd8>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	e8 0f       	add	r30, r24
     e3c:	f9 1f       	adc	r31, r25
     e3e:	ec 0f       	add	r30, r28
     e40:	fd 1f       	adc	r31, r29
     e42:	33 e0       	ldi	r19, 0x03	; 3
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	3a 95       	dec	r19
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <update_array+0xee>
     e4c:	ed 50       	subi	r30, 0x0D	; 13
     e4e:	fe 4f       	sbci	r31, 0xFE	; 254
     e50:	b1 82       	std	Z+1, r11	; 0x01
     e52:	a0 82       	st	Z, r10
			dir_array[x_coordinate][y_coordinate][3] = nx;
     e54:	81 2f       	mov	r24, r17
     e56:	90 2f       	mov	r25, r16
     e58:	fc 01       	movw	r30, r24
     e5a:	23 e0       	ldi	r18, 0x03	; 3
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	2a 95       	dec	r18
     e62:	e1 f7       	brne	.-8      	; 0xe5c <update_array+0x106>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	e8 0f       	add	r30, r24
     e6a:	f9 1f       	adc	r31, r25
     e6c:	ec 0f       	add	r30, r28
     e6e:	fd 1f       	adc	r31, r29
     e70:	13 e0       	ldi	r17, 0x03	; 3
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	1a 95       	dec	r17
     e78:	e1 f7       	brne	.-8      	; 0xe72 <update_array+0x11c>
     e7a:	e1 51       	subi	r30, 0x11	; 17
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	97 82       	std	Z+7, r9	; 0x07
     e80:	86 82       	std	Z+6, r8	; 0x06
     e82:	12 c1       	rjmp	.+548    	; 0x10a8 <update_array+0x352>
			break;
			case 1:
			dir_array[x_coordinate][y_coordinate][1] = y;
     e84:	81 2f       	mov	r24, r17
     e86:	90 2f       	mov	r25, r16
     e88:	fc 01       	movw	r30, r24
     e8a:	b3 e0       	ldi	r27, 0x03	; 3
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ba 95       	dec	r27
     e92:	e1 f7       	brne	.-8      	; 0xe8c <update_array+0x136>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	e8 0f       	add	r30, r24
     e9a:	f9 1f       	adc	r31, r25
     e9c:	ec 0f       	add	r30, r28
     e9e:	fd 1f       	adc	r31, r29
     ea0:	73 e0       	ldi	r23, 0x03	; 3
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	7a 95       	dec	r23
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <update_array+0x14c>
     eaa:	ef 50       	subi	r30, 0x0F	; 15
     eac:	fe 4f       	sbci	r31, 0xFE	; 254
     eae:	f1 82       	std	Z+1, r15	; 0x01
     eb0:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][2] = x;
     eb2:	81 2f       	mov	r24, r17
     eb4:	90 2f       	mov	r25, r16
     eb6:	fc 01       	movw	r30, r24
     eb8:	63 e0       	ldi	r22, 0x03	; 3
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	6a 95       	dec	r22
     ec0:	e1 f7       	brne	.-8      	; 0xeba <update_array+0x164>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	e8 0f       	add	r30, r24
     ec8:	f9 1f       	adc	r31, r25
     eca:	ec 0f       	add	r30, r28
     ecc:	fd 1f       	adc	r31, r29
     ece:	43 e0       	ldi	r20, 0x03	; 3
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	4a 95       	dec	r20
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <update_array+0x17a>
     ed8:	ed 50       	subi	r30, 0x0D	; 13
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	d1 82       	std	Z+1, r13	; 0x01
     ede:	c0 82       	st	Z, r12
			dir_array[x_coordinate][y_coordinate][3] = ny;
     ee0:	81 2f       	mov	r24, r17
     ee2:	90 2f       	mov	r25, r16
     ee4:	fc 01       	movw	r30, r24
     ee6:	33 e0       	ldi	r19, 0x03	; 3
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	3a 95       	dec	r19
     eee:	e1 f7       	brne	.-8      	; 0xee8 <update_array+0x192>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	e8 0f       	add	r30, r24
     ef6:	f9 1f       	adc	r31, r25
     ef8:	ec 0f       	add	r30, r28
     efa:	fd 1f       	adc	r31, r29
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	8a 95       	dec	r24
     f04:	e1 f7       	brne	.-8      	; 0xefe <update_array+0x1a8>
     f06:	e1 51       	subi	r30, 0x11	; 17
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	b7 82       	std	Z+7, r11	; 0x07
     f0c:	a6 82       	std	Z+6, r10	; 0x06
			dir_array[x_coordinate][y_coordinate][0] = nx;
     f0e:	81 2f       	mov	r24, r17
     f10:	90 2f       	mov	r25, r16
     f12:	fc 01       	movw	r30, r24
     f14:	b3 e0       	ldi	r27, 0x03	; 3
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	ba 95       	dec	r27
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <update_array+0x1c0>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	e8 0f       	add	r30, r24
     f24:	f9 1f       	adc	r31, r25
     f26:	ec 0f       	add	r30, r28
     f28:	fd 1f       	adc	r31, r29
     f2a:	73 e0       	ldi	r23, 0x03	; 3
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	7a 95       	dec	r23
     f32:	e1 f7       	brne	.-8      	; 0xf2c <update_array+0x1d6>
     f34:	e1 51       	subi	r30, 0x11	; 17
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	b5 c0       	rjmp	.+362    	; 0x10a4 <update_array+0x34e>
			break;
			case -2:
			dir_array[x_coordinate][y_coordinate][2] = y;
     f3a:	81 2f       	mov	r24, r17
     f3c:	90 2f       	mov	r25, r16
     f3e:	fc 01       	movw	r30, r24
     f40:	63 e0       	ldi	r22, 0x03	; 3
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	6a 95       	dec	r22
     f48:	e1 f7       	brne	.-8      	; 0xf42 <update_array+0x1ec>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	e8 0f       	add	r30, r24
     f50:	f9 1f       	adc	r31, r25
     f52:	ec 0f       	add	r30, r28
     f54:	fd 1f       	adc	r31, r29
     f56:	43 e0       	ldi	r20, 0x03	; 3
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	4a 95       	dec	r20
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <update_array+0x202>
     f60:	ed 50       	subi	r30, 0x0D	; 13
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	f1 82       	std	Z+1, r15	; 0x01
     f66:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][3] = x;
     f68:	81 2f       	mov	r24, r17
     f6a:	90 2f       	mov	r25, r16
     f6c:	fc 01       	movw	r30, r24
     f6e:	33 e0       	ldi	r19, 0x03	; 3
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	3a 95       	dec	r19
     f76:	e1 f7       	brne	.-8      	; 0xf70 <update_array+0x21a>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	e8 0f       	add	r30, r24
     f7e:	f9 1f       	adc	r31, r25
     f80:	ec 0f       	add	r30, r28
     f82:	fd 1f       	adc	r31, r29
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	8a 95       	dec	r24
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <update_array+0x230>
     f8e:	e1 51       	subi	r30, 0x11	; 17
     f90:	fe 4f       	sbci	r31, 0xFE	; 254
     f92:	d7 82       	std	Z+7, r13	; 0x07
     f94:	c6 82       	std	Z+6, r12	; 0x06
			dir_array[x_coordinate][y_coordinate][0] = ny;
     f96:	81 2f       	mov	r24, r17
     f98:	90 2f       	mov	r25, r16
     f9a:	fc 01       	movw	r30, r24
     f9c:	b3 e0       	ldi	r27, 0x03	; 3
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	ba 95       	dec	r27
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <update_array+0x248>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	e8 0f       	add	r30, r24
     fac:	f9 1f       	adc	r31, r25
     fae:	ec 0f       	add	r30, r28
     fb0:	fd 1f       	adc	r31, r29
     fb2:	73 e0       	ldi	r23, 0x03	; 3
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	7a 95       	dec	r23
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <update_array+0x25e>
     fbc:	e1 51       	subi	r30, 0x11	; 17
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	b1 82       	std	Z+1, r11	; 0x01
     fc2:	a0 82       	st	Z, r10
			dir_array[x_coordinate][y_coordinate][1] = nx;
     fc4:	81 2f       	mov	r24, r17
     fc6:	90 2f       	mov	r25, r16
     fc8:	fc 01       	movw	r30, r24
     fca:	63 e0       	ldi	r22, 0x03	; 3
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	6a 95       	dec	r22
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <update_array+0x276>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	e8 0f       	add	r30, r24
     fda:	f9 1f       	adc	r31, r25
     fdc:	ec 0f       	add	r30, r28
     fde:	fd 1f       	adc	r31, r29
     fe0:	43 e0       	ldi	r20, 0x03	; 3
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	4a 95       	dec	r20
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <update_array+0x28c>
     fea:	ef 50       	subi	r30, 0x0F	; 15
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	5a c0       	rjmp	.+180    	; 0x10a4 <update_array+0x34e>
			break;
			case -1:
			dir_array[x_coordinate][y_coordinate][3] = y;
     ff0:	81 2f       	mov	r24, r17
     ff2:	90 2f       	mov	r25, r16
     ff4:	fc 01       	movw	r30, r24
     ff6:	33 e0       	ldi	r19, 0x03	; 3
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	3a 95       	dec	r19
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <update_array+0x2a2>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	e8 0f       	add	r30, r24
    1006:	f9 1f       	adc	r31, r25
    1008:	ec 0f       	add	r30, r28
    100a:	fd 1f       	adc	r31, r29
    100c:	b3 e0       	ldi	r27, 0x03	; 3
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ba 95       	dec	r27
    1014:	e1 f7       	brne	.-8      	; 0x100e <update_array+0x2b8>
    1016:	e1 51       	subi	r30, 0x11	; 17
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	f7 82       	std	Z+7, r15	; 0x07
    101c:	e6 82       	std	Z+6, r14	; 0x06
			dir_array[x_coordinate][y_coordinate][0] = x;
    101e:	81 2f       	mov	r24, r17
    1020:	90 2f       	mov	r25, r16
    1022:	fc 01       	movw	r30, r24
    1024:	a3 e0       	ldi	r26, 0x03	; 3
    1026:	ee 0f       	add	r30, r30
    1028:	ff 1f       	adc	r31, r31
    102a:	aa 95       	dec	r26
    102c:	e1 f7       	brne	.-8      	; 0x1026 <update_array+0x2d0>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	e8 0f       	add	r30, r24
    1034:	f9 1f       	adc	r31, r25
    1036:	ec 0f       	add	r30, r28
    1038:	fd 1f       	adc	r31, r29
    103a:	63 e0       	ldi	r22, 0x03	; 3
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	6a 95       	dec	r22
    1042:	e1 f7       	brne	.-8      	; 0x103c <update_array+0x2e6>
    1044:	e1 51       	subi	r30, 0x11	; 17
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	d1 82       	std	Z+1, r13	; 0x01
    104a:	c0 82       	st	Z, r12
			dir_array[x_coordinate][y_coordinate][1] = ny;
    104c:	81 2f       	mov	r24, r17
    104e:	90 2f       	mov	r25, r16
    1050:	fc 01       	movw	r30, r24
    1052:	53 e0       	ldi	r21, 0x03	; 3
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	5a 95       	dec	r21
    105a:	e1 f7       	brne	.-8      	; 0x1054 <update_array+0x2fe>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	e8 0f       	add	r30, r24
    1062:	f9 1f       	adc	r31, r25
    1064:	ec 0f       	add	r30, r28
    1066:	fd 1f       	adc	r31, r29
    1068:	33 e0       	ldi	r19, 0x03	; 3
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	3a 95       	dec	r19
    1070:	e1 f7       	brne	.-8      	; 0x106a <update_array+0x314>
    1072:	ef 50       	subi	r30, 0x0F	; 15
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	b1 82       	std	Z+1, r11	; 0x01
    1078:	a0 82       	st	Z, r10
			dir_array[x_coordinate][y_coordinate][2] = nx;
    107a:	81 2f       	mov	r24, r17
    107c:	90 2f       	mov	r25, r16
    107e:	fc 01       	movw	r30, r24
    1080:	23 e0       	ldi	r18, 0x03	; 3
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	2a 95       	dec	r18
    1088:	e1 f7       	brne	.-8      	; 0x1082 <update_array+0x32c>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	e8 0f       	add	r30, r24
    1090:	f9 1f       	adc	r31, r25
    1092:	ec 0f       	add	r30, r28
    1094:	fd 1f       	adc	r31, r29
    1096:	13 e0       	ldi	r17, 0x03	; 3
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	1a 95       	dec	r17
    109e:	e1 f7       	brne	.-8      	; 0x1098 <update_array+0x342>
    10a0:	ed 50       	subi	r30, 0x0D	; 13
    10a2:	fe 4f       	sbci	r31, 0xFE	; 254
    10a4:	91 82       	std	Z+1, r9	; 0x01
    10a6:	80 82       	st	Z, r8
			break;
		}
	}
	
}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	9f 90       	pop	r9
    10be:	8f 90       	pop	r8
    10c0:	08 95       	ret

000010c2 <update_coordinates>:
}


void update_coordinates(void)
{	
	int value = Coordinates_changed_by;
    10c2:	80 91 15 01 	lds	r24, 0x0115
    10c6:	90 91 16 01 	lds	r25, 0x0116
	
	if(value==2)		//to store the middle point in 60cm shift i.e to make it continous
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <update_coordinates+0x10>
    10d0:	a7 c0       	rjmp	.+334    	; 0x1220 <update_coordinates+0x15e>
	{
		switch(dir)
    10d2:	80 91 f8 00 	lds	r24, 0x00F8
    10d6:	90 91 f9 00 	lds	r25, 0x00F9
    10da:	2f ef       	ldi	r18, 0xFF	; 255
    10dc:	8f 3f       	cpi	r24, 0xFF	; 255
    10de:	92 07       	cpc	r25, r18
    10e0:	a1 f1       	breq	.+104    	; 0x114a <update_coordinates+0x88>
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	8f 3f       	cpi	r24, 0xFF	; 255
    10e6:	92 07       	cpc	r25, r18
    10e8:	09 f0       	breq	.+2      	; 0x10ec <update_coordinates+0x2a>
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <update_coordinates+0x34>
    10ec:	8e 5f       	subi	r24, 0xFE	; 254
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <update_coordinates+0x32>
    10f2:	03 c1       	rjmp	.+518    	; 0x12fa <update_coordinates+0x238>
    10f4:	71 c0       	rjmp	.+226    	; 0x11d8 <update_coordinates+0x116>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	91 05       	cpc	r25, r1
    10fa:	21 f0       	breq	.+8      	; 0x1104 <update_coordinates+0x42>
    10fc:	02 97       	sbiw	r24, 0x02	; 2
    10fe:	09 f0       	breq	.+2      	; 0x1102 <update_coordinates+0x40>
    1100:	fc c0       	rjmp	.+504    	; 0x12fa <update_coordinates+0x238>
    1102:	46 c0       	rjmp	.+140    	; 0x1190 <update_coordinates+0xce>
		{
			case +1 :	x_coordinate+=1;						
    1104:	80 91 fa 00 	lds	r24, 0x00FA
    1108:	90 91 fb 00 	lds	r25, 0x00FB
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	90 93 fb 00 	sts	0x00FB, r25
    1112:	80 93 fa 00 	sts	0x00FA, r24
						update_array(1,0,1,0);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	41 e0       	ldi	r20, 0x01	; 1
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						x_coordinate+=1;
    112a:	80 91 fa 00 	lds	r24, 0x00FA
    112e:	90 91 fb 00 	lds	r25, 0x00FB
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	90 93 fb 00 	sts	0x00FB, r25
    1138:	80 93 fa 00 	sts	0x00FA, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    113c:	60 91 fc 00 	lds	r22, 0x00FC
    1140:	70 91 fd 00 	lds	r23, 0x00FD
    1144:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1148:	c8 c0       	rjmp	.+400    	; 0x12da <update_coordinates+0x218>
						{
							repeat = 0;
						}
						break;

			case -1 :	x_coordinate-=1;						
    114a:	80 91 fa 00 	lds	r24, 0x00FA
    114e:	90 91 fb 00 	lds	r25, 0x00FB
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	90 93 fb 00 	sts	0x00FB, r25
    1158:	80 93 fa 00 	sts	0x00FA, r24
						update_array(1,0,1,0);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						x_coordinate-=1;
    1170:	80 91 fa 00 	lds	r24, 0x00FA
    1174:	90 91 fb 00 	lds	r25, 0x00FB
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	90 93 fb 00 	sts	0x00FB, r25
    117e:	80 93 fa 00 	sts	0x00FA, r24
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1182:	60 91 fc 00 	lds	r22, 0x00FC
    1186:	70 91 fd 00 	lds	r23, 0x00FD
    118a:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    118e:	a5 c0       	rjmp	.+330    	; 0x12da <update_coordinates+0x218>
						{
							repeat = 0;
						}
						break;
					
			case +2 :	y_coordinate+=1;						
    1190:	80 91 fc 00 	lds	r24, 0x00FC
    1194:	90 91 fd 00 	lds	r25, 0x00FD
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	90 93 fd 00 	sts	0x00FD, r25
    119e:	80 93 fc 00 	sts	0x00FC, r24
						update_array(1,0,1,0);
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	41 e0       	ldi	r20, 0x01	; 1
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						y_coordinate+=1;
    11b6:	60 91 fc 00 	lds	r22, 0x00FC
    11ba:	70 91 fd 00 	lds	r23, 0x00FD
    11be:	6f 5f       	subi	r22, 0xFF	; 255
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	70 93 fd 00 	sts	0x00FD, r23
    11c6:	60 93 fc 00 	sts	0x00FC, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    11ca:	80 91 fa 00 	lds	r24, 0x00FA
    11ce:	90 91 fb 00 	lds	r25, 0x00FB
    11d2:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    11d6:	81 c0       	rjmp	.+258    	; 0x12da <update_coordinates+0x218>
							repeat = 0;
						}
						
						break;

			case -2 :	y_coordinate-=1;						
    11d8:	80 91 fc 00 	lds	r24, 0x00FC
    11dc:	90 91 fd 00 	lds	r25, 0x00FD
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	90 93 fd 00 	sts	0x00FD, r25
    11e6:	80 93 fc 00 	sts	0x00FC, r24
						update_array(1,0,1,0);	
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	41 e0       	ldi	r20, 0x01	; 1
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						y_coordinate-=1;
    11fe:	60 91 fc 00 	lds	r22, 0x00FC
    1202:	70 91 fd 00 	lds	r23, 0x00FD
    1206:	61 50       	subi	r22, 0x01	; 1
    1208:	70 40       	sbci	r23, 0x00	; 0
    120a:	70 93 fd 00 	sts	0x00FD, r23
    120e:	60 93 fc 00 	sts	0x00FC, r22
						if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    1212:	80 91 fa 00 	lds	r24, 0x00FA
    1216:	90 91 fb 00 	lds	r25, 0x00FB
    121a:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    121e:	5d c0       	rjmp	.+186    	; 0x12da <update_coordinates+0x218>
							repeat = 0;
						}
						break;	
		}
	}
	else if(value==1)
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	09 f0       	breq	.+2      	; 0x1226 <update_coordinates+0x164>
    1224:	6a c0       	rjmp	.+212    	; 0x12fa <update_coordinates+0x238>
	{
		switch(dir)
    1226:	80 91 f8 00 	lds	r24, 0x00F8
    122a:	90 91 f9 00 	lds	r25, 0x00F9
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	8f 3f       	cpi	r24, 0xFF	; 255
    1232:	92 07       	cpc	r25, r18
    1234:	09 f1       	breq	.+66     	; 0x1278 <update_coordinates+0x1b6>
    1236:	2f ef       	ldi	r18, 0xFF	; 255
    1238:	8f 3f       	cpi	r24, 0xFF	; 255
    123a:	92 07       	cpc	r25, r18
    123c:	09 f0       	breq	.+2      	; 0x1240 <update_coordinates+0x17e>
    123e:	2c f4       	brge	.+10     	; 0x124a <update_coordinates+0x188>
    1240:	8e 5f       	subi	r24, 0xFE	; 254
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	09 f0       	breq	.+2      	; 0x1248 <update_coordinates+0x186>
    1246:	59 c0       	rjmp	.+178    	; 0x12fa <update_coordinates+0x238>
    1248:	38 c0       	rjmp	.+112    	; 0x12ba <update_coordinates+0x1f8>
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	21 f0       	breq	.+8      	; 0x1258 <update_coordinates+0x196>
    1250:	02 97       	sbiw	r24, 0x02	; 2
    1252:	09 f0       	breq	.+2      	; 0x1256 <update_coordinates+0x194>
    1254:	52 c0       	rjmp	.+164    	; 0x12fa <update_coordinates+0x238>
    1256:	20 c0       	rjmp	.+64     	; 0x1298 <update_coordinates+0x1d6>
		{
			case +1 : 
			x_coordinate+=value;
    1258:	80 91 fa 00 	lds	r24, 0x00FA
    125c:	90 91 fb 00 	lds	r25, 0x00FB
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	90 93 fb 00 	sts	0x00FB, r25
    1266:	80 93 fa 00 	sts	0x00FA, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    126a:	60 91 fc 00 	lds	r22, 0x00FC
    126e:	70 91 fd 00 	lds	r23, 0x00FD
    1272:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1276:	31 c0       	rjmp	.+98     	; 0x12da <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case -1 : 
			x_coordinate-=value;
    1278:	80 91 fa 00 	lds	r24, 0x00FA
    127c:	90 91 fb 00 	lds	r25, 0x00FB
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	90 93 fb 00 	sts	0x00FB, r25
    1286:	80 93 fa 00 	sts	0x00FA, r24
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    128a:	60 91 fc 00 	lds	r22, 0x00FC
    128e:	70 91 fd 00 	lds	r23, 0x00FD
    1292:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1296:	21 c0       	rjmp	.+66     	; 0x12da <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case +2 : 
			y_coordinate+=value;
    1298:	60 91 fc 00 	lds	r22, 0x00FC
    129c:	70 91 fd 00 	lds	r23, 0x00FD
    12a0:	6f 5f       	subi	r22, 0xFF	; 255
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	70 93 fd 00 	sts	0x00FD, r23
    12a8:	60 93 fc 00 	sts	0x00FC, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    12ac:	80 91 fa 00 	lds	r24, 0x00FA
    12b0:	90 91 fb 00 	lds	r25, 0x00FB
    12b4:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    12b8:	10 c0       	rjmp	.+32     	; 0x12da <update_coordinates+0x218>
			{
				repeat = 0;
			}
			break;
			case -2 : 
			y_coordinate-=value; 
    12ba:	60 91 fc 00 	lds	r22, 0x00FC
    12be:	70 91 fd 00 	lds	r23, 0x00FD
    12c2:	61 50       	subi	r22, 0x01	; 1
    12c4:	70 40       	sbci	r23, 0x00	; 0
    12c6:	70 93 fd 00 	sts	0x00FD, r23
    12ca:	60 93 fc 00 	sts	0x00FC, r22
		    if(!(is_coordinate_null(x_coordinate,y_coordinate)))
    12ce:	80 91 fa 00 	lds	r24, 0x00FA
    12d2:	90 91 fb 00 	lds	r25, 0x00FB
    12d6:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    12da:	89 2b       	or	r24, r25
    12dc:	51 f4       	brne	.+20     	; 0x12f2 <update_coordinates+0x230>
			{
				repeat++;
    12de:	80 91 1d 01 	lds	r24, 0x011D
    12e2:	90 91 1e 01 	lds	r25, 0x011E
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	90 93 1e 01 	sts	0x011E, r25
    12ec:	80 93 1d 01 	sts	0x011D, r24
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <update_coordinates+0x238>
			}
			else
			{
				repeat = 0;
    12f2:	10 92 1e 01 	sts	0x011E, r1
    12f6:	10 92 1d 01 	sts	0x011D, r1
			}
			break;
		}
	}
	lcd_clear();
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(4,0,x_coordinate,2);
    1302:	40 91 fa 00 	lds	r20, 0x00FA
    1306:	50 91 fb 00 	lds	r21, 0x00FB
    130a:	84 e0       	ldi	r24, 0x04	; 4
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	22 e0       	ldi	r18, 0x02	; 2
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(8,0,y_coordinate,2);
    131a:	40 91 fc 00 	lds	r20, 0x00FC
    131e:	50 91 fd 00 	lds	r21, 0x00FD
    1322:	88 e0       	ldi	r24, 0x08	; 8
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	22 e0       	ldi	r18, 0x02	; 2
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	Coordinates_changed_by = 0;
    1332:	10 92 16 01 	sts	0x0116, r1
    1336:	10 92 15 01 	sts	0x0115, r1
}
    133a:	08 95       	ret

0000133c <left_junc_check>:
		set_pwm1b(opt);
	}
		delay_microsec(10);
}
void left_junc_check()                                 
{
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29

	if(bit_is_clear(PINA,5))
    1340:	cd 99       	sbic	0x19, 5	; 25
    1342:	2a c0       	rjmp	.+84     	; 0x1398 <left_junc_check+0x5c>
	{
		flag1 = 1;
    1344:	c1 e0       	ldi	r28, 0x01	; 1
    1346:	d0 e0       	ldi	r29, 0x00	; 0
    1348:	d0 93 0c 01 	sts	0x010C, r29
    134c:	c0 93 0b 01 	sts	0x010B, r28
		//bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		if(irc>2000)
    1350:	80 91 0d 01 	lds	r24, 0x010D
    1354:	90 91 0e 01 	lds	r25, 0x010E
    1358:	81 5d       	subi	r24, 0xD1	; 209
    135a:	97 40       	sbci	r25, 0x07	; 7
    135c:	5c f0       	brlt	.+22     	; 0x1374 <left_junc_check+0x38>
		{	
			lcd_clear();
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("sixty");
			Coordinates_changed_by = 2;
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	90 93 16 01 	sts	0x0116, r25
    136e:	80 93 15 01 	sts	0x0115, r24
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <left_junc_check+0x48>
		}
		else
		{
			lcd_clear();
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
    137c:	d0 93 16 01 	sts	0x0116, r29
    1380:	c0 93 15 01 	sts	0x0115, r28
		}
		if(irc==0)
    1384:	80 91 0d 01 	lds	r24, 0x010D
    1388:	90 91 0e 01 	lds	r25, 0x010E
    138c:	89 2b       	or	r24, r25
    138e:	21 f4       	brne	.+8      	; 0x1398 <left_junc_check+0x5c>
		{
			Coordinates_changed_by = 0;
    1390:	10 92 16 01 	sts	0x0116, r1
    1394:	10 92 15 01 	sts	0x0115, r1
		}				
	}
	if((bit_is_clear(PINA,6) || bit_is_clear(PIND,6)) && (bit_is_clear(PINA,4) || special_flag == 1))
    1398:	ce 9b       	sbis	0x19, 6	; 25
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <left_junc_check+0x64>
    139c:	86 99       	sbic	0x10, 6	; 16
    139e:	1d c0       	rjmp	.+58     	; 0x13da <left_junc_check+0x9e>
    13a0:	cc 9b       	sbis	0x19, 4	; 25
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <left_junc_check+0x74>
    13a4:	80 91 1b 01 	lds	r24, 0x011B
    13a8:	90 91 1c 01 	lds	r25, 0x011C
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	a9 f4       	brne	.+42     	; 0x13da <left_junc_check+0x9e>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    13b0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    13b2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    13b4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    13b6:	af 9a       	sbi	0x15, 7	; 21
	{
		bot_brake();
		update_coordinates();
    13b8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <update_coordinates>
		//delay_sec(2);
		//lcd_clear();
		update_array(1,0,1,1);			
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		// lcd_write_string("-| detected");
		//delay_millisec(500);
		irc = 0;
    13d0:	10 92 0e 01 	sts	0x010E, r1
    13d4:	10 92 0d 01 	sts	0x010D, r1
    13d8:	2e c0       	rjmp	.+92     	; 0x1436 <left_junc_check+0xfa>
		special_flag = 0;       ///one time use
	}
	
	else if((bit_is_clear(PINA,4) || special_flag==1) && bit_is_set(PINA,6) && bit_is_set(PIND,6))
    13da:	cc 9b       	sbis	0x19, 4	; 25
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <left_junc_check+0xae>
    13de:	80 91 1b 01 	lds	r24, 0x011B
    13e2:	90 91 1c 01 	lds	r25, 0x011C
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	51 f5       	brne	.+84     	; 0x143e <left_junc_check+0x102>
    13ea:	ce 9b       	sbis	0x19, 6	; 25
    13ec:	28 c0       	rjmp	.+80     	; 0x143e <left_junc_check+0x102>
    13ee:	86 9b       	sbis	0x10, 6	; 16
    13f0:	26 c0       	rjmp	.+76     	; 0x143e <left_junc_check+0x102>
	{
		// lcd_clear();
		// bot_brake();
		// lcd_write_string("L detected");
		update_coordinates();
    13f2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <update_coordinates>
		//delay_sec(2);
		irc = 0;
    13f6:	10 92 0e 01 	sts	0x010E, r1
    13fa:	10 92 0d 01 	sts	0x010D, r1
		if(repeat<=3)
    13fe:	80 91 1d 01 	lds	r24, 0x011D
    1402:	90 91 1e 01 	lds	r25, 0x011E
    1406:	04 97       	sbiw	r24, 0x04	; 4
    1408:	d4 f4       	brge	.+52     	; 0x143e <left_junc_check+0x102>
		{
			turn_left();						
    140a:	0e 94 61 05 	call	0xac2	; 0xac2 <turn_left>

			update_array(0,0,1,1);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	21 e0       	ldi	r18, 0x01	; 1
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1422:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1424:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1426:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1428:	af 9a       	sbi	0x15, 7	; 21
			bot_brake();
			sense_of_directon();
    142a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
			// lcd_clear();
			// lcd_write_int_xy(0,0,dir,3);
			// delay_millisec(2000);
			flag1 = 0;
    142e:	10 92 0c 01 	sts	0x010C, r1
    1432:	10 92 0b 01 	sts	0x010B, r1
			special_flag = 0;
    1436:	10 92 1c 01 	sts	0x011C, r1
    143a:	10 92 1b 01 	sts	0x011B, r1
		}
	}

	special_case_check();       ///////////
    143e:	0e 94 b3 04 	call	0x966	; 0x966 <special_case_check>
	
}
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <frSensorCheck>:
	
}

void frSensorCheck()
{
	if(bit_is_set(PINA,6) && bit_is_set(PIND,6))
    1448:	ce 9b       	sbis	0x19, 6	; 25
    144a:	35 c0       	rjmp	.+106    	; 0x14b6 <frSensorCheck+0x6e>
    144c:	86 9b       	sbis	0x10, 6	; 16
    144e:	33 c0       	rjmp	.+102    	; 0x14b6 <frSensorCheck+0x6e>
	{
		////just confirming if its really a dead end or the bot has simply just wobbled
		if(sensorbyte==0b0011 || sensorbyte==0b1100 || sensorbyte==0b0100 || sensorbyte==0b0010 || sensorbyte==0b0110)
    1450:	80 91 fe 00 	lds	r24, 0x00FE
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	41 f0       	breq	.+16     	; 0x1468 <frSensorCheck+0x20>
    1458:	8c 30       	cpi	r24, 0x0C	; 12
    145a:	31 f0       	breq	.+12     	; 0x1468 <frSensorCheck+0x20>
    145c:	84 30       	cpi	r24, 0x04	; 4
    145e:	21 f0       	breq	.+8      	; 0x1468 <frSensorCheck+0x20>
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	11 f0       	breq	.+4      	; 0x1468 <frSensorCheck+0x20>
    1464:	86 30       	cpi	r24, 0x06	; 6
    1466:	f9 f4       	brne	.+62     	; 0x14a6 <frSensorCheck+0x5e>
		{
			if(flag1==0)
    1468:	80 91 0b 01 	lds	r24, 0x010B
    146c:	90 91 0c 01 	lds	r25, 0x010C
    1470:	89 2b       	or	r24, r25
    1472:	09 f5       	brne	.+66     	; 0x14b6 <frSensorCheck+0x6e>
			{
				//lcd_clear();
				// lcd_write_string("Uturn Detected");
				if(irc>2000)
    1474:	80 91 0d 01 	lds	r24, 0x010D
    1478:	90 91 0e 01 	lds	r25, 0x010E
    147c:	20 91 15 01 	lds	r18, 0x0115
    1480:	30 91 16 01 	lds	r19, 0x0116
    1484:	81 5d       	subi	r24, 0xD1	; 209
    1486:	97 40       	sbci	r25, 0x07	; 7
    1488:	2c f0       	brlt	.+10     	; 0x1494 <frSensorCheck+0x4c>
				{
					// lcd_write_string("Sixty");
					if(Coordinates_changed_by ==0)
    148a:	23 2b       	or	r18, r19
    148c:	a1 f4       	brne	.+40     	; 0x14b6 <frSensorCheck+0x6e>
					{
						Coordinates_changed_by = 2;
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	04 c0       	rjmp	.+8      	; 0x149c <frSensorCheck+0x54>
					}
				}
				else
				{
					// lcd_write_string("Thirty");
					if(Coordinates_changed_by ==0)
    1494:	23 2b       	or	r18, r19
    1496:	79 f4       	brne	.+30     	; 0x14b6 <frSensorCheck+0x6e>
					{
						Coordinates_changed_by = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	90 93 16 01 	sts	0x0116, r25
    14a0:	80 93 15 01 	sts	0x0115, r24
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <frSensorCheck+0x6e>
				//delay_sec(2);
			}
		}
		else
		{
			lcd_clear();
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("ERROR Fr Snsr");
    14ae:	80 e6       	ldi	r24, 0x60	; 96
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		}
	}
	
	if(sensorbyte==0b0000 && bit_is_set(PINA,4) && bit_is_set(PINA,5) && bit_is_set(PINA,6) && bit_is_set(PINA,7) && bit_is_set(PIND, 6) && bit_is_set(PIND, 7) && flag1==0)
    14b6:	80 91 fe 00 	lds	r24, 0x00FE
    14ba:	88 23       	and	r24, r24
    14bc:	71 f5       	brne	.+92     	; 0x151a <frSensorCheck+0xd2>
    14be:	cc 9b       	sbis	0x19, 4	; 25
    14c0:	2c c0       	rjmp	.+88     	; 0x151a <frSensorCheck+0xd2>
    14c2:	cd 9b       	sbis	0x19, 5	; 25
    14c4:	2a c0       	rjmp	.+84     	; 0x151a <frSensorCheck+0xd2>
    14c6:	ce 9b       	sbis	0x19, 6	; 25
    14c8:	28 c0       	rjmp	.+80     	; 0x151a <frSensorCheck+0xd2>
    14ca:	cf 9b       	sbis	0x19, 7	; 25
    14cc:	26 c0       	rjmp	.+76     	; 0x151a <frSensorCheck+0xd2>
    14ce:	86 9b       	sbis	0x10, 6	; 16
    14d0:	24 c0       	rjmp	.+72     	; 0x151a <frSensorCheck+0xd2>
    14d2:	87 9b       	sbis	0x10, 7	; 16
    14d4:	22 c0       	rjmp	.+68     	; 0x151a <frSensorCheck+0xd2>
    14d6:	80 91 0b 01 	lds	r24, 0x010B
    14da:	90 91 0c 01 	lds	r25, 0x010C
    14de:	89 2b       	or	r24, r25
    14e0:	e1 f4       	brne	.+56     	; 0x151a <frSensorCheck+0xd2>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    14e2:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    14e4:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    14e6:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    14e8:	af 9a       	sbi	0x15, 7	; 21
	{
		//lcd_clear();
		//lcd_write_string("Uturn");
		bot_brake();
		update_coordinates();
    14ea:	0e 94 61 08 	call	0x10c2	; 0x10c2 <update_coordinates>
		update_array(0,0,1,0);
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		//delay_sec(2);

		Uturn();
    1502:	0e 94 67 04 	call	0x8ce	; 0x8ce <Uturn>
		//bot_brake();
		sense_of_directon();
    1506:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_sec(2);
		flag1 = 0;
    150a:	10 92 0c 01 	sts	0x010C, r1
    150e:	10 92 0b 01 	sts	0x010B, r1
		irc = 0;
    1512:	10 92 0e 01 	sts	0x010E, r1
    1516:	10 92 0d 01 	sts	0x010D, r1
    151a:	08 95       	ret

0000151c <fill_missed_array>:
		return 0;
	}
}

void fill_missed_array()
{
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	e1 e0       	ldi	r30, 0x01	; 1
    1536:	ee 2e       	mov	r14, r30
    1538:	f1 2c       	mov	r15, r1
    153a:	79 c0       	rjmp	.+242    	; 0x162e <fill_missed_array+0x112>
	int hx, hy, lx, ly;
	for(int i = 1 ; i<9 ; i++)
	{
		for(int j = 1 ; j<9 ; j++)
		{
			if(is_coordinate_null(i,j))
    153c:	c7 01       	movw	r24, r14
    153e:	b6 01       	movw	r22, r12
    1540:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1544:	89 2b       	or	r24, r25
    1546:	09 f4       	brne	.+2      	; 0x154a <fill_missed_array+0x2e>
    1548:	60 c0       	rjmp	.+192    	; 0x160a <fill_missed_array+0xee>
			{
				hx = i+1;
				hy = j+1;
				lx = i-1;
				ly = j-1;
				lcd_clear();
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    1552:	c4 01       	movw	r24, r8
    1554:	b6 01       	movw	r22, r12
    1556:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    155a:	89 2b       	or	r24, r25
    155c:	09 f0       	breq	.+2      	; 0x1560 <fill_missed_array+0x44>
    155e:	55 c0       	rjmp	.+170    	; 0x160a <fill_missed_array+0xee>
    1560:	c5 01       	movw	r24, r10
    1562:	b6 01       	movw	r22, r12
    1564:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1568:	89 2b       	or	r24, r25
    156a:	09 f0       	breq	.+2      	; 0x156e <fill_missed_array+0x52>
    156c:	4e c0       	rjmp	.+156    	; 0x160a <fill_missed_array+0xee>
    156e:	b6 01       	movw	r22, r12
    1570:	61 50       	subi	r22, 0x01	; 1
    1572:	70 40       	sbci	r23, 0x00	; 0
    1574:	c7 01       	movw	r24, r14
    1576:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    157a:	89 2b       	or	r24, r25
    157c:	09 f0       	breq	.+2      	; 0x1580 <fill_missed_array+0x64>
    157e:	45 c0       	rjmp	.+138    	; 0x160a <fill_missed_array+0xee>
    1580:	b6 01       	movw	r22, r12
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	c7 01       	movw	r24, r14
    1588:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    158c:	89 2b       	or	r24, r25
    158e:	e9 f5       	brne	.+122    	; 0x160a <fill_missed_array+0xee>
				{
					lcd_clear();
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Filliable");
    1598:	8e e6       	ldi	r24, 0x6E	; 110
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_millisec(2000);
    15a0:	80 ed       	ldi	r24, 0xD0	; 208
    15a2:	97 e0       	ldi	r25, 0x07	; 7
    15a4:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
					if(dir_array[hx][j][3]==1)
    15a8:	ca 5a       	subi	r28, 0xAA	; 170
    15aa:	df 4f       	sbci	r29, 0xFF	; 255
    15ac:	88 81       	ld	r24, Y
    15ae:	99 81       	ldd	r25, Y+1	; 0x01
    15b0:	c6 55       	subi	r28, 0x56	; 86
    15b2:	d0 40       	sbci	r29, 0x00	; 0
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	19 f4       	brne	.+6      	; 0x15c0 <fill_missed_array+0xa4>
					{
						dir_array[i][j][1] = 1;
    15ba:	9b 83       	std	Y+3, r25	; 0x03
    15bc:	8a 83       	std	Y+2, r24	; 0x02
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <fill_missed_array+0xa8>
					}
					else
					{
						dir_array[i][j][1] = 0;
    15c0:	1b 82       	std	Y+3, r1	; 0x03
    15c2:	1a 82       	std	Y+2, r1	; 0x02
					}
					if(dir_array[lx][j][1]==1)
    15c4:	ce 54       	subi	r28, 0x4E	; 78
    15c6:	d0 40       	sbci	r29, 0x00	; 0
    15c8:	88 81       	ld	r24, Y
    15ca:	99 81       	ldd	r25, Y+1	; 0x01
    15cc:	c2 5b       	subi	r28, 0xB2	; 178
    15ce:	df 4f       	sbci	r29, 0xFF	; 255
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	19 f4       	brne	.+6      	; 0x15dc <fill_missed_array+0xc0>
					{
						dir_array[i][j][3] = 1;
    15d6:	9f 83       	std	Y+7, r25	; 0x07
    15d8:	8e 83       	std	Y+6, r24	; 0x06
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <fill_missed_array+0xc4>
					}
					else
					{
						dir_array[i][j][3] = 0;
    15dc:	1f 82       	std	Y+7, r1	; 0x07
    15de:	1e 82       	std	Y+6, r1	; 0x06
					}
					if(dir_array[i][hy][2]==1)
    15e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	19 f4       	brne	.+6      	; 0x15f0 <fill_missed_array+0xd4>
					{
						dir_array[i][j][0] = 1;
    15ea:	99 83       	std	Y+1, r25	; 0x01
    15ec:	88 83       	st	Y, r24
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <fill_missed_array+0xd8>
					}
					else
					{
						dir_array[i][j][0] =0;
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	18 82       	st	Y, r1
					}
					if(dir_array[i][j][ly]==1)
    15f4:	f8 01       	movw	r30, r16
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	91 05       	cpc	r25, r1
    15fe:	19 f4       	brne	.+6      	; 0x1606 <fill_missed_array+0xea>
					{
						dir_array[i][j][2] = 1;
    1600:	9d 83       	std	Y+5, r25	; 0x05
    1602:	8c 83       	std	Y+4, r24	; 0x04
    1604:	02 c0       	rjmp	.+4      	; 0x160a <fill_missed_array+0xee>
					}
					else
					{
						dir_array[i][j][2] = 0;
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	1c 82       	std	Y+4, r1	; 0x04
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<9 ; i++)
	{
		for(int j = 1 ; j<9 ; j++)
    160a:	08 94       	sec
    160c:	c1 1c       	adc	r12, r1
    160e:	d1 1c       	adc	r13, r1
    1610:	06 5f       	subi	r16, 0xF6	; 246
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	28 96       	adiw	r28, 0x08	; 8
    1616:	f9 e0       	ldi	r31, 0x09	; 9
    1618:	cf 16       	cp	r12, r31
    161a:	d1 04       	cpc	r13, r1
    161c:	09 f0       	breq	.+2      	; 0x1620 <fill_missed_array+0x104>
    161e:	8e cf       	rjmp	.-228    	; 0x153c <fill_missed_array+0x20>
}

void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<9 ; i++)
    1620:	08 94       	sec
    1622:	e1 1c       	adc	r14, r1
    1624:	f1 1c       	adc	r15, r1
    1626:	89 e0       	ldi	r24, 0x09	; 9
    1628:	e8 16       	cp	r14, r24
    162a:	f1 04       	cpc	r15, r1
    162c:	f9 f0       	breq	.+62     	; 0x166c <fill_missed_array+0x150>
    162e:	87 01       	movw	r16, r14
    1630:	00 0f       	add	r16, r16
    1632:	11 1f       	adc	r17, r17
    1634:	c7 01       	movw	r24, r14
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	6a 95       	dec	r22
    163e:	e1 f7       	brne	.-8      	; 0x1638 <fill_missed_array+0x11c>
    1640:	08 0f       	add	r16, r24
    1642:	19 1f       	adc	r17, r25
    1644:	53 e0       	ldi	r21, 0x03	; 3
    1646:	00 0f       	add	r16, r16
    1648:	11 1f       	adc	r17, r17
    164a:	5a 95       	dec	r21
    164c:	e1 f7       	brne	.-8      	; 0x1646 <fill_missed_array+0x12a>
    164e:	09 50       	subi	r16, 0x09	; 9
    1650:	1e 4f       	sbci	r17, 0xFE	; 254
    1652:	e8 01       	movw	r28, r16
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	c4 2e       	mov	r12, r20
    1658:	d1 2c       	mov	r13, r1
				lcd_clear();
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    165a:	47 01       	movw	r8, r14
    165c:	08 94       	sec
    165e:	81 1c       	adc	r8, r1
    1660:	91 1c       	adc	r9, r1
    1662:	57 01       	movw	r10, r14
    1664:	08 94       	sec
    1666:	a1 08       	sbc	r10, r1
    1668:	b1 08       	sbc	r11, r1
    166a:	68 cf       	rjmp	.-304    	; 0x153c <fill_missed_array+0x20>
					}
				}
			}
		}
	}
}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	df 90       	pop	r13
    167a:	cf 90       	pop	r12
    167c:	bf 90       	pop	r11
    167e:	af 90       	pop	r10
    1680:	9f 90       	pop	r9
    1682:	8f 90       	pop	r8
    1684:	08 95       	ret

00001686 <coordinates_tobe_reached>:

void coordinates_tobe_reached()
{
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	68 97       	sbiw	r28, 0x18	; 24
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
	int stop=0, t1, t2;
	mx = 0;
    16ba:	10 92 18 01 	sts	0x0118, r1
    16be:	10 92 17 01 	sts	0x0117, r1
	my = 0;
    16c2:	10 92 1a 01 	sts	0x011A, r1
    16c6:	10 92 19 01 	sts	0x0119, r1
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    16ca:	80 90 fa 00 	lds	r8, 0x00FA
    16ce:	90 90 fb 00 	lds	r9, 0x00FB
    16d2:	a0 90 fc 00 	lds	r10, 0x00FC
    16d6:	b0 90 fd 00 	lds	r11, 0x00FD
    16da:	cc 24       	eor	r12, r12
    16dc:	dd 24       	eor	r13, r13
    16de:	c8 18       	sub	r12, r8
    16e0:	d9 08       	sbc	r13, r9
    16e2:	de 82       	std	Y+6, r13	; 0x06
    16e4:	cd 82       	std	Y+5, r12	; 0x05
    16e6:	dc 82       	std	Y+4, r13	; 0x04
    16e8:	cb 82       	std	Y+3, r12	; 0x03
    16ea:	da 82       	std	Y+2, r13	; 0x02
    16ec:	c9 82       	std	Y+1, r12	; 0x01
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    16f2:	22 27       	eor	r18, r18
    16f4:	33 27       	eor	r19, r19
    16f6:	2a 19       	sub	r18, r10
    16f8:	3b 09       	sbc	r19, r11
    16fa:	3e 8b       	std	Y+22, r19	; 0x16
    16fc:	2d 8b       	std	Y+21, r18	; 0x15
    16fe:	94 c1       	rjmp	.+808    	; 0x1a28 <coordinates_tobe_reached+0x3a2>
	my = 0;
	for(int i = 0 ; i<10 ; i++)
	{
		for(int j = 0 ; j<10 ; j++)
		{
			if(!(is_coordinate_null(i,j)))
    1700:	c8 01       	movw	r24, r16
    1702:	6f 89       	ldd	r22, Y+23	; 0x17
    1704:	78 8d       	ldd	r23, Y+24	; 0x18
    1706:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    170a:	89 2b       	or	r24, r25
    170c:	09 f0       	breq	.+2      	; 0x1710 <coordinates_tobe_reached+0x8a>
    170e:	59 c1       	rjmp	.+690    	; 0x19c2 <coordinates_tobe_reached+0x33c>
			{
				if(dir_array[i][j][0]==1)
    1710:	f7 01       	movw	r30, r14
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	09 f0       	breq	.+2      	; 0x171c <coordinates_tobe_reached+0x96>
    171a:	4a c0       	rjmp	.+148    	; 0x17b0 <coordinates_tobe_reached+0x12a>
				{
					if(is_coordinate_null(i,j+1))
    171c:	6f 89       	ldd	r22, Y+23	; 0x17
    171e:	78 8d       	ldd	r23, Y+24	; 0x18
    1720:	6f 5f       	subi	r22, 0xFF	; 255
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	c8 01       	movw	r24, r16
    1726:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    172a:	89 2b       	or	r24, r25
    172c:	09 f4       	brne	.+2      	; 0x1730 <coordinates_tobe_reached+0xaa>
    172e:	40 c0       	rjmp	.+128    	; 0x17b0 <coordinates_tobe_reached+0x12a>
					{
						if(mx==0 && my==0)
    1730:	60 91 17 01 	lds	r22, 0x0117
    1734:	70 91 18 01 	lds	r23, 0x0118
    1738:	61 15       	cp	r22, r1
    173a:	71 05       	cpc	r23, r1
    173c:	31 f4       	brne	.+12     	; 0x174a <coordinates_tobe_reached+0xc4>
    173e:	80 91 19 01 	lds	r24, 0x0119
    1742:	90 91 1a 01 	lds	r25, 0x011A
    1746:	89 2b       	or	r24, r25
    1748:	49 f1       	breq	.+82     	; 0x179c <coordinates_tobe_reached+0x116>
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    174a:	68 19       	sub	r22, r8
    174c:	79 09       	sbc	r23, r9
    174e:	80 91 19 01 	lds	r24, 0x0119
    1752:	90 91 1a 01 	lds	r25, 0x011A
    1756:	8a 19       	sub	r24, r10
    1758:	9b 09       	sbc	r25, r11
							if(t1<t2)
    175a:	ed 85       	ldd	r30, Y+13	; 0x0d
    175c:	fe 85       	ldd	r31, Y+14	; 0x0e
    175e:	ee 9f       	mul	r30, r30
    1760:	a0 01       	movw	r20, r0
    1762:	ef 9f       	mul	r30, r31
    1764:	50 0d       	add	r21, r0
    1766:	fe 9f       	mul	r31, r30
    1768:	50 0d       	add	r21, r0
    176a:	11 24       	eor	r1, r1
    176c:	2f 85       	ldd	r18, Y+15	; 0x0f
    176e:	38 89       	ldd	r19, Y+16	; 0x10
    1770:	42 0f       	add	r20, r18
    1772:	53 1f       	adc	r21, r19
    1774:	fc 01       	movw	r30, r24
    1776:	ee 9f       	mul	r30, r30
    1778:	c0 01       	movw	r24, r0
    177a:	ef 9f       	mul	r30, r31
    177c:	90 0d       	add	r25, r0
    177e:	fe 9f       	mul	r31, r30
    1780:	90 0d       	add	r25, r0
    1782:	11 24       	eor	r1, r1
    1784:	66 9f       	mul	r22, r22
    1786:	90 01       	movw	r18, r0
    1788:	67 9f       	mul	r22, r23
    178a:	30 0d       	add	r19, r0
    178c:	76 9f       	mul	r23, r22
    178e:	30 0d       	add	r19, r0
    1790:	11 24       	eor	r1, r1
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	48 17       	cp	r20, r24
    1798:	59 07       	cpc	r21, r25
    179a:	54 f4       	brge	.+20     	; 0x17b0 <coordinates_tobe_reached+0x12a>
							{
								mx = i;
    179c:	10 93 18 01 	sts	0x0118, r17
    17a0:	00 93 17 01 	sts	0x0117, r16
								my = j;
    17a4:	2f 89       	ldd	r18, Y+23	; 0x17
    17a6:	38 8d       	ldd	r19, Y+24	; 0x18
    17a8:	30 93 1a 01 	sts	0x011A, r19
    17ac:	20 93 19 01 	sts	0x0119, r18
							}
						}
					}
				}
				if(dir_array[i][j][1]==1)
    17b0:	f7 01       	movw	r30, r14
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <coordinates_tobe_reached+0x136>
    17ba:	52 c0       	rjmp	.+164    	; 0x1860 <coordinates_tobe_reached+0x1da>
				{
					if(is_coordinate_null(i+1,j))
    17bc:	8b 89       	ldd	r24, Y+19	; 0x13
    17be:	9c 89       	ldd	r25, Y+20	; 0x14
    17c0:	6f 89       	ldd	r22, Y+23	; 0x17
    17c2:	78 8d       	ldd	r23, Y+24	; 0x18
    17c4:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    17c8:	89 2b       	or	r24, r25
    17ca:	09 f4       	brne	.+2      	; 0x17ce <coordinates_tobe_reached+0x148>
    17cc:	49 c0       	rjmp	.+146    	; 0x1860 <coordinates_tobe_reached+0x1da>
					{
						if(mx==0 && my==0)
    17ce:	60 91 17 01 	lds	r22, 0x0117
    17d2:	70 91 18 01 	lds	r23, 0x0118
    17d6:	61 15       	cp	r22, r1
    17d8:	71 05       	cpc	r23, r1
    17da:	89 f4       	brne	.+34     	; 0x17fe <coordinates_tobe_reached+0x178>
    17dc:	80 91 19 01 	lds	r24, 0x0119
    17e0:	90 91 1a 01 	lds	r25, 0x011A
    17e4:	89 2b       	or	r24, r25
    17e6:	59 f4       	brne	.+22     	; 0x17fe <coordinates_tobe_reached+0x178>
						{
							mx = i;
    17e8:	10 93 18 01 	sts	0x0118, r17
    17ec:	00 93 17 01 	sts	0x0117, r16
							my = j;
    17f0:	2f 89       	ldd	r18, Y+23	; 0x17
    17f2:	38 8d       	ldd	r19, Y+24	; 0x18
    17f4:	30 93 1a 01 	sts	0x011A, r19
    17f8:	20 93 19 01 	sts	0x0119, r18
    17fc:	31 c0       	rjmp	.+98     	; 0x1860 <coordinates_tobe_reached+0x1da>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    17fe:	68 19       	sub	r22, r8
    1800:	79 09       	sbc	r23, r9
    1802:	80 91 19 01 	lds	r24, 0x0119
    1806:	90 91 1a 01 	lds	r25, 0x011A
    180a:	8a 19       	sub	r24, r10
    180c:	9b 09       	sbc	r25, r11
							
							if(t1<t2)
    180e:	66 9c       	mul	r6, r6
    1810:	a0 01       	movw	r20, r0
    1812:	67 9c       	mul	r6, r7
    1814:	50 0d       	add	r21, r0
    1816:	76 9c       	mul	r7, r6
    1818:	50 0d       	add	r21, r0
    181a:	11 24       	eor	r1, r1
    181c:	eb 85       	ldd	r30, Y+11	; 0x0b
    181e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1820:	4e 0f       	add	r20, r30
    1822:	5f 1f       	adc	r21, r31
    1824:	9c 01       	movw	r18, r24
    1826:	22 9f       	mul	r18, r18
    1828:	c0 01       	movw	r24, r0
    182a:	23 9f       	mul	r18, r19
    182c:	90 0d       	add	r25, r0
    182e:	32 9f       	mul	r19, r18
    1830:	90 0d       	add	r25, r0
    1832:	11 24       	eor	r1, r1
    1834:	66 9f       	mul	r22, r22
    1836:	90 01       	movw	r18, r0
    1838:	67 9f       	mul	r22, r23
    183a:	30 0d       	add	r19, r0
    183c:	76 9f       	mul	r23, r22
    183e:	30 0d       	add	r19, r0
    1840:	11 24       	eor	r1, r1
    1842:	82 0f       	add	r24, r18
    1844:	93 1f       	adc	r25, r19
    1846:	48 17       	cp	r20, r24
    1848:	59 07       	cpc	r21, r25
    184a:	54 f4       	brge	.+20     	; 0x1860 <coordinates_tobe_reached+0x1da>
							{
								mx = i;
    184c:	10 93 18 01 	sts	0x0118, r17
    1850:	00 93 17 01 	sts	0x0117, r16
								my = j;
    1854:	8f 89       	ldd	r24, Y+23	; 0x17
    1856:	98 8d       	ldd	r25, Y+24	; 0x18
    1858:	90 93 1a 01 	sts	0x011A, r25
    185c:	80 93 19 01 	sts	0x0119, r24
							}
						}
					}
				}
				if(dir_array[i][j][2]==1)
    1860:	f7 01       	movw	r30, r14
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	95 81       	ldd	r25, Z+5	; 0x05
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	09 f0       	breq	.+2      	; 0x186c <coordinates_tobe_reached+0x1e6>
    186a:	53 c0       	rjmp	.+166    	; 0x1912 <coordinates_tobe_reached+0x28c>
				{
					if(is_coordinate_null(i,j-1))
    186c:	6f 89       	ldd	r22, Y+23	; 0x17
    186e:	78 8d       	ldd	r23, Y+24	; 0x18
    1870:	61 50       	subi	r22, 0x01	; 1
    1872:	70 40       	sbci	r23, 0x00	; 0
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    187a:	89 2b       	or	r24, r25
    187c:	09 f4       	brne	.+2      	; 0x1880 <coordinates_tobe_reached+0x1fa>
    187e:	49 c0       	rjmp	.+146    	; 0x1912 <coordinates_tobe_reached+0x28c>
					{
						if(mx==0 && my==0)
    1880:	60 91 17 01 	lds	r22, 0x0117
    1884:	70 91 18 01 	lds	r23, 0x0118
    1888:	61 15       	cp	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	89 f4       	brne	.+34     	; 0x18b0 <coordinates_tobe_reached+0x22a>
    188e:	80 91 19 01 	lds	r24, 0x0119
    1892:	90 91 1a 01 	lds	r25, 0x011A
    1896:	89 2b       	or	r24, r25
    1898:	59 f4       	brne	.+22     	; 0x18b0 <coordinates_tobe_reached+0x22a>
						{
							mx = i;
    189a:	10 93 18 01 	sts	0x0118, r17
    189e:	00 93 17 01 	sts	0x0117, r16
							my = j;
    18a2:	2f 89       	ldd	r18, Y+23	; 0x17
    18a4:	38 8d       	ldd	r19, Y+24	; 0x18
    18a6:	30 93 1a 01 	sts	0x011A, r19
    18aa:	20 93 19 01 	sts	0x0119, r18
    18ae:	31 c0       	rjmp	.+98     	; 0x1912 <coordinates_tobe_reached+0x28c>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    18b0:	68 19       	sub	r22, r8
    18b2:	79 09       	sbc	r23, r9
    18b4:	80 91 19 01 	lds	r24, 0x0119
    18b8:	90 91 1a 01 	lds	r25, 0x011A
    18bc:	8a 19       	sub	r24, r10
    18be:	9b 09       	sbc	r25, r11
							if(t1<t2)
    18c0:	44 9c       	mul	r4, r4
    18c2:	a0 01       	movw	r20, r0
    18c4:	45 9c       	mul	r4, r5
    18c6:	50 0d       	add	r21, r0
    18c8:	54 9c       	mul	r5, r4
    18ca:	50 0d       	add	r21, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	e9 85       	ldd	r30, Y+9	; 0x09
    18d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    18d2:	4e 0f       	add	r20, r30
    18d4:	5f 1f       	adc	r21, r31
    18d6:	9c 01       	movw	r18, r24
    18d8:	22 9f       	mul	r18, r18
    18da:	c0 01       	movw	r24, r0
    18dc:	23 9f       	mul	r18, r19
    18de:	90 0d       	add	r25, r0
    18e0:	32 9f       	mul	r19, r18
    18e2:	90 0d       	add	r25, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	66 9f       	mul	r22, r22
    18e8:	90 01       	movw	r18, r0
    18ea:	67 9f       	mul	r22, r23
    18ec:	30 0d       	add	r19, r0
    18ee:	76 9f       	mul	r23, r22
    18f0:	30 0d       	add	r19, r0
    18f2:	11 24       	eor	r1, r1
    18f4:	82 0f       	add	r24, r18
    18f6:	93 1f       	adc	r25, r19
    18f8:	48 17       	cp	r20, r24
    18fa:	59 07       	cpc	r21, r25
    18fc:	54 f4       	brge	.+20     	; 0x1912 <coordinates_tobe_reached+0x28c>
							{
								mx = i;
    18fe:	10 93 18 01 	sts	0x0118, r17
    1902:	00 93 17 01 	sts	0x0117, r16
								my = j;
    1906:	8f 89       	ldd	r24, Y+23	; 0x17
    1908:	98 8d       	ldd	r25, Y+24	; 0x18
    190a:	90 93 1a 01 	sts	0x011A, r25
    190e:	80 93 19 01 	sts	0x0119, r24
							}
						}
					}
				}
				if(dir_array[i][j][3]==1)
    1912:	f7 01       	movw	r30, r14
    1914:	86 81       	ldd	r24, Z+6	; 0x06
    1916:	97 81       	ldd	r25, Z+7	; 0x07
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	09 f0       	breq	.+2      	; 0x191e <coordinates_tobe_reached+0x298>
    191c:	52 c0       	rjmp	.+164    	; 0x19c2 <coordinates_tobe_reached+0x33c>
				{
					if(is_coordinate_null(i-1,j))
    191e:	89 89       	ldd	r24, Y+17	; 0x11
    1920:	9a 89       	ldd	r25, Y+18	; 0x12
    1922:	6f 89       	ldd	r22, Y+23	; 0x17
    1924:	78 8d       	ldd	r23, Y+24	; 0x18
    1926:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    192a:	89 2b       	or	r24, r25
    192c:	09 f4       	brne	.+2      	; 0x1930 <coordinates_tobe_reached+0x2aa>
    192e:	49 c0       	rjmp	.+146    	; 0x19c2 <coordinates_tobe_reached+0x33c>
					{
						if(mx==0 && my==0)
    1930:	60 91 17 01 	lds	r22, 0x0117
    1934:	70 91 18 01 	lds	r23, 0x0118
    1938:	61 15       	cp	r22, r1
    193a:	71 05       	cpc	r23, r1
    193c:	89 f4       	brne	.+34     	; 0x1960 <coordinates_tobe_reached+0x2da>
    193e:	80 91 19 01 	lds	r24, 0x0119
    1942:	90 91 1a 01 	lds	r25, 0x011A
    1946:	89 2b       	or	r24, r25
    1948:	59 f4       	brne	.+22     	; 0x1960 <coordinates_tobe_reached+0x2da>
						{
							mx = i;
    194a:	10 93 18 01 	sts	0x0118, r17
    194e:	00 93 17 01 	sts	0x0117, r16
							my = j;
    1952:	2f 89       	ldd	r18, Y+23	; 0x17
    1954:	38 8d       	ldd	r19, Y+24	; 0x18
    1956:	30 93 1a 01 	sts	0x011A, r19
    195a:	20 93 19 01 	sts	0x0119, r18
    195e:	31 c0       	rjmp	.+98     	; 0x19c2 <coordinates_tobe_reached+0x33c>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    1960:	68 19       	sub	r22, r8
    1962:	79 09       	sbc	r23, r9
    1964:	80 91 19 01 	lds	r24, 0x0119
    1968:	90 91 1a 01 	lds	r25, 0x011A
    196c:	8a 19       	sub	r24, r10
    196e:	9b 09       	sbc	r25, r11
							if(t1<t2)
    1970:	22 9c       	mul	r2, r2
    1972:	a0 01       	movw	r20, r0
    1974:	23 9c       	mul	r2, r3
    1976:	50 0d       	add	r21, r0
    1978:	32 9c       	mul	r3, r2
    197a:	50 0d       	add	r21, r0
    197c:	11 24       	eor	r1, r1
    197e:	ef 81       	ldd	r30, Y+7	; 0x07
    1980:	f8 85       	ldd	r31, Y+8	; 0x08
    1982:	4e 0f       	add	r20, r30
    1984:	5f 1f       	adc	r21, r31
    1986:	9c 01       	movw	r18, r24
    1988:	22 9f       	mul	r18, r18
    198a:	c0 01       	movw	r24, r0
    198c:	23 9f       	mul	r18, r19
    198e:	90 0d       	add	r25, r0
    1990:	32 9f       	mul	r19, r18
    1992:	90 0d       	add	r25, r0
    1994:	11 24       	eor	r1, r1
    1996:	66 9f       	mul	r22, r22
    1998:	90 01       	movw	r18, r0
    199a:	67 9f       	mul	r22, r23
    199c:	30 0d       	add	r19, r0
    199e:	76 9f       	mul	r23, r22
    19a0:	30 0d       	add	r19, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	48 17       	cp	r20, r24
    19aa:	59 07       	cpc	r21, r25
    19ac:	54 f4       	brge	.+20     	; 0x19c2 <coordinates_tobe_reached+0x33c>
							{
								mx = i;
    19ae:	10 93 18 01 	sts	0x0118, r17
    19b2:	00 93 17 01 	sts	0x0117, r16
								my = j;
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	90 93 1a 01 	sts	0x011A, r25
    19be:	80 93 19 01 	sts	0x0119, r24
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<10 ; i++)
	{
		for(int j = 0 ; j<10 ; j++)
    19c2:	ef 89       	ldd	r30, Y+23	; 0x17
    19c4:	f8 8d       	ldd	r31, Y+24	; 0x18
    19c6:	31 96       	adiw	r30, 0x01	; 1
    19c8:	f8 8f       	std	Y+24, r31	; 0x18
    19ca:	ef 8b       	std	Y+23, r30	; 0x17
    19cc:	28 e0       	ldi	r18, 0x08	; 8
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	e2 0e       	add	r14, r18
    19d2:	f3 1e       	adc	r15, r19
    19d4:	08 94       	sec
    19d6:	21 1c       	adc	r2, r1
    19d8:	31 1c       	adc	r3, r1
    19da:	08 94       	sec
    19dc:	41 1c       	adc	r4, r1
    19de:	51 1c       	adc	r5, r1
    19e0:	08 94       	sec
    19e2:	61 1c       	adc	r6, r1
    19e4:	71 1c       	adc	r7, r1
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	9e 87       	std	Y+14, r25	; 0x0e
    19ee:	8d 87       	std	Y+13, r24	; 0x0d
    19f0:	3a 97       	sbiw	r30, 0x0a	; 10
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <coordinates_tobe_reached+0x370>
    19f4:	85 ce       	rjmp	.-758    	; 0x1700 <coordinates_tobe_reached+0x7a>
void coordinates_tobe_reached()
{
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<10 ; i++)
    19f6:	0f 5f       	subi	r16, 0xFF	; 255
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	08 94       	sec
    19fc:	c1 1c       	adc	r12, r1
    19fe:	d1 1c       	adc	r13, r1
    1a00:	ed 81       	ldd	r30, Y+5	; 0x05
    1a02:	fe 81       	ldd	r31, Y+6	; 0x06
    1a04:	31 96       	adiw	r30, 0x01	; 1
    1a06:	fe 83       	std	Y+6, r31	; 0x06
    1a08:	ed 83       	std	Y+5, r30	; 0x05
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	3c 83       	std	Y+4, r19	; 0x04
    1a14:	2b 83       	std	Y+3, r18	; 0x03
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	0a 30       	cpi	r16, 0x0A	; 10
    1a22:	11 05       	cpc	r17, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <coordinates_tobe_reached+0x3a2>
    1a26:	4a c0       	rjmp	.+148    	; 0x1abc <coordinates_tobe_reached+0x436>
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1a28:	cc 9c       	mul	r12, r12
    1a2a:	f0 01       	movw	r30, r0
    1a2c:	cd 9c       	mul	r12, r13
    1a2e:	f0 0d       	add	r31, r0
    1a30:	dc 9c       	mul	r13, r12
    1a32:	f0 0d       	add	r31, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	f8 8b       	std	Y+16, r31	; 0x10
    1a38:	ef 87       	std	Y+15, r30	; 0x0f
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	88 9f       	mul	r24, r24
    1a40:	90 01       	movw	r18, r0
    1a42:	89 9f       	mul	r24, r25
    1a44:	30 0d       	add	r19, r0
    1a46:	98 9f       	mul	r25, r24
    1a48:	30 0d       	add	r19, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	3c 87       	std	Y+12, r19	; 0x0c
    1a4e:	2b 87       	std	Y+11, r18	; 0x0b
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	22 9f       	mul	r18, r18
    1a56:	f0 01       	movw	r30, r0
    1a58:	23 9f       	mul	r18, r19
    1a5a:	f0 0d       	add	r31, r0
    1a5c:	32 9f       	mul	r19, r18
    1a5e:	f0 0d       	add	r31, r0
    1a60:	11 24       	eor	r1, r1
    1a62:	fa 87       	std	Y+10, r31	; 0x0a
    1a64:	e9 87       	std	Y+9, r30	; 0x09
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1a66:	e9 81       	ldd	r30, Y+1	; 0x01
    1a68:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6a:	ee 9f       	mul	r30, r30
    1a6c:	c0 01       	movw	r24, r0
    1a6e:	ef 9f       	mul	r30, r31
    1a70:	90 0d       	add	r25, r0
    1a72:	fe 9f       	mul	r31, r30
    1a74:	90 0d       	add	r25, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	98 87       	std	Y+8, r25	; 0x08
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	20 e5       	ldi	r18, 0x50	; 80
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	02 9f       	mul	r16, r18
    1a82:	70 01       	movw	r14, r0
    1a84:	03 9f       	mul	r16, r19
    1a86:	f0 0c       	add	r15, r0
    1a88:	12 9f       	mul	r17, r18
    1a8a:	f0 0c       	add	r15, r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	8f ee       	ldi	r24, 0xEF	; 239
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	e8 0e       	add	r14, r24
    1a94:	f9 1e       	adc	r15, r25
    1a96:	ed 89       	ldd	r30, Y+21	; 0x15
    1a98:	fe 89       	ldd	r31, Y+22	; 0x16
    1a9a:	fe 87       	std	Y+14, r31	; 0x0e
    1a9c:	ed 87       	std	Y+13, r30	; 0x0d
    1a9e:	1f 01       	movw	r2, r30
    1aa0:	2f 01       	movw	r4, r30
    1aa2:	3f 01       	movw	r6, r30
    1aa4:	18 8e       	std	Y+24, r1	; 0x18
    1aa6:	1f 8a       	std	Y+23, r1	; 0x17
						}
					}
				}
				if(dir_array[i][j][3]==1)
				{
					if(is_coordinate_null(i-1,j))
    1aa8:	98 01       	movw	r18, r16
    1aaa:	21 50       	subi	r18, 0x01	; 1
    1aac:	30 40       	sbci	r19, 0x00	; 0
    1aae:	3a 8b       	std	Y+18, r19	; 0x12
    1ab0:	29 8b       	std	Y+17, r18	; 0x11
						}
					}
				}
				if(dir_array[i][j][1]==1)
				{
					if(is_coordinate_null(i+1,j))
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	9c 8b       	std	Y+20, r25	; 0x14
    1ab8:	8b 8b       	std	Y+19, r24	; 0x13
    1aba:	22 ce       	rjmp	.-956    	; 0x1700 <coordinates_tobe_reached+0x7a>
					}
				}	
			}	
		}
	}
}
    1abc:	68 96       	adiw	r28, 0x18	; 24
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	ff 90       	pop	r15
    1ad2:	ef 90       	pop	r14
    1ad4:	df 90       	pop	r13
    1ad6:	cf 90       	pop	r12
    1ad8:	bf 90       	pop	r11
    1ada:	af 90       	pop	r10
    1adc:	9f 90       	pop	r9
    1ade:	8f 90       	pop	r8
    1ae0:	7f 90       	pop	r7
    1ae2:	6f 90       	pop	r6
    1ae4:	5f 90       	pop	r5
    1ae6:	4f 90       	pop	r4
    1ae8:	3f 90       	pop	r3
    1aea:	2f 90       	pop	r2
    1aec:	08 95       	ret

00001aee <get_path>:
void get_path()
{ 
    1aee:	6f 92       	push	r6
    1af0:	7f 92       	push	r7
    1af2:	8f 92       	push	r8
    1af4:	9f 92       	push	r9
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
	int x , y;
	y = y_coordinate;
    1b0a:	60 91 fc 00 	lds	r22, 0x00FC
    1b0e:	70 91 fd 00 	lds	r23, 0x00FD
	x = x_coordinate;
    1b12:	40 91 fa 00 	lds	r20, 0x00FA
    1b16:	50 91 fb 00 	lds	r21, 0x00FB
    1b1a:	05 e1       	ldi	r16, 0x15	; 21
    1b1c:	15 e0       	ldi	r17, 0x05	; 5
    1b1e:	f8 01       	movw	r30, r16
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
	{
		path_array[ls][0] = 0;
    1b20:	11 82       	std	Z+1, r1	; 0x01
    1b22:	10 82       	st	Z, r1
		path_array[ls][1] = 0;
    1b24:	13 82       	std	Z+3, r1	; 0x03
    1b26:	12 82       	std	Z+2, r1	; 0x02
    1b28:	34 96       	adiw	r30, 0x04	; 4
{ 
	int x , y;
	y = y_coordinate;
	x = x_coordinate;
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
    1b2a:	85 e0       	ldi	r24, 0x05	; 5
    1b2c:	e1 35       	cpi	r30, 0x51	; 81
    1b2e:	f8 07       	cpc	r31, r24
    1b30:	b9 f7       	brne	.-18     	; 0x1b20 <get_path+0x32>
    1b32:	47 c2       	rjmp	.+1166   	; 0x1fc2 <get_path+0x4d4>

	}
	int ipl=0;
	while(map_array[x][y]!=0)
	{
		if(map_array[x+1][y]<map_array[x][y] && dir_array[x][y][1]==1 && dir_array[x+1][y][3]==1 && x<9)
    1b34:	6a 01       	movw	r12, r20
    1b36:	08 94       	sec
    1b38:	c1 1c       	adc	r12, r1
    1b3a:	d1 1c       	adc	r13, r1
    1b3c:	e6 01       	movw	r28, r12
    1b3e:	cc 0f       	add	r28, r28
    1b40:	dd 1f       	adc	r29, r29
    1b42:	c6 01       	movw	r24, r12
    1b44:	23 e0       	ldi	r18, 0x03	; 3
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	2a 95       	dec	r18
    1b4c:	e1 f7       	brne	.-8      	; 0x1b46 <get_path+0x58>
    1b4e:	c8 0f       	add	r28, r24
    1b50:	d9 1f       	adc	r29, r25
    1b52:	c6 0f       	add	r28, r22
    1b54:	d7 1f       	adc	r29, r23
    1b56:	7e 01       	movw	r14, r28
    1b58:	ee 0c       	add	r14, r14
    1b5a:	ff 1c       	adc	r15, r15
    1b5c:	f7 01       	movw	r30, r14
    1b5e:	e9 5d       	subi	r30, 0xD9	; 217
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	a0 80       	ld	r10, Z
    1b64:	b1 80       	ldd	r11, Z+1	; 0x01
    1b66:	a8 14       	cp	r10, r8
    1b68:	b9 04       	cpc	r11, r9
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <get_path+0x80>
    1b6c:	72 c0       	rjmp	.+228    	; 0x1c52 <get_path+0x164>
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	aa 0f       	add	r26, r26
    1b72:	bb 1f       	adc	r27, r27
    1b74:	8a 95       	dec	r24
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <get_path+0x82>
    1b78:	af 50       	subi	r26, 0x0F	; 15
    1b7a:	be 4f       	sbci	r27, 0xFE	; 254
    1b7c:	8d 91       	ld	r24, X+
    1b7e:	9c 91       	ld	r25, X
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <get_path+0x98>
    1b84:	66 c0       	rjmp	.+204    	; 0x1c52 <get_path+0x164>
    1b86:	9e 01       	movw	r18, r28
    1b88:	a3 e0       	ldi	r26, 0x03	; 3
    1b8a:	22 0f       	add	r18, r18
    1b8c:	33 1f       	adc	r19, r19
    1b8e:	aa 95       	dec	r26
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <get_path+0x9c>
    1b92:	21 51       	subi	r18, 0x11	; 17
    1b94:	3e 4f       	sbci	r19, 0xFE	; 254
    1b96:	f9 01       	movw	r30, r18
    1b98:	86 81       	ldd	r24, Z+6	; 0x06
    1b9a:	97 81       	ldd	r25, Z+7	; 0x07
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <get_path+0xb4>
    1ba0:	58 c0       	rjmp	.+176    	; 0x1c52 <get_path+0x164>
    1ba2:	49 30       	cpi	r20, 0x09	; 9
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <get_path+0xbc>
    1ba8:	54 c0       	rjmp	.+168    	; 0x1c52 <get_path+0x164>
		{
			x = x+1;
			path_array[ipl][0]=x;
    1baa:	f8 01       	movw	r30, r16
    1bac:	d1 82       	std	Z+1, r13	; 0x01
    1bae:	c0 82       	st	Z, r12
			path_array[ipl][1]=y;
    1bb0:	73 83       	std	Z+3, r23	; 0x03
    1bb2:	62 83       	std	Z+2, r22	; 0x02
			if(map_array[x+1][y]<map_array[x][y] && dir_array[x+1][y][3]==1  && dir_array[x][y][0]==0  && dir_array[x][y][1]==1 && dir_array[x][y][2]==0 && dir_array[x][y][3]==1 && x<9)
    1bb4:	a6 01       	movw	r20, r12
    1bb6:	4f 5f       	subi	r20, 0xFF	; 255
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bba:	da 01       	movw	r26, r20
    1bbc:	aa 0f       	add	r26, r26
    1bbe:	bb 1f       	adc	r27, r27
    1bc0:	ca 01       	movw	r24, r20
    1bc2:	e3 e0       	ldi	r30, 0x03	; 3
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	ea 95       	dec	r30
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <get_path+0xd6>
    1bcc:	a8 0f       	add	r26, r24
    1bce:	b9 1f       	adc	r27, r25
    1bd0:	a6 0f       	add	r26, r22
    1bd2:	b7 1f       	adc	r27, r23
    1bd4:	fd 01       	movw	r30, r26
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	e9 5d       	subi	r30, 0xD9	; 217
    1bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	8a 15       	cp	r24, r10
    1be4:	9b 05       	cpc	r25, r11
    1be6:	0c f0       	brlt	.+2      	; 0x1bea <get_path+0xfc>
    1be8:	d2 c1       	rjmp	.+932    	; 0x1f8e <get_path+0x4a0>
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	aa 0f       	add	r26, r26
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	8a 95       	dec	r24
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <get_path+0xfe>
    1bf4:	a1 51       	subi	r26, 0x11	; 17
    1bf6:	be 4f       	sbci	r27, 0xFE	; 254
    1bf8:	16 96       	adiw	r26, 0x06	; 6
    1bfa:	8d 91       	ld	r24, X+
    1bfc:	9c 91       	ld	r25, X
    1bfe:	17 97       	sbiw	r26, 0x07	; 7
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <get_path+0x118>
    1c04:	c4 c1       	rjmp	.+904    	; 0x1f8e <get_path+0x4a0>
    1c06:	f9 01       	movw	r30, r18
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	89 2b       	or	r24, r25
    1c0e:	09 f0       	breq	.+2      	; 0x1c12 <get_path+0x124>
    1c10:	be c1       	rjmp	.+892    	; 0x1f8e <get_path+0x4a0>
    1c12:	b3 e0       	ldi	r27, 0x03	; 3
    1c14:	cc 0f       	add	r28, r28
    1c16:	dd 1f       	adc	r29, r29
    1c18:	ba 95       	dec	r27
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <get_path+0x126>
    1c1c:	cf 50       	subi	r28, 0x0F	; 15
    1c1e:	de 4f       	sbci	r29, 0xFE	; 254
    1c20:	88 81       	ld	r24, Y
    1c22:	99 81       	ldd	r25, Y+1	; 0x01
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <get_path+0x13c>
    1c28:	b2 c1       	rjmp	.+868    	; 0x1f8e <get_path+0x4a0>
    1c2a:	ee 0c       	add	r14, r14
    1c2c:	ff 1c       	adc	r15, r15
    1c2e:	ee 0c       	add	r14, r14
    1c30:	ff 1c       	adc	r15, r15
    1c32:	83 ef       	ldi	r24, 0xF3	; 243
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	e8 0e       	add	r14, r24
    1c38:	f9 1e       	adc	r15, r25
    1c3a:	f7 01       	movw	r30, r14
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	89 2b       	or	r24, r25
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <get_path+0x158>
    1c44:	a4 c1       	rjmp	.+840    	; 0x1f8e <get_path+0x4a0>
    1c46:	f9 e0       	ldi	r31, 0x09	; 9
    1c48:	cf 16       	cp	r12, r31
    1c4a:	d1 04       	cpc	r13, r1
    1c4c:	0c f0       	brlt	.+2      	; 0x1c50 <get_path+0x162>
    1c4e:	9f c1       	rjmp	.+830    	; 0x1f8e <get_path+0x4a0>
    1c50:	94 c0       	rjmp	.+296    	; 0x1d7a <get_path+0x28c>
				x = x+1;
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;
			}
		}
		else if(map_array[x-1][y]<map_array[x][y] && dir_array[x][y][3]==1 && dir_array[x-1][y][1]==1 && x>=1)
    1c52:	7a 01       	movw	r14, r20
    1c54:	08 94       	sec
    1c56:	e1 08       	sbc	r14, r1
    1c58:	f1 08       	sbc	r15, r1
    1c5a:	97 01       	movw	r18, r14
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	c7 01       	movw	r24, r14
    1c62:	e3 e0       	ldi	r30, 0x03	; 3
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	ea 95       	dec	r30
    1c6a:	e1 f7       	brne	.-8      	; 0x1c64 <get_path+0x176>
    1c6c:	28 0f       	add	r18, r24
    1c6e:	39 1f       	adc	r19, r25
    1c70:	26 0f       	add	r18, r22
    1c72:	37 1f       	adc	r19, r23
    1c74:	e9 01       	movw	r28, r18
    1c76:	cc 0f       	add	r28, r28
    1c78:	dd 1f       	adc	r29, r29
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5d       	subi	r30, 0xD9	; 217
    1c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c80:	c0 80       	ld	r12, Z
    1c82:	d1 80       	ldd	r13, Z+1	; 0x01
    1c84:	c8 14       	cp	r12, r8
    1c86:	d9 04       	cpc	r13, r9
    1c88:	0c f0       	brlt	.+2      	; 0x1c8c <get_path+0x19e>
    1c8a:	7b c0       	rjmp	.+246    	; 0x1d82 <get_path+0x294>
    1c8c:	fa 01       	movw	r30, r20
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	ca 01       	movw	r24, r20
    1c94:	a3 e0       	ldi	r26, 0x03	; 3
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	aa 95       	dec	r26
    1c9c:	e1 f7       	brne	.-8      	; 0x1c96 <get_path+0x1a8>
    1c9e:	e8 0f       	add	r30, r24
    1ca0:	f9 1f       	adc	r31, r25
    1ca2:	e6 0f       	add	r30, r22
    1ca4:	f7 1f       	adc	r31, r23
    1ca6:	b3 e0       	ldi	r27, 0x03	; 3
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	ba 95       	dec	r27
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <get_path+0x1ba>
    1cb0:	e1 51       	subi	r30, 0x11	; 17
    1cb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb4:	86 81       	ldd	r24, Z+6	; 0x06
    1cb6:	97 81       	ldd	r25, Z+7	; 0x07
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <get_path+0x1d0>
    1cbc:	62 c0       	rjmp	.+196    	; 0x1d82 <get_path+0x294>
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	a3 e0       	ldi	r26, 0x03	; 3
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	aa 95       	dec	r26
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <get_path+0x1d4>
    1cca:	ef 50       	subi	r30, 0x0F	; 15
    1ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cce:	80 81       	ld	r24, Z
    1cd0:	91 81       	ldd	r25, Z+1	; 0x01
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <get_path+0x1ea>
    1cd6:	55 c0       	rjmp	.+170    	; 0x1d82 <get_path+0x294>
    1cd8:	14 16       	cp	r1, r20
    1cda:	15 06       	cpc	r1, r21
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <get_path+0x1f2>
    1cde:	51 c0       	rjmp	.+162    	; 0x1d82 <get_path+0x294>
		{

			x = x-1;
			path_array[ipl][0]=x;
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	f1 82       	std	Z+1, r15	; 0x01
    1ce4:	e0 82       	st	Z, r14
			path_array[ipl][1]=y;
    1ce6:	73 83       	std	Z+3, r23	; 0x03
    1ce8:	62 83       	std	Z+2, r22	; 0x02
			if(map_array[x-1][y]<map_array[x][y] && dir_array[x-1][y][1]==1  && dir_array[x][y][0]==0  && dir_array[x][y][1]==1 && dir_array[x][y][2]==0 && dir_array[x][y][3]==1 && x>=1)
    1cea:	a7 01       	movw	r20, r14
    1cec:	41 50       	subi	r20, 0x01	; 1
    1cee:	50 40       	sbci	r21, 0x00	; 0
    1cf0:	da 01       	movw	r26, r20
    1cf2:	aa 0f       	add	r26, r26
    1cf4:	bb 1f       	adc	r27, r27
    1cf6:	ca 01       	movw	r24, r20
    1cf8:	e3 e0       	ldi	r30, 0x03	; 3
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	ea 95       	dec	r30
    1d00:	e1 f7       	brne	.-8      	; 0x1cfa <get_path+0x20c>
    1d02:	a8 0f       	add	r26, r24
    1d04:	b9 1f       	adc	r27, r25
    1d06:	a6 0f       	add	r26, r22
    1d08:	b7 1f       	adc	r27, r23
    1d0a:	fd 01       	movw	r30, r26
    1d0c:	ee 0f       	add	r30, r30
    1d0e:	ff 1f       	adc	r31, r31
    1d10:	e9 5d       	subi	r30, 0xD9	; 217
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	8c 15       	cp	r24, r12
    1d1a:	9d 05       	cpc	r25, r13
    1d1c:	0c f0       	brlt	.+2      	; 0x1d20 <get_path+0x232>
    1d1e:	39 c1       	rjmp	.+626    	; 0x1f92 <get_path+0x4a4>
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	aa 0f       	add	r26, r26
    1d24:	bb 1f       	adc	r27, r27
    1d26:	8a 95       	dec	r24
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <get_path+0x234>
    1d2a:	af 50       	subi	r26, 0x0F	; 15
    1d2c:	be 4f       	sbci	r27, 0xFE	; 254
    1d2e:	8d 91       	ld	r24, X+
    1d30:	9c 91       	ld	r25, X
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <get_path+0x24a>
    1d36:	2d c1       	rjmp	.+602    	; 0x1f92 <get_path+0x4a4>
    1d38:	f9 01       	movw	r30, r18
    1d3a:	b3 e0       	ldi	r27, 0x03	; 3
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	ba 95       	dec	r27
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <get_path+0x24e>
    1d44:	e1 51       	subi	r30, 0x11	; 17
    1d46:	fe 4f       	sbci	r31, 0xFE	; 254
    1d48:	80 81       	ld	r24, Z
    1d4a:	91 81       	ldd	r25, Z+1	; 0x01
    1d4c:	89 2b       	or	r24, r25
    1d4e:	09 f0       	breq	.+2      	; 0x1d52 <get_path+0x264>
    1d50:	20 c1       	rjmp	.+576    	; 0x1f92 <get_path+0x4a4>
    1d52:	cc 0f       	add	r28, r28
    1d54:	dd 1f       	adc	r29, r29
    1d56:	cc 0f       	add	r28, r28
    1d58:	dd 1f       	adc	r29, r29
    1d5a:	cd 50       	subi	r28, 0x0D	; 13
    1d5c:	de 4f       	sbci	r29, 0xFE	; 254
    1d5e:	88 81       	ld	r24, Y
    1d60:	99 81       	ldd	r25, Y+1	; 0x01
    1d62:	89 2b       	or	r24, r25
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <get_path+0x27a>
    1d66:	15 c1       	rjmp	.+554    	; 0x1f92 <get_path+0x4a4>
    1d68:	86 81       	ldd	r24, Z+6	; 0x06
    1d6a:	97 81       	ldd	r25, Z+7	; 0x07
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <get_path+0x284>
    1d70:	10 c1       	rjmp	.+544    	; 0x1f92 <get_path+0x4a4>
    1d72:	1e 14       	cp	r1, r14
    1d74:	1f 04       	cpc	r1, r15
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <get_path+0x28c>
    1d78:	0c c1       	rjmp	.+536    	; 0x1f92 <get_path+0x4a4>
			{
				x = x-1;
				path_array[ipl][0]=x;
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	51 83       	std	Z+1, r21	; 0x01
    1d7e:	40 83       	st	Z, r20
    1d80:	0d c1       	rjmp	.+538    	; 0x1f9c <get_path+0x4ae>
				path_array[ipl][1]=y;

			}
		}

		else if(map_array[x][y+1]<map_array[x][y] && dir_array[x][y][0]==1 && dir_array[x][y+1][2]==1 && y<9)
    1d82:	7b 01       	movw	r14, r22
    1d84:	08 94       	sec
    1d86:	e1 1c       	adc	r14, r1
    1d88:	f1 1c       	adc	r15, r1
    1d8a:	9a 01       	movw	r18, r20
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	ca 01       	movw	r24, r20
    1d92:	e3 e0       	ldi	r30, 0x03	; 3
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	ea 95       	dec	r30
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <get_path+0x2a6>
    1d9c:	28 0f       	add	r18, r24
    1d9e:	39 1f       	adc	r19, r25
    1da0:	e9 01       	movw	r28, r18
    1da2:	ce 0d       	add	r28, r14
    1da4:	df 1d       	adc	r29, r15
    1da6:	de 01       	movw	r26, r28
    1da8:	aa 0f       	add	r26, r26
    1daa:	bb 1f       	adc	r27, r27
    1dac:	fd 01       	movw	r30, r26
    1dae:	e9 5d       	subi	r30, 0xD9	; 217
    1db0:	fe 4f       	sbci	r31, 0xFE	; 254
    1db2:	c0 80       	ld	r12, Z
    1db4:	d1 80       	ldd	r13, Z+1	; 0x01
    1db6:	c8 14       	cp	r12, r8
    1db8:	d9 04       	cpc	r13, r9
    1dba:	0c f0       	brlt	.+2      	; 0x1dbe <get_path+0x2d0>
    1dbc:	63 c0       	rjmp	.+198    	; 0x1e84 <get_path+0x396>
    1dbe:	f9 01       	movw	r30, r18
    1dc0:	e6 0f       	add	r30, r22
    1dc2:	f7 1f       	adc	r31, r23
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	ee 0f       	add	r30, r30
    1dc8:	ff 1f       	adc	r31, r31
    1dca:	8a 95       	dec	r24
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <get_path+0x2d8>
    1dce:	e1 51       	subi	r30, 0x11	; 17
    1dd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <get_path+0x2ee>
    1dda:	54 c0       	rjmp	.+168    	; 0x1e84 <get_path+0x396>
    1ddc:	aa 0f       	add	r26, r26
    1dde:	bb 1f       	adc	r27, r27
    1de0:	aa 0f       	add	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	ad 50       	subi	r26, 0x0D	; 13
    1de6:	be 4f       	sbci	r27, 0xFE	; 254
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <get_path+0x304>
    1df0:	49 c0       	rjmp	.+146    	; 0x1e84 <get_path+0x396>
    1df2:	69 30       	cpi	r22, 0x09	; 9
    1df4:	71 05       	cpc	r23, r1
    1df6:	0c f0       	brlt	.+2      	; 0x1dfa <get_path+0x30c>
    1df8:	45 c0       	rjmp	.+138    	; 0x1e84 <get_path+0x396>
		{

			y = y+1;
			path_array[ipl][0]=x;
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	51 83       	std	Z+1, r21	; 0x01
    1dfe:	40 83       	st	Z, r20
			path_array[ipl][1]=y;
    1e00:	f3 82       	std	Z+3, r15	; 0x03
    1e02:	e2 82       	std	Z+2, r14	; 0x02
			if(map_array[x][y+1]<map_array[x][y]  && dir_array[x][y+1][2]==1 && dir_array[x][y][0]==1 && dir_array[x][y][1]==0 && dir_array[x][y][2]==1 && dir_array[x][y][3]==0 && y<9)
    1e04:	b7 01       	movw	r22, r14
    1e06:	6f 5f       	subi	r22, 0xFF	; 255
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	d9 01       	movw	r26, r18
    1e0c:	a6 0f       	add	r26, r22
    1e0e:	b7 1f       	adc	r27, r23
    1e10:	aa 0f       	add	r26, r26
    1e12:	bb 1f       	adc	r27, r27
    1e14:	fd 01       	movw	r30, r26
    1e16:	e9 5d       	subi	r30, 0xD9	; 217
    1e18:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	8c 15       	cp	r24, r12
    1e20:	9d 05       	cpc	r25, r13
    1e22:	0c f0       	brlt	.+2      	; 0x1e26 <get_path+0x338>
    1e24:	b8 c0       	rjmp	.+368    	; 0x1f96 <get_path+0x4a8>
    1e26:	aa 0f       	add	r26, r26
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	aa 0f       	add	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	ad 50       	subi	r26, 0x0D	; 13
    1e30:	be 4f       	sbci	r27, 0xFE	; 254
    1e32:	8d 91       	ld	r24, X+
    1e34:	9c 91       	ld	r25, X
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <get_path+0x34e>
    1e3a:	ad c0       	rjmp	.+346    	; 0x1f96 <get_path+0x4a8>
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	b3 e0       	ldi	r27, 0x03	; 3
    1e40:	ee 0f       	add	r30, r30
    1e42:	ff 1f       	adc	r31, r31
    1e44:	ba 95       	dec	r27
    1e46:	e1 f7       	brne	.-8      	; 0x1e40 <get_path+0x352>
    1e48:	e1 51       	subi	r30, 0x11	; 17
    1e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4c:	80 81       	ld	r24, Z
    1e4e:	91 81       	ldd	r25, Z+1	; 0x01
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <get_path+0x368>
    1e54:	a0 c0       	rjmp	.+320    	; 0x1f96 <get_path+0x4a8>
    1e56:	a3 e0       	ldi	r26, 0x03	; 3
    1e58:	cc 0f       	add	r28, r28
    1e5a:	dd 1f       	adc	r29, r29
    1e5c:	aa 95       	dec	r26
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <get_path+0x36a>
    1e60:	cf 50       	subi	r28, 0x0F	; 15
    1e62:	de 4f       	sbci	r29, 0xFE	; 254
    1e64:	88 81       	ld	r24, Y
    1e66:	99 81       	ldd	r25, Y+1	; 0x01
    1e68:	89 2b       	or	r24, r25
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <get_path+0x380>
    1e6c:	94 c0       	rjmp	.+296    	; 0x1f96 <get_path+0x4a8>
    1e6e:	86 81       	ldd	r24, Z+6	; 0x06
    1e70:	97 81       	ldd	r25, Z+7	; 0x07
    1e72:	89 2b       	or	r24, r25
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <get_path+0x38a>
    1e76:	8f c0       	rjmp	.+286    	; 0x1f96 <get_path+0x4a8>
    1e78:	f9 e0       	ldi	r31, 0x09	; 9
    1e7a:	ef 16       	cp	r14, r31
    1e7c:	f1 04       	cpc	r15, r1
    1e7e:	0c f0       	brlt	.+2      	; 0x1e82 <get_path+0x394>
    1e80:	8a c0       	rjmp	.+276    	; 0x1f96 <get_path+0x4a8>
    1e82:	81 c0       	rjmp	.+258    	; 0x1f86 <get_path+0x498>
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;

			}
		}
		else if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y][2]==1 && dir_array[x][y-1][0]==1 && y>=1)
    1e84:	5b 01       	movw	r10, r22
    1e86:	08 94       	sec
    1e88:	a1 08       	sbc	r10, r1
    1e8a:	b1 08       	sbc	r11, r1
    1e8c:	9a 01       	movw	r18, r20
    1e8e:	22 0f       	add	r18, r18
    1e90:	33 1f       	adc	r19, r19
    1e92:	ca 01       	movw	r24, r20
    1e94:	e3 e0       	ldi	r30, 0x03	; 3
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	ea 95       	dec	r30
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <get_path+0x3a8>
    1e9e:	28 0f       	add	r18, r24
    1ea0:	39 1f       	adc	r19, r25
    1ea2:	e9 01       	movw	r28, r18
    1ea4:	ca 0d       	add	r28, r10
    1ea6:	db 1d       	adc	r29, r11
    1ea8:	7e 01       	movw	r14, r28
    1eaa:	ee 0c       	add	r14, r14
    1eac:	ff 1c       	adc	r15, r15
    1eae:	f7 01       	movw	r30, r14
    1eb0:	e9 5d       	subi	r30, 0xD9	; 217
    1eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb4:	60 80       	ld	r6, Z
    1eb6:	71 80       	ldd	r7, Z+1	; 0x01
    1eb8:	68 14       	cp	r6, r8
    1eba:	79 04       	cpc	r7, r9
    1ebc:	0c f0       	brlt	.+2      	; 0x1ec0 <get_path+0x3d2>
    1ebe:	6e c0       	rjmp	.+220    	; 0x1f9c <get_path+0x4ae>
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	e6 0f       	add	r30, r22
    1ec4:	f7 1f       	adc	r31, r23
    1ec6:	a3 e0       	ldi	r26, 0x03	; 3
    1ec8:	ee 0f       	add	r30, r30
    1eca:	ff 1f       	adc	r31, r31
    1ecc:	aa 95       	dec	r26
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <get_path+0x3da>
    1ed0:	ed 50       	subi	r30, 0x0D	; 13
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	09 f0       	breq	.+2      	; 0x1ede <get_path+0x3f0>
    1edc:	5f c0       	rjmp	.+190    	; 0x1f9c <get_path+0x4ae>
    1ede:	6e 01       	movw	r12, r28
    1ee0:	e3 e0       	ldi	r30, 0x03	; 3
    1ee2:	cc 0c       	add	r12, r12
    1ee4:	dd 1c       	adc	r13, r13
    1ee6:	ea 95       	dec	r30
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <get_path+0x3f4>
    1eea:	8f ee       	ldi	r24, 0xEF	; 239
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	c8 0e       	add	r12, r24
    1ef0:	d9 1e       	adc	r13, r25
    1ef2:	f6 01       	movw	r30, r12
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	09 f0       	breq	.+2      	; 0x1efe <get_path+0x410>
    1efc:	4f c0       	rjmp	.+158    	; 0x1f9c <get_path+0x4ae>
    1efe:	16 16       	cp	r1, r22
    1f00:	17 06       	cpc	r1, r23
    1f02:	0c f0       	brlt	.+2      	; 0x1f06 <get_path+0x418>
    1f04:	4b c0       	rjmp	.+150    	; 0x1f9c <get_path+0x4ae>
		{

			y = y-1;
			path_array[ipl][0]=x;
    1f06:	f8 01       	movw	r30, r16
    1f08:	51 83       	std	Z+1, r21	; 0x01
    1f0a:	40 83       	st	Z, r20
			path_array[ipl][1]=y;
    1f0c:	b3 82       	std	Z+3, r11	; 0x03
    1f0e:	a2 82       	std	Z+2, r10	; 0x02
			if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y-1][0]==1 && dir_array[x][y][0]==1 && dir_array[x][y][1]==0 && dir_array[x][y][2]==1 && dir_array[x][y][3]==0 && y>=1)
    1f10:	b5 01       	movw	r22, r10
    1f12:	61 50       	subi	r22, 0x01	; 1
    1f14:	70 40       	sbci	r23, 0x00	; 0
    1f16:	d9 01       	movw	r26, r18
    1f18:	a6 0f       	add	r26, r22
    1f1a:	b7 1f       	adc	r27, r23
    1f1c:	fd 01       	movw	r30, r26
    1f1e:	ee 0f       	add	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	e9 5d       	subi	r30, 0xD9	; 217
    1f24:	fe 4f       	sbci	r31, 0xFE	; 254
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	86 15       	cp	r24, r6
    1f2c:	97 05       	cpc	r25, r7
    1f2e:	ac f5       	brge	.+106    	; 0x1f9a <get_path+0x4ac>
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	aa 0f       	add	r26, r26
    1f34:	bb 1f       	adc	r27, r27
    1f36:	8a 95       	dec	r24
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <get_path+0x444>
    1f3a:	a1 51       	subi	r26, 0x11	; 17
    1f3c:	be 4f       	sbci	r27, 0xFE	; 254
    1f3e:	8d 91       	ld	r24, X+
    1f40:	9c 91       	ld	r25, X
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	51 f5       	brne	.+84     	; 0x1f9a <get_path+0x4ac>
    1f46:	f3 e0       	ldi	r31, 0x03	; 3
    1f48:	cc 0f       	add	r28, r28
    1f4a:	dd 1f       	adc	r29, r29
    1f4c:	fa 95       	dec	r31
    1f4e:	e1 f7       	brne	.-8      	; 0x1f48 <get_path+0x45a>
    1f50:	cf 50       	subi	r28, 0x0F	; 15
    1f52:	de 4f       	sbci	r29, 0xFE	; 254
    1f54:	88 81       	ld	r24, Y
    1f56:	99 81       	ldd	r25, Y+1	; 0x01
    1f58:	89 2b       	or	r24, r25
    1f5a:	f9 f4       	brne	.+62     	; 0x1f9a <get_path+0x4ac>
    1f5c:	ee 0c       	add	r14, r14
    1f5e:	ff 1c       	adc	r15, r15
    1f60:	ee 0c       	add	r14, r14
    1f62:	ff 1c       	adc	r15, r15
    1f64:	83 ef       	ldi	r24, 0xF3	; 243
    1f66:	91 e0       	ldi	r25, 0x01	; 1
    1f68:	e8 0e       	add	r14, r24
    1f6a:	f9 1e       	adc	r15, r25
    1f6c:	f7 01       	movw	r30, r14
    1f6e:	80 81       	ld	r24, Z
    1f70:	91 81       	ldd	r25, Z+1	; 0x01
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	91 f4       	brne	.+36     	; 0x1f9a <get_path+0x4ac>
    1f76:	f6 01       	movw	r30, r12
    1f78:	86 81       	ldd	r24, Z+6	; 0x06
    1f7a:	97 81       	ldd	r25, Z+7	; 0x07
    1f7c:	89 2b       	or	r24, r25
    1f7e:	69 f4       	brne	.+26     	; 0x1f9a <get_path+0x4ac>
    1f80:	1a 14       	cp	r1, r10
    1f82:	1b 04       	cpc	r1, r11
    1f84:	54 f4       	brge	.+20     	; 0x1f9a <get_path+0x4ac>
			{
				y = y-1;
				path_array[ipl][0]=x;
    1f86:	f8 01       	movw	r30, r16
				path_array[ipl][1]=y;
    1f88:	73 83       	std	Z+3, r23	; 0x03
    1f8a:	62 83       	std	Z+2, r22	; 0x02
    1f8c:	07 c0       	rjmp	.+14     	; 0x1f9c <get_path+0x4ae>
    1f8e:	a6 01       	movw	r20, r12
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <get_path+0x4ae>
    1f92:	a7 01       	movw	r20, r14
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <get_path+0x4ae>
    1f96:	b7 01       	movw	r22, r14
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <get_path+0x4ae>
    1f9a:	b5 01       	movw	r22, r10
    1f9c:	0c 5f       	subi	r16, 0xFC	; 252
    1f9e:	1f 4f       	sbci	r17, 0xFF	; 255
		// if(is_coordinate_null(x,y))
		// {
		//   break;
		// }
		ipl++;
		if(ipl>15)
    1fa0:	f5 e0       	ldi	r31, 0x05	; 5
    1fa2:	05 35       	cpi	r16, 0x55	; 85
    1fa4:	1f 07       	cpc	r17, r31
    1fa6:	69 f4       	brne	.+26     	; 0x1fc2 <get_path+0x4d4>
		{
			lcd_clear();
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("Broke path ");
    1fb0:	88 e7       	ldi	r24, 0x78	; 120
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(2);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    1fc0:	18 c0       	rjmp	.+48     	; 0x1ff2 <get_path+0x504>
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	int ipl=0;
	while(map_array[x][y]!=0)
    1fc2:	da 01       	movw	r26, r20
    1fc4:	aa 0f       	add	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	ca 01       	movw	r24, r20
    1fca:	23 e0       	ldi	r18, 0x03	; 3
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	2a 95       	dec	r18
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <get_path+0x4de>
    1fd4:	a8 0f       	add	r26, r24
    1fd6:	b9 1f       	adc	r27, r25
    1fd8:	a6 0f       	add	r26, r22
    1fda:	b7 1f       	adc	r27, r23
    1fdc:	fd 01       	movw	r30, r26
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e9 5d       	subi	r30, 0xD9	; 217
    1fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe6:	80 80       	ld	r8, Z
    1fe8:	91 80       	ldd	r9, Z+1	; 0x01
    1fea:	81 14       	cp	r8, r1
    1fec:	91 04       	cpc	r9, r1
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <get_path+0x504>
    1ff0:	a1 cd       	rjmp	.-1214   	; 0x1b34 <get_path+0x46>
			lcd_write_string("Broke path ");
			delay_sec(2);
			break;
		}
	}
}
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	bf 90       	pop	r11
    2004:	af 90       	pop	r10
    2006:	9f 90       	pop	r9
    2008:	8f 90       	pop	r8
    200a:	7f 90       	pop	r7
    200c:	6f 90       	pop	r6
    200e:	08 95       	ret

00002010 <build_map>:
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
    2010:	6f 92       	push	r6
    2012:	7f 92       	push	r7
    2014:	8f 92       	push	r8
    2016:	9f 92       	push	r9
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	cf 92       	push	r12
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	3c 01       	movw	r6, r24
    202e:	6b 01       	movw	r12, r22
    2030:	a0 e0       	ldi	r26, 0x00	; 0
    2032:	b0 e0       	ldi	r27, 0x00	; 0
	for (int i = 0; i < 10; i++)
    2034:	04 e1       	ldi	r16, 0x14	; 20
    2036:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (int j = 0; j < 10; j++)
		{
			map_array[i][j] = 100;
    2038:	c4 e6       	ldi	r28, 0x64	; 100
    203a:	d0 e0       	ldi	r29, 0x00	; 0
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <build_map+0x42>
    203e:	c1 93       	st	Z+, r28
    2040:	d1 93       	st	Z+, r29
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	8a 30       	cpi	r24, 0x0A	; 10
    2046:	91 05       	cpc	r25, r1
    2048:	d1 f7       	brne	.-12     	; 0x203e <build_map+0x2e>
		}
	}
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 10; i++)
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	aa 30       	cpi	r26, 0x0A	; 10
    204e:	b1 05       	cpc	r27, r1
    2050:	61 f0       	breq	.+24     	; 0x206a <build_map+0x5a>
    2052:	a0 9f       	mul	r26, r16
    2054:	f0 01       	movw	r30, r0
    2056:	a1 9f       	mul	r26, r17
    2058:	f0 0d       	add	r31, r0
    205a:	b0 9f       	mul	r27, r16
    205c:	f0 0d       	add	r31, r0
    205e:	11 24       	eor	r1, r1
    2060:	e9 5d       	subi	r30, 0xD9	; 217
    2062:	fe 4f       	sbci	r31, 0xFE	; 254
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	ea cf       	rjmp	.-44     	; 0x203e <build_map+0x2e>
		}
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
    206a:	ca 01       	movw	r24, r20
    206c:	fa 01       	movw	r30, r20
    206e:	43 e0       	ldi	r20, 0x03	; 3
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	4a 95       	dec	r20
    2076:	e1 f7       	brne	.-8      	; 0x2070 <build_map+0x60>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	e8 0f       	add	r30, r24
    207e:	f9 1f       	adc	r31, r25
    2080:	e2 0f       	add	r30, r18
    2082:	f3 1f       	adc	r31, r19
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	e9 5d       	subi	r30, 0xD9	; 217
    208a:	fe 4f       	sbci	r31, 0xFE	; 254
    208c:	11 82       	std	Z+1, r1	; 0x01
    208e:	10 82       	st	Z, r1
    2090:	00 e0       	ldi	r16, 0x00	; 0
    2092:	10 e0       	ldi	r17, 0x00	; 0
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<10; l++)
    2094:	b4 e1       	ldi	r27, 0x14	; 20
    2096:	8b 2e       	mov	r8, r27
    2098:	91 2c       	mov	r9, r1
    209a:	a6 ef       	ldi	r26, 0xF6	; 246
    209c:	aa 2e       	mov	r10, r26
    209e:	af ef       	ldi	r26, 0xFF	; 255
    20a0:	ba 2e       	mov	r11, r26
    20a2:	9b c0       	rjmp	.+310    	; 0x21da <build_map+0x1ca>
		{
			for(int s=0; s<10; s++)
			{
				if(map_array[l][s]==fi)
    20a4:	54 96       	adiw	r26, 0x14	; 20
    20a6:	8d 91       	ld	r24, X+
    20a8:	9c 91       	ld	r25, X
    20aa:	55 97       	sbiw	r26, 0x15	; 21
    20ac:	80 17       	cp	r24, r16
    20ae:	91 07       	cpc	r25, r17
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <build_map+0xa4>
    20b2:	4a c0       	rjmp	.+148    	; 0x2148 <build_map+0x138>
				{
					if(dir_array[l][s][0]==1 && dir_array[l][s+1][2]==1)
    20b4:	80 85       	ldd	r24, Z+8	; 0x08
    20b6:	91 85       	ldd	r25, Z+9	; 0x09
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	79 f4       	brne	.+30     	; 0x20da <build_map+0xca>
    20bc:	84 89       	ldd	r24, Z+20	; 0x14
    20be:	95 89       	ldd	r25, Z+21	; 0x15
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	59 f4       	brne	.+22     	; 0x20da <build_map+0xca>
					{
						if(map_array[l][s+1]==100)
    20c4:	56 96       	adiw	r26, 0x16	; 22
    20c6:	8d 91       	ld	r24, X+
    20c8:	9c 91       	ld	r25, X
    20ca:	57 97       	sbiw	r26, 0x17	; 23
    20cc:	84 36       	cpi	r24, 0x64	; 100
    20ce:	91 05       	cpc	r25, r1
    20d0:	21 f4       	brne	.+8      	; 0x20da <build_map+0xca>
						{
							map_array[l][s+1]=(fi+1);
    20d2:	57 96       	adiw	r26, 0x17	; 23
    20d4:	7c 93       	st	X, r23
    20d6:	6e 93       	st	-X, r22
    20d8:	56 97       	sbiw	r26, 0x16	; 22
						}
					}
					if(dir_array[l][s][1]==1 && dir_array[l+1][s][3]==1)
    20da:	82 85       	ldd	r24, Z+10	; 0x0a
    20dc:	93 85       	ldd	r25, Z+11	; 0x0b
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	79 f4       	brne	.+30     	; 0x2100 <build_map+0xf0>
    20e2:	e2 5a       	subi	r30, 0xA2	; 162
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	ee 55       	subi	r30, 0x5E	; 94
    20ec:	f0 40       	sbci	r31, 0x00	; 0
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	39 f4       	brne	.+14     	; 0x2100 <build_map+0xf0>
					{
						if(map_array[l+1][s]==100)
    20f2:	8e 89       	ldd	r24, Y+22	; 0x16
    20f4:	9f 89       	ldd	r25, Y+23	; 0x17
    20f6:	84 36       	cpi	r24, 0x64	; 100
    20f8:	91 05       	cpc	r25, r1
    20fa:	11 f4       	brne	.+4      	; 0x2100 <build_map+0xf0>
						{
							map_array[l+1][s]=(fi+1);
    20fc:	7f 8b       	std	Y+23, r23	; 0x17
    20fe:	6e 8b       	std	Y+22, r22	; 0x16
						}
					}
					if(dir_array[l][s][2]==1 && dir_array[l][s-1][0]==1)
    2100:	84 85       	ldd	r24, Z+12	; 0x0c
    2102:	95 85       	ldd	r25, Z+13	; 0x0d
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	59 f4       	brne	.+22     	; 0x211e <build_map+0x10e>
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	39 f4       	brne	.+14     	; 0x211e <build_map+0x10e>
					{
						if(map_array[l][s-1]==100)
    2110:	88 81       	ld	r24, Y
    2112:	99 81       	ldd	r25, Y+1	; 0x01
    2114:	84 36       	cpi	r24, 0x64	; 100
    2116:	91 05       	cpc	r25, r1
    2118:	11 f4       	brne	.+4      	; 0x211e <build_map+0x10e>
						{
							map_array[l][s-1]=(fi+1);
    211a:	79 83       	std	Y+1, r23	; 0x01
    211c:	68 83       	st	Y, r22
						}
					}
					if(dir_array[l][s][3]==1 && dir_array[l-1][s][1]==1)
    211e:	86 85       	ldd	r24, Z+14	; 0x0e
    2120:	97 85       	ldd	r25, Z+15	; 0x0f
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	89 f4       	brne	.+34     	; 0x2148 <build_map+0x138>
    2126:	e6 54       	subi	r30, 0x46	; 70
    2128:	f0 40       	sbci	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	ea 5b       	subi	r30, 0xBA	; 186
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	49 f4       	brne	.+18     	; 0x2148 <build_map+0x138>
					{
						if(map_array[l-1][s]==100)
    2136:	8d 91       	ld	r24, X+
    2138:	9c 91       	ld	r25, X
    213a:	11 97       	sbiw	r26, 0x01	; 1
    213c:	84 36       	cpi	r24, 0x64	; 100
    213e:	91 05       	cpc	r25, r1
    2140:	19 f4       	brne	.+6      	; 0x2148 <build_map+0x138>
						{
							map_array[l-1][s]=(fi+1);
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	7c 93       	st	X, r23
    2146:	6e 93       	st	-X, r22
    2148:	12 96       	adiw	r26, 0x02	; 2
    214a:	38 96       	adiw	r30, 0x08	; 8
    214c:	22 96       	adiw	r28, 0x02	; 2
	{
		//l=x ,s=y
		
		for(int l=0; l<10; l++)
		{
			for(int s=0; s<10; s++)
    214e:	ae 15       	cp	r26, r14
    2150:	bf 05       	cpc	r27, r15
    2152:	09 f0       	breq	.+2      	; 0x2156 <build_map+0x146>
    2154:	a7 cf       	rjmp	.-178    	; 0x20a4 <build_map+0x94>
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<10; l++)
    2156:	4f 5f       	subi	r20, 0xFF	; 255
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	f4 e1       	ldi	r31, 0x14	; 20
    215c:	ef 2e       	mov	r14, r31
    215e:	f1 2c       	mov	r15, r1
    2160:	ea 0e       	add	r14, r26
    2162:	fb 1e       	adc	r15, r27
    2164:	4a 30       	cpi	r20, 0x0A	; 10
    2166:	51 05       	cpc	r21, r1
    2168:	31 f1       	breq	.+76     	; 0x21b6 <build_map+0x1a6>
    216a:	48 9d       	mul	r20, r8
    216c:	d0 01       	movw	r26, r0
    216e:	49 9d       	mul	r20, r9
    2170:	b0 0d       	add	r27, r0
    2172:	58 9d       	mul	r21, r8
    2174:	b0 0d       	add	r27, r0
    2176:	11 24       	eor	r1, r1
    2178:	ad 5e       	subi	r26, 0xED	; 237
    217a:	be 4f       	sbci	r27, 0xFE	; 254
    217c:	4a 9d       	mul	r20, r10
    217e:	c0 01       	movw	r24, r0
    2180:	4b 9d       	mul	r20, r11
    2182:	90 0d       	add	r25, r0
    2184:	5a 9d       	mul	r21, r10
    2186:	90 0d       	add	r25, r0
    2188:	11 24       	eor	r1, r1
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	9c 01       	movw	r18, r24
    218e:	e3 e0       	ldi	r30, 0x03	; 3
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	ea 95       	dec	r30
    2196:	e1 f7       	brne	.-8      	; 0x2190 <build_map+0x180>
    2198:	ee 27       	eor	r30, r30
    219a:	ff 27       	eor	r31, r31
    219c:	e2 1b       	sub	r30, r18
    219e:	f3 0b       	sbc	r31, r19
    21a0:	e1 51       	subi	r30, 0x11	; 17
    21a2:	fe 4f       	sbci	r31, 0xFE	; 254
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	cc 27       	eor	r28, r28
    21aa:	dd 27       	eor	r29, r29
    21ac:	c8 1b       	sub	r28, r24
    21ae:	d9 0b       	sbc	r29, r25
    21b0:	c9 5d       	subi	r28, 0xD9	; 217
    21b2:	de 4f       	sbci	r29, 0xFE	; 254
    21b4:	77 cf       	rjmp	.-274    	; 0x20a4 <build_map+0x94>
						}
					}
				}
			}
		}
		fi++;
    21b6:	0f 5f       	subi	r16, 0xFF	; 255
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
		if(fi>50)
    21ba:	03 33       	cpi	r16, 0x33	; 51
    21bc:	11 05       	cpc	r17, r1
    21be:	69 f4       	brne	.+26     	; 0x21da <build_map+0x1ca>
		{
		lcd_clear();
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_string("Broke build");
    21c8:	84 e8       	ldi	r24, 0x84	; 132
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		delay_sec(2);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    21d8:	20 c0       	rjmp	.+64     	; 0x221a <build_map+0x20a>
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
    21da:	c3 01       	movw	r24, r6
    21dc:	f3 01       	movw	r30, r6
    21de:	73 e0       	ldi	r23, 0x03	; 3
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	7a 95       	dec	r23
    21e6:	e1 f7       	brne	.-8      	; 0x21e0 <build_map+0x1d0>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	e8 0f       	add	r30, r24
    21ee:	f9 1f       	adc	r31, r25
    21f0:	ec 0d       	add	r30, r12
    21f2:	fd 1d       	adc	r31, r13
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	e9 5d       	subi	r30, 0xD9	; 217
    21fa:	fe 4f       	sbci	r31, 0xFE	; 254
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	84 36       	cpi	r24, 0x64	; 100
    2202:	91 05       	cpc	r25, r1
    2204:	51 f4       	brne	.+20     	; 0x221a <build_map+0x20a>
    2206:	47 e2       	ldi	r20, 0x27	; 39
    2208:	e4 2e       	mov	r14, r20
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	f4 2e       	mov	r15, r20
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
					}
					if(dir_array[l][s][3]==1 && dir_array[l-1][s][1]==1)
					{
						if(map_array[l-1][s]==100)
						{
							map_array[l-1][s]=(fi+1);
    2212:	b8 01       	movw	r22, r16
    2214:	6f 5f       	subi	r22, 0xFF	; 255
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	a8 cf       	rjmp	.-176    	; 0x216a <build_map+0x15a>
		lcd_write_string("Broke build");
		delay_sec(2);
		break;
		}
	}
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	9f 90       	pop	r9
    2230:	8f 90       	pop	r8
    2232:	7f 90       	pop	r7
    2234:	6f 90       	pop	r6
    2236:	08 95       	ret

00002238 <checkAndCorrectDirection>:
	bot_brake();
	//delay_millisec(500);
}

void checkAndCorrectDirection(int req_dir)
{
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	8c 01       	movw	r16, r24
	if(req_dir == 1)
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	91 05       	cpc	r25, r1
    2246:	d9 f5       	brne	.+118    	; 0x22be <checkAndCorrectDirection+0x86>
	{
		switch(dir)
    2248:	80 91 f8 00 	lds	r24, 0x00F8
    224c:	90 91 f9 00 	lds	r25, 0x00F9
    2250:	2f ef       	ldi	r18, 0xFF	; 255
    2252:	8f 3f       	cpi	r24, 0xFF	; 255
    2254:	92 07       	cpc	r25, r18
    2256:	49 f0       	breq	.+18     	; 0x226a <checkAndCorrectDirection+0x32>
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	91 05       	cpc	r25, r1
    225c:	09 f4       	brne	.+2      	; 0x2260 <checkAndCorrectDirection+0x28>
    225e:	72 c0       	rjmp	.+228    	; 0x2344 <checkAndCorrectDirection+0x10c>
    2260:	8e 5f       	subi	r24, 0xFE	; 254
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	09 f0       	breq	.+2      	; 0x2268 <checkAndCorrectDirection+0x30>
    2266:	ca c0       	rjmp	.+404    	; 0x23fc <checkAndCorrectDirection+0x1c4>
    2268:	9f c0       	rjmp	.+318    	; 0x23a8 <checkAndCorrectDirection+0x170>
			case +2: turn_right();sense_of_directon();break;

			case -2:turn_left();sense_of_directon();break;

			case -1:
			if(dir_array[x_coordinate][y_coordinate][0]==1)
    226a:	80 91 fa 00 	lds	r24, 0x00FA
    226e:	90 91 fb 00 	lds	r25, 0x00FB
    2272:	fc 01       	movw	r30, r24
    2274:	a3 e0       	ldi	r26, 0x03	; 3
    2276:	ee 0f       	add	r30, r30
    2278:	ff 1f       	adc	r31, r31
    227a:	aa 95       	dec	r26
    227c:	e1 f7       	brne	.-8      	; 0x2276 <checkAndCorrectDirection+0x3e>
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	e8 0f       	add	r30, r24
    2284:	f9 1f       	adc	r31, r25
    2286:	80 91 fc 00 	lds	r24, 0x00FC
    228a:	90 91 fd 00 	lds	r25, 0x00FD
    228e:	e8 0f       	add	r30, r24
    2290:	f9 1f       	adc	r31, r25
    2292:	63 e0       	ldi	r22, 0x03	; 3
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	6a 95       	dec	r22
    229a:	e1 f7       	brne	.-8      	; 0x2294 <checkAndCorrectDirection+0x5c>
    229c:	e1 51       	subi	r30, 0x11	; 17
    229e:	fe 4f       	sbci	r31, 0xFE	; 254
    22a0:	c0 81       	ld	r28, Z
    22a2:	d1 81       	ldd	r29, Z+1	; 0x01
    22a4:	c1 30       	cpi	r28, 0x01	; 1
    22a6:	d1 05       	cpc	r29, r1
    22a8:	09 f0       	breq	.+2      	; 0x22ac <checkAndCorrectDirection+0x74>
    22aa:	a2 c0       	rjmp	.+324    	; 0x23f0 <checkAndCorrectDirection+0x1b8>
			{
				turn_right();
    22ac:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
				turn_right();
    22b0:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
				dir = 1;
    22b4:	d0 93 f9 00 	sts	0x00F9, r29
    22b8:	c0 93 f8 00 	sts	0x00F8, r28
    22bc:	9f c0       	rjmp	.+318    	; 0x23fc <checkAndCorrectDirection+0x1c4>
			

		}
	}

	else if(req_dir == 2)
    22be:	82 30       	cpi	r24, 0x02	; 2
    22c0:	91 05       	cpc	r25, r1
    22c2:	71 f5       	brne	.+92     	; 0x2320 <checkAndCorrectDirection+0xe8>
	{
		switch(dir)
    22c4:	80 91 f8 00 	lds	r24, 0x00F8
    22c8:	90 91 f9 00 	lds	r25, 0x00F9
    22cc:	2f ef       	ldi	r18, 0xFF	; 255
    22ce:	8f 3f       	cpi	r24, 0xFF	; 255
    22d0:	92 07       	cpc	r25, r18
    22d2:	c1 f1       	breq	.+112    	; 0x2344 <checkAndCorrectDirection+0x10c>
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	91 05       	cpc	r25, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <checkAndCorrectDirection+0xa4>
    22da:	66 c0       	rjmp	.+204    	; 0x23a8 <checkAndCorrectDirection+0x170>
    22dc:	8e 5f       	subi	r24, 0xFE	; 254
    22de:	9f 4f       	sbci	r25, 0xFF	; 255
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <checkAndCorrectDirection+0xac>
    22e2:	8c c0       	rjmp	.+280    	; 0x23fc <checkAndCorrectDirection+0x1c4>
		{	
			case +1: turn_left();sense_of_directon();break;
			case -1:turn_right();sense_of_directon();break;
			case -2:
			if(dir_array[x_coordinate][y_coordinate][3]==1)
    22e4:	80 91 fa 00 	lds	r24, 0x00FA
    22e8:	90 91 fb 00 	lds	r25, 0x00FB
    22ec:	fc 01       	movw	r30, r24
    22ee:	53 e0       	ldi	r21, 0x03	; 3
    22f0:	ee 0f       	add	r30, r30
    22f2:	ff 1f       	adc	r31, r31
    22f4:	5a 95       	dec	r21
    22f6:	e1 f7       	brne	.-8      	; 0x22f0 <checkAndCorrectDirection+0xb8>
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	e8 0f       	add	r30, r24
    22fe:	f9 1f       	adc	r31, r25
    2300:	80 91 fc 00 	lds	r24, 0x00FC
    2304:	90 91 fd 00 	lds	r25, 0x00FD
    2308:	e8 0f       	add	r30, r24
    230a:	f9 1f       	adc	r31, r25
    230c:	33 e0       	ldi	r19, 0x03	; 3
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	3a 95       	dec	r19
    2314:	e1 f7       	brne	.-8      	; 0x230e <checkAndCorrectDirection+0xd6>
    2316:	e1 51       	subi	r30, 0x11	; 17
    2318:	fe 4f       	sbci	r31, 0xFE	; 254
    231a:	86 81       	ldd	r24, Z+6	; 0x06
    231c:	97 81       	ldd	r25, Z+7	; 0x07
    231e:	64 c0       	rjmp	.+200    	; 0x23e8 <checkAndCorrectDirection+0x1b0>
				dir = 2;
			}
		}
	}

	else if(req_dir == -1)
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	0f 3f       	cpi	r16, 0xFF	; 255
    2324:	18 07       	cpc	r17, r24
    2326:	79 f5       	brne	.+94     	; 0x2386 <checkAndCorrectDirection+0x14e>
	{
		switch(dir)
    2328:	80 91 f8 00 	lds	r24, 0x00F8
    232c:	90 91 f9 00 	lds	r25, 0x00F9
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	61 f0       	breq	.+24     	; 0x234e <checkAndCorrectDirection+0x116>
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	91 05       	cpc	r25, r1
    233a:	b1 f1       	breq	.+108    	; 0x23a8 <checkAndCorrectDirection+0x170>
    233c:	8e 5f       	subi	r24, 0xFE	; 254
    233e:	9f 4f       	sbci	r25, 0xFF	; 255
    2340:	09 f0       	breq	.+2      	; 0x2344 <checkAndCorrectDirection+0x10c>
    2342:	5c c0       	rjmp	.+184    	; 0x23fc <checkAndCorrectDirection+0x1c4>
		{	
			case +2: turn_left();sense_of_directon();break;
		
			case -2:turn_right();sense_of_directon();break;
    2344:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
    2348:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
    234c:	57 c0       	rjmp	.+174    	; 0x23fc <checkAndCorrectDirection+0x1c4>

			case 1:
			if(dir_array[x_coordinate][y_coordinate][2]==1)
    234e:	80 91 fa 00 	lds	r24, 0x00FA
    2352:	90 91 fb 00 	lds	r25, 0x00FB
    2356:	fc 01       	movw	r30, r24
    2358:	23 e0       	ldi	r18, 0x03	; 3
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	2a 95       	dec	r18
    2360:	e1 f7       	brne	.-8      	; 0x235a <checkAndCorrectDirection+0x122>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	e8 0f       	add	r30, r24
    2368:	f9 1f       	adc	r31, r25
    236a:	80 91 fc 00 	lds	r24, 0x00FC
    236e:	90 91 fd 00 	lds	r25, 0x00FD
    2372:	e8 0f       	add	r30, r24
    2374:	f9 1f       	adc	r31, r25
    2376:	a3 e0       	ldi	r26, 0x03	; 3
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	aa 95       	dec	r26
    237e:	e1 f7       	brne	.-8      	; 0x2378 <checkAndCorrectDirection+0x140>
    2380:	ed 50       	subi	r30, 0x0D	; 13
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	2f c0       	rjmp	.+94     	; 0x23e4 <checkAndCorrectDirection+0x1ac>
			default:break;
		}
	}


	else if(req_dir == -2)
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	0e 3f       	cpi	r16, 0xFE	; 254
    238a:	18 07       	cpc	r17, r24
    238c:	b9 f5       	brne	.+110    	; 0x23fc <checkAndCorrectDirection+0x1c4>
	{
		switch(dir)
    238e:	80 91 f8 00 	lds	r24, 0x00F8
    2392:	90 91 f9 00 	lds	r25, 0x00F9
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	91 05       	cpc	r25, r1
    239a:	a1 f2       	breq	.-88     	; 0x2344 <checkAndCorrectDirection+0x10c>
    239c:	82 30       	cpi	r24, 0x02	; 2
    239e:	91 05       	cpc	r25, r1
    23a0:	31 f0       	breq	.+12     	; 0x23ae <checkAndCorrectDirection+0x176>
    23a2:	8f 5f       	subi	r24, 0xFF	; 255
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	51 f5       	brne	.+84     	; 0x23fc <checkAndCorrectDirection+0x1c4>
		{	
			case +1:turn_right();sense_of_directon();break; 
				
			case -1: turn_left();sense_of_directon();break;
    23a8:	0e 94 61 05 	call	0xac2	; 0xac2 <turn_left>
    23ac:	cd cf       	rjmp	.-102    	; 0x2348 <checkAndCorrectDirection+0x110>
					
			case 2:
			if(dir_array[x_coordinate][y_coordinate][1]==1)
    23ae:	80 91 fa 00 	lds	r24, 0x00FA
    23b2:	90 91 fb 00 	lds	r25, 0x00FB
    23b6:	fc 01       	movw	r30, r24
    23b8:	73 e0       	ldi	r23, 0x03	; 3
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	7a 95       	dec	r23
    23c0:	e1 f7       	brne	.-8      	; 0x23ba <checkAndCorrectDirection+0x182>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	e8 0f       	add	r30, r24
    23c8:	f9 1f       	adc	r31, r25
    23ca:	80 91 fc 00 	lds	r24, 0x00FC
    23ce:	90 91 fd 00 	lds	r25, 0x00FD
    23d2:	e8 0f       	add	r30, r24
    23d4:	f9 1f       	adc	r31, r25
    23d6:	53 e0       	ldi	r21, 0x03	; 3
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	5a 95       	dec	r21
    23de:	e1 f7       	brne	.-8      	; 0x23d8 <checkAndCorrectDirection+0x1a0>
    23e0:	ef 50       	subi	r30, 0x0F	; 15
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <checkAndCorrectDirection+0x1b8>
			{
				turn_right();
    23ec:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
				turn_right();
				dir = -2;
			}
			else
			{
				turn_right();
    23f0:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
				dir = -2;
    23f4:	10 93 f9 00 	sts	0x00F9, r17
    23f8:	00 93 f8 00 	sts	0x00F8, r16
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    23fc:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    23fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2400:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2402:	af 9a       	sbi	0x15, 7	; 21

		}
	}
	bot_brake();
	//delay_sec(1);
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	08 95       	ret

0000240e <go_to_coordinate>:
		}
	}
}

void go_to_coordinate(int next_x, int next_y)
{
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	ec 01       	movw	r28, r24
    2418:	8b 01       	movw	r16, r22
	if (next_x > x_coordinate)
    241a:	80 91 fa 00 	lds	r24, 0x00FA
    241e:	90 91 fb 00 	lds	r25, 0x00FB
    2422:	8c 17       	cp	r24, r28
    2424:	9d 07       	cpc	r25, r29
    2426:	bc f4       	brge	.+46     	; 0x2456 <go_to_coordinate+0x48>
	{	
		right=0;
    2428:	10 92 10 05 	sts	0x0510, r1
    242c:	10 92 0f 05 	sts	0x050F, r1
		checkAndCorrectDirection(1);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 1c 11 	call	0x2238	; 0x2238 <checkAndCorrectDirection>
    2438:	02 c0       	rjmp	.+4      	; 0x243e <go_to_coordinate+0x30>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    243a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
{
	if (next_x > x_coordinate)
	{	
		right=0;
		checkAndCorrectDirection(1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    243e:	cd 9b       	sbis	0x19, 5	; 25
    2440:	05 c0       	rjmp	.+10     	; 0x244c <go_to_coordinate+0x3e>
    2442:	cf 99       	sbic	0x19, 7	; 25
    2444:	fa cf       	rjmp	.-12     	; 0x243a <go_to_coordinate+0x2c>
    2446:	02 c0       	rjmp	.+4      	; 0x244c <go_to_coordinate+0x3e>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    2448:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    244c:	cc 9b       	sbis	0x19, 4	; 25
    244e:	54 c0       	rjmp	.+168    	; 0x24f8 <go_to_coordinate+0xea>
    2450:	87 99       	sbic	0x10, 7	; 16
    2452:	fa cf       	rjmp	.-12     	; 0x2448 <go_to_coordinate+0x3a>
    2454:	51 c0       	rjmp	.+162    	; 0x24f8 <go_to_coordinate+0xea>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
    2456:	c8 17       	cp	r28, r24
    2458:	d9 07       	cpc	r29, r25
    245a:	bc f4       	brge	.+46     	; 0x248a <go_to_coordinate+0x7c>
	{
		right=0;
    245c:	10 92 10 05 	sts	0x0510, r1
    2460:	10 92 0f 05 	sts	0x050F, r1
		checkAndCorrectDirection(-1);
    2464:	8f ef       	ldi	r24, 0xFF	; 255
    2466:	9f ef       	ldi	r25, 0xFF	; 255
    2468:	0e 94 1c 11 	call	0x2238	; 0x2238 <checkAndCorrectDirection>
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <go_to_coordinate+0x64>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    246e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	}
	else if(next_x<x_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-1);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    2472:	cd 9b       	sbis	0x19, 5	; 25
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <go_to_coordinate+0x72>
    2476:	cf 99       	sbic	0x19, 7	; 25
    2478:	fa cf       	rjmp	.-12     	; 0x246e <go_to_coordinate+0x60>
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <go_to_coordinate+0x72>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    247c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    2480:	cc 9b       	sbis	0x19, 4	; 25
    2482:	3a c0       	rjmp	.+116    	; 0x24f8 <go_to_coordinate+0xea>
    2484:	87 99       	sbic	0x10, 7	; 16
    2486:	fa cf       	rjmp	.-12     	; 0x247c <go_to_coordinate+0x6e>
    2488:	37 c0       	rjmp	.+110    	; 0x24f8 <go_to_coordinate+0xea>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}

	else if (next_y>y_coordinate)
    248a:	80 91 fc 00 	lds	r24, 0x00FC
    248e:	90 91 fd 00 	lds	r25, 0x00FD
    2492:	86 17       	cp	r24, r22
    2494:	97 07       	cpc	r25, r23
    2496:	bc f4       	brge	.+46     	; 0x24c6 <go_to_coordinate+0xb8>
	{	
		right=0;
    2498:	10 92 10 05 	sts	0x0510, r1
    249c:	10 92 0f 05 	sts	0x050F, r1
		checkAndCorrectDirection(2);
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 1c 11 	call	0x2238	; 0x2238 <checkAndCorrectDirection>
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <go_to_coordinate+0xa0>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    24aa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>

	else if (next_y>y_coordinate)
	{	
		right=0;
		checkAndCorrectDirection(2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    24ae:	cd 9b       	sbis	0x19, 5	; 25
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <go_to_coordinate+0xae>
    24b2:	cf 99       	sbic	0x19, 7	; 25
    24b4:	fa cf       	rjmp	.-12     	; 0x24aa <go_to_coordinate+0x9c>
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <go_to_coordinate+0xae>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    24b8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    24bc:	cc 9b       	sbis	0x19, 4	; 25
    24be:	1c c0       	rjmp	.+56     	; 0x24f8 <go_to_coordinate+0xea>
    24c0:	87 99       	sbic	0x10, 7	; 16
    24c2:	fa cf       	rjmp	.-12     	; 0x24b8 <go_to_coordinate+0xaa>
    24c4:	19 c0       	rjmp	.+50     	; 0x24f8 <go_to_coordinate+0xea>
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}
	else if(next_y<y_coordinate)
    24c6:	68 17       	cp	r22, r24
    24c8:	79 07       	cpc	r23, r25
    24ca:	04 f5       	brge	.+64     	; 0x250c <go_to_coordinate+0xfe>
	{
		right=0;
    24cc:	10 92 10 05 	sts	0x0510, r1
    24d0:	10 92 0f 05 	sts	0x050F, r1
		checkAndCorrectDirection(-2);
    24d4:	8e ef       	ldi	r24, 0xFE	; 254
    24d6:	9f ef       	ldi	r25, 0xFF	; 255
    24d8:	0e 94 1c 11 	call	0x2238	; 0x2238 <checkAndCorrectDirection>
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <go_to_coordinate+0xd4>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();
    24de:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	}
	else if(next_y<y_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-2);
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
    24e2:	cd 9b       	sbis	0x19, 5	; 25
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <go_to_coordinate+0xe2>
    24e6:	cf 99       	sbic	0x19, 7	; 25
    24e8:	fa cf       	rjmp	.-12     	; 0x24de <go_to_coordinate+0xd0>
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <go_to_coordinate+0xe2>
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
			line_track_new();
    24ec:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		while(bit_is_set(PINA,5) && bit_is_set(PINA,7))
		{
			line_track_new();

		}
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
    24f0:	cc 9b       	sbis	0x19, 4	; 25
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <go_to_coordinate+0xea>
    24f4:	87 99       	sbic	0x10, 7	; 16
    24f6:	fa cf       	rjmp	.-12     	; 0x24ec <go_to_coordinate+0xde>
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    24f8:	8f e8       	ldi	r24, 0x8F	; 143
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	99 bd       	out	0x29, r25	; 41
    24fe:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2500:	9b bd       	out	0x2b, r25	; 43
    2502:	8a bd       	out	0x2a, r24	; 42
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2504:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2506:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2508:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    250a:	af 9a       	sbi	0x15, 7	; 21
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
	}	
	x_coordinate = next_x;               ///good work
    250c:	d0 93 fb 00 	sts	0x00FB, r29
    2510:	c0 93 fa 00 	sts	0x00FA, r28
	y_coordinate = next_y;
    2514:	10 93 fd 00 	sts	0x00FD, r17
    2518:	00 93 fc 00 	sts	0x00FC, r16
	lcd_clear();
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,1,x_coordinate,2);
    2524:	40 91 fa 00 	lds	r20, 0x00FA
    2528:	50 91 fb 00 	lds	r21, 0x00FB
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	22 e0       	ldi	r18, 0x02	; 2
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(5,1,y_coordinate,2);
    253c:	40 91 fc 00 	lds	r20, 0x00FC
    2540:	50 91 fd 00 	lds	r21, 0x00FD
    2544:	85 e0       	ldi	r24, 0x05	; 5
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	61 e0       	ldi	r22, 0x01	; 1
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	22 e0       	ldi	r18, 0x02	; 2
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(3,0,irc,5);
    2554:	40 91 0d 01 	lds	r20, 0x010D
    2558:	50 91 0e 01 	lds	r21, 0x010E
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	25 e0       	ldi	r18, 0x05	; 5
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    256c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    256e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2570:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2572:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	//delay_millisec(500);
}
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	08 95       	ret

0000257e <right_junc_check>:
			}
		}
	}
}
void right_junc_check()
{	
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2592:	8f e8       	ldi	r24, 0x8F	; 143
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	9b bd       	out	0x2b, r25	; 43
    2598:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    259a:	99 bd       	out	0x29, r25	; 41
    259c:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    259e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    25a0:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    25a2:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    25a4:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	// lcd_clear();
	// lcd_write_int_xy(0,0,irc,5);
	//delay_sec(1);
	
	lcd_clear();
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	if(irc>2000)
    25ae:	20 91 0d 01 	lds	r18, 0x010D
    25b2:	30 91 0e 01 	lds	r19, 0x010E
    25b6:	87 e0       	ldi	r24, 0x07	; 7
    25b8:	21 3d       	cpi	r18, 0xD1	; 209
    25ba:	38 07       	cpc	r19, r24
    25bc:	1c f0       	brlt	.+6      	; 0x25c4 <right_junc_check+0x46>
	{
		// lcd_write_string("Sixty");
		
		Coordinates_changed_by = 2;
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <right_junc_check+0x4a>
	}
	else
	{
		// lcd_write_string("Thirty");
		Coordinates_changed_by = 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	90 93 16 01 	sts	0x0116, r25
    25cc:	80 93 15 01 	sts	0x0115, r24
	}

	
	//delay_sec(2);
	if(irc==0)
    25d0:	23 2b       	or	r18, r19
    25d2:	21 f4       	brne	.+8      	; 0x25dc <right_junc_check+0x5e>
	{
		Coordinates_changed_by = 0;
    25d4:	10 92 16 01 	sts	0x0116, r1
    25d8:	10 92 15 01 	sts	0x0115, r1
	}
	update_coordinates();
    25dc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <update_coordinates>
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <right_junc_check+0x68>
	while(bit_is_set(PIND, 7))
	{
		line_track_new();
    25e2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	if(irc==0)
	{
		Coordinates_changed_by = 0;
	}
	update_coordinates();
	while(bit_is_set(PIND, 7))
    25e6:	87 99       	sbic	0x10, 7	; 16
    25e8:	fc cf       	rjmp	.-8      	; 0x25e2 <right_junc_check+0x64>
	{
		line_track_new();
	}
	if(repeat<4)
    25ea:	80 91 1d 01 	lds	r24, 0x011D
    25ee:	90 91 1e 01 	lds	r25, 0x011E
    25f2:	04 97       	sbiw	r24, 0x04	; 4
    25f4:	0c f0       	brlt	.+2      	; 0x25f8 <right_junc_check+0x7a>
    25f6:	91 c2       	rjmp	.+1314   	; 0x2b1a <right_junc_check+0x59c>
	{
		lcountPrev = lcount;
    25f8:	80 91 05 01 	lds	r24, 0x0105
    25fc:	90 91 06 01 	lds	r25, 0x0106
    2600:	90 93 0a 01 	sts	0x010A, r25
    2604:	80 93 09 01 	sts	0x0109, r24
    2608:	04 c0       	rjmp	.+8      	; 0x2612 <right_junc_check+0x94>
		while(bit_is_set(PIND, 7))
		{
			line_track_new();
    260a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			left_count();
    260e:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
		line_track_new();
	}
	if(repeat<4)
	{
		lcountPrev = lcount;
		while(bit_is_set(PIND, 7))
    2612:	87 99       	sbic	0x10, 7	; 16
    2614:	fa cf       	rjmp	.-12     	; 0x260a <right_junc_check+0x8c>
		{
			line_track_new();
			left_count();
		}
		//End Condition
		if(bit_is_clear(PINA,6) && bit_is_clear(PIND,6) && bit_is_clear(PINA,5) && bit_is_clear(PINA,7))
    2616:	ce 99       	sbic	0x19, 6	; 25
    2618:	b0 c1       	rjmp	.+864    	; 0x297a <right_junc_check+0x3fc>
    261a:	86 99       	sbic	0x10, 6	; 16
    261c:	ae c1       	rjmp	.+860    	; 0x297a <right_junc_check+0x3fc>
    261e:	cd 99       	sbic	0x19, 5	; 25
    2620:	ac c1       	rjmp	.+856    	; 0x297a <right_junc_check+0x3fc>
    2622:	cf 99       	sbic	0x19, 7	; 25
    2624:	aa c1       	rjmp	.+852    	; 0x297a <right_junc_check+0x3fc>
		{
			int endx = x_coordinate, endy = y_coordinate;
    2626:	c0 90 fa 00 	lds	r12, 0x00FA
    262a:	d0 90 fb 00 	lds	r13, 0x00FB
    262e:	a0 90 fc 00 	lds	r10, 0x00FC
    2632:	b0 90 fd 00 	lds	r11, 0x00FD
			update_array(0,0,1,0);
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
			lcd_clear();
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2652:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2654:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2656:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2658:	af 9a       	sbi	0x15, 7	; 21
			//set_pwm1a(399);
			//set_pwm1b(399);
			bot_brake();
			//delay_sec(1);
			end_zone_uturn();
    265a:	0e 94 23 05 	call	0xa46	; 0xa46 <end_zone_uturn>
			sense_of_directon();
    265e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
			fill_missed_array();
    2662:	0e 94 8e 0a 	call	0x151c	; 0x151c <fill_missed_array>
			coordinates_tobe_reached();
    2666:	0e 94 43 0b 	call	0x1686	; 0x1686 <coordinates_tobe_reached>
			flick();
    266a:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
			lcd_clear();
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			
			lcd_write_string_xy(0,0,"mx: ");
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	40 e9       	ldi	r20, 0x90	; 144
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,0,mx,2);
    2686:	40 91 17 01 	lds	r20, 0x0117
    268a:	50 91 18 01 	lds	r21, 0x0118
    268e:	84 e0       	ldi	r24, 0x04	; 4
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	22 e0       	ldi	r18, 0x02	; 2
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,0,"my: ");
    269e:	87 e0       	ldi	r24, 0x07	; 7
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	45 e9       	ldi	r20, 0x95	; 149
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,0,my,2);
    26ae:	40 91 19 01 	lds	r20, 0x0119
    26b2:	50 91 1a 01 	lds	r21, 0x011A
    26b6:	8b e0       	ldi	r24, 0x0B	; 11
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	22 e0       	ldi	r18, 0x02	; 2
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(0,1,"x: ");
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	61 e0       	ldi	r22, 0x01	; 1
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	4a e9       	ldi	r20, 0x9A	; 154
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,1,x_coordinate,2);
    26d6:	40 91 fa 00 	lds	r20, 0x00FA
    26da:	50 91 fb 00 	lds	r21, 0x00FB
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	61 e0       	ldi	r22, 0x01	; 1
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	22 e0       	ldi	r18, 0x02	; 2
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,1,"y: ");
    26ee:	87 e0       	ldi	r24, 0x07	; 7
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	4e e9       	ldi	r20, 0x9E	; 158
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,1,y_coordinate,2);
    26fe:	40 91 fc 00 	lds	r20, 0x00FC
    2702:	50 91 fd 00 	lds	r21, 0x00FD
    2706:	8b e0       	ldi	r24, 0x0B	; 11
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	61 e0       	ldi	r22, 0x01	; 1
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	22 e0       	ldi	r18, 0x02	; 2
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			//delay_sec(5);
			if(mx!=0 && my!=0)
    2716:	80 91 17 01 	lds	r24, 0x0117
    271a:	90 91 18 01 	lds	r25, 0x0118
    271e:	89 2b       	or	r24, r25
    2720:	41 f0       	breq	.+16     	; 0x2732 <right_junc_check+0x1b4>
    2722:	80 91 19 01 	lds	r24, 0x0119
    2726:	90 91 1a 01 	lds	r25, 0x011A
    272a:	89 2b       	or	r24, r25
    272c:	11 f0       	breq	.+4      	; 0x2732 <right_junc_check+0x1b4>
			{
				map_all();
    272e:	0e 94 05 18 	call	0x300a	; 0x300a <map_all>
			}
			x_coordinate = 4;
    2732:	84 e0       	ldi	r24, 0x04	; 4
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	90 93 fb 00 	sts	0x00FB, r25
    273a:	80 93 fa 00 	sts	0x00FA, r24
			y_coordinate = 4;
    273e:	90 93 fd 00 	sts	0x00FD, r25
    2742:	80 93 fc 00 	sts	0x00FC, r24
			dir = 2;
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	90 93 f9 00 	sts	0x00F9, r25
    274e:	80 93 f8 00 	sts	0x00F8, r24
			
			
			lcd_write_string("Press Any Key");
    2752:	82 ea       	ldi	r24, 0xA2	; 162
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    275a:	82 99       	sbic	0x10, 2	; 16
    275c:	d0 c1       	rjmp	.+928    	; 0x2afe <right_junc_check+0x580>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					build_map(4,4,endx,endy);
    275e:	84 e0       	ldi	r24, 0x04	; 4
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	64 e0       	ldi	r22, 0x04	; 4
    2764:	70 e0       	ldi	r23, 0x00	; 0
    2766:	a6 01       	movw	r20, r12
    2768:	95 01       	movw	r18, r10
    276a:	0e 94 08 10 	call	0x2010	; 0x2010 <build_map>
					get_path();
    276e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <get_path>
    2772:	b5 e1       	ldi	r27, 0x15	; 21
    2774:	eb 2e       	mov	r14, r27
    2776:	b5 e0       	ldi	r27, 0x05	; 5
    2778:	fb 2e       	mov	r15, r27
    277a:	87 01       	movw	r16, r14
    277c:	c0 e0       	ldi	r28, 0x00	; 0
    277e:	d0 e0       	ldi	r29, 0x00	; 0
					unsigned char eeprom_addr=0x0000;
					for(int i=0;i<15;i++)
					{
						eeprom_write_word(eeprom_addr,path_array[i][0]);
    2780:	f8 01       	movw	r30, r16
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	ce 01       	movw	r24, r28
    2788:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__eewr_word_m32>
						eeprom_addr+=2;
						eeprom_write_word(eeprom_addr,path_array[i][1]);
    278c:	f8 01       	movw	r30, r16
    278e:	62 81       	ldd	r22, Z+2	; 0x02
    2790:	73 81       	ldd	r23, Z+3	; 0x03
    2792:	ce 01       	movw	r24, r28
    2794:	02 96       	adiw	r24, 0x02	; 2
    2796:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__eewr_word_m32>
    279a:	0c 5f       	subi	r16, 0xFC	; 252
    279c:	1f 4f       	sbci	r17, 0xFF	; 255
    279e:	24 96       	adiw	r28, 0x04	; 4
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					build_map(4,4,endx,endy);
					get_path();
					unsigned char eeprom_addr=0x0000;
					for(int i=0;i<15;i++)
    27a0:	cc 33       	cpi	r28, 0x3C	; 60
    27a2:	d1 05       	cpc	r29, r1
    27a4:	69 f7       	brne	.-38     	; 0x2780 <right_junc_check+0x202>
						eeprom_write_word(eeprom_addr,path_array[i][0]);
						eeprom_addr+=2;
						eeprom_write_word(eeprom_addr,path_array[i][1]);
						eeprom_addr+=2;
					}
					lcd_clear();
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Stored In EP");
    27ae:	80 eb       	ldi	r24, 0xB0	; 176
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					right = 0;
    27be:	10 92 10 05 	sts	0x0510, r1
    27c2:	10 92 0f 05 	sts	0x050F, r1
					lcd_clear();
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_int_xy(0,0,endx,2);
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	a6 01       	movw	r20, r12
    27d8:	22 e0       	ldi	r18, 0x02	; 2
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(5,0,endy,2);
    27e0:	85 e0       	ldi	r24, 0x05	; 5
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	a5 01       	movw	r20, r10
    27ea:	22 e0       	ldi	r18, 0x02	; 2
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					delay_sec(5);
    27f2:	85 e0       	ldi	r24, 0x05	; 5
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					lcd_clear();
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_int_xy(0,0,path_array[0][0],1);
    2802:	40 91 15 05 	lds	r20, 0x0515
    2806:	50 91 16 05 	lds	r21, 0x0516
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	21 e0       	ldi	r18, 0x01	; 1
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(1,0,path_array[0][1],1);
    281a:	40 91 17 05 	lds	r20, 0x0517
    281e:	50 91 18 05 	lds	r21, 0x0518
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	21 e0       	ldi	r18, 0x01	; 1
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(3,0,path_array[1][0],1);
    2832:	40 91 19 05 	lds	r20, 0x0519
    2836:	50 91 1a 05 	lds	r21, 0x051A
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	60 e0       	ldi	r22, 0x00	; 0
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	21 e0       	ldi	r18, 0x01	; 1
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(4,0,path_array[1][1],1);
    284a:	40 91 1b 05 	lds	r20, 0x051B
    284e:	50 91 1c 05 	lds	r21, 0x051C
    2852:	84 e0       	ldi	r24, 0x04	; 4
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	21 e0       	ldi	r18, 0x01	; 1
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(6,0,path_array[2][0],1);
    2862:	40 91 1d 05 	lds	r20, 0x051D
    2866:	50 91 1e 05 	lds	r21, 0x051E
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	21 e0       	ldi	r18, 0x01	; 1
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(7,0,path_array[2][1],1);
    287a:	40 91 1f 05 	lds	r20, 0x051F
    287e:	50 91 20 05 	lds	r21, 0x0520
    2882:	87 e0       	ldi	r24, 0x07	; 7
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	21 e0       	ldi	r18, 0x01	; 1
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(9,0,path_array[3][0],1);
    2892:	40 91 21 05 	lds	r20, 0x0521
    2896:	50 91 22 05 	lds	r21, 0x0522
    289a:	89 e0       	ldi	r24, 0x09	; 9
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	60 e0       	ldi	r22, 0x00	; 0
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	21 e0       	ldi	r18, 0x01	; 1
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(10,0,path_array[3][1],1);
    28aa:	40 91 23 05 	lds	r20, 0x0523
    28ae:	50 91 24 05 	lds	r21, 0x0524
    28b2:	8a e0       	ldi	r24, 0x0A	; 10
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	60 e0       	ldi	r22, 0x00	; 0
    28b8:	70 e0       	ldi	r23, 0x00	; 0
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(12,0,path_array[4][0],1);
    28c2:	40 91 25 05 	lds	r20, 0x0525
    28c6:	50 91 26 05 	lds	r21, 0x0526
    28ca:	8c e0       	ldi	r24, 0x0C	; 12
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	21 e0       	ldi	r18, 0x01	; 1
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(13,0,path_array[4][1],1);
    28da:	40 91 27 05 	lds	r20, 0x0527
    28de:	50 91 28 05 	lds	r21, 0x0528
    28e2:	8d e0       	ldi	r24, 0x0D	; 13
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	60 e0       	ldi	r22, 0x00	; 0
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	21 e0       	ldi	r18, 0x01	; 1
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(0,1,path_array[5][0],1);
    28f2:	40 91 29 05 	lds	r20, 0x0529
    28f6:	50 91 2a 05 	lds	r21, 0x052A
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	61 e0       	ldi	r22, 0x01	; 1
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	21 e0       	ldi	r18, 0x01	; 1
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(1,1,path_array[5][1],1);
    290a:	40 91 2b 05 	lds	r20, 0x052B
    290e:	50 91 2c 05 	lds	r21, 0x052C
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	21 e0       	ldi	r18, 0x01	; 1
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2928:	af 9a       	sbi	0x15, 7	; 21
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    292a:	82 99       	sbic	0x10, 2	; 16
    292c:	ef c0       	rjmp	.+478    	; 0x2b0c <right_junc_check+0x58e>
					while(1)
					{
						
						if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
						{	
							lcd_clear();
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
							delay_sec(1);
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
							break;
						}
					}
					for(int i=0; i<15; i++)
					{
						if(path_array[i][0]==0 && path_array[i][1]==0)
    293e:	f7 01       	movw	r30, r14
    2940:	20 81       	ld	r18, Z
    2942:	31 81       	ldd	r19, Z+1	; 0x01
    2944:	21 15       	cp	r18, r1
    2946:	31 05       	cpc	r19, r1
    2948:	21 f4       	brne	.+8      	; 0x2952 <right_junc_check+0x3d4>
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	89 2b       	or	r24, r25
    2950:	79 f0       	breq	.+30     	; 0x2970 <right_junc_check+0x3f2>
						{
							break;
						}
						
						go_to_coordinate(path_array[i][0], path_array[i][1]);
    2952:	f7 01       	movw	r30, r14
    2954:	62 81       	ldd	r22, Z+2	; 0x02
    2956:	73 81       	ldd	r23, Z+3	; 0x03
    2958:	c9 01       	movw	r24, r18
    295a:	0e 94 07 12 	call	0x240e	; 0x240e <go_to_coordinate>
    295e:	84 e0       	ldi	r24, 0x04	; 4
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	e8 0e       	add	r14, r24
    2964:	f9 1e       	adc	r15, r25
							lcd_clear();
							delay_sec(1);
							break;
						}
					}
					for(int i=0; i<15; i++)
    2966:	91 e5       	ldi	r25, 0x51	; 81
    2968:	e9 16       	cp	r14, r25
    296a:	95 e0       	ldi	r25, 0x05	; 5
    296c:	f9 06       	cpc	r15, r25
    296e:	39 f7       	brne	.-50     	; 0x293e <right_junc_check+0x3c0>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_stop(void)
{
 MOTOR1A=0;
    2970:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
    2972:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
    2974:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
    2976:	af 98       	cbi	0x15, 7	; 21
    2978:	fb cf       	rjmp	.-10     	; 0x2970 <right_junc_check+0x3f2>
				}

			}
			
		}
		if(bit_is_clear(PINA,6) || bit_is_clear(PIND,6))
    297a:	ce 9b       	sbis	0x19, 6	; 25
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <right_junc_check+0x404>
    297e:	86 99       	sbic	0x10, 6	; 16
    2980:	07 c0       	rjmp	.+14     	; 0x2990 <right_junc_check+0x412>
		{
			straight = 1;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	90 93 08 01 	sts	0x0108, r25
    298a:	80 93 07 01 	sts	0x0107, r24
    298e:	04 c0       	rjmp	.+8      	; 0x2998 <right_junc_check+0x41a>
		}
		else
		{
			straight = 0;
    2990:	10 92 08 01 	sts	0x0108, r1
    2994:	10 92 07 01 	sts	0x0107, r1
		}
		
		
		turn_right();						////actual turn
    2998:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
		
		l = 0;
    299c:	10 92 04 01 	sts	0x0104, r1
    29a0:	10 92 03 01 	sts	0x0103, r1
}
void bot_brake(void)
{
MOTOR1A=1;
    29a4:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    29a6:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    29a8:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    29aa:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		//delay_millisec(100);
		flag1 = 0;
    29ac:	10 92 0c 01 	sts	0x010C, r1
    29b0:	10 92 0b 01 	sts	0x010B, r1
		irc = 0;
    29b4:	10 92 0e 01 	sts	0x010E, r1
    29b8:	10 92 0d 01 	sts	0x010D, r1
		temp = lcount - lcountPrev;
    29bc:	20 91 05 01 	lds	r18, 0x0105
    29c0:	30 91 06 01 	lds	r19, 0x0106
    29c4:	80 91 09 01 	lds	r24, 0x0109
    29c8:	90 91 0a 01 	lds	r25, 0x010A
    29cc:	28 1b       	sub	r18, r24
    29ce:	39 0b       	sbc	r19, r25
    29d0:	30 93 12 01 	sts	0x0112, r19
    29d4:	20 93 11 01 	sts	0x0111, r18
		//delay_millisec(2000);
		// lcd_clear();
		
		//delay_sec(2);
		//lcd_clear();
		if(straight==1 && temp==1)
    29d8:	80 91 07 01 	lds	r24, 0x0107
    29dc:	90 91 08 01 	lds	r25, 0x0108
    29e0:	81 30       	cpi	r24, 0x01	; 1
    29e2:	91 05       	cpc	r25, r1
    29e4:	a9 f4       	brne	.+42     	; 0x2a10 <right_junc_check+0x492>
    29e6:	21 30       	cpi	r18, 0x01	; 1
    29e8:	31 05       	cpc	r19, r1
    29ea:	09 f0       	breq	.+2      	; 0x29ee <right_junc_check+0x470>
    29ec:	54 c0       	rjmp	.+168    	; 0x2a96 <right_junc_check+0x518>
		{
			// lcd_write_string("|- Detected");
			update_array(1,1,1,0);
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
			lcd_write_string_xy(0,1,"1");
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	70 e0       	ldi	r23, 0x00	; 0
    2a0a:	4d eb       	ldi	r20, 0xBD	; 189
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	2a c0       	rjmp	.+84     	; 0x2a64 <right_junc_check+0x4e6>
			lcd_write_string_xy(2,1,"1");
			lcd_write_string_xy(4,1,"1");
			lcd_write_string_xy(6,1,"0");
		}
		else if(straight==0 && temp==1)
    2a10:	89 2b       	or	r24, r25
    2a12:	09 f0       	breq	.+2      	; 0x2a16 <right_junc_check+0x498>
    2a14:	6d c0       	rjmp	.+218    	; 0x2af0 <right_junc_check+0x572>
    2a16:	21 30       	cpi	r18, 0x01	; 1
    2a18:	31 05       	cpc	r19, r1
    2a1a:	89 f4       	brne	.+34     	; 0x2a3e <right_junc_check+0x4c0>
		{
			// lcd_write_string("T Detected");
			update_array(0,1,1,1);
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	61 e0       	ldi	r22, 0x01	; 1
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	21 e0       	ldi	r18, 0x01	; 1
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
			lcd_write_string_xy(0,1,"0");
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	61 e0       	ldi	r22, 0x01	; 1
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	4f eb       	ldi	r20, 0xBF	; 191
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	3f c0       	rjmp	.+126    	; 0x2abc <right_junc_check+0x53e>
			lcd_write_string_xy(2,1,"1");
			lcd_write_string_xy(4,1,"1");
			lcd_write_string_xy(6,1,"1");
		}
		else if(straight==0 && temp==0)
    2a3e:	23 2b       	or	r18, r19
    2a40:	09 f0       	breq	.+2      	; 0x2a44 <right_junc_check+0x4c6>
    2a42:	56 c0       	rjmp	.+172    	; 0x2af0 <right_junc_check+0x572>
		{
			// lcd_write_string("L Detected");
			update_array(0,1,1,0);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	61 e0       	ldi	r22, 0x01	; 1
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	41 e0       	ldi	r20, 0x01	; 1
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
			lcd_write_string_xy(0,1,"0");
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	70 e0       	ldi	r23, 0x00	; 0
    2a60:	4f eb       	ldi	r20, 0xBF	; 191
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(2,1,"1");
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	4d eb       	ldi	r20, 0xBD	; 189
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(4,1,"1");
    2a78:	84 e0       	ldi	r24, 0x04	; 4
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	4d eb       	ldi	r20, 0xBD	; 189
    2a82:	50 e0       	ldi	r21, 0x00	; 0
    2a84:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(6,1,"0");
    2a88:	86 e0       	ldi	r24, 0x06	; 6
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	61 e0       	ldi	r22, 0x01	; 1
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	4f eb       	ldi	r20, 0xBF	; 191
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	2b c0       	rjmp	.+86     	; 0x2aec <right_junc_check+0x56e>
		}
		else if(straight==1 && temp==2)
    2a96:	22 30       	cpi	r18, 0x02	; 2
    2a98:	31 05       	cpc	r19, r1
    2a9a:	51 f5       	brne	.+84     	; 0x2af0 <right_junc_check+0x572>
		{
			// lcd_write_string("+ Detected");
			update_array(1,1,1,1);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	50 e0       	ldi	r21, 0x00	; 0
    2aa8:	21 e0       	ldi	r18, 0x01	; 1
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
			lcd_write_string_xy(0,1,"1");
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	4d eb       	ldi	r20, 0xBD	; 189
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(2,1,"1");
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	61 e0       	ldi	r22, 0x01	; 1
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	4d eb       	ldi	r20, 0xBD	; 189
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(4,1,"1");
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	70 e0       	ldi	r23, 0x00	; 0
    2ad8:	4d eb       	ldi	r20, 0xBD	; 189
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(6,1,"1");
    2ae0:	86 e0       	ldi	r24, 0x06	; 6
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	4d eb       	ldi	r20, 0xBD	; 189
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		}
		//delay_millisec(2000);
		temp = 0;
    2af0:	10 92 12 01 	sts	0x0112, r1
    2af4:	10 92 11 01 	sts	0x0111, r1
		sense_of_directon();
    2af8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
    2afc:	0e c0       	rjmp	.+28     	; 0x2b1a <right_junc_check+0x59c>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2afe:	80 9b       	sbis	0x10, 0	; 16
    2b00:	2e ce       	rjmp	.-932    	; 0x275e <right_junc_check+0x1e0>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2b02:	81 9b       	sbis	0x10, 1	; 16
    2b04:	2c ce       	rjmp	.-936    	; 0x275e <right_junc_check+0x1e0>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2b06:	83 9b       	sbis	0x10, 3	; 16
    2b08:	2a ce       	rjmp	.-940    	; 0x275e <right_junc_check+0x1e0>
    2b0a:	27 ce       	rjmp	.-946    	; 0x275a <right_junc_check+0x1dc>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2b0c:	80 9b       	sbis	0x10, 0	; 16
    2b0e:	0f cf       	rjmp	.-482    	; 0x292e <right_junc_check+0x3b0>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2b10:	81 9b       	sbis	0x10, 1	; 16
    2b12:	0d cf       	rjmp	.-486    	; 0x292e <right_junc_check+0x3b0>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2b14:	83 9b       	sbis	0x10, 3	; 16
    2b16:	0b cf       	rjmp	.-490    	; 0x292e <right_junc_check+0x3b0>
    2b18:	08 cf       	rjmp	.-496    	; 0x292a <right_junc_check+0x3ac>
	}
	// lcd_clear();
	// lcd_write_int_xy(0,0,dir,3);
	//delay_sec(2);
	
}
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	cf 90       	pop	r12
    2b2a:	bf 90       	pop	r11
    2b2c:	af 90       	pop	r10
    2b2e:	08 95       	ret

00002b30 <main>:
		}
	}
}

int main(void)
{
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
	init_devices();
    2b3c:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("LCD Working");
    2b48:	81 ec       	ldi	r24, 0xC1	; 193
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<10 ; i++)
    2b54:	40 e5       	ldi	r20, 0x50	; 80
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	12 c0       	rjmp	.+36     	; 0x2b7e <main+0x4e>
	{
		for(j=0 ; j<10; j++)
		{
			for(k=0 ; k<4 ; k++)
			{
				dir_array[i][j][k] = 0;
    2b5a:	11 82       	std	Z+1, r1	; 0x01
    2b5c:	10 82       	st	Z, r1
    2b5e:	13 82       	std	Z+3, r1	; 0x03
    2b60:	12 82       	std	Z+2, r1	; 0x02
    2b62:	15 82       	std	Z+5, r1	; 0x05
    2b64:	14 82       	std	Z+4, r1	; 0x04
    2b66:	17 82       	std	Z+7, r1	; 0x07
    2b68:	16 82       	std	Z+6, r1	; 0x06
	lcd_write_string("LCD Working");
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<10 ; i++)
	{
		for(j=0 ; j<10; j++)
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	38 96       	adiw	r30, 0x08	; 8
    2b6e:	8a 30       	cpi	r24, 0x0A	; 10
    2b70:	91 05       	cpc	r25, r1
    2b72:	99 f7       	brne	.-26     	; 0x2b5a <main+0x2a>
	init_devices();
	lcd_clear();
	lcd_write_string("LCD Working");
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<10 ; i++)
    2b74:	2f 5f       	subi	r18, 0xFF	; 255
    2b76:	3f 4f       	sbci	r19, 0xFF	; 255
    2b78:	2a 30       	cpi	r18, 0x0A	; 10
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	61 f0       	breq	.+24     	; 0x2b96 <main+0x66>
    2b7e:	24 9f       	mul	r18, r20
    2b80:	f0 01       	movw	r30, r0
    2b82:	25 9f       	mul	r18, r21
    2b84:	f0 0d       	add	r31, r0
    2b86:	34 9f       	mul	r19, r20
    2b88:	f0 0d       	add	r31, r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	e1 51       	subi	r30, 0x11	; 17
    2b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	e2 cf       	rjmp	.-60     	; 0x2b5a <main+0x2a>
			{
				dir_array[i][j][k] = 0;
			}
		}
	}
	lcd_clear();
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	60 e0       	ldi	r22, 0x00	; 0
    2b9a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("PressD3 dry run");
    2b9e:	8d ec       	ldi	r24, 0xCD	; 205
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
	lcd_write_string_xy(0,1,"Press0 Stst run");
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	61 e0       	ldi	r22, 0x01	; 1
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	4d ed       	ldi	r20, 0xDD	; 221
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	update_array(1,0,0,0);
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
    2bca:	83 99       	sbic	0x10, 3	; 16
    2bcc:	42 c1       	rjmp	.+644    	; 0x2e52 <main+0x322>
	while(1)
	{
		if(pressed_switch3())
		{
			repeat = 0;
    2bce:	10 92 1e 01 	sts	0x011E, r1
    2bd2:	10 92 1d 01 	sts	0x011D, r1
    2bd6:	1b c0       	rjmp	.+54     	; 0x2c0e <main+0xde>
			while(repeat<=2)
			{
				line_track_new();	
    2bd8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
				LED&=0b11110000;
    2bdc:	85 b3       	in	r24, 0x15	; 21
    2bde:	80 7f       	andi	r24, 0xF0	; 240
    2be0:	85 bb       	out	0x15, r24	; 21
				LED|=sensorbyte;
    2be2:	85 b3       	in	r24, 0x15	; 21
    2be4:	90 91 fe 00 	lds	r25, 0x00FE
    2be8:	89 2b       	or	r24, r25
    2bea:	85 bb       	out	0x15, r24	; 21
				if(bit_is_clear(PINA,7))
    2bec:	cf 99       	sbic	0x19, 7	; 25
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <main+0xc4>
				{
					right_junc_check();
    2bf0:	0e 94 bf 12 	call	0x257e	; 0x257e <right_junc_check>
				}
				left_junc_check();
    2bf4:	0e 94 9e 09 	call	0x133c	; 0x133c <left_junc_check>
				frSensorCheck();
    2bf8:	0e 94 24 0a 	call	0x1448	; 0x1448 <frSensorCheck>
				irc++;
    2bfc:	80 91 0d 01 	lds	r24, 0x010D
    2c00:	90 91 0e 01 	lds	r25, 0x010E
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	90 93 0e 01 	sts	0x010E, r25
    2c0a:	80 93 0d 01 	sts	0x010D, r24
	while(1)
	{
		if(pressed_switch3())
		{
			repeat = 0;
			while(repeat<=2)
    2c0e:	80 91 1d 01 	lds	r24, 0x011D
    2c12:	90 91 1e 01 	lds	r25, 0x011E
    2c16:	03 97       	sbiw	r24, 0x03	; 3
    2c18:	fc f2       	brlt	.-66     	; 0x2bd8 <main+0xa8>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2c1a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2c1c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2c1e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2c20:	af 9a       	sbi	0x15, 7	; 21
				left_junc_check();
				frSensorCheck();
				irc++;
			}
			bot_brake();
			fill_missed_array();
    2c22:	0e 94 8e 0a 	call	0x151c	; 0x151c <fill_missed_array>
			mx = 0;
    2c26:	10 92 18 01 	sts	0x0118, r1
    2c2a:	10 92 17 01 	sts	0x0117, r1
			my = 0;
    2c2e:	10 92 1a 01 	sts	0x011A, r1
    2c32:	10 92 19 01 	sts	0x0119, r1
			coordinates_tobe_reached();
    2c36:	0e 94 43 0b 	call	0x1686	; 0x1686 <coordinates_tobe_reached>
			// if(mx==0 && my == 0)
			// {
			// 	break;
			// }
			build_map(x_coordinate, y_coordinate, mx, my);
    2c3a:	60 91 fc 00 	lds	r22, 0x00FC
    2c3e:	70 91 fd 00 	lds	r23, 0x00FD
    2c42:	40 91 17 01 	lds	r20, 0x0117
    2c46:	50 91 18 01 	lds	r21, 0x0118
    2c4a:	20 91 19 01 	lds	r18, 0x0119
    2c4e:	30 91 1a 01 	lds	r19, 0x011A
    2c52:	80 91 fa 00 	lds	r24, 0x00FA
    2c56:	90 91 fb 00 	lds	r25, 0x00FB
    2c5a:	0e 94 08 10 	call	0x2010	; 0x2010 <build_map>
			get_path();
    2c5e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <get_path>
			right = 0;
    2c62:	10 92 10 05 	sts	0x0510, r1
    2c66:	10 92 0f 05 	sts	0x050F, r1
			lcd_clear();
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_int_xy(0,0,path_array[0][0],2);
    2c72:	40 91 15 05 	lds	r20, 0x0515
    2c76:	50 91 16 05 	lds	r21, 0x0516
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	22 e0       	ldi	r18, 0x02	; 2
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(3,0,path_array[0][1],2);
    2c8a:	40 91 17 05 	lds	r20, 0x0517
    2c8e:	50 91 18 05 	lds	r21, 0x0518
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	22 e0       	ldi	r18, 0x02	; 2
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(6,0,path_array[1][0],2);
    2ca2:	40 91 19 05 	lds	r20, 0x0519
    2ca6:	50 91 1a 05 	lds	r21, 0x051A
    2caa:	86 e0       	ldi	r24, 0x06	; 6
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	22 e0       	ldi	r18, 0x02	; 2
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(9,0,path_array[1][1],2);
    2cba:	40 91 1b 05 	lds	r20, 0x051B
    2cbe:	50 91 1c 05 	lds	r21, 0x051C
    2cc2:	89 e0       	ldi	r24, 0x09	; 9
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	70 e0       	ldi	r23, 0x00	; 0
    2cca:	22 e0       	ldi	r18, 0x02	; 2
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			delay_sec(4);
    2cd2:	84 e0       	ldi	r24, 0x04	; 4
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    2cda:	c5 e1       	ldi	r28, 0x15	; 21
    2cdc:	d5 e0       	ldi	r29, 0x05	; 5
			for(int i=0; i<15; i++)
			{
				if(path_array[i][0]==0 && path_array[i][1]==0)
    2cde:	28 81       	ld	r18, Y
    2ce0:	39 81       	ldd	r19, Y+1	; 0x01
    2ce2:	21 15       	cp	r18, r1
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	21 f4       	brne	.+8      	; 0x2cf0 <main+0x1c0>
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	89 2b       	or	r24, r25
    2cee:	51 f0       	breq	.+20     	; 0x2d04 <main+0x1d4>
				{
					break;
				}
				
				go_to_coordinate(path_array[i][0], path_array[i][1]);
    2cf0:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf2:	7b 81       	ldd	r23, Y+3	; 0x03
    2cf4:	c9 01       	movw	r24, r18
    2cf6:	0e 94 07 12 	call	0x240e	; 0x240e <go_to_coordinate>
    2cfa:	24 96       	adiw	r28, 0x04	; 4
			lcd_write_int_xy(0,0,path_array[0][0],2);
			lcd_write_int_xy(3,0,path_array[0][1],2);
			lcd_write_int_xy(6,0,path_array[1][0],2);
			lcd_write_int_xy(9,0,path_array[1][1],2);
			delay_sec(4);
			for(int i=0; i<15; i++)
    2cfc:	85 e0       	ldi	r24, 0x05	; 5
    2cfe:	c1 35       	cpi	r28, 0x51	; 81
    2d00:	d8 07       	cpc	r29, r24
    2d02:	69 f7       	brne	.-38     	; 0x2cde <main+0x1ae>
				}
				
				go_to_coordinate(path_array[i][0], path_array[i][1]);

			}
			if(dir_array[x_coordinate][y_coordinate][0]==1 && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    2d04:	c0 91 fa 00 	lds	r28, 0x00FA
    2d08:	d0 91 fb 00 	lds	r29, 0x00FB
    2d0c:	00 91 fc 00 	lds	r16, 0x00FC
    2d10:	10 91 fd 00 	lds	r17, 0x00FD
    2d14:	fe 01       	movw	r30, r28
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	23 e0       	ldi	r18, 0x03	; 3
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	2a 95       	dec	r18
    2d24:	e1 f7       	brne	.-8      	; 0x2d1e <main+0x1ee>
    2d26:	e8 0f       	add	r30, r24
    2d28:	f9 1f       	adc	r31, r25
    2d2a:	e0 0f       	add	r30, r16
    2d2c:	f1 1f       	adc	r31, r17
    2d2e:	83 e0       	ldi	r24, 0x03	; 3
    2d30:	ee 0f       	add	r30, r30
    2d32:	ff 1f       	adc	r31, r31
    2d34:	8a 95       	dec	r24
    2d36:	e1 f7       	brne	.-8      	; 0x2d30 <main+0x200>
    2d38:	e1 51       	subi	r30, 0x11	; 17
    2d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	59 f4       	brne	.+22     	; 0x2d5a <main+0x22a>
    2d44:	b8 01       	movw	r22, r16
    2d46:	6f 5f       	subi	r22, 0xFF	; 255
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    2d50:	89 2b       	or	r24, r25
    2d52:	19 f0       	breq	.+6      	; 0x2d5a <main+0x22a>
			{
				checkAndCorrectDirection(2);
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	66 c0       	rjmp	.+204    	; 0x2e26 <main+0x2f6>
			}
			else if(dir_array[x_coordinate][y_coordinate][1]==1 && is_coordinate_null(x_coordinate+1,y_coordinate))
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ee 0f       	add	r30, r30
    2d5e:	ff 1f       	adc	r31, r31
    2d60:	ce 01       	movw	r24, r28
    2d62:	a3 e0       	ldi	r26, 0x03	; 3
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	aa 95       	dec	r26
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <main+0x234>
    2d6c:	e8 0f       	add	r30, r24
    2d6e:	f9 1f       	adc	r31, r25
    2d70:	e0 0f       	add	r30, r16
    2d72:	f1 1f       	adc	r31, r17
    2d74:	73 e0       	ldi	r23, 0x03	; 3
    2d76:	ee 0f       	add	r30, r30
    2d78:	ff 1f       	adc	r31, r31
    2d7a:	7a 95       	dec	r23
    2d7c:	e1 f7       	brne	.-8      	; 0x2d76 <main+0x246>
    2d7e:	ef 50       	subi	r30, 0x0F	; 15
    2d80:	fe 4f       	sbci	r31, 0xFE	; 254
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	51 f4       	brne	.+20     	; 0x2d9e <main+0x26e>
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	b8 01       	movw	r22, r16
    2d90:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    2d94:	89 2b       	or	r24, r25
    2d96:	19 f0       	breq	.+6      	; 0x2d9e <main+0x26e>
			{
				checkAndCorrectDirection(1);
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	44 c0       	rjmp	.+136    	; 0x2e26 <main+0x2f6>
			}
			else if(dir_array[x_coordinate][y_coordinate][2]==1 && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ee 0f       	add	r30, r30
    2da2:	ff 1f       	adc	r31, r31
    2da4:	ce 01       	movw	r24, r28
    2da6:	53 e0       	ldi	r21, 0x03	; 3
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	5a 95       	dec	r21
    2dae:	e1 f7       	brne	.-8      	; 0x2da8 <main+0x278>
    2db0:	e8 0f       	add	r30, r24
    2db2:	f9 1f       	adc	r31, r25
    2db4:	e0 0f       	add	r30, r16
    2db6:	f1 1f       	adc	r31, r17
    2db8:	43 e0       	ldi	r20, 0x03	; 3
    2dba:	ee 0f       	add	r30, r30
    2dbc:	ff 1f       	adc	r31, r31
    2dbe:	4a 95       	dec	r20
    2dc0:	e1 f7       	brne	.-8      	; 0x2dba <main+0x28a>
    2dc2:	ed 50       	subi	r30, 0x0D	; 13
    2dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc6:	80 81       	ld	r24, Z
    2dc8:	91 81       	ldd	r25, Z+1	; 0x01
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	59 f4       	brne	.+22     	; 0x2de4 <main+0x2b4>
    2dce:	b8 01       	movw	r22, r16
    2dd0:	61 50       	subi	r22, 0x01	; 1
    2dd2:	70 40       	sbci	r23, 0x00	; 0
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    2dda:	89 2b       	or	r24, r25
    2ddc:	19 f0       	breq	.+6      	; 0x2de4 <main+0x2b4>
			{
				checkAndCorrectDirection(-2);
    2dde:	8e ef       	ldi	r24, 0xFE	; 254
    2de0:	9f ef       	ldi	r25, 0xFF	; 255
    2de2:	21 c0       	rjmp	.+66     	; 0x2e26 <main+0x2f6>
			}
			else if(dir_array[x_coordinate][y_coordinate][3]==1 && is_coordinate_null(x_coordinate-1,y_coordinate))
    2de4:	fe 01       	movw	r30, r28
    2de6:	ee 0f       	add	r30, r30
    2de8:	ff 1f       	adc	r31, r31
    2dea:	ce 01       	movw	r24, r28
    2dec:	23 e0       	ldi	r18, 0x03	; 3
    2dee:	88 0f       	add	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	2a 95       	dec	r18
    2df4:	e1 f7       	brne	.-8      	; 0x2dee <main+0x2be>
    2df6:	e8 0f       	add	r30, r24
    2df8:	f9 1f       	adc	r31, r25
    2dfa:	e0 0f       	add	r30, r16
    2dfc:	f1 1f       	adc	r31, r17
    2dfe:	83 e0       	ldi	r24, 0x03	; 3
    2e00:	ee 0f       	add	r30, r30
    2e02:	ff 1f       	adc	r31, r31
    2e04:	8a 95       	dec	r24
    2e06:	e1 f7       	brne	.-8      	; 0x2e00 <main+0x2d0>
    2e08:	e1 51       	subi	r30, 0x11	; 17
    2e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0c:	86 81       	ldd	r24, Z+6	; 0x06
    2e0e:	97 81       	ldd	r25, Z+7	; 0x07
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	59 f4       	brne	.+22     	; 0x2e2a <main+0x2fa>
    2e14:	ce 01       	movw	r24, r28
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	b8 01       	movw	r22, r16
    2e1a:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    2e1e:	89 2b       	or	r24, r25
    2e20:	21 f0       	breq	.+8      	; 0x2e2a <main+0x2fa>
			{
				checkAndCorrectDirection(-1);
    2e22:	8f ef       	ldi	r24, 0xFF	; 255
    2e24:	9f ef       	ldi	r25, 0xFF	; 255
    2e26:	0e 94 1c 11 	call	0x2238	; 0x2238 <checkAndCorrectDirection>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2e2a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2e2c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2e2e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2e30:	af 9a       	sbi	0x15, 7	; 21
			}		

			bot_brake();
			//delay_sec(2);
			irc=0;
			Coordinates_changed_by = 0;
    2e32:	10 92 16 01 	sts	0x0116, r1
    2e36:	10 92 15 01 	sts	0x0115, r1
			// else
			// {
			// 	special_flag = 1;
			// 	left_junc_check();
			// }
			irc = 0;
    2e3a:	10 92 0e 01 	sts	0x010E, r1
    2e3e:	10 92 0d 01 	sts	0x010D, r1
			special_flag = 0;
    2e42:	10 92 1c 01 	sts	0x011C, r1
    2e46:	10 92 1b 01 	sts	0x011B, r1
			repeat = 0;
    2e4a:	10 92 1e 01 	sts	0x011E, r1
    2e4e:	10 92 1d 01 	sts	0x011D, r1
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2e52:	80 99       	sbic	0x10, 0	; 16
    2e54:	ba ce       	rjmp	.-652    	; 0x2bca <main+0x9a>
    2e56:	15 e1       	ldi	r17, 0x15	; 21
    2e58:	e1 2e       	mov	r14, r17
    2e5a:	15 e0       	ldi	r17, 0x05	; 5
    2e5c:	f1 2e       	mov	r15, r17
    2e5e:	87 01       	movw	r16, r14
    2e60:	c0 e0       	ldi	r28, 0x00	; 0
    2e62:	d0 e0       	ldi	r29, 0x00	; 0
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
			{
				path_array[i][0] = eeprom_read_word(eeprom_addr);
    2e64:	ce 01       	movw	r24, r28
    2e66:	0e 94 07 1c 	call	0x380e	; 0x380e <__eerd_word_m32>
    2e6a:	f8 01       	movw	r30, r16
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
    2e70:	ce 01       	movw	r24, r28
    2e72:	02 96       	adiw	r24, 0x02	; 2
    2e74:	0e 94 07 1c 	call	0x380e	; 0x380e <__eerd_word_m32>
    2e78:	f8 01       	movw	r30, r16
    2e7a:	93 83       	std	Z+3, r25	; 0x03
    2e7c:	82 83       	std	Z+2, r24	; 0x02
    2e7e:	24 96       	adiw	r28, 0x04	; 4
    2e80:	0c 5f       	subi	r16, 0xFC	; 252
    2e82:	1f 4f       	sbci	r17, 0xFF	; 255
			repeat = 0;
		}
		if(pressed_switch0())
		{
			unsigned char eeprom_addr=0x0000;
			for(int i=0;i<15;i++)
    2e84:	cc 33       	cpi	r28, 0x3C	; 60
    2e86:	d1 05       	cpc	r29, r1
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <main+0x334>
				path_array[i][0] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
				path_array[i][1] = eeprom_read_word(eeprom_addr);
				eeprom_addr+=2;
			}
			lcd_clear();
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_int_xy(0,0,path_array[0][0],1);
    2e92:	40 91 15 05 	lds	r20, 0x0515
    2e96:	50 91 16 05 	lds	r21, 0x0516
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,0,path_array[0][1],1);
    2eaa:	40 91 17 05 	lds	r20, 0x0517
    2eae:	50 91 18 05 	lds	r21, 0x0518
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	21 e0       	ldi	r18, 0x01	; 1
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(3,0,path_array[1][0],1);
    2ec2:	40 91 19 05 	lds	r20, 0x0519
    2ec6:	50 91 1a 05 	lds	r21, 0x051A
    2eca:	83 e0       	ldi	r24, 0x03	; 3
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	21 e0       	ldi	r18, 0x01	; 1
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(4,0,path_array[1][1],1);
    2eda:	40 91 1b 05 	lds	r20, 0x051B
    2ede:	50 91 1c 05 	lds	r21, 0x051C
    2ee2:	84 e0       	ldi	r24, 0x04	; 4
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	21 e0       	ldi	r18, 0x01	; 1
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(6,0,path_array[2][0],1);
    2ef2:	40 91 1d 05 	lds	r20, 0x051D
    2ef6:	50 91 1e 05 	lds	r21, 0x051E
    2efa:	86 e0       	ldi	r24, 0x06	; 6
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	21 e0       	ldi	r18, 0x01	; 1
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(7,0,path_array[2][1],1);
    2f0a:	40 91 1f 05 	lds	r20, 0x051F
    2f0e:	50 91 20 05 	lds	r21, 0x0520
    2f12:	87 e0       	ldi	r24, 0x07	; 7
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	70 e0       	ldi	r23, 0x00	; 0
    2f1a:	21 e0       	ldi	r18, 0x01	; 1
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(9,0,path_array[3][0],1);
    2f22:	40 91 21 05 	lds	r20, 0x0521
    2f26:	50 91 22 05 	lds	r21, 0x0522
    2f2a:	89 e0       	ldi	r24, 0x09	; 9
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	21 e0       	ldi	r18, 0x01	; 1
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(10,0,path_array[3][1],1);
    2f3a:	40 91 23 05 	lds	r20, 0x0523
    2f3e:	50 91 24 05 	lds	r21, 0x0524
    2f42:	8a e0       	ldi	r24, 0x0A	; 10
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	21 e0       	ldi	r18, 0x01	; 1
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(12,0,path_array[4][0],1);
    2f52:	40 91 25 05 	lds	r20, 0x0525
    2f56:	50 91 26 05 	lds	r21, 0x0526
    2f5a:	8c e0       	ldi	r24, 0x0C	; 12
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	21 e0       	ldi	r18, 0x01	; 1
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(13,0,path_array[4][1],1);
    2f6a:	40 91 27 05 	lds	r20, 0x0527
    2f6e:	50 91 28 05 	lds	r21, 0x0528
    2f72:	8d e0       	ldi	r24, 0x0D	; 13
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	21 e0       	ldi	r18, 0x01	; 1
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(0,1,path_array[5][0],1);
    2f82:	40 91 29 05 	lds	r20, 0x0529
    2f86:	50 91 2a 05 	lds	r21, 0x052A
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	61 e0       	ldi	r22, 0x01	; 1
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	21 e0       	ldi	r18, 0x01	; 1
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_int_xy(1,1,path_array[5][1],1);
    2f9a:	40 91 2b 05 	lds	r20, 0x052B
    2f9e:	50 91 2c 05 	lds	r21, 0x052C
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	21 e0       	ldi	r18, 0x01	; 1
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2fb2:	82 99       	sbic	0x10, 2	; 16
    2fb4:	23 c0       	rjmp	.+70     	; 0x2ffc <main+0x4cc>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					lcd_clear();
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					delay_sec(1);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					break;
				}
			}
			for(int i=0; i<15; i++)
			{
				if(path_array[i][0]==0 && path_array[i][1]==0)
    2fc6:	f7 01       	movw	r30, r14
    2fc8:	20 81       	ld	r18, Z
    2fca:	31 81       	ldd	r19, Z+1	; 0x01
    2fcc:	21 15       	cp	r18, r1
    2fce:	31 05       	cpc	r19, r1
    2fd0:	29 f4       	brne	.+10     	; 0x2fdc <main+0x4ac>
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	89 2b       	or	r24, r25
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <main+0x4ac>
    2fda:	f7 cd       	rjmp	.-1042   	; 0x2bca <main+0x9a>
				{
					break;
				}
				go_to_coordinate(path_array[i][0], path_array[i][1]);
    2fdc:	f7 01       	movw	r30, r14
    2fde:	62 81       	ldd	r22, Z+2	; 0x02
    2fe0:	73 81       	ldd	r23, Z+3	; 0x03
    2fe2:	c9 01       	movw	r24, r18
    2fe4:	0e 94 07 12 	call	0x240e	; 0x240e <go_to_coordinate>
    2fe8:	84 e0       	ldi	r24, 0x04	; 4
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	e8 0e       	add	r14, r24
    2fee:	f9 1e       	adc	r15, r25
					lcd_clear();
					delay_sec(1);
					break;
				}
			}
			for(int i=0; i<15; i++)
    2ff0:	91 e5       	ldi	r25, 0x51	; 81
    2ff2:	e9 16       	cp	r14, r25
    2ff4:	95 e0       	ldi	r25, 0x05	; 5
    2ff6:	f9 06       	cpc	r15, r25
    2ff8:	31 f7       	brne	.-52     	; 0x2fc6 <main+0x496>
    2ffa:	e7 cd       	rjmp	.-1074   	; 0x2bca <main+0x9a>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2ffc:	80 9b       	sbis	0x10, 0	; 16
    2ffe:	db cf       	rjmp	.-74     	; 0x2fb6 <main+0x486>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    3000:	81 9b       	sbis	0x10, 1	; 16
    3002:	d9 cf       	rjmp	.-78     	; 0x2fb6 <main+0x486>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    3004:	83 9b       	sbis	0x10, 3	; 16
    3006:	d7 cf       	rjmp	.-82     	; 0x2fb6 <main+0x486>
    3008:	d4 cf       	rjmp	.-88     	; 0x2fb2 <main+0x482>

0000300a <map_all>:
	}
	bot_brake();
	//delay_sec(1);
}
void map_all()
{
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    3016:	7f e8       	ldi	r23, 0x8F	; 143
    3018:	e7 2e       	mov	r14, r23
    301a:	71 e0       	ldi	r23, 0x01	; 1
    301c:	f7 2e       	mov	r15, r23
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    301e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    3020:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    3022:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    3024:	af 9a       	sbi	0x15, 7	; 21
	while(1)
	{
		bot_brake();
		build_map(x_coordinate, y_coordinate, mx, my);
    3026:	60 91 fc 00 	lds	r22, 0x00FC
    302a:	70 91 fd 00 	lds	r23, 0x00FD
    302e:	40 91 17 01 	lds	r20, 0x0117
    3032:	50 91 18 01 	lds	r21, 0x0118
    3036:	20 91 19 01 	lds	r18, 0x0119
    303a:	30 91 1a 01 	lds	r19, 0x011A
    303e:	80 91 fa 00 	lds	r24, 0x00FA
    3042:	90 91 fb 00 	lds	r25, 0x00FB
    3046:	0e 94 08 10 	call	0x2010	; 0x2010 <build_map>
		get_path();
    304a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <get_path>
		
		right = 0;
    304e:	10 92 10 05 	sts	0x0510, r1
    3052:	10 92 0f 05 	sts	0x050F, r1
		lcd_clear();
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	60 e0       	ldi	r22, 0x00	; 0
    305a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_int_xy(0,0,path_array[0][0],2);
    305e:	40 91 15 05 	lds	r20, 0x0515
    3062:	50 91 16 05 	lds	r21, 0x0516
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	70 e0       	ldi	r23, 0x00	; 0
    306e:	22 e0       	ldi	r18, 0x02	; 2
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(3,0,path_array[0][1],2);
    3076:	40 91 17 05 	lds	r20, 0x0517
    307a:	50 91 18 05 	lds	r21, 0x0518
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	22 e0       	ldi	r18, 0x02	; 2
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(6,0,path_array[1][0],2);
    308e:	40 91 19 05 	lds	r20, 0x0519
    3092:	50 91 1a 05 	lds	r21, 0x051A
    3096:	86 e0       	ldi	r24, 0x06	; 6
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	22 e0       	ldi	r18, 0x02	; 2
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(9,0,path_array[1][1],2);
    30a6:	40 91 1b 05 	lds	r20, 0x051B
    30aa:	50 91 1c 05 	lds	r21, 0x051C
    30ae:	89 e0       	ldi	r24, 0x09	; 9
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	22 e0       	ldi	r18, 0x02	; 2
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
    30be:	c5 e1       	ldi	r28, 0x15	; 21
    30c0:	d5 e0       	ldi	r29, 0x05	; 5
		//delay_sec(4);
		for(int i=0; i<15; i++)
		{
			if(path_array[i][0]==0 && path_array[i][1]==0)
    30c2:	28 81       	ld	r18, Y
    30c4:	39 81       	ldd	r19, Y+1	; 0x01
    30c6:	21 15       	cp	r18, r1
    30c8:	31 05       	cpc	r19, r1
    30ca:	21 f4       	brne	.+8      	; 0x30d4 <map_all+0xca>
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	89 2b       	or	r24, r25
    30d2:	51 f0       	breq	.+20     	; 0x30e8 <map_all+0xde>
			{
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);
    30d4:	6a 81       	ldd	r22, Y+2	; 0x02
    30d6:	7b 81       	ldd	r23, Y+3	; 0x03
    30d8:	c9 01       	movw	r24, r18
    30da:	0e 94 07 12 	call	0x240e	; 0x240e <go_to_coordinate>
    30de:	24 96       	adiw	r28, 0x04	; 4
		lcd_write_int_xy(0,0,path_array[0][0],2);
		lcd_write_int_xy(3,0,path_array[0][1],2);
		lcd_write_int_xy(6,0,path_array[1][0],2);
		lcd_write_int_xy(9,0,path_array[1][1],2);
		//delay_sec(4);
		for(int i=0; i<15; i++)
    30e0:	85 e0       	ldi	r24, 0x05	; 5
    30e2:	c1 35       	cpi	r28, 0x51	; 81
    30e4:	d8 07       	cpc	r29, r24
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <map_all+0xb8>
				break;
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);

		}
		if(dir_array[x_coordinate][y_coordinate][0]==1 && is_coordinate_null(x_coordinate,(y_coordinate+1)))
    30e8:	c0 91 fa 00 	lds	r28, 0x00FA
    30ec:	d0 91 fb 00 	lds	r29, 0x00FB
    30f0:	00 91 fc 00 	lds	r16, 0x00FC
    30f4:	10 91 fd 00 	lds	r17, 0x00FD
    30f8:	fe 01       	movw	r30, r28
    30fa:	ee 0f       	add	r30, r30
    30fc:	ff 1f       	adc	r31, r31
    30fe:	ce 01       	movw	r24, r28
    3100:	53 e0       	ldi	r21, 0x03	; 3
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	5a 95       	dec	r21
    3108:	e1 f7       	brne	.-8      	; 0x3102 <map_all+0xf8>
    310a:	e8 0f       	add	r30, r24
    310c:	f9 1f       	adc	r31, r25
    310e:	e0 0f       	add	r30, r16
    3110:	f1 1f       	adc	r31, r17
    3112:	43 e0       	ldi	r20, 0x03	; 3
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	4a 95       	dec	r20
    311a:	e1 f7       	brne	.-8      	; 0x3114 <map_all+0x10a>
    311c:	e1 51       	subi	r30, 0x11	; 17
    311e:	fe 4f       	sbci	r31, 0xFE	; 254
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	59 f4       	brne	.+22     	; 0x313e <map_all+0x134>
    3128:	b8 01       	movw	r22, r16
    312a:	6f 5f       	subi	r22, 0xFF	; 255
    312c:	7f 4f       	sbci	r23, 0xFF	; 255
    312e:	ce 01       	movw	r24, r28
    3130:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    3134:	89 2b       	or	r24, r25
    3136:	19 f0       	breq	.+6      	; 0x313e <map_all+0x134>
		{
			checkAndCorrectDirection(2);
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	66 c0       	rjmp	.+204    	; 0x320a <map_all+0x200>
		}
		else if(dir_array[x_coordinate][y_coordinate][1]==1 && is_coordinate_null(x_coordinate+1,y_coordinate))
    313e:	fe 01       	movw	r30, r28
    3140:	ee 0f       	add	r30, r30
    3142:	ff 1f       	adc	r31, r31
    3144:	ce 01       	movw	r24, r28
    3146:	23 e0       	ldi	r18, 0x03	; 3
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	2a 95       	dec	r18
    314e:	e1 f7       	brne	.-8      	; 0x3148 <map_all+0x13e>
    3150:	e8 0f       	add	r30, r24
    3152:	f9 1f       	adc	r31, r25
    3154:	e0 0f       	add	r30, r16
    3156:	f1 1f       	adc	r31, r17
    3158:	83 e0       	ldi	r24, 0x03	; 3
    315a:	ee 0f       	add	r30, r30
    315c:	ff 1f       	adc	r31, r31
    315e:	8a 95       	dec	r24
    3160:	e1 f7       	brne	.-8      	; 0x315a <map_all+0x150>
    3162:	ef 50       	subi	r30, 0x0F	; 15
    3164:	fe 4f       	sbci	r31, 0xFE	; 254
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	51 f4       	brne	.+20     	; 0x3182 <map_all+0x178>
    316e:	ce 01       	movw	r24, r28
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	b8 01       	movw	r22, r16
    3174:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    3178:	89 2b       	or	r24, r25
    317a:	19 f0       	breq	.+6      	; 0x3182 <map_all+0x178>
		{
			checkAndCorrectDirection(1);
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	44 c0       	rjmp	.+136    	; 0x320a <map_all+0x200>
		}
		else if(dir_array[x_coordinate][y_coordinate][2]==1 && is_coordinate_null(x_coordinate,(y_coordinate-1)))
    3182:	fe 01       	movw	r30, r28
    3184:	ee 0f       	add	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	ce 01       	movw	r24, r28
    318a:	a3 e0       	ldi	r26, 0x03	; 3
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	aa 95       	dec	r26
    3192:	e1 f7       	brne	.-8      	; 0x318c <map_all+0x182>
    3194:	e8 0f       	add	r30, r24
    3196:	f9 1f       	adc	r31, r25
    3198:	e0 0f       	add	r30, r16
    319a:	f1 1f       	adc	r31, r17
    319c:	73 e0       	ldi	r23, 0x03	; 3
    319e:	ee 0f       	add	r30, r30
    31a0:	ff 1f       	adc	r31, r31
    31a2:	7a 95       	dec	r23
    31a4:	e1 f7       	brne	.-8      	; 0x319e <map_all+0x194>
    31a6:	ed 50       	subi	r30, 0x0D	; 13
    31a8:	fe 4f       	sbci	r31, 0xFE	; 254
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	59 f4       	brne	.+22     	; 0x31c8 <map_all+0x1be>
    31b2:	b8 01       	movw	r22, r16
    31b4:	61 50       	subi	r22, 0x01	; 1
    31b6:	70 40       	sbci	r23, 0x00	; 0
    31b8:	ce 01       	movw	r24, r28
    31ba:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    31be:	89 2b       	or	r24, r25
    31c0:	19 f0       	breq	.+6      	; 0x31c8 <map_all+0x1be>
		{
			checkAndCorrectDirection(-2);
    31c2:	8e ef       	ldi	r24, 0xFE	; 254
    31c4:	9f ef       	ldi	r25, 0xFF	; 255
    31c6:	21 c0       	rjmp	.+66     	; 0x320a <map_all+0x200>
		}
		else if(dir_array[x_coordinate][y_coordinate][3]==1 && is_coordinate_null(x_coordinate-1,y_coordinate))
    31c8:	fe 01       	movw	r30, r28
    31ca:	ee 0f       	add	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	ce 01       	movw	r24, r28
    31d0:	53 e0       	ldi	r21, 0x03	; 3
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	5a 95       	dec	r21
    31d8:	e1 f7       	brne	.-8      	; 0x31d2 <map_all+0x1c8>
    31da:	e8 0f       	add	r30, r24
    31dc:	f9 1f       	adc	r31, r25
    31de:	e0 0f       	add	r30, r16
    31e0:	f1 1f       	adc	r31, r17
    31e2:	43 e0       	ldi	r20, 0x03	; 3
    31e4:	ee 0f       	add	r30, r30
    31e6:	ff 1f       	adc	r31, r31
    31e8:	4a 95       	dec	r20
    31ea:	e1 f7       	brne	.-8      	; 0x31e4 <map_all+0x1da>
    31ec:	e1 51       	subi	r30, 0x11	; 17
    31ee:	fe 4f       	sbci	r31, 0xFE	; 254
    31f0:	86 81       	ldd	r24, Z+6	; 0x06
    31f2:	97 81       	ldd	r25, Z+7	; 0x07
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	59 f4       	brne	.+22     	; 0x320e <map_all+0x204>
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	b8 01       	movw	r22, r16
    31fe:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    3202:	89 2b       	or	r24, r25
    3204:	21 f0       	breq	.+8      	; 0x320e <map_all+0x204>
		{
			checkAndCorrectDirection(-1);
    3206:	8f ef       	ldi	r24, 0xFF	; 255
    3208:	9f ef       	ldi	r25, 0xFF	; 255
    320a:	0e 94 1c 11 	call	0x2238	; 0x2238 <checkAndCorrectDirection>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    320e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    3210:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    3212:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    3214:	af 9a       	sbi	0x15, 7	; 21
		}
		bot_brake();
		//delay_sec(2);
		irc=0;
		Coordinates_changed_by = 0;
    3216:	10 92 16 01 	sts	0x0116, r1
    321a:	10 92 15 01 	sts	0x0115, r1
		// else
		// {
		// 	special_flag = 1;
		// 	left_junc_check();
		// }
		irc = 0;
    321e:	10 92 0e 01 	sts	0x010E, r1
    3222:	10 92 0d 01 	sts	0x010D, r1
		special_flag = 0;
    3226:	10 92 1c 01 	sts	0x011C, r1
    322a:	10 92 1b 01 	sts	0x011B, r1
		repeat = 0;
    322e:	10 92 1e 01 	sts	0x011E, r1
    3232:	10 92 1d 01 	sts	0x011D, r1
    3236:	1b c0       	rjmp	.+54     	; 0x326e <map_all+0x264>
		while(repeat==0)      //lsr (copied from int main) 
		{
			line_track_new();	
    3238:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			LED&=0b11110000;
    323c:	85 b3       	in	r24, 0x15	; 21
    323e:	80 7f       	andi	r24, 0xF0	; 240
    3240:	85 bb       	out	0x15, r24	; 21
			LED|=sensorbyte;
    3242:	85 b3       	in	r24, 0x15	; 21
    3244:	90 91 fe 00 	lds	r25, 0x00FE
    3248:	89 2b       	or	r24, r25
    324a:	85 bb       	out	0x15, r24	; 21
			if(bit_is_clear(PINA,7))
    324c:	cf 99       	sbic	0x19, 7	; 25
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <map_all+0x24a>
			{
				right_junc_check();
    3250:	0e 94 bf 12 	call	0x257e	; 0x257e <right_junc_check>
			}
			left_junc_check();
    3254:	0e 94 9e 09 	call	0x133c	; 0x133c <left_junc_check>
			frSensorCheck();
    3258:	0e 94 24 0a 	call	0x1448	; 0x1448 <frSensorCheck>
			irc++;
    325c:	80 91 0d 01 	lds	r24, 0x010D
    3260:	90 91 0e 01 	lds	r25, 0x010E
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	90 93 0e 01 	sts	0x010E, r25
    326a:	80 93 0d 01 	sts	0x010D, r24
		// 	left_junc_check();
		// }
		irc = 0;
		special_flag = 0;
		repeat = 0;
		while(repeat==0)      //lsr (copied from int main) 
    326e:	80 91 1d 01 	lds	r24, 0x011D
    3272:	90 91 1e 01 	lds	r25, 0x011E
    3276:	89 2b       	or	r24, r25
    3278:	f9 f2       	breq	.-66     	; 0x3238 <map_all+0x22e>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    327a:	fb bc       	out	0x2b, r15	; 43
    327c:	ea bc       	out	0x2a, r14	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    327e:	f9 bc       	out	0x29, r15	; 41
    3280:	e8 bc       	out	0x28, r14	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    3282:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    3284:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    3286:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    3288:	af 9a       	sbi	0x15, 7	; 21
			irc++;
		}
		set_pwm1a(399);
		set_pwm1b(399);
		bot_brake();
		fill_missed_array();
    328a:	0e 94 8e 0a 	call	0x151c	; 0x151c <fill_missed_array>
		mx = 0;
    328e:	10 92 18 01 	sts	0x0118, r1
    3292:	10 92 17 01 	sts	0x0117, r1
		my = 0;
    3296:	10 92 1a 01 	sts	0x011A, r1
    329a:	10 92 19 01 	sts	0x0119, r1
		coordinates_tobe_reached();
    329e:	0e 94 43 0b 	call	0x1686	; 0x1686 <coordinates_tobe_reached>
		if(mx==0 && my == 0)
    32a2:	80 91 17 01 	lds	r24, 0x0117
    32a6:	90 91 18 01 	lds	r25, 0x0118
    32aa:	89 2b       	or	r24, r25
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <map_all+0x2a6>
    32ae:	b7 ce       	rjmp	.-658    	; 0x301e <map_all+0x14>
    32b0:	80 91 19 01 	lds	r24, 0x0119
    32b4:	90 91 1a 01 	lds	r25, 0x011A
    32b8:	89 2b       	or	r24, r25
    32ba:	09 f0       	breq	.+2      	; 0x32be <map_all+0x2b4>
    32bc:	b0 ce       	rjmp	.-672    	; 0x301e <map_all+0x14>
		{
			break;
		}
	}
}
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	ff 90       	pop	r15
    32c8:	ef 90       	pop	r14
    32ca:	08 95       	ret

000032cc <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__eerd_byte_m32>
    32d4:	80 93 51 05 	sts	0x0551, r24
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__eerd_byte_m32>
    32e0:	80 93 52 05 	sts	0x0552, r24
    32e4:	82 e0       	ldi	r24, 0x02	; 2
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__eerd_byte_m32>
    32ec:	80 93 53 05 	sts	0x0553, r24
    32f0:	83 e0       	ldi	r24, 0x03	; 3
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__eerd_byte_m32>
    32f8:	80 93 54 05 	sts	0x0554, r24
		eeprom_addr++;
	}
}
    32fc:	08 95       	ret

000032fe <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    3302:	20 91 55 05 	lds	r18, 0x0555
    3306:	80 91 11 05 	lds	r24, 0x0511
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	82 0f       	add	r24, r18
    330e:	91 1d       	adc	r25, r1
    3310:	95 95       	asr	r25
    3312:	87 95       	ror	r24
    3314:	80 93 51 05 	sts	0x0551, r24
    3318:	20 91 56 05 	lds	r18, 0x0556
    331c:	80 91 12 05 	lds	r24, 0x0512
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	82 0f       	add	r24, r18
    3324:	91 1d       	adc	r25, r1
    3326:	95 95       	asr	r25
    3328:	87 95       	ror	r24
    332a:	80 93 52 05 	sts	0x0552, r24
    332e:	20 91 57 05 	lds	r18, 0x0557
    3332:	80 91 13 05 	lds	r24, 0x0513
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	82 0f       	add	r24, r18
    333a:	91 1d       	adc	r25, r1
    333c:	95 95       	asr	r25
    333e:	87 95       	ror	r24
    3340:	80 93 53 05 	sts	0x0553, r24
    3344:	20 91 58 05 	lds	r18, 0x0558
    3348:	80 91 14 05 	lds	r24, 0x0514
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	82 0f       	add	r24, r18
    3350:	91 1d       	adc	r25, r1
    3352:	95 95       	asr	r25
    3354:	87 95       	ror	r24
    3356:	80 93 54 05 	sts	0x0554, r24
    335a:	c0 e0       	ldi	r28, 0x00	; 0
    335c:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    335e:	fe 01       	movw	r30, r28
    3360:	ef 5a       	subi	r30, 0xAF	; 175
    3362:	fa 4f       	sbci	r31, 0xFA	; 250
    3364:	ce 01       	movw	r24, r28
    3366:	60 81       	ld	r22, Z
    3368:	0e 94 0d 1c 	call	0x381a	; 0x381a <__eewr_byte_m32>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    336c:	21 96       	adiw	r28, 0x01	; 1
    336e:	c4 30       	cpi	r28, 0x04	; 4
    3370:	d1 05       	cpc	r29, r1
    3372:	a9 f7       	brne	.-22     	; 0x335e <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	08 95       	ret

0000337a <__subsf3>:
    337a:	50 58       	subi	r21, 0x80	; 128

0000337c <__addsf3>:
    337c:	bb 27       	eor	r27, r27
    337e:	aa 27       	eor	r26, r26
    3380:	0e d0       	rcall	.+28     	; 0x339e <__addsf3x>
    3382:	75 c1       	rjmp	.+746    	; 0x366e <__fp_round>
    3384:	66 d1       	rcall	.+716    	; 0x3652 <__fp_pscA>
    3386:	30 f0       	brcs	.+12     	; 0x3394 <__addsf3+0x18>
    3388:	6b d1       	rcall	.+726    	; 0x3660 <__fp_pscB>
    338a:	20 f0       	brcs	.+8      	; 0x3394 <__addsf3+0x18>
    338c:	31 f4       	brne	.+12     	; 0x339a <__addsf3+0x1e>
    338e:	9f 3f       	cpi	r25, 0xFF	; 255
    3390:	11 f4       	brne	.+4      	; 0x3396 <__addsf3+0x1a>
    3392:	1e f4       	brtc	.+6      	; 0x339a <__addsf3+0x1e>
    3394:	5b c1       	rjmp	.+694    	; 0x364c <__fp_nan>
    3396:	0e f4       	brtc	.+2      	; 0x339a <__addsf3+0x1e>
    3398:	e0 95       	com	r30
    339a:	e7 fb       	bst	r30, 7
    339c:	51 c1       	rjmp	.+674    	; 0x3640 <__fp_inf>

0000339e <__addsf3x>:
    339e:	e9 2f       	mov	r30, r25
    33a0:	77 d1       	rcall	.+750    	; 0x3690 <__fp_split3>
    33a2:	80 f3       	brcs	.-32     	; 0x3384 <__addsf3+0x8>
    33a4:	ba 17       	cp	r27, r26
    33a6:	62 07       	cpc	r22, r18
    33a8:	73 07       	cpc	r23, r19
    33aa:	84 07       	cpc	r24, r20
    33ac:	95 07       	cpc	r25, r21
    33ae:	18 f0       	brcs	.+6      	; 0x33b6 <__addsf3x+0x18>
    33b0:	71 f4       	brne	.+28     	; 0x33ce <__addsf3x+0x30>
    33b2:	9e f5       	brtc	.+102    	; 0x341a <__addsf3x+0x7c>
    33b4:	8f c1       	rjmp	.+798    	; 0x36d4 <__fp_zero>
    33b6:	0e f4       	brtc	.+2      	; 0x33ba <__addsf3x+0x1c>
    33b8:	e0 95       	com	r30
    33ba:	0b 2e       	mov	r0, r27
    33bc:	ba 2f       	mov	r27, r26
    33be:	a0 2d       	mov	r26, r0
    33c0:	0b 01       	movw	r0, r22
    33c2:	b9 01       	movw	r22, r18
    33c4:	90 01       	movw	r18, r0
    33c6:	0c 01       	movw	r0, r24
    33c8:	ca 01       	movw	r24, r20
    33ca:	a0 01       	movw	r20, r0
    33cc:	11 24       	eor	r1, r1
    33ce:	ff 27       	eor	r31, r31
    33d0:	59 1b       	sub	r21, r25
    33d2:	99 f0       	breq	.+38     	; 0x33fa <__addsf3x+0x5c>
    33d4:	59 3f       	cpi	r21, 0xF9	; 249
    33d6:	50 f4       	brcc	.+20     	; 0x33ec <__addsf3x+0x4e>
    33d8:	50 3e       	cpi	r21, 0xE0	; 224
    33da:	68 f1       	brcs	.+90     	; 0x3436 <__addsf3x+0x98>
    33dc:	1a 16       	cp	r1, r26
    33de:	f0 40       	sbci	r31, 0x00	; 0
    33e0:	a2 2f       	mov	r26, r18
    33e2:	23 2f       	mov	r18, r19
    33e4:	34 2f       	mov	r19, r20
    33e6:	44 27       	eor	r20, r20
    33e8:	58 5f       	subi	r21, 0xF8	; 248
    33ea:	f3 cf       	rjmp	.-26     	; 0x33d2 <__addsf3x+0x34>
    33ec:	46 95       	lsr	r20
    33ee:	37 95       	ror	r19
    33f0:	27 95       	ror	r18
    33f2:	a7 95       	ror	r26
    33f4:	f0 40       	sbci	r31, 0x00	; 0
    33f6:	53 95       	inc	r21
    33f8:	c9 f7       	brne	.-14     	; 0x33ec <__addsf3x+0x4e>
    33fa:	7e f4       	brtc	.+30     	; 0x341a <__addsf3x+0x7c>
    33fc:	1f 16       	cp	r1, r31
    33fe:	ba 0b       	sbc	r27, r26
    3400:	62 0b       	sbc	r22, r18
    3402:	73 0b       	sbc	r23, r19
    3404:	84 0b       	sbc	r24, r20
    3406:	ba f0       	brmi	.+46     	; 0x3436 <__addsf3x+0x98>
    3408:	91 50       	subi	r25, 0x01	; 1
    340a:	a1 f0       	breq	.+40     	; 0x3434 <__addsf3x+0x96>
    340c:	ff 0f       	add	r31, r31
    340e:	bb 1f       	adc	r27, r27
    3410:	66 1f       	adc	r22, r22
    3412:	77 1f       	adc	r23, r23
    3414:	88 1f       	adc	r24, r24
    3416:	c2 f7       	brpl	.-16     	; 0x3408 <__addsf3x+0x6a>
    3418:	0e c0       	rjmp	.+28     	; 0x3436 <__addsf3x+0x98>
    341a:	ba 0f       	add	r27, r26
    341c:	62 1f       	adc	r22, r18
    341e:	73 1f       	adc	r23, r19
    3420:	84 1f       	adc	r24, r20
    3422:	48 f4       	brcc	.+18     	; 0x3436 <__addsf3x+0x98>
    3424:	87 95       	ror	r24
    3426:	77 95       	ror	r23
    3428:	67 95       	ror	r22
    342a:	b7 95       	ror	r27
    342c:	f7 95       	ror	r31
    342e:	9e 3f       	cpi	r25, 0xFE	; 254
    3430:	08 f0       	brcs	.+2      	; 0x3434 <__addsf3x+0x96>
    3432:	b3 cf       	rjmp	.-154    	; 0x339a <__addsf3+0x1e>
    3434:	93 95       	inc	r25
    3436:	88 0f       	add	r24, r24
    3438:	08 f0       	brcs	.+2      	; 0x343c <__addsf3x+0x9e>
    343a:	99 27       	eor	r25, r25
    343c:	ee 0f       	add	r30, r30
    343e:	97 95       	ror	r25
    3440:	87 95       	ror	r24
    3442:	08 95       	ret

00003444 <__cmpsf2>:
    3444:	d9 d0       	rcall	.+434    	; 0x35f8 <__fp_cmp>
    3446:	08 f4       	brcc	.+2      	; 0x344a <__cmpsf2+0x6>
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	08 95       	ret

0000344c <__divsf3>:
    344c:	0c d0       	rcall	.+24     	; 0x3466 <__divsf3x>
    344e:	0f c1       	rjmp	.+542    	; 0x366e <__fp_round>
    3450:	07 d1       	rcall	.+526    	; 0x3660 <__fp_pscB>
    3452:	40 f0       	brcs	.+16     	; 0x3464 <__divsf3+0x18>
    3454:	fe d0       	rcall	.+508    	; 0x3652 <__fp_pscA>
    3456:	30 f0       	brcs	.+12     	; 0x3464 <__divsf3+0x18>
    3458:	21 f4       	brne	.+8      	; 0x3462 <__divsf3+0x16>
    345a:	5f 3f       	cpi	r21, 0xFF	; 255
    345c:	19 f0       	breq	.+6      	; 0x3464 <__divsf3+0x18>
    345e:	f0 c0       	rjmp	.+480    	; 0x3640 <__fp_inf>
    3460:	51 11       	cpse	r21, r1
    3462:	39 c1       	rjmp	.+626    	; 0x36d6 <__fp_szero>
    3464:	f3 c0       	rjmp	.+486    	; 0x364c <__fp_nan>

00003466 <__divsf3x>:
    3466:	14 d1       	rcall	.+552    	; 0x3690 <__fp_split3>
    3468:	98 f3       	brcs	.-26     	; 0x3450 <__divsf3+0x4>

0000346a <__divsf3_pse>:
    346a:	99 23       	and	r25, r25
    346c:	c9 f3       	breq	.-14     	; 0x3460 <__divsf3+0x14>
    346e:	55 23       	and	r21, r21
    3470:	b1 f3       	breq	.-20     	; 0x345e <__divsf3+0x12>
    3472:	95 1b       	sub	r25, r21
    3474:	55 0b       	sbc	r21, r21
    3476:	bb 27       	eor	r27, r27
    3478:	aa 27       	eor	r26, r26
    347a:	62 17       	cp	r22, r18
    347c:	73 07       	cpc	r23, r19
    347e:	84 07       	cpc	r24, r20
    3480:	38 f0       	brcs	.+14     	; 0x3490 <__divsf3_pse+0x26>
    3482:	9f 5f       	subi	r25, 0xFF	; 255
    3484:	5f 4f       	sbci	r21, 0xFF	; 255
    3486:	22 0f       	add	r18, r18
    3488:	33 1f       	adc	r19, r19
    348a:	44 1f       	adc	r20, r20
    348c:	aa 1f       	adc	r26, r26
    348e:	a9 f3       	breq	.-22     	; 0x347a <__divsf3_pse+0x10>
    3490:	33 d0       	rcall	.+102    	; 0x34f8 <__divsf3_pse+0x8e>
    3492:	0e 2e       	mov	r0, r30
    3494:	3a f0       	brmi	.+14     	; 0x34a4 <__divsf3_pse+0x3a>
    3496:	e0 e8       	ldi	r30, 0x80	; 128
    3498:	30 d0       	rcall	.+96     	; 0x34fa <__divsf3_pse+0x90>
    349a:	91 50       	subi	r25, 0x01	; 1
    349c:	50 40       	sbci	r21, 0x00	; 0
    349e:	e6 95       	lsr	r30
    34a0:	00 1c       	adc	r0, r0
    34a2:	ca f7       	brpl	.-14     	; 0x3496 <__divsf3_pse+0x2c>
    34a4:	29 d0       	rcall	.+82     	; 0x34f8 <__divsf3_pse+0x8e>
    34a6:	fe 2f       	mov	r31, r30
    34a8:	27 d0       	rcall	.+78     	; 0x34f8 <__divsf3_pse+0x8e>
    34aa:	66 0f       	add	r22, r22
    34ac:	77 1f       	adc	r23, r23
    34ae:	88 1f       	adc	r24, r24
    34b0:	bb 1f       	adc	r27, r27
    34b2:	26 17       	cp	r18, r22
    34b4:	37 07       	cpc	r19, r23
    34b6:	48 07       	cpc	r20, r24
    34b8:	ab 07       	cpc	r26, r27
    34ba:	b0 e8       	ldi	r27, 0x80	; 128
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <__divsf3_pse+0x56>
    34be:	bb 0b       	sbc	r27, r27
    34c0:	80 2d       	mov	r24, r0
    34c2:	bf 01       	movw	r22, r30
    34c4:	ff 27       	eor	r31, r31
    34c6:	93 58       	subi	r25, 0x83	; 131
    34c8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ca:	2a f0       	brmi	.+10     	; 0x34d6 <__divsf3_pse+0x6c>
    34cc:	9e 3f       	cpi	r25, 0xFE	; 254
    34ce:	51 05       	cpc	r21, r1
    34d0:	68 f0       	brcs	.+26     	; 0x34ec <__divsf3_pse+0x82>
    34d2:	b6 c0       	rjmp	.+364    	; 0x3640 <__fp_inf>
    34d4:	00 c1       	rjmp	.+512    	; 0x36d6 <__fp_szero>
    34d6:	5f 3f       	cpi	r21, 0xFF	; 255
    34d8:	ec f3       	brlt	.-6      	; 0x34d4 <__divsf3_pse+0x6a>
    34da:	98 3e       	cpi	r25, 0xE8	; 232
    34dc:	dc f3       	brlt	.-10     	; 0x34d4 <__divsf3_pse+0x6a>
    34de:	86 95       	lsr	r24
    34e0:	77 95       	ror	r23
    34e2:	67 95       	ror	r22
    34e4:	b7 95       	ror	r27
    34e6:	f7 95       	ror	r31
    34e8:	9f 5f       	subi	r25, 0xFF	; 255
    34ea:	c9 f7       	brne	.-14     	; 0x34de <__divsf3_pse+0x74>
    34ec:	88 0f       	add	r24, r24
    34ee:	91 1d       	adc	r25, r1
    34f0:	96 95       	lsr	r25
    34f2:	87 95       	ror	r24
    34f4:	97 f9       	bld	r25, 7
    34f6:	08 95       	ret
    34f8:	e1 e0       	ldi	r30, 0x01	; 1
    34fa:	66 0f       	add	r22, r22
    34fc:	77 1f       	adc	r23, r23
    34fe:	88 1f       	adc	r24, r24
    3500:	bb 1f       	adc	r27, r27
    3502:	62 17       	cp	r22, r18
    3504:	73 07       	cpc	r23, r19
    3506:	84 07       	cpc	r24, r20
    3508:	ba 07       	cpc	r27, r26
    350a:	20 f0       	brcs	.+8      	; 0x3514 <__divsf3_pse+0xaa>
    350c:	62 1b       	sub	r22, r18
    350e:	73 0b       	sbc	r23, r19
    3510:	84 0b       	sbc	r24, r20
    3512:	ba 0b       	sbc	r27, r26
    3514:	ee 1f       	adc	r30, r30
    3516:	88 f7       	brcc	.-30     	; 0x34fa <__divsf3_pse+0x90>
    3518:	e0 95       	com	r30
    351a:	08 95       	ret

0000351c <__fixsfsi>:
    351c:	04 d0       	rcall	.+8      	; 0x3526 <__fixunssfsi>
    351e:	68 94       	set
    3520:	b1 11       	cpse	r27, r1
    3522:	d9 c0       	rjmp	.+434    	; 0x36d6 <__fp_szero>
    3524:	08 95       	ret

00003526 <__fixunssfsi>:
    3526:	bc d0       	rcall	.+376    	; 0x36a0 <__fp_splitA>
    3528:	88 f0       	brcs	.+34     	; 0x354c <__fixunssfsi+0x26>
    352a:	9f 57       	subi	r25, 0x7F	; 127
    352c:	90 f0       	brcs	.+36     	; 0x3552 <__fixunssfsi+0x2c>
    352e:	b9 2f       	mov	r27, r25
    3530:	99 27       	eor	r25, r25
    3532:	b7 51       	subi	r27, 0x17	; 23
    3534:	a0 f0       	brcs	.+40     	; 0x355e <__fixunssfsi+0x38>
    3536:	d1 f0       	breq	.+52     	; 0x356c <__fixunssfsi+0x46>
    3538:	66 0f       	add	r22, r22
    353a:	77 1f       	adc	r23, r23
    353c:	88 1f       	adc	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	1a f0       	brmi	.+6      	; 0x3548 <__fixunssfsi+0x22>
    3542:	ba 95       	dec	r27
    3544:	c9 f7       	brne	.-14     	; 0x3538 <__fixunssfsi+0x12>
    3546:	12 c0       	rjmp	.+36     	; 0x356c <__fixunssfsi+0x46>
    3548:	b1 30       	cpi	r27, 0x01	; 1
    354a:	81 f0       	breq	.+32     	; 0x356c <__fixunssfsi+0x46>
    354c:	c3 d0       	rcall	.+390    	; 0x36d4 <__fp_zero>
    354e:	b1 e0       	ldi	r27, 0x01	; 1
    3550:	08 95       	ret
    3552:	c0 c0       	rjmp	.+384    	; 0x36d4 <__fp_zero>
    3554:	67 2f       	mov	r22, r23
    3556:	78 2f       	mov	r23, r24
    3558:	88 27       	eor	r24, r24
    355a:	b8 5f       	subi	r27, 0xF8	; 248
    355c:	39 f0       	breq	.+14     	; 0x356c <__fixunssfsi+0x46>
    355e:	b9 3f       	cpi	r27, 0xF9	; 249
    3560:	cc f3       	brlt	.-14     	; 0x3554 <__fixunssfsi+0x2e>
    3562:	86 95       	lsr	r24
    3564:	77 95       	ror	r23
    3566:	67 95       	ror	r22
    3568:	b3 95       	inc	r27
    356a:	d9 f7       	brne	.-10     	; 0x3562 <__fixunssfsi+0x3c>
    356c:	3e f4       	brtc	.+14     	; 0x357c <__fixunssfsi+0x56>
    356e:	90 95       	com	r25
    3570:	80 95       	com	r24
    3572:	70 95       	com	r23
    3574:	61 95       	neg	r22
    3576:	7f 4f       	sbci	r23, 0xFF	; 255
    3578:	8f 4f       	sbci	r24, 0xFF	; 255
    357a:	9f 4f       	sbci	r25, 0xFF	; 255
    357c:	08 95       	ret

0000357e <__floatunsisf>:
    357e:	e8 94       	clt
    3580:	09 c0       	rjmp	.+18     	; 0x3594 <__floatsisf+0x12>

00003582 <__floatsisf>:
    3582:	97 fb       	bst	r25, 7
    3584:	3e f4       	brtc	.+14     	; 0x3594 <__floatsisf+0x12>
    3586:	90 95       	com	r25
    3588:	80 95       	com	r24
    358a:	70 95       	com	r23
    358c:	61 95       	neg	r22
    358e:	7f 4f       	sbci	r23, 0xFF	; 255
    3590:	8f 4f       	sbci	r24, 0xFF	; 255
    3592:	9f 4f       	sbci	r25, 0xFF	; 255
    3594:	99 23       	and	r25, r25
    3596:	a9 f0       	breq	.+42     	; 0x35c2 <__floatsisf+0x40>
    3598:	f9 2f       	mov	r31, r25
    359a:	96 e9       	ldi	r25, 0x96	; 150
    359c:	bb 27       	eor	r27, r27
    359e:	93 95       	inc	r25
    35a0:	f6 95       	lsr	r31
    35a2:	87 95       	ror	r24
    35a4:	77 95       	ror	r23
    35a6:	67 95       	ror	r22
    35a8:	b7 95       	ror	r27
    35aa:	f1 11       	cpse	r31, r1
    35ac:	f8 cf       	rjmp	.-16     	; 0x359e <__floatsisf+0x1c>
    35ae:	fa f4       	brpl	.+62     	; 0x35ee <__floatsisf+0x6c>
    35b0:	bb 0f       	add	r27, r27
    35b2:	11 f4       	brne	.+4      	; 0x35b8 <__floatsisf+0x36>
    35b4:	60 ff       	sbrs	r22, 0
    35b6:	1b c0       	rjmp	.+54     	; 0x35ee <__floatsisf+0x6c>
    35b8:	6f 5f       	subi	r22, 0xFF	; 255
    35ba:	7f 4f       	sbci	r23, 0xFF	; 255
    35bc:	8f 4f       	sbci	r24, 0xFF	; 255
    35be:	9f 4f       	sbci	r25, 0xFF	; 255
    35c0:	16 c0       	rjmp	.+44     	; 0x35ee <__floatsisf+0x6c>
    35c2:	88 23       	and	r24, r24
    35c4:	11 f0       	breq	.+4      	; 0x35ca <__floatsisf+0x48>
    35c6:	96 e9       	ldi	r25, 0x96	; 150
    35c8:	11 c0       	rjmp	.+34     	; 0x35ec <__floatsisf+0x6a>
    35ca:	77 23       	and	r23, r23
    35cc:	21 f0       	breq	.+8      	; 0x35d6 <__floatsisf+0x54>
    35ce:	9e e8       	ldi	r25, 0x8E	; 142
    35d0:	87 2f       	mov	r24, r23
    35d2:	76 2f       	mov	r23, r22
    35d4:	05 c0       	rjmp	.+10     	; 0x35e0 <__floatsisf+0x5e>
    35d6:	66 23       	and	r22, r22
    35d8:	71 f0       	breq	.+28     	; 0x35f6 <__floatsisf+0x74>
    35da:	96 e8       	ldi	r25, 0x86	; 134
    35dc:	86 2f       	mov	r24, r22
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	2a f0       	brmi	.+10     	; 0x35ee <__floatsisf+0x6c>
    35e4:	9a 95       	dec	r25
    35e6:	66 0f       	add	r22, r22
    35e8:	77 1f       	adc	r23, r23
    35ea:	88 1f       	adc	r24, r24
    35ec:	da f7       	brpl	.-10     	; 0x35e4 <__floatsisf+0x62>
    35ee:	88 0f       	add	r24, r24
    35f0:	96 95       	lsr	r25
    35f2:	87 95       	ror	r24
    35f4:	97 f9       	bld	r25, 7
    35f6:	08 95       	ret

000035f8 <__fp_cmp>:
    35f8:	99 0f       	add	r25, r25
    35fa:	00 08       	sbc	r0, r0
    35fc:	55 0f       	add	r21, r21
    35fe:	aa 0b       	sbc	r26, r26
    3600:	e0 e8       	ldi	r30, 0x80	; 128
    3602:	fe ef       	ldi	r31, 0xFE	; 254
    3604:	16 16       	cp	r1, r22
    3606:	17 06       	cpc	r1, r23
    3608:	e8 07       	cpc	r30, r24
    360a:	f9 07       	cpc	r31, r25
    360c:	c0 f0       	brcs	.+48     	; 0x363e <__fp_cmp+0x46>
    360e:	12 16       	cp	r1, r18
    3610:	13 06       	cpc	r1, r19
    3612:	e4 07       	cpc	r30, r20
    3614:	f5 07       	cpc	r31, r21
    3616:	98 f0       	brcs	.+38     	; 0x363e <__fp_cmp+0x46>
    3618:	62 1b       	sub	r22, r18
    361a:	73 0b       	sbc	r23, r19
    361c:	84 0b       	sbc	r24, r20
    361e:	95 0b       	sbc	r25, r21
    3620:	39 f4       	brne	.+14     	; 0x3630 <__fp_cmp+0x38>
    3622:	0a 26       	eor	r0, r26
    3624:	61 f0       	breq	.+24     	; 0x363e <__fp_cmp+0x46>
    3626:	23 2b       	or	r18, r19
    3628:	24 2b       	or	r18, r20
    362a:	25 2b       	or	r18, r21
    362c:	21 f4       	brne	.+8      	; 0x3636 <__fp_cmp+0x3e>
    362e:	08 95       	ret
    3630:	0a 26       	eor	r0, r26
    3632:	09 f4       	brne	.+2      	; 0x3636 <__fp_cmp+0x3e>
    3634:	a1 40       	sbci	r26, 0x01	; 1
    3636:	a6 95       	lsr	r26
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	81 1d       	adc	r24, r1
    363c:	81 1d       	adc	r24, r1
    363e:	08 95       	ret

00003640 <__fp_inf>:
    3640:	97 f9       	bld	r25, 7
    3642:	9f 67       	ori	r25, 0x7F	; 127
    3644:	80 e8       	ldi	r24, 0x80	; 128
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	08 95       	ret

0000364c <__fp_nan>:
    364c:	9f ef       	ldi	r25, 0xFF	; 255
    364e:	80 ec       	ldi	r24, 0xC0	; 192
    3650:	08 95       	ret

00003652 <__fp_pscA>:
    3652:	00 24       	eor	r0, r0
    3654:	0a 94       	dec	r0
    3656:	16 16       	cp	r1, r22
    3658:	17 06       	cpc	r1, r23
    365a:	18 06       	cpc	r1, r24
    365c:	09 06       	cpc	r0, r25
    365e:	08 95       	ret

00003660 <__fp_pscB>:
    3660:	00 24       	eor	r0, r0
    3662:	0a 94       	dec	r0
    3664:	12 16       	cp	r1, r18
    3666:	13 06       	cpc	r1, r19
    3668:	14 06       	cpc	r1, r20
    366a:	05 06       	cpc	r0, r21
    366c:	08 95       	ret

0000366e <__fp_round>:
    366e:	09 2e       	mov	r0, r25
    3670:	03 94       	inc	r0
    3672:	00 0c       	add	r0, r0
    3674:	11 f4       	brne	.+4      	; 0x367a <__fp_round+0xc>
    3676:	88 23       	and	r24, r24
    3678:	52 f0       	brmi	.+20     	; 0x368e <__fp_round+0x20>
    367a:	bb 0f       	add	r27, r27
    367c:	40 f4       	brcc	.+16     	; 0x368e <__fp_round+0x20>
    367e:	bf 2b       	or	r27, r31
    3680:	11 f4       	brne	.+4      	; 0x3686 <__fp_round+0x18>
    3682:	60 ff       	sbrs	r22, 0
    3684:	04 c0       	rjmp	.+8      	; 0x368e <__fp_round+0x20>
    3686:	6f 5f       	subi	r22, 0xFF	; 255
    3688:	7f 4f       	sbci	r23, 0xFF	; 255
    368a:	8f 4f       	sbci	r24, 0xFF	; 255
    368c:	9f 4f       	sbci	r25, 0xFF	; 255
    368e:	08 95       	ret

00003690 <__fp_split3>:
    3690:	57 fd       	sbrc	r21, 7
    3692:	90 58       	subi	r25, 0x80	; 128
    3694:	44 0f       	add	r20, r20
    3696:	55 1f       	adc	r21, r21
    3698:	59 f0       	breq	.+22     	; 0x36b0 <__fp_splitA+0x10>
    369a:	5f 3f       	cpi	r21, 0xFF	; 255
    369c:	71 f0       	breq	.+28     	; 0x36ba <__fp_splitA+0x1a>
    369e:	47 95       	ror	r20

000036a0 <__fp_splitA>:
    36a0:	88 0f       	add	r24, r24
    36a2:	97 fb       	bst	r25, 7
    36a4:	99 1f       	adc	r25, r25
    36a6:	61 f0       	breq	.+24     	; 0x36c0 <__fp_splitA+0x20>
    36a8:	9f 3f       	cpi	r25, 0xFF	; 255
    36aa:	79 f0       	breq	.+30     	; 0x36ca <__fp_splitA+0x2a>
    36ac:	87 95       	ror	r24
    36ae:	08 95       	ret
    36b0:	12 16       	cp	r1, r18
    36b2:	13 06       	cpc	r1, r19
    36b4:	14 06       	cpc	r1, r20
    36b6:	55 1f       	adc	r21, r21
    36b8:	f2 cf       	rjmp	.-28     	; 0x369e <__fp_split3+0xe>
    36ba:	46 95       	lsr	r20
    36bc:	f1 df       	rcall	.-30     	; 0x36a0 <__fp_splitA>
    36be:	08 c0       	rjmp	.+16     	; 0x36d0 <__fp_splitA+0x30>
    36c0:	16 16       	cp	r1, r22
    36c2:	17 06       	cpc	r1, r23
    36c4:	18 06       	cpc	r1, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	f1 cf       	rjmp	.-30     	; 0x36ac <__fp_splitA+0xc>
    36ca:	86 95       	lsr	r24
    36cc:	71 05       	cpc	r23, r1
    36ce:	61 05       	cpc	r22, r1
    36d0:	08 94       	sec
    36d2:	08 95       	ret

000036d4 <__fp_zero>:
    36d4:	e8 94       	clt

000036d6 <__fp_szero>:
    36d6:	bb 27       	eor	r27, r27
    36d8:	66 27       	eor	r22, r22
    36da:	77 27       	eor	r23, r23
    36dc:	cb 01       	movw	r24, r22
    36de:	97 f9       	bld	r25, 7
    36e0:	08 95       	ret

000036e2 <__gesf2>:
    36e2:	8a df       	rcall	.-236    	; 0x35f8 <__fp_cmp>
    36e4:	08 f4       	brcc	.+2      	; 0x36e8 <__gesf2+0x6>
    36e6:	8f ef       	ldi	r24, 0xFF	; 255
    36e8:	08 95       	ret

000036ea <__mulsf3>:
    36ea:	0b d0       	rcall	.+22     	; 0x3702 <__mulsf3x>
    36ec:	c0 cf       	rjmp	.-128    	; 0x366e <__fp_round>
    36ee:	b1 df       	rcall	.-158    	; 0x3652 <__fp_pscA>
    36f0:	28 f0       	brcs	.+10     	; 0x36fc <__mulsf3+0x12>
    36f2:	b6 df       	rcall	.-148    	; 0x3660 <__fp_pscB>
    36f4:	18 f0       	brcs	.+6      	; 0x36fc <__mulsf3+0x12>
    36f6:	95 23       	and	r25, r21
    36f8:	09 f0       	breq	.+2      	; 0x36fc <__mulsf3+0x12>
    36fa:	a2 cf       	rjmp	.-188    	; 0x3640 <__fp_inf>
    36fc:	a7 cf       	rjmp	.-178    	; 0x364c <__fp_nan>
    36fe:	11 24       	eor	r1, r1
    3700:	ea cf       	rjmp	.-44     	; 0x36d6 <__fp_szero>

00003702 <__mulsf3x>:
    3702:	c6 df       	rcall	.-116    	; 0x3690 <__fp_split3>
    3704:	a0 f3       	brcs	.-24     	; 0x36ee <__mulsf3+0x4>

00003706 <__mulsf3_pse>:
    3706:	95 9f       	mul	r25, r21
    3708:	d1 f3       	breq	.-12     	; 0x36fe <__mulsf3+0x14>
    370a:	95 0f       	add	r25, r21
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	55 1f       	adc	r21, r21
    3710:	62 9f       	mul	r22, r18
    3712:	f0 01       	movw	r30, r0
    3714:	72 9f       	mul	r23, r18
    3716:	bb 27       	eor	r27, r27
    3718:	f0 0d       	add	r31, r0
    371a:	b1 1d       	adc	r27, r1
    371c:	63 9f       	mul	r22, r19
    371e:	aa 27       	eor	r26, r26
    3720:	f0 0d       	add	r31, r0
    3722:	b1 1d       	adc	r27, r1
    3724:	aa 1f       	adc	r26, r26
    3726:	64 9f       	mul	r22, r20
    3728:	66 27       	eor	r22, r22
    372a:	b0 0d       	add	r27, r0
    372c:	a1 1d       	adc	r26, r1
    372e:	66 1f       	adc	r22, r22
    3730:	82 9f       	mul	r24, r18
    3732:	22 27       	eor	r18, r18
    3734:	b0 0d       	add	r27, r0
    3736:	a1 1d       	adc	r26, r1
    3738:	62 1f       	adc	r22, r18
    373a:	73 9f       	mul	r23, r19
    373c:	b0 0d       	add	r27, r0
    373e:	a1 1d       	adc	r26, r1
    3740:	62 1f       	adc	r22, r18
    3742:	83 9f       	mul	r24, r19
    3744:	a0 0d       	add	r26, r0
    3746:	61 1d       	adc	r22, r1
    3748:	22 1f       	adc	r18, r18
    374a:	74 9f       	mul	r23, r20
    374c:	33 27       	eor	r19, r19
    374e:	a0 0d       	add	r26, r0
    3750:	61 1d       	adc	r22, r1
    3752:	23 1f       	adc	r18, r19
    3754:	84 9f       	mul	r24, r20
    3756:	60 0d       	add	r22, r0
    3758:	21 1d       	adc	r18, r1
    375a:	82 2f       	mov	r24, r18
    375c:	76 2f       	mov	r23, r22
    375e:	6a 2f       	mov	r22, r26
    3760:	11 24       	eor	r1, r1
    3762:	9f 57       	subi	r25, 0x7F	; 127
    3764:	50 40       	sbci	r21, 0x00	; 0
    3766:	8a f0       	brmi	.+34     	; 0x378a <__mulsf3_pse+0x84>
    3768:	e1 f0       	breq	.+56     	; 0x37a2 <__mulsf3_pse+0x9c>
    376a:	88 23       	and	r24, r24
    376c:	4a f0       	brmi	.+18     	; 0x3780 <__mulsf3_pse+0x7a>
    376e:	ee 0f       	add	r30, r30
    3770:	ff 1f       	adc	r31, r31
    3772:	bb 1f       	adc	r27, r27
    3774:	66 1f       	adc	r22, r22
    3776:	77 1f       	adc	r23, r23
    3778:	88 1f       	adc	r24, r24
    377a:	91 50       	subi	r25, 0x01	; 1
    377c:	50 40       	sbci	r21, 0x00	; 0
    377e:	a9 f7       	brne	.-22     	; 0x376a <__mulsf3_pse+0x64>
    3780:	9e 3f       	cpi	r25, 0xFE	; 254
    3782:	51 05       	cpc	r21, r1
    3784:	70 f0       	brcs	.+28     	; 0x37a2 <__mulsf3_pse+0x9c>
    3786:	5c cf       	rjmp	.-328    	; 0x3640 <__fp_inf>
    3788:	a6 cf       	rjmp	.-180    	; 0x36d6 <__fp_szero>
    378a:	5f 3f       	cpi	r21, 0xFF	; 255
    378c:	ec f3       	brlt	.-6      	; 0x3788 <__mulsf3_pse+0x82>
    378e:	98 3e       	cpi	r25, 0xE8	; 232
    3790:	dc f3       	brlt	.-10     	; 0x3788 <__mulsf3_pse+0x82>
    3792:	86 95       	lsr	r24
    3794:	77 95       	ror	r23
    3796:	67 95       	ror	r22
    3798:	b7 95       	ror	r27
    379a:	f7 95       	ror	r31
    379c:	e7 95       	ror	r30
    379e:	9f 5f       	subi	r25, 0xFF	; 255
    37a0:	c1 f7       	brne	.-16     	; 0x3792 <__mulsf3_pse+0x8c>
    37a2:	fe 2b       	or	r31, r30
    37a4:	88 0f       	add	r24, r24
    37a6:	91 1d       	adc	r25, r1
    37a8:	96 95       	lsr	r25
    37aa:	87 95       	ror	r24
    37ac:	97 f9       	bld	r25, 7
    37ae:	08 95       	ret

000037b0 <__divmodhi4>:
    37b0:	97 fb       	bst	r25, 7
    37b2:	09 2e       	mov	r0, r25
    37b4:	07 26       	eor	r0, r23
    37b6:	0a d0       	rcall	.+20     	; 0x37cc <__divmodhi4_neg1>
    37b8:	77 fd       	sbrc	r23, 7
    37ba:	04 d0       	rcall	.+8      	; 0x37c4 <__divmodhi4_neg2>
    37bc:	0c d0       	rcall	.+24     	; 0x37d6 <__udivmodhi4>
    37be:	06 d0       	rcall	.+12     	; 0x37cc <__divmodhi4_neg1>
    37c0:	00 20       	and	r0, r0
    37c2:	1a f4       	brpl	.+6      	; 0x37ca <__divmodhi4_exit>

000037c4 <__divmodhi4_neg2>:
    37c4:	70 95       	com	r23
    37c6:	61 95       	neg	r22
    37c8:	7f 4f       	sbci	r23, 0xFF	; 255

000037ca <__divmodhi4_exit>:
    37ca:	08 95       	ret

000037cc <__divmodhi4_neg1>:
    37cc:	f6 f7       	brtc	.-4      	; 0x37ca <__divmodhi4_exit>
    37ce:	90 95       	com	r25
    37d0:	81 95       	neg	r24
    37d2:	9f 4f       	sbci	r25, 0xFF	; 255
    37d4:	08 95       	ret

000037d6 <__udivmodhi4>:
    37d6:	aa 1b       	sub	r26, r26
    37d8:	bb 1b       	sub	r27, r27
    37da:	51 e1       	ldi	r21, 0x11	; 17
    37dc:	07 c0       	rjmp	.+14     	; 0x37ec <__udivmodhi4_ep>

000037de <__udivmodhi4_loop>:
    37de:	aa 1f       	adc	r26, r26
    37e0:	bb 1f       	adc	r27, r27
    37e2:	a6 17       	cp	r26, r22
    37e4:	b7 07       	cpc	r27, r23
    37e6:	10 f0       	brcs	.+4      	; 0x37ec <__udivmodhi4_ep>
    37e8:	a6 1b       	sub	r26, r22
    37ea:	b7 0b       	sbc	r27, r23

000037ec <__udivmodhi4_ep>:
    37ec:	88 1f       	adc	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	5a 95       	dec	r21
    37f2:	a9 f7       	brne	.-22     	; 0x37de <__udivmodhi4_loop>
    37f4:	80 95       	com	r24
    37f6:	90 95       	com	r25
    37f8:	bc 01       	movw	r22, r24
    37fa:	cd 01       	movw	r24, r26
    37fc:	08 95       	ret

000037fe <__eerd_byte_m32>:
    37fe:	e1 99       	sbic	0x1c, 1	; 28
    3800:	fe cf       	rjmp	.-4      	; 0x37fe <__eerd_byte_m32>
    3802:	9f bb       	out	0x1f, r25	; 31
    3804:	8e bb       	out	0x1e, r24	; 30
    3806:	e0 9a       	sbi	0x1c, 0	; 28
    3808:	99 27       	eor	r25, r25
    380a:	8d b3       	in	r24, 0x1d	; 29
    380c:	08 95       	ret

0000380e <__eerd_word_m32>:
    380e:	a8 e1       	ldi	r26, 0x18	; 24
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	42 e0       	ldi	r20, 0x02	; 2
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__eerd_blraw_m32>

0000381a <__eewr_byte_m32>:
    381a:	26 2f       	mov	r18, r22

0000381c <__eewr_r18_m32>:
    381c:	e1 99       	sbic	0x1c, 1	; 28
    381e:	fe cf       	rjmp	.-4      	; 0x381c <__eewr_r18_m32>
    3820:	9f bb       	out	0x1f, r25	; 31
    3822:	8e bb       	out	0x1e, r24	; 30
    3824:	2d bb       	out	0x1d, r18	; 29
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	e2 9a       	sbi	0x1c, 2	; 28
    382c:	e1 9a       	sbi	0x1c, 1	; 28
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	08 95       	ret

00003834 <__eewr_word_m32>:
    3834:	0e 94 0d 1c 	call	0x381a	; 0x381a <__eewr_byte_m32>
    3838:	27 2f       	mov	r18, r23
    383a:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__eewr_r18_m32>

0000383e <__eerd_block_m32>:
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22

00003842 <__eerd_blraw_m32>:
    3842:	fc 01       	movw	r30, r24
    3844:	e1 99       	sbic	0x1c, 1	; 28
    3846:	fe cf       	rjmp	.-4      	; 0x3844 <__eerd_blraw_m32+0x2>
    3848:	06 c0       	rjmp	.+12     	; 0x3856 <__eerd_blraw_m32+0x14>
    384a:	ff bb       	out	0x1f, r31	; 31
    384c:	ee bb       	out	0x1e, r30	; 30
    384e:	e0 9a       	sbi	0x1c, 0	; 28
    3850:	31 96       	adiw	r30, 0x01	; 1
    3852:	0d b2       	in	r0, 0x1d	; 29
    3854:	0d 92       	st	X+, r0
    3856:	41 50       	subi	r20, 0x01	; 1
    3858:	50 40       	sbci	r21, 0x00	; 0
    385a:	b8 f7       	brcc	.-18     	; 0x384a <__eerd_blraw_m32+0x8>
    385c:	08 95       	ret

0000385e <_exit>:
    385e:	f8 94       	cli

00003860 <__stop_program>:
    3860:	ff cf       	rjmp	.-2      	; 0x3860 <__stop_program>
