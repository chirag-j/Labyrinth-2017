
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  000030bc  00003150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045f  008000d2  008000d2  000031c2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000031c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006b1  00000000  00000000  000031e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c37  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f3  00000000  00000000  000054ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000235c  00000000  00000000  000058bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  00007c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000683  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c12  00000000  00000000  0000870f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00009321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <main>
      8a:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     18e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 09 17 	call	0x2e12	; 0x2e12 <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     286:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 db 16 	call	0x2db6	; 0x2db6 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 d2 00 	sts	0x00D2, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 d2 00 	lds	r24, 0x00D2
     300:	82 2b       	or	r24, r18
     302:	80 93 d2 00 	sts	0x00D2, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 e1 04 	sts	0x04E1, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 e2 04 	sts	0x04E2, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 e3 04 	sts	0x04E3, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 e4 04 	sts	0x04E4, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 25 05 	sts	0x0525, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 26 05 	sts	0x0526, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 27 05 	sts	0x0527, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 28 05 	sts	0x0528, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <lcd_init+0x30>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <lcd_init+0x3c>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_init+0x42>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 20 18 	call	0x3040	; 0x3040 <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 20 18 	call	0x3040	; 0x3040 <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
int mx=0, my=0;
int path_array[15][2];
int special_flag = 0, repeat=0;
int right;
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 d2 00 	lds	r24, 0x00D2
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 d4 00 	sts	0x00D4, r25
     778:	80 93 d3 00 	sts	0x00D3, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 df 00 	lds	r24, 0x00DF
     780:	90 91 e0 00 	lds	r25, 0x00E0
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 d4 00 	sts	0x00D4, r1
     78c:	10 92 d3 00 	sts	0x00D3, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 d4 00 	sts	0x00D4, r25
     7a0:	80 93 d3 00 	sts	0x00D3, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 d3 00 	lds	r22, 0x00D3
     7a8:	70 91 d4 00 	lds	r23, 0x00D4
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 09 17 	call	0x2e12	; 0x2e12 <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 29 05 	lds	r22, 0x0529
     7c0:	70 91 2a 05 	lds	r23, 0x052A
     7c4:	80 91 2b 05 	lds	r24, 0x052B
     7c8:	90 91 2c 05 	lds	r25, 0x052C
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 2d 05 	sts	0x052D, r22
     7dc:	70 93 2e 05 	sts	0x052E, r23
     7e0:	80 93 2f 05 	sts	0x052F, r24
     7e4:	90 93 30 05 	sts	0x0530, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 c2 00 	lds	r18, 0x00C2
     7f0:	30 91 c3 00 	lds	r19, 0x00C3
     7f4:	40 91 c4 00 	lds	r20, 0x00C4
     7f8:	50 91 c5 00 	lds	r21, 0x00C5
     7fc:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 c6 00 	lds	r18, 0x00C6
     80c:	30 91 c7 00 	lds	r19, 0x00C7
     810:	40 91 c8 00 	lds	r20, 0x00C8
     814:	50 91 c9 00 	lds	r21, 0x00C9
     818:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 f3 00 	sts	0x00F3, r22
     830:	70 93 f4 00 	sts	0x00F4, r23
     834:	80 93 f5 00 	sts	0x00F5, r24
     838:	90 93 f6 00 	sts	0x00F6, r25
	prev_error = mpos ;
     83c:	a0 92 29 05 	sts	0x0529, r10
     840:	b0 92 2a 05 	sts	0x052A, r11
     844:	c0 92 2b 05 	sts	0x052B, r12
     848:	d0 92 2c 05 	sts	0x052C, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 c0 00 	lds	r22, 0x00C0
     850:	70 91 c1 00 	lds	r23, 0x00C1
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__subsf3>
     868:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__addsf3>
     87c:	0e 94 d6 16 	call	0x2dac	; 0x2dac <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 ca 00 	sts	0x00CA, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
     92a:	08 95       	ret

0000092c <left_count>:
	delay_millisec(50);
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     92c:	cc 99       	sbic	0x19, 4	; 25
     92e:	16 c0       	rjmp	.+44     	; 0x95c <left_count+0x30>
	{
		if(l==0)
     930:	80 91 d7 00 	lds	r24, 0x00D7
     934:	90 91 d8 00 	lds	r25, 0x00D8
     938:	89 2b       	or	r24, r25
     93a:	a1 f4       	brne	.+40     	; 0x964 <left_count+0x38>
		{
			lcount++;
     93c:	80 91 d9 00 	lds	r24, 0x00D9
     940:	90 91 da 00 	lds	r25, 0x00DA
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	90 93 da 00 	sts	0x00DA, r25
     94a:	80 93 d9 00 	sts	0x00D9, r24
			l = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 d8 00 	sts	0x00D8, r25
     956:	80 93 d7 00 	sts	0x00D7, r24
     95a:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     95c:	10 92 d8 00 	sts	0x00D8, r1
     960:	10 92 d7 00 	sts	0x00D7, r1
     964:	08 95       	ret

00000966 <special_case_check>:
	bot_brake();
	delay_sec(2);
}
void special_case_check()         ////called inside left_junc_check
{
	if(bit_is_clear(PINA,5) || flag1 == 1)
     966:	cd 9b       	sbis	0x19, 5	; 25
     968:	06 c0       	rjmp	.+12     	; 0x976 <special_case_check+0x10>
     96a:	80 91 df 00 	lds	r24, 0x00DF
     96e:	90 91 e0 00 	lds	r25, 0x00E0
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	79 f5       	brne	.+94     	; 0x9d4 <special_case_check+0x6e>
	{
		flag1 = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 e0 00 	sts	0x00E0, r25
     97e:	80 93 df 00 	sts	0x00DF, r24
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
     982:	cc 99       	sbic	0x19, 4	; 25
     984:	27 c0       	rjmp	.+78     	; 0x9d4 <special_case_check+0x6e>
     986:	86 9b       	sbis	0x10, 6	; 16
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <special_case_check+0x4c>
     98a:	ce 9b       	sbis	0x19, 6	; 25
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <special_case_check+0x4c>
     98e:	08 95       	ret
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     990:	3b bd       	out	0x2b, r19	; 43
     992:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     994:	39 bd       	out	0x29, r19	; 41
     996:	28 bd       	out	0x28, r18	; 40
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     998:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     99a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     99c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     99e:	af 98       	cbi	0x15, 7	; 21
			{
				set_pwm1a(240);
				set_pwm1b(240);
				bot_forward();
				flag1 = 0;
				if(bit_is_clear(PIND, 7))
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	87 99       	sbic	0x10, 7	; 16
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <special_case_check+0x54>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9a8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9aa:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9ac:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9ae:	af 9a       	sbi	0x15, 7	; 21
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <special_case_check+0x54>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9b6:	20 ef       	ldi	r18, 0xF0	; 240
     9b8:	30 e0       	ldi	r19, 0x00	; 0
	{
		flag1 = 1;
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
		{
			while(bit_is_clear(PINA,4) && bit_is_set(PIND, 7)) 
     9ba:	cc 9b       	sbis	0x19, 4	; 25
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <special_case_check+0x62>
     9be:	90 93 e0 00 	sts	0x00E0, r25
     9c2:	80 93 df 00 	sts	0x00DF, r24
     9c6:	08 95       	ret
     9c8:	87 99       	sbic	0x10, 7	; 16
     9ca:	e2 cf       	rjmp	.-60     	; 0x990 <special_case_check+0x2a>
     9cc:	90 93 e0 00 	sts	0x00E0, r25
     9d0:	80 93 df 00 	sts	0x00DF, r24
     9d4:	08 95       	ret

000009d6 <line_track_new>:
	
}

void line_track_new()
{
	check_sensors();
     9d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9da:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9dc:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9de:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9e0:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     9e2:	ce 9b       	sbis	0x19, 6	; 25
     9e4:	0b c0       	rjmp	.+22     	; 0x9fc <line_track_new+0x26>
     9e6:	86 99       	sbic	0x10, 6	; 16
     9e8:	09 c0       	rjmp	.+18     	; 0x9fc <line_track_new+0x26>
	{
		set_pwm1a(opt-30);
     9ea:	80 91 c0 00 	lds	r24, 0x00C0
     9ee:	90 91 c1 00 	lds	r25, 0x00C1
     9f2:	4e 97       	sbiw	r24, 0x1e	; 30
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9f4:	9b bd       	out	0x2b, r25	; 43
     9f6:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt+30);
     9f8:	cc 96       	adiw	r24, 0x3c	; 60
     9fa:	1e c0       	rjmp	.+60     	; 0xa38 <line_track_new+0x62>

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     9fc:	86 9b       	sbis	0x10, 6	; 16
     9fe:	0b c0       	rjmp	.+22     	; 0xa16 <line_track_new+0x40>
     a00:	ce 99       	sbic	0x19, 6	; 25
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <line_track_new+0x40>
	{
		set_pwm1a(opt+30);
     a04:	80 91 c0 00 	lds	r24, 0x00C0
     a08:	90 91 c1 00 	lds	r25, 0x00C1
     a0c:	4e 96       	adiw	r24, 0x1e	; 30
     a0e:	9b bd       	out	0x2b, r25	; 43
     a10:	8a bd       	out	0x2a, r24	; 42
		set_pwm1b(opt-30);
     a12:	cc 97       	sbiw	r24, 0x3c	; 60
     a14:	11 c0       	rjmp	.+34     	; 0xa38 <line_track_new+0x62>
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     a16:	86 9b       	sbis	0x10, 6	; 16
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <line_track_new+0x4e>
     a1a:	ce 9b       	sbis	0x19, 6	; 25
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <line_track_new+0x4e>
	{
		line_track();
     a1e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     a22:	0c c0       	rjmp	.+24     	; 0xa3c <line_track_new+0x66>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     a24:	86 99       	sbic	0x10, 6	; 16
     a26:	0a c0       	rjmp	.+20     	; 0xa3c <line_track_new+0x66>
     a28:	ce 99       	sbic	0x19, 6	; 25
     a2a:	08 c0       	rjmp	.+16     	; 0xa3c <line_track_new+0x66>
	{
		set_pwm1a(opt);
     a2c:	80 91 c0 00 	lds	r24, 0x00C0
     a30:	90 91 c1 00 	lds	r25, 0x00C1
     a34:	9b bd       	out	0x2b, r25	; 43
     a36:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a38:	99 bd       	out	0x29, r25	; 41
     a3a:	88 bd       	out	0x28, r24	; 40
		set_pwm1b(opt);
	}
		delay_microsec(10);
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     a44:	08 95       	ret

00000a46 <end_zone_uturn>:
	
}

void end_zone_uturn()
{
	turn = 'u';
     a46:	85 e7       	ldi	r24, 0x75	; 117
     a48:	80 93 ca 00 	sts	0x00CA, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a4c:	24 e0       	ldi	r18, 0x04	; 4
     a4e:	31 e0       	ldi	r19, 0x01	; 1
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	08 c0       	rjmp	.+16     	; 0xa66 <end_zone_uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a56:	3b bd       	out	0x2b, r19	; 43
     a58:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a5a:	99 bd       	out	0x29, r25	; 41
     a5c:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a5e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a60:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a62:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a64:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_clear(PINA,5))
     a66:	cd 9b       	sbis	0x19, 5	; 25
     a68:	f6 cf       	rjmp	.-20     	; 0xa56 <end_zone_uturn+0x10>
	{
		set_pwm1a(260);
		set_pwm1b(280);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,6) || bit_is_clear(PIND,6));
     a6a:	ce 9b       	sbis	0x19, 6	; 25
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <end_zone_uturn+0x24>
     a6e:	86 9b       	sbis	0x10, 6	; 16
     a70:	fc cf       	rjmp	.-8      	; 0xa6a <end_zone_uturn+0x24>
	while(bit_is_set(PINA,5));
     a72:	cd 99       	sbic	0x19, 5	; 25
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <end_zone_uturn+0x2c>
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <end_zone_uturn+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a78:	9b bd       	out	0x2b, r25	; 43
     a7a:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a7c:	99 bd       	out	0x29, r25	; 41
     a7e:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a80:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a82:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a84:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a86:	af 98       	cbi	0x15, 7	; 21
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <end_zone_uturn+0x48>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a8a:	82 ed       	ldi	r24, 0xD2	; 210
     a8c:	90 e0       	ldi	r25, 0x00	; 0
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a8e:	ce 9b       	sbis	0x19, 6	; 25
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <end_zone_uturn+0x56>
     a92:	86 99       	sbic	0x10, 6	; 16
     a94:	f1 cf       	rjmp	.-30     	; 0xa78 <end_zone_uturn+0x32>
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <end_zone_uturn+0x56>
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     a98:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	{
		set_pwm1a(210);
		set_pwm1b(210);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     a9c:	cc 9b       	sbis	0x19, 4	; 25
     a9e:	fc cf       	rjmp	.-8      	; 0xa98 <end_zone_uturn+0x52>
     aa0:	87 9b       	sbis	0x10, 7	; 16
     aa2:	fa cf       	rjmp	.-12     	; 0xa98 <end_zone_uturn+0x52>
     aa4:	8f e8       	ldi	r24, 0x8F	; 143
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	9b bd       	out	0x2b, r25	; 43
     aaa:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     aac:	99 bd       	out	0x29, r25	; 41
     aae:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     ab0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     ab2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ab4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     ab6:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_sec(2);
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
}
     ac0:	08 95       	ret

00000ac2 <turn_left>:
	delay_millisec(50);
}

void turn_left()
{	
	turn = 'l';
     ac2:	8c e6       	ldi	r24, 0x6C	; 108
     ac4:	80 93 ca 00 	sts	0x00CA, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ac8:	85 ef       	ldi	r24, 0xF5	; 245
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	08 c0       	rjmp	.+16     	; 0xade <turn_left+0x1c>
     ace:	9b bd       	out	0x2b, r25	; 43
     ad0:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ad2:	99 bd       	out	0x29, r25	; 41
     ad4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     ad6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     ad8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ada:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     adc:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_set(PINA,5))
     ade:	cd 99       	sbic	0x19, 5	; 25
     ae0:	f6 cf       	rjmp	.-20     	; 0xace <turn_left+0xc>
     ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <turn_left+0x34>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ae4:	9b bd       	out	0x2b, r25	; 43
     ae6:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ae8:	99 bd       	out	0x29, r25	; 41
     aea:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     aec:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     aee:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     af0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     af2:	af 98       	cbi	0x15, 7	; 21
     af4:	02 c0       	rjmp	.+4      	; 0xafa <turn_left+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     af6:	80 ef       	ldi	r24, 0xF0	; 240
     af8:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     afa:	ce 9b       	sbis	0x19, 6	; 25
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <turn_left+0x46>
     afe:	86 99       	sbic	0x10, 6	; 16
     b00:	f1 cf       	rjmp	.-30     	; 0xae4 <turn_left+0x22>
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <turn_left+0x46>
		set_pwm1b(240);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b04:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	{
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b08:	cc 9b       	sbis	0x19, 4	; 25
     b0a:	fc cf       	rjmp	.-8      	; 0xb04 <turn_left+0x42>
     b0c:	87 9b       	sbis	0x10, 7	; 16
     b0e:	fa cf       	rjmp	.-12     	; 0xb04 <turn_left+0x42>
     b10:	8f e8       	ldi	r24, 0x8F	; 143
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	9b bd       	out	0x2b, r25	; 43
     b16:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b18:	99 bd       	out	0x29, r25	; 41
     b1a:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b1c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b1e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b20:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b22:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b24:	82 e3       	ldi	r24, 0x32	; 50
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     b2c:	08 95       	ret

00000b2e <turn_right>:
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
void turn_right()
{	
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	turn = 'r';
     b32:	82 e7       	ldi	r24, 0x72	; 114
     b34:	80 93 ca 00 	sts	0x00CA, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b38:	c5 ef       	ldi	r28, 0xF5	; 245
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
     b3c:	0a c0       	rjmp	.+20     	; 0xb52 <turn_right+0x24>
     b3e:	db bd       	out	0x2b, r29	; 43
     b40:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b42:	d9 bd       	out	0x29, r29	; 41
     b44:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     b46:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     b48:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     b4a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b4c:	af 9a       	sbi	0x15, 7	; 21
	while(bit_is_set(PINA,7))
	{
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_right();
		left_count();
     b4e:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_set(PINA,7))
     b52:	cf 99       	sbic	0x19, 7	; 25
     b54:	f4 cf       	rjmp	.-24     	; 0xb3e <turn_right+0x10>
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <turn_right+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b58:	db bd       	out	0x2b, r29	; 43
     b5a:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b5c:	d9 bd       	out	0x29, r29	; 41
     b5e:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     b60:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     b62:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     b64:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     b66:	af 9a       	sbi	0x15, 7	; 21
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
	{
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_right();
		left_count();
     b68:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <turn_right+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     b6e:	c0 ef       	ldi	r28, 0xF0	; 240
     b70:	d0 e0       	ldi	r29, 0x00	; 0
		set_pwm1a(245);
		set_pwm1b(245);
		bot_spot_right();
		left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     b72:	ce 9b       	sbis	0x19, 6	; 25
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <turn_right+0x52>
     b76:	86 99       	sbic	0x10, 6	; 16
     b78:	ef cf       	rjmp	.-34     	; 0xb58 <turn_right+0x2a>
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <turn_right+0x52>
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     b7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		set_pwm1a(240);
		set_pwm1b(240);
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     b80:	cc 9b       	sbis	0x19, 4	; 25
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <turn_right+0x4e>
     b84:	87 9b       	sbis	0x10, 7	; 16
     b86:	fa cf       	rjmp	.-12     	; 0xb7c <turn_right+0x4e>
     b88:	8f e8       	ldi	r24, 0x8F	; 143
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	9b bd       	out	0x2b, r25	; 43
     b8e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b90:	99 bd       	out	0x29, r25	; 41
     b92:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b94:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b96:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b98:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b9a:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_millisec(50);
     b9c:	82 e3       	ldi	r24, 0x32	; 50
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <sense_of_directon>:
}


void sense_of_directon(void)
{
	if(turn == 'r')	
     baa:	80 91 ca 00 	lds	r24, 0x00CA
     bae:	82 37       	cpi	r24, 0x72	; 114
     bb0:	d1 f4       	brne	.+52     	; 0xbe6 <sense_of_directon+0x3c>
	{
		switch(dir)
     bb2:	80 91 cb 00 	lds	r24, 0x00CB
     bb6:	90 91 cc 00 	lds	r25, 0x00CC
     bba:	2f ef       	ldi	r18, 0xFF	; 255
     bbc:	8f 3f       	cpi	r24, 0xFF	; 255
     bbe:	92 07       	cpc	r25, r18
     bc0:	59 f1       	breq	.+86     	; 0xc18 <sense_of_directon+0x6e>
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	8f 3f       	cpi	r24, 0xFF	; 255
     bc6:	92 07       	cpc	r25, r18
     bc8:	09 f0       	breq	.+2      	; 0xbcc <sense_of_directon+0x22>
     bca:	2c f4       	brge	.+10     	; 0xbd6 <sense_of_directon+0x2c>
     bcc:	8e 5f       	subi	r24, 0xFE	; 254
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <sense_of_directon+0x2a>
     bd2:	51 c0       	rjmp	.+162    	; 0xc76 <sense_of_directon+0xcc>
     bd4:	3d c0       	rjmp	.+122    	; 0xc50 <sense_of_directon+0xa6>
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <sense_of_directon+0x34>
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <sense_of_directon+0xb2>
     bde:	02 97       	sbiw	r24, 0x02	; 2
     be0:	09 f0       	breq	.+2      	; 0xbe4 <sense_of_directon+0x3a>
     be2:	49 c0       	rjmp	.+146    	; 0xc76 <sense_of_directon+0xcc>
     be4:	38 c0       	rjmp	.+112    	; 0xc56 <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     be6:	8c 36       	cpi	r24, 0x6C	; 108
     be8:	d1 f4       	brne	.+52     	; 0xc1e <sense_of_directon+0x74>
	{
		switch(dir)
     bea:	80 91 cb 00 	lds	r24, 0x00CB
     bee:	90 91 cc 00 	lds	r25, 0x00CC
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	8f 3f       	cpi	r24, 0xFF	; 255
     bf6:	92 07       	cpc	r25, r18
     bf8:	89 f1       	breq	.+98     	; 0xc5c <sense_of_directon+0xb2>
     bfa:	2f ef       	ldi	r18, 0xFF	; 255
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	92 07       	cpc	r25, r18
     c00:	09 f0       	breq	.+2      	; 0xc04 <sense_of_directon+0x5a>
     c02:	24 f4       	brge	.+8      	; 0xc0c <sense_of_directon+0x62>
     c04:	8e 5f       	subi	r24, 0xFE	; 254
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	b1 f5       	brne	.+108    	; 0xc76 <sense_of_directon+0xcc>
     c0a:	25 c0       	rjmp	.+74     	; 0xc56 <sense_of_directon+0xac>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	91 05       	cpc	r25, r1
     c10:	19 f0       	breq	.+6      	; 0xc18 <sense_of_directon+0x6e>
     c12:	02 97       	sbiw	r24, 0x02	; 2
     c14:	81 f5       	brne	.+96     	; 0xc76 <sense_of_directon+0xcc>
     c16:	1c c0       	rjmp	.+56     	; 0xc50 <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	21 c0       	rjmp	.+66     	; 0xc60 <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     c1e:	85 37       	cpi	r24, 0x75	; 117
     c20:	51 f5       	brne	.+84     	; 0xc76 <sense_of_directon+0xcc>
	{
		switch(dir)
     c22:	80 91 cb 00 	lds	r24, 0x00CB
     c26:	90 91 cc 00 	lds	r25, 0x00CC
     c2a:	2f ef       	ldi	r18, 0xFF	; 255
     c2c:	8f 3f       	cpi	r24, 0xFF	; 255
     c2e:	92 07       	cpc	r25, r18
     c30:	91 f0       	breq	.+36     	; 0xc56 <sense_of_directon+0xac>
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	8f 3f       	cpi	r24, 0xFF	; 255
     c36:	92 07       	cpc	r25, r18
     c38:	09 f0       	breq	.+2      	; 0xc3c <sense_of_directon+0x92>
     c3a:	24 f4       	brge	.+8      	; 0xc44 <sense_of_directon+0x9a>
     c3c:	8e 5f       	subi	r24, 0xFE	; 254
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	d1 f4       	brne	.+52     	; 0xc76 <sense_of_directon+0xcc>
     c42:	13 c0       	rjmp	.+38     	; 0xc6a <sense_of_directon+0xc0>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	19 f0       	breq	.+6      	; 0xc50 <sense_of_directon+0xa6>
     c4a:	02 97       	sbiw	r24, 0x02	; 2
     c4c:	a1 f4       	brne	.+40     	; 0xc76 <sense_of_directon+0xcc>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     c5c:	8e ef       	ldi	r24, 0xFE	; 254
     c5e:	9f ef       	ldi	r25, 0xFF	; 255
     c60:	90 93 cc 00 	sts	0x00CC, r25
     c64:	80 93 cb 00 	sts	0x00CB, r24
     c68:	08 95       	ret
			case -2: dir = +2; break;	
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	90 93 cc 00 	sts	0x00CC, r25
     c72:	80 93 cb 00 	sts	0x00CB, r24
     c76:	08 95       	ret

00000c78 <is_coordinate_null>:
		repeat = 1;
	}	
}

int is_coordinate_null(int x,int y)
{
     c78:	38 2f       	mov	r19, r24
     c7a:	49 2f       	mov	r20, r25
	if(dir_array[x][y][0]==0 && dir_array[x][y][1]==0 && dir_array[x][y][2]==0 && dir_array[x][y][3]==0)
     c7c:	fc 01       	movw	r30, r24
     c7e:	b3 e0       	ldi	r27, 0x03	; 3
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ba 95       	dec	r27
     c86:	e1 f7       	brne	.-8      	; 0xc80 <is_coordinate_null+0x8>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	e8 0f       	add	r30, r24
     c8e:	f9 1f       	adc	r31, r25
     c90:	e6 0f       	add	r30, r22
     c92:	f7 1f       	adc	r31, r23
     c94:	53 e0       	ldi	r21, 0x03	; 3
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	5a 95       	dec	r21
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <is_coordinate_null+0x1e>
     c9e:	e1 54       	subi	r30, 0x41	; 65
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	80 81       	ld	r24, Z
     ca4:	91 81       	ldd	r25, Z+1	; 0x01
     ca6:	89 2b       	or	r24, r25
     ca8:	09 f0       	breq	.+2      	; 0xcac <is_coordinate_null+0x34>
     caa:	51 c0       	rjmp	.+162    	; 0xd4e <is_coordinate_null+0xd6>
     cac:	83 2f       	mov	r24, r19
     cae:	94 2f       	mov	r25, r20
     cb0:	fc 01       	movw	r30, r24
     cb2:	23 e0       	ldi	r18, 0x03	; 3
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	2a 95       	dec	r18
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <is_coordinate_null+0x3c>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	e8 0f       	add	r30, r24
     cc2:	f9 1f       	adc	r31, r25
     cc4:	e6 0f       	add	r30, r22
     cc6:	f7 1f       	adc	r31, r23
     cc8:	a3 e0       	ldi	r26, 0x03	; 3
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	aa 95       	dec	r26
     cd0:	e1 f7       	brne	.-8      	; 0xcca <is_coordinate_null+0x52>
     cd2:	ef 53       	subi	r30, 0x3F	; 63
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	89 2b       	or	r24, r25
     cdc:	c1 f5       	brne	.+112    	; 0xd4e <is_coordinate_null+0xd6>
     cde:	83 2f       	mov	r24, r19
     ce0:	94 2f       	mov	r25, r20
     ce2:	fc 01       	movw	r30, r24
     ce4:	53 e0       	ldi	r21, 0x03	; 3
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	5a 95       	dec	r21
     cec:	e1 f7       	brne	.-8      	; 0xce6 <is_coordinate_null+0x6e>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	e8 0f       	add	r30, r24
     cf4:	f9 1f       	adc	r31, r25
     cf6:	e6 0f       	add	r30, r22
     cf8:	f7 1f       	adc	r31, r23
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	8a 95       	dec	r24
     d02:	e1 f7       	brne	.-8      	; 0xcfc <is_coordinate_null+0x84>
     d04:	ed 53       	subi	r30, 0x3D	; 61
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	89 2b       	or	r24, r25
     d0e:	f9 f4       	brne	.+62     	; 0xd4e <is_coordinate_null+0xd6>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	83 2f       	mov	r24, r19
     d14:	94 2f       	mov	r25, r20
     d16:	fc 01       	movw	r30, r24
     d18:	b3 e0       	ldi	r27, 0x03	; 3
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	ba 95       	dec	r27
     d20:	e1 f7       	brne	.-8      	; 0xd1a <is_coordinate_null+0xa2>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	e8 0f       	add	r30, r24
     d28:	f9 1f       	adc	r31, r25
     d2a:	e6 0f       	add	r30, r22
     d2c:	f7 1f       	adc	r31, r23
     d2e:	53 e0       	ldi	r21, 0x03	; 3
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	5a 95       	dec	r21
     d36:	e1 f7       	brne	.-8      	; 0xd30 <is_coordinate_null+0xb8>
     d38:	e1 54       	subi	r30, 0x41	; 65
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	86 81       	ldd	r24, Z+6	; 0x06
     d3e:	97 81       	ldd	r25, Z+7	; 0x07
     d40:	89 2b       	or	r24, r25
     d42:	09 f0       	breq	.+2      	; 0xd46 <is_coordinate_null+0xce>
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	28 27       	eor	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <is_coordinate_null+0xda>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     d52:	c9 01       	movw	r24, r18
     d54:	08 95       	ret

00000d56 <update_array>:
	}
	
}

void update_array(int y,int x,int ny,int nx)
{
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	7c 01       	movw	r14, r24
     d70:	6b 01       	movw	r12, r22
     d72:	5a 01       	movw	r10, r20
     d74:	49 01       	movw	r8, r18
	////checking if the path is already traversed before i.e(if all 4 values is zero)
	if(is_coordinate_null(x_coordinate,y_coordinate))
     d76:	10 91 cd 00 	lds	r17, 0x00CD
     d7a:	00 91 ce 00 	lds	r16, 0x00CE
     d7e:	c0 91 cf 00 	lds	r28, 0x00CF
     d82:	d0 91 d0 00 	lds	r29, 0x00D0
     d86:	81 2f       	mov	r24, r17
     d88:	90 2f       	mov	r25, r16
     d8a:	be 01       	movw	r22, r28
     d8c:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
     d90:	89 2b       	or	r24, r25
     d92:	09 f4       	brne	.+2      	; 0xd96 <update_array+0x40>
     d94:	8e c1       	rjmp	.+796    	; 0x10b2 <update_array+0x35c>
	{	
		repeat = 0;
     d96:	10 92 f2 00 	sts	0x00F2, r1
     d9a:	10 92 f1 00 	sts	0x00F1, r1
		switch(dir)
     d9e:	80 91 cb 00 	lds	r24, 0x00CB
     da2:	90 91 cc 00 	lds	r25, 0x00CC
     da6:	2f ef       	ldi	r18, 0xFF	; 255
     da8:	8f 3f       	cpi	r24, 0xFF	; 255
     daa:	92 07       	cpc	r25, r18
     dac:	09 f4       	brne	.+2      	; 0xdb0 <update_array+0x5a>
     dae:	24 c1       	rjmp	.+584    	; 0xff8 <update_array+0x2a2>
     db0:	2f ef       	ldi	r18, 0xFF	; 255
     db2:	8f 3f       	cpi	r24, 0xFF	; 255
     db4:	92 07       	cpc	r25, r18
     db6:	09 f0       	breq	.+2      	; 0xdba <update_array+0x64>
     db8:	2c f4       	brge	.+10     	; 0xdc4 <update_array+0x6e>
     dba:	8e 5f       	subi	r24, 0xFE	; 254
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <update_array+0x6c>
     dc0:	7e c1       	rjmp	.+764    	; 0x10be <update_array+0x368>
     dc2:	bf c0       	rjmp	.+382    	; 0xf42 <update_array+0x1ec>
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <update_array+0x76>
     dca:	60 c0       	rjmp	.+192    	; 0xe8c <update_array+0x136>
     dcc:	02 97       	sbiw	r24, 0x02	; 2
     dce:	09 f0       	breq	.+2      	; 0xdd2 <update_array+0x7c>
     dd0:	76 c1       	rjmp	.+748    	; 0x10be <update_array+0x368>
		{
			case 2:
			dir_array[x_coordinate][y_coordinate][0] = y;
     dd2:	81 2f       	mov	r24, r17
     dd4:	90 2f       	mov	r25, r16
     dd6:	fc 01       	movw	r30, r24
     dd8:	33 e0       	ldi	r19, 0x03	; 3
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	3a 95       	dec	r19
     de0:	e1 f7       	brne	.-8      	; 0xdda <update_array+0x84>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	e8 0f       	add	r30, r24
     de8:	f9 1f       	adc	r31, r25
     dea:	ec 0f       	add	r30, r28
     dec:	fd 1f       	adc	r31, r29
     dee:	b3 e0       	ldi	r27, 0x03	; 3
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	ba 95       	dec	r27
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <update_array+0x9a>
     df8:	e1 54       	subi	r30, 0x41	; 65
     dfa:	fe 4f       	sbci	r31, 0xFE	; 254
     dfc:	f1 82       	std	Z+1, r15	; 0x01
     dfe:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][1] = x;
     e00:	81 2f       	mov	r24, r17
     e02:	90 2f       	mov	r25, r16
     e04:	fc 01       	movw	r30, r24
     e06:	a3 e0       	ldi	r26, 0x03	; 3
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	aa 95       	dec	r26
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <update_array+0xb2>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	e8 0f       	add	r30, r24
     e16:	f9 1f       	adc	r31, r25
     e18:	ec 0f       	add	r30, r28
     e1a:	fd 1f       	adc	r31, r29
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	6a 95       	dec	r22
     e24:	e1 f7       	brne	.-8      	; 0xe1e <update_array+0xc8>
     e26:	ef 53       	subi	r30, 0x3F	; 63
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	d1 82       	std	Z+1, r13	; 0x01
     e2c:	c0 82       	st	Z, r12
			dir_array[x_coordinate][y_coordinate][2] = ny;
     e2e:	81 2f       	mov	r24, r17
     e30:	90 2f       	mov	r25, r16
     e32:	fc 01       	movw	r30, r24
     e34:	53 e0       	ldi	r21, 0x03	; 3
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	5a 95       	dec	r21
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <update_array+0xe0>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	e8 0f       	add	r30, r24
     e44:	f9 1f       	adc	r31, r25
     e46:	ec 0f       	add	r30, r28
     e48:	fd 1f       	adc	r31, r29
     e4a:	33 e0       	ldi	r19, 0x03	; 3
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	3a 95       	dec	r19
     e52:	e1 f7       	brne	.-8      	; 0xe4c <update_array+0xf6>
     e54:	ed 53       	subi	r30, 0x3D	; 61
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	b1 82       	std	Z+1, r11	; 0x01
     e5a:	a0 82       	st	Z, r10
			dir_array[x_coordinate][y_coordinate][3] = nx;
     e5c:	81 2f       	mov	r24, r17
     e5e:	90 2f       	mov	r25, r16
     e60:	fc 01       	movw	r30, r24
     e62:	23 e0       	ldi	r18, 0x03	; 3
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	2a 95       	dec	r18
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <update_array+0x10e>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	e8 0f       	add	r30, r24
     e72:	f9 1f       	adc	r31, r25
     e74:	ec 0f       	add	r30, r28
     e76:	fd 1f       	adc	r31, r29
     e78:	13 e0       	ldi	r17, 0x03	; 3
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	1a 95       	dec	r17
     e80:	e1 f7       	brne	.-8      	; 0xe7a <update_array+0x124>
     e82:	e1 54       	subi	r30, 0x41	; 65
     e84:	fe 4f       	sbci	r31, 0xFE	; 254
     e86:	97 82       	std	Z+7, r9	; 0x07
     e88:	86 82       	std	Z+6, r8	; 0x06
     e8a:	19 c1       	rjmp	.+562    	; 0x10be <update_array+0x368>
			break;
			case 1:
			dir_array[x_coordinate][y_coordinate][1] = y;
     e8c:	81 2f       	mov	r24, r17
     e8e:	90 2f       	mov	r25, r16
     e90:	fc 01       	movw	r30, r24
     e92:	b3 e0       	ldi	r27, 0x03	; 3
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ba 95       	dec	r27
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <update_array+0x13e>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	e8 0f       	add	r30, r24
     ea2:	f9 1f       	adc	r31, r25
     ea4:	ec 0f       	add	r30, r28
     ea6:	fd 1f       	adc	r31, r29
     ea8:	73 e0       	ldi	r23, 0x03	; 3
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	7a 95       	dec	r23
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <update_array+0x154>
     eb2:	ef 53       	subi	r30, 0x3F	; 63
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	f1 82       	std	Z+1, r15	; 0x01
     eb8:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][2] = x;
     eba:	81 2f       	mov	r24, r17
     ebc:	90 2f       	mov	r25, r16
     ebe:	fc 01       	movw	r30, r24
     ec0:	63 e0       	ldi	r22, 0x03	; 3
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	6a 95       	dec	r22
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <update_array+0x16c>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	e8 0f       	add	r30, r24
     ed0:	f9 1f       	adc	r31, r25
     ed2:	ec 0f       	add	r30, r28
     ed4:	fd 1f       	adc	r31, r29
     ed6:	43 e0       	ldi	r20, 0x03	; 3
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	4a 95       	dec	r20
     ede:	e1 f7       	brne	.-8      	; 0xed8 <update_array+0x182>
     ee0:	ed 53       	subi	r30, 0x3D	; 61
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	d1 82       	std	Z+1, r13	; 0x01
     ee6:	c0 82       	st	Z, r12
			dir_array[x_coordinate][y_coordinate][3] = ny;
     ee8:	81 2f       	mov	r24, r17
     eea:	90 2f       	mov	r25, r16
     eec:	fc 01       	movw	r30, r24
     eee:	33 e0       	ldi	r19, 0x03	; 3
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	3a 95       	dec	r19
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <update_array+0x19a>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	e8 0f       	add	r30, r24
     efe:	f9 1f       	adc	r31, r25
     f00:	ec 0f       	add	r30, r28
     f02:	fd 1f       	adc	r31, r29
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	8a 95       	dec	r24
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <update_array+0x1b0>
     f0e:	e1 54       	subi	r30, 0x41	; 65
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	b7 82       	std	Z+7, r11	; 0x07
     f14:	a6 82       	std	Z+6, r10	; 0x06
			dir_array[x_coordinate][y_coordinate][0] = nx;
     f16:	81 2f       	mov	r24, r17
     f18:	90 2f       	mov	r25, r16
     f1a:	fc 01       	movw	r30, r24
     f1c:	b3 e0       	ldi	r27, 0x03	; 3
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ba 95       	dec	r27
     f24:	e1 f7       	brne	.-8      	; 0xf1e <update_array+0x1c8>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	e8 0f       	add	r30, r24
     f2c:	f9 1f       	adc	r31, r25
     f2e:	ec 0f       	add	r30, r28
     f30:	fd 1f       	adc	r31, r29
     f32:	73 e0       	ldi	r23, 0x03	; 3
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	7a 95       	dec	r23
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <update_array+0x1de>
     f3c:	e1 54       	subi	r30, 0x41	; 65
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	b5 c0       	rjmp	.+362    	; 0x10ac <update_array+0x356>
			break;
			case -2:
			dir_array[x_coordinate][y_coordinate][2] = y;
     f42:	81 2f       	mov	r24, r17
     f44:	90 2f       	mov	r25, r16
     f46:	fc 01       	movw	r30, r24
     f48:	63 e0       	ldi	r22, 0x03	; 3
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	6a 95       	dec	r22
     f50:	e1 f7       	brne	.-8      	; 0xf4a <update_array+0x1f4>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	e8 0f       	add	r30, r24
     f58:	f9 1f       	adc	r31, r25
     f5a:	ec 0f       	add	r30, r28
     f5c:	fd 1f       	adc	r31, r29
     f5e:	43 e0       	ldi	r20, 0x03	; 3
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	4a 95       	dec	r20
     f66:	e1 f7       	brne	.-8      	; 0xf60 <update_array+0x20a>
     f68:	ed 53       	subi	r30, 0x3D	; 61
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	f1 82       	std	Z+1, r15	; 0x01
     f6e:	e0 82       	st	Z, r14
			dir_array[x_coordinate][y_coordinate][3] = x;
     f70:	81 2f       	mov	r24, r17
     f72:	90 2f       	mov	r25, r16
     f74:	fc 01       	movw	r30, r24
     f76:	33 e0       	ldi	r19, 0x03	; 3
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	3a 95       	dec	r19
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <update_array+0x222>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	ec 0f       	add	r30, r28
     f8a:	fd 1f       	adc	r31, r29
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	8a 95       	dec	r24
     f94:	e1 f7       	brne	.-8      	; 0xf8e <update_array+0x238>
     f96:	e1 54       	subi	r30, 0x41	; 65
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	d7 82       	std	Z+7, r13	; 0x07
     f9c:	c6 82       	std	Z+6, r12	; 0x06
			dir_array[x_coordinate][y_coordinate][0] = ny;
     f9e:	81 2f       	mov	r24, r17
     fa0:	90 2f       	mov	r25, r16
     fa2:	fc 01       	movw	r30, r24
     fa4:	b3 e0       	ldi	r27, 0x03	; 3
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	ba 95       	dec	r27
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <update_array+0x250>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	ec 0f       	add	r30, r28
     fb8:	fd 1f       	adc	r31, r29
     fba:	73 e0       	ldi	r23, 0x03	; 3
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	7a 95       	dec	r23
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <update_array+0x266>
     fc4:	e1 54       	subi	r30, 0x41	; 65
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	b1 82       	std	Z+1, r11	; 0x01
     fca:	a0 82       	st	Z, r10
			dir_array[x_coordinate][y_coordinate][1] = nx;
     fcc:	81 2f       	mov	r24, r17
     fce:	90 2f       	mov	r25, r16
     fd0:	fc 01       	movw	r30, r24
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	ee 0f       	add	r30, r30
     fd6:	ff 1f       	adc	r31, r31
     fd8:	6a 95       	dec	r22
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <update_array+0x27e>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	e8 0f       	add	r30, r24
     fe2:	f9 1f       	adc	r31, r25
     fe4:	ec 0f       	add	r30, r28
     fe6:	fd 1f       	adc	r31, r29
     fe8:	43 e0       	ldi	r20, 0x03	; 3
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	4a 95       	dec	r20
     ff0:	e1 f7       	brne	.-8      	; 0xfea <update_array+0x294>
     ff2:	ef 53       	subi	r30, 0x3F	; 63
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	5a c0       	rjmp	.+180    	; 0x10ac <update_array+0x356>
			break;
			case -1:
			dir_array[x_coordinate][y_coordinate][3] = y;
     ff8:	81 2f       	mov	r24, r17
     ffa:	90 2f       	mov	r25, r16
     ffc:	fc 01       	movw	r30, r24
     ffe:	33 e0       	ldi	r19, 0x03	; 3
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	3a 95       	dec	r19
    1006:	e1 f7       	brne	.-8      	; 0x1000 <update_array+0x2aa>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	e8 0f       	add	r30, r24
    100e:	f9 1f       	adc	r31, r25
    1010:	ec 0f       	add	r30, r28
    1012:	fd 1f       	adc	r31, r29
    1014:	b3 e0       	ldi	r27, 0x03	; 3
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	ba 95       	dec	r27
    101c:	e1 f7       	brne	.-8      	; 0x1016 <update_array+0x2c0>
    101e:	e1 54       	subi	r30, 0x41	; 65
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	f7 82       	std	Z+7, r15	; 0x07
    1024:	e6 82       	std	Z+6, r14	; 0x06
			dir_array[x_coordinate][y_coordinate][0] = x;
    1026:	81 2f       	mov	r24, r17
    1028:	90 2f       	mov	r25, r16
    102a:	fc 01       	movw	r30, r24
    102c:	a3 e0       	ldi	r26, 0x03	; 3
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	aa 95       	dec	r26
    1034:	e1 f7       	brne	.-8      	; 0x102e <update_array+0x2d8>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	ec 0f       	add	r30, r28
    1040:	fd 1f       	adc	r31, r29
    1042:	63 e0       	ldi	r22, 0x03	; 3
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	6a 95       	dec	r22
    104a:	e1 f7       	brne	.-8      	; 0x1044 <update_array+0x2ee>
    104c:	e1 54       	subi	r30, 0x41	; 65
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	d1 82       	std	Z+1, r13	; 0x01
    1052:	c0 82       	st	Z, r12
			dir_array[x_coordinate][y_coordinate][1] = ny;
    1054:	81 2f       	mov	r24, r17
    1056:	90 2f       	mov	r25, r16
    1058:	fc 01       	movw	r30, r24
    105a:	53 e0       	ldi	r21, 0x03	; 3
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	5a 95       	dec	r21
    1062:	e1 f7       	brne	.-8      	; 0x105c <update_array+0x306>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	e8 0f       	add	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	ec 0f       	add	r30, r28
    106e:	fd 1f       	adc	r31, r29
    1070:	33 e0       	ldi	r19, 0x03	; 3
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	3a 95       	dec	r19
    1078:	e1 f7       	brne	.-8      	; 0x1072 <update_array+0x31c>
    107a:	ef 53       	subi	r30, 0x3F	; 63
    107c:	fe 4f       	sbci	r31, 0xFE	; 254
    107e:	b1 82       	std	Z+1, r11	; 0x01
    1080:	a0 82       	st	Z, r10
			dir_array[x_coordinate][y_coordinate][2] = nx;
    1082:	81 2f       	mov	r24, r17
    1084:	90 2f       	mov	r25, r16
    1086:	fc 01       	movw	r30, r24
    1088:	23 e0       	ldi	r18, 0x03	; 3
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	2a 95       	dec	r18
    1090:	e1 f7       	brne	.-8      	; 0x108a <update_array+0x334>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	ec 0f       	add	r30, r28
    109c:	fd 1f       	adc	r31, r29
    109e:	13 e0       	ldi	r17, 0x03	; 3
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	1a 95       	dec	r17
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <update_array+0x34a>
    10a8:	ed 53       	subi	r30, 0x3D	; 61
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	91 82       	std	Z+1, r9	; 0x01
    10ae:	80 82       	st	Z, r8
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <update_array+0x368>
			break;
		}
	}
	else
	{
		repeat = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 f2 00 	sts	0x00F2, r25
    10ba:	80 93 f1 00 	sts	0x00F1, r24
	}	
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	9f 90       	pop	r9
    10d4:	8f 90       	pop	r8
    10d6:	08 95       	ret

000010d8 <update_coordinates>:
}


void update_coordinates(void)
{	
	int value = Coordinates_changed_by;
    10d8:	20 91 e9 00 	lds	r18, 0x00E9
    10dc:	30 91 ea 00 	lds	r19, 0x00EA
    10e0:	80 91 cb 00 	lds	r24, 0x00CB
    10e4:	90 91 cc 00 	lds	r25, 0x00CC
	
	if(value==2)		//to store the middle point in 60cm shift i.e to make it continous
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <update_coordinates+0x18>
    10ee:	79 c0       	rjmp	.+242    	; 0x11e2 <update_coordinates+0x10a>
	{
		switch(dir)
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	92 07       	cpc	r25, r18
    10f6:	51 f1       	breq	.+84     	; 0x114c <update_coordinates+0x74>
    10f8:	4f ef       	ldi	r20, 0xFF	; 255
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	94 07       	cpc	r25, r20
    10fe:	09 f0       	breq	.+2      	; 0x1102 <update_coordinates+0x2a>
    1100:	2c f4       	brge	.+10     	; 0x110c <update_coordinates+0x34>
    1102:	8e 5f       	subi	r24, 0xFE	; 254
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	09 f0       	breq	.+2      	; 0x110a <update_coordinates+0x32>
    1108:	a2 c0       	rjmp	.+324    	; 0x124e <update_coordinates+0x176>
    110a:	52 c0       	rjmp	.+164    	; 0x11b0 <update_coordinates+0xd8>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	21 f0       	breq	.+8      	; 0x111a <update_coordinates+0x42>
    1112:	02 97       	sbiw	r24, 0x02	; 2
    1114:	09 f0       	breq	.+2      	; 0x1118 <update_coordinates+0x40>
    1116:	9b c0       	rjmp	.+310    	; 0x124e <update_coordinates+0x176>
    1118:	32 c0       	rjmp	.+100    	; 0x117e <update_coordinates+0xa6>
		{
			case +1 :	x_coordinate+=1;						
    111a:	80 91 cd 00 	lds	r24, 0x00CD
    111e:	90 91 ce 00 	lds	r25, 0x00CE
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	90 93 ce 00 	sts	0x00CE, r25
    1128:	80 93 cd 00 	sts	0x00CD, r24
						update_array(1,0,1,0);
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						x_coordinate+=1;
    1140:	80 91 cd 00 	lds	r24, 0x00CD
    1144:	90 91 ce 00 	lds	r25, 0x00CE
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	6b c0       	rjmp	.+214    	; 0x1222 <update_coordinates+0x14a>
						break;

			case -1 :	x_coordinate-=1;						
    114c:	80 91 cd 00 	lds	r24, 0x00CD
    1150:	90 91 ce 00 	lds	r25, 0x00CE
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	90 93 ce 00 	sts	0x00CE, r25
    115a:	80 93 cd 00 	sts	0x00CD, r24
						update_array(1,0,1,0);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						x_coordinate-=1;
    1172:	80 91 cd 00 	lds	r24, 0x00CD
    1176:	90 91 ce 00 	lds	r25, 0x00CE
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	52 c0       	rjmp	.+164    	; 0x1222 <update_coordinates+0x14a>
						break;
					
			case +2 :	y_coordinate+=1;						
    117e:	80 91 cf 00 	lds	r24, 0x00CF
    1182:	90 91 d0 00 	lds	r25, 0x00D0
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	90 93 d0 00 	sts	0x00D0, r25
    118c:	80 93 cf 00 	sts	0x00CF, r24
						update_array(1,0,1,0);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						y_coordinate+=1;
    11a4:	80 91 cf 00 	lds	r24, 0x00CF
    11a8:	90 91 d0 00 	lds	r25, 0x00D0
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	4b c0       	rjmp	.+150    	; 0x1246 <update_coordinates+0x16e>
						
						break;

			case -2 :	y_coordinate-=1;						
    11b0:	80 91 cf 00 	lds	r24, 0x00CF
    11b4:	90 91 d0 00 	lds	r25, 0x00D0
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	90 93 d0 00 	sts	0x00D0, r25
    11be:	80 93 cf 00 	sts	0x00CF, r24
						update_array(1,0,1,0);	
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
						y_coordinate-=1;
    11d6:	80 91 cf 00 	lds	r24, 0x00CF
    11da:	90 91 d0 00 	lds	r25, 0x00D0
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	32 c0       	rjmp	.+100    	; 0x1246 <update_coordinates+0x16e>
						break;	
		}
	}
	else
	{
		switch(dir)
    11e2:	4f ef       	ldi	r20, 0xFF	; 255
    11e4:	8f 3f       	cpi	r24, 0xFF	; 255
    11e6:	94 07       	cpc	r25, r20
    11e8:	b1 f0       	breq	.+44     	; 0x1216 <update_coordinates+0x13e>
    11ea:	4f ef       	ldi	r20, 0xFF	; 255
    11ec:	8f 3f       	cpi	r24, 0xFF	; 255
    11ee:	94 07       	cpc	r25, r20
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <update_coordinates+0x11c>
    11f2:	24 f4       	brge	.+8      	; 0x11fc <update_coordinates+0x124>
    11f4:	8e 5f       	subi	r24, 0xFE	; 254
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	51 f5       	brne	.+84     	; 0x124e <update_coordinates+0x176>
    11fa:	1f c0       	rjmp	.+62     	; 0x123a <update_coordinates+0x162>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	19 f0       	breq	.+6      	; 0x1208 <update_coordinates+0x130>
    1202:	02 97       	sbiw	r24, 0x02	; 2
    1204:	21 f5       	brne	.+72     	; 0x124e <update_coordinates+0x176>
    1206:	12 c0       	rjmp	.+36     	; 0x122c <update_coordinates+0x154>
		{
			case +1 : x_coordinate+=value; break;
    1208:	80 91 cd 00 	lds	r24, 0x00CD
    120c:	90 91 ce 00 	lds	r25, 0x00CE
    1210:	82 0f       	add	r24, r18
    1212:	93 1f       	adc	r25, r19
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <update_coordinates+0x14a>
			case -1 : x_coordinate-=value; break;
    1216:	80 91 cd 00 	lds	r24, 0x00CD
    121a:	90 91 ce 00 	lds	r25, 0x00CE
    121e:	82 1b       	sub	r24, r18
    1220:	93 0b       	sbc	r25, r19
    1222:	90 93 ce 00 	sts	0x00CE, r25
    1226:	80 93 cd 00 	sts	0x00CD, r24
    122a:	11 c0       	rjmp	.+34     	; 0x124e <update_coordinates+0x176>
			case +2 : y_coordinate+=value; break;
    122c:	80 91 cf 00 	lds	r24, 0x00CF
    1230:	90 91 d0 00 	lds	r25, 0x00D0
    1234:	82 0f       	add	r24, r18
    1236:	93 1f       	adc	r25, r19
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <update_coordinates+0x16e>
			case -2 : y_coordinate-=value; break;	
    123a:	80 91 cf 00 	lds	r24, 0x00CF
    123e:	90 91 d0 00 	lds	r25, 0x00D0
    1242:	82 1b       	sub	r24, r18
    1244:	93 0b       	sbc	r25, r19
    1246:	90 93 d0 00 	sts	0x00D0, r25
    124a:	80 93 cf 00 	sts	0x00CF, r24
		}
	}
	lcd_clear();
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(4,0,x_coordinate,2);
    1256:	40 91 cd 00 	lds	r20, 0x00CD
    125a:	50 91 ce 00 	lds	r21, 0x00CE
    125e:	84 e0       	ldi	r24, 0x04	; 4
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	22 e0       	ldi	r18, 0x02	; 2
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(8,0,y_coordinate,2);
    126e:	40 91 cf 00 	lds	r20, 0x00CF
    1272:	50 91 d0 00 	lds	r21, 0x00D0
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	22 e0       	ldi	r18, 0x02	; 2
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	Coordinates_changed_by = 0;
    1286:	10 92 ea 00 	sts	0x00EA, r1
    128a:	10 92 e9 00 	sts	0x00E9, r1
}
    128e:	08 95       	ret

00001290 <left_junc_check>:
		set_pwm1b(opt);
	}
		delay_microsec(10);
}
void left_junc_check()                                 
{
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29

	if(bit_is_clear(PINA,5))
    1294:	cd 99       	sbic	0x19, 5	; 25
    1296:	2a c0       	rjmp	.+84     	; 0x12ec <left_junc_check+0x5c>
	{
		flag1 = 1;
    1298:	c1 e0       	ldi	r28, 0x01	; 1
    129a:	d0 e0       	ldi	r29, 0x00	; 0
    129c:	d0 93 e0 00 	sts	0x00E0, r29
    12a0:	c0 93 df 00 	sts	0x00DF, r28
		//bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		if(irc>2000)
    12a4:	80 91 e1 00 	lds	r24, 0x00E1
    12a8:	90 91 e2 00 	lds	r25, 0x00E2
    12ac:	81 5d       	subi	r24, 0xD1	; 209
    12ae:	97 40       	sbci	r25, 0x07	; 7
    12b0:	5c f0       	brlt	.+22     	; 0x12c8 <left_junc_check+0x38>
		{	
			lcd_clear();
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("sixty");
			Coordinates_changed_by = 2;
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	90 93 ea 00 	sts	0x00EA, r25
    12c2:	80 93 e9 00 	sts	0x00E9, r24
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <left_junc_check+0x48>
		}
		else
		{
			lcd_clear();
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
    12d0:	d0 93 ea 00 	sts	0x00EA, r29
    12d4:	c0 93 e9 00 	sts	0x00E9, r28
		}
		if(irc==0)
    12d8:	80 91 e1 00 	lds	r24, 0x00E1
    12dc:	90 91 e2 00 	lds	r25, 0x00E2
    12e0:	89 2b       	or	r24, r25
    12e2:	21 f4       	brne	.+8      	; 0x12ec <left_junc_check+0x5c>
		{
			Coordinates_changed_by = 0;
    12e4:	10 92 ea 00 	sts	0x00EA, r1
    12e8:	10 92 e9 00 	sts	0x00E9, r1
		}				
	}
	if((bit_is_clear(PINA,6) || bit_is_clear(PIND,6)) && (bit_is_clear(PINA,4) || special_flag == 1))
    12ec:	ce 9b       	sbis	0x19, 6	; 25
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <left_junc_check+0x64>
    12f0:	86 99       	sbic	0x10, 6	; 16
    12f2:	1d c0       	rjmp	.+58     	; 0x132e <left_junc_check+0x9e>
    12f4:	cc 9b       	sbis	0x19, 4	; 25
    12f6:	06 c0       	rjmp	.+12     	; 0x1304 <left_junc_check+0x74>
    12f8:	80 91 ef 00 	lds	r24, 0x00EF
    12fc:	90 91 f0 00 	lds	r25, 0x00F0
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	a9 f4       	brne	.+42     	; 0x132e <left_junc_check+0x9e>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1304:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1306:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1308:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    130a:	af 9a       	sbi	0x15, 7	; 21
	{
		bot_brake();
		update_coordinates();
    130c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <update_coordinates>
		//delay_sec(2);
		//lcd_clear();
		update_array(1,0,1,1);			
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		// lcd_write_string("-| detected");
		//delay_millisec(500);
		irc = 0;
    1324:	10 92 e2 00 	sts	0x00E2, r1
    1328:	10 92 e1 00 	sts	0x00E1, r1
    132c:	28 c0       	rjmp	.+80     	; 0x137e <left_junc_check+0xee>
		special_flag = 0;       ///one time use
	}
	
	else if((bit_is_clear(PINA,4) || special_flag==1) && bit_is_set(PINA,6) && bit_is_set(PIND,6))
    132e:	cc 9b       	sbis	0x19, 4	; 25
    1330:	06 c0       	rjmp	.+12     	; 0x133e <left_junc_check+0xae>
    1332:	80 91 ef 00 	lds	r24, 0x00EF
    1336:	90 91 f0 00 	lds	r25, 0x00F0
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	21 f5       	brne	.+72     	; 0x1386 <left_junc_check+0xf6>
    133e:	ce 9b       	sbis	0x19, 6	; 25
    1340:	22 c0       	rjmp	.+68     	; 0x1386 <left_junc_check+0xf6>
    1342:	86 9b       	sbis	0x10, 6	; 16
    1344:	20 c0       	rjmp	.+64     	; 0x1386 <left_junc_check+0xf6>
	{
		// lcd_clear();
		// bot_brake();
		// lcd_write_string("L detected");
		update_coordinates();
    1346:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <update_coordinates>
		//delay_sec(2);
		irc = 0;
    134a:	10 92 e2 00 	sts	0x00E2, r1
    134e:	10 92 e1 00 	sts	0x00E1, r1
		turn_left();						
    1352:	0e 94 61 05 	call	0xac2	; 0xac2 <turn_left>

		update_array(0,0,1,1);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    136a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    136c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    136e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1370:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		sense_of_directon();
    1372:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_millisec(2000);
		flag1 = 0;
    1376:	10 92 e0 00 	sts	0x00E0, r1
    137a:	10 92 df 00 	sts	0x00DF, r1
		special_flag = 0;
    137e:	10 92 f0 00 	sts	0x00F0, r1
    1382:	10 92 ef 00 	sts	0x00EF, r1
	}

	special_case_check();       ///////////
    1386:	0e 94 b3 04 	call	0x966	; 0x966 <special_case_check>
	
}
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <frSensorCheck>:
	
}

void frSensorCheck()
{
	if(bit_is_set(PINA,6) && bit_is_set(PIND,6))
    1390:	ce 9b       	sbis	0x19, 6	; 25
    1392:	35 c0       	rjmp	.+106    	; 0x13fe <frSensorCheck+0x6e>
    1394:	86 9b       	sbis	0x10, 6	; 16
    1396:	33 c0       	rjmp	.+102    	; 0x13fe <frSensorCheck+0x6e>
	{
		////just confirming if its really a dead end or the bot has simply just wobbled
		if(sensorbyte==0b0011 || sensorbyte==0b1100 || sensorbyte==0b0100 || sensorbyte==0b0010 || sensorbyte==0b0110)
    1398:	80 91 d2 00 	lds	r24, 0x00D2
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	41 f0       	breq	.+16     	; 0x13b0 <frSensorCheck+0x20>
    13a0:	8c 30       	cpi	r24, 0x0C	; 12
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <frSensorCheck+0x20>
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	21 f0       	breq	.+8      	; 0x13b0 <frSensorCheck+0x20>
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <frSensorCheck+0x20>
    13ac:	86 30       	cpi	r24, 0x06	; 6
    13ae:	f9 f4       	brne	.+62     	; 0x13ee <frSensorCheck+0x5e>
		{
			if(flag1==0)
    13b0:	80 91 df 00 	lds	r24, 0x00DF
    13b4:	90 91 e0 00 	lds	r25, 0x00E0
    13b8:	89 2b       	or	r24, r25
    13ba:	09 f5       	brne	.+66     	; 0x13fe <frSensorCheck+0x6e>
			{
				//lcd_clear();
				// lcd_write_string("Uturn Detected");
				if(irc>2000)
    13bc:	80 91 e1 00 	lds	r24, 0x00E1
    13c0:	90 91 e2 00 	lds	r25, 0x00E2
    13c4:	20 91 e9 00 	lds	r18, 0x00E9
    13c8:	30 91 ea 00 	lds	r19, 0x00EA
    13cc:	81 5d       	subi	r24, 0xD1	; 209
    13ce:	97 40       	sbci	r25, 0x07	; 7
    13d0:	2c f0       	brlt	.+10     	; 0x13dc <frSensorCheck+0x4c>
				{
					// lcd_write_string("Sixty");
					if(Coordinates_changed_by ==0)
    13d2:	23 2b       	or	r18, r19
    13d4:	a1 f4       	brne	.+40     	; 0x13fe <frSensorCheck+0x6e>
					{
						Coordinates_changed_by = 2;
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <frSensorCheck+0x54>
					}
				}
				else
				{
					// lcd_write_string("Thirty");
					if(Coordinates_changed_by ==0)
    13dc:	23 2b       	or	r18, r19
    13de:	79 f4       	brne	.+30     	; 0x13fe <frSensorCheck+0x6e>
					{
						Coordinates_changed_by = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	90 93 ea 00 	sts	0x00EA, r25
    13e8:	80 93 e9 00 	sts	0x00E9, r24
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <frSensorCheck+0x6e>
				//delay_sec(2);
			}
		}
		else
		{
			lcd_clear();
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("ERROR Fr Snsr");
    13f6:	80 e6       	ldi	r24, 0x60	; 96
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		}
	}
	
	if(sensorbyte==0b0000 && bit_is_set(PINA,4) && bit_is_set(PINA,5) && bit_is_set(PINA,6) && bit_is_set(PINA,7) && bit_is_set(PIND, 6) && bit_is_set(PIND, 7) && flag1==0)
    13fe:	80 91 d2 00 	lds	r24, 0x00D2
    1402:	88 23       	and	r24, r24
    1404:	71 f5       	brne	.+92     	; 0x1462 <frSensorCheck+0xd2>
    1406:	cc 9b       	sbis	0x19, 4	; 25
    1408:	2c c0       	rjmp	.+88     	; 0x1462 <frSensorCheck+0xd2>
    140a:	cd 9b       	sbis	0x19, 5	; 25
    140c:	2a c0       	rjmp	.+84     	; 0x1462 <frSensorCheck+0xd2>
    140e:	ce 9b       	sbis	0x19, 6	; 25
    1410:	28 c0       	rjmp	.+80     	; 0x1462 <frSensorCheck+0xd2>
    1412:	cf 9b       	sbis	0x19, 7	; 25
    1414:	26 c0       	rjmp	.+76     	; 0x1462 <frSensorCheck+0xd2>
    1416:	86 9b       	sbis	0x10, 6	; 16
    1418:	24 c0       	rjmp	.+72     	; 0x1462 <frSensorCheck+0xd2>
    141a:	87 9b       	sbis	0x10, 7	; 16
    141c:	22 c0       	rjmp	.+68     	; 0x1462 <frSensorCheck+0xd2>
    141e:	80 91 df 00 	lds	r24, 0x00DF
    1422:	90 91 e0 00 	lds	r25, 0x00E0
    1426:	89 2b       	or	r24, r25
    1428:	e1 f4       	brne	.+56     	; 0x1462 <frSensorCheck+0xd2>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    142a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    142c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    142e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1430:	af 9a       	sbi	0x15, 7	; 21
	{
		//lcd_clear();
		//lcd_write_string("Uturn");
		bot_brake();
		update_coordinates();
    1432:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <update_coordinates>
		update_array(0,0,1,0);
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		//delay_sec(2);

		Uturn();
    144a:	0e 94 67 04 	call	0x8ce	; 0x8ce <Uturn>
		//bot_brake();
		sense_of_directon();
    144e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_sec(2);
		flag1 = 0;
    1452:	10 92 e0 00 	sts	0x00E0, r1
    1456:	10 92 df 00 	sts	0x00DF, r1
		irc = 0;
    145a:	10 92 e2 00 	sts	0x00E2, r1
    145e:	10 92 e1 00 	sts	0x00E1, r1
    1462:	08 95       	ret

00001464 <fill_missed_array>:
		return 0;
	}
}

void fill_missed_array()
{
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	e1 e0       	ldi	r30, 0x01	; 1
    147e:	ee 2e       	mov	r14, r30
    1480:	f1 2c       	mov	r15, r1
    1482:	79 c0       	rjmp	.+242    	; 0x1576 <fill_missed_array+0x112>
	int hx, hy, lx, ly;
	for(int i = 1 ; i<9 ; i++)
	{
		for(int j = 1 ; j<9 ; j++)
		{
			if(is_coordinate_null(i,j))
    1484:	c7 01       	movw	r24, r14
    1486:	b6 01       	movw	r22, r12
    1488:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    148c:	89 2b       	or	r24, r25
    148e:	09 f4       	brne	.+2      	; 0x1492 <fill_missed_array+0x2e>
    1490:	60 c0       	rjmp	.+192    	; 0x1552 <fill_missed_array+0xee>
			{
				hx = i+1;
				hy = j+1;
				lx = i-1;
				ly = j-1;
				lcd_clear();
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    149a:	c4 01       	movw	r24, r8
    149c:	b6 01       	movw	r22, r12
    149e:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    14a2:	89 2b       	or	r24, r25
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <fill_missed_array+0x44>
    14a6:	55 c0       	rjmp	.+170    	; 0x1552 <fill_missed_array+0xee>
    14a8:	c5 01       	movw	r24, r10
    14aa:	b6 01       	movw	r22, r12
    14ac:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <fill_missed_array+0x52>
    14b4:	4e c0       	rjmp	.+156    	; 0x1552 <fill_missed_array+0xee>
    14b6:	b6 01       	movw	r22, r12
    14b8:	61 50       	subi	r22, 0x01	; 1
    14ba:	70 40       	sbci	r23, 0x00	; 0
    14bc:	c7 01       	movw	r24, r14
    14be:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    14c2:	89 2b       	or	r24, r25
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <fill_missed_array+0x64>
    14c6:	45 c0       	rjmp	.+138    	; 0x1552 <fill_missed_array+0xee>
    14c8:	b6 01       	movw	r22, r12
    14ca:	6f 5f       	subi	r22, 0xFF	; 255
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	c7 01       	movw	r24, r14
    14d0:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    14d4:	89 2b       	or	r24, r25
    14d6:	e9 f5       	brne	.+122    	; 0x1552 <fill_missed_array+0xee>
				{
					lcd_clear();
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Filliable");
    14e0:	8e e6       	ldi	r24, 0x6E	; 110
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_millisec(2000);
    14e8:	80 ed       	ldi	r24, 0xD0	; 208
    14ea:	97 e0       	ldi	r25, 0x07	; 7
    14ec:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
					if(dir_array[hx][j][3]==1)
    14f0:	ca 5a       	subi	r28, 0xAA	; 170
    14f2:	df 4f       	sbci	r29, 0xFF	; 255
    14f4:	88 81       	ld	r24, Y
    14f6:	99 81       	ldd	r25, Y+1	; 0x01
    14f8:	c6 55       	subi	r28, 0x56	; 86
    14fa:	d0 40       	sbci	r29, 0x00	; 0
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	19 f4       	brne	.+6      	; 0x1508 <fill_missed_array+0xa4>
					{
						dir_array[i][j][1] = 1;
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	02 c0       	rjmp	.+4      	; 0x150c <fill_missed_array+0xa8>
					}
					else
					{
						dir_array[i][j][1] = 0;
    1508:	1b 82       	std	Y+3, r1	; 0x03
    150a:	1a 82       	std	Y+2, r1	; 0x02
					}
					if(dir_array[lx][j][1]==1)
    150c:	ce 54       	subi	r28, 0x4E	; 78
    150e:	d0 40       	sbci	r29, 0x00	; 0
    1510:	88 81       	ld	r24, Y
    1512:	99 81       	ldd	r25, Y+1	; 0x01
    1514:	c2 5b       	subi	r28, 0xB2	; 178
    1516:	df 4f       	sbci	r29, 0xFF	; 255
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	19 f4       	brne	.+6      	; 0x1524 <fill_missed_array+0xc0>
					{
						dir_array[i][j][3] = 1;
    151e:	9f 83       	std	Y+7, r25	; 0x07
    1520:	8e 83       	std	Y+6, r24	; 0x06
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <fill_missed_array+0xc4>
					}
					else
					{
						dir_array[i][j][3] = 0;
    1524:	1f 82       	std	Y+7, r1	; 0x07
    1526:	1e 82       	std	Y+6, r1	; 0x06
					}
					if(dir_array[i][hy][2]==1)
    1528:	8c 85       	ldd	r24, Y+12	; 0x0c
    152a:	9d 85       	ldd	r25, Y+13	; 0x0d
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	91 05       	cpc	r25, r1
    1530:	19 f4       	brne	.+6      	; 0x1538 <fill_missed_array+0xd4>
					{
						dir_array[i][j][0] = 1;
    1532:	99 83       	std	Y+1, r25	; 0x01
    1534:	88 83       	st	Y, r24
    1536:	02 c0       	rjmp	.+4      	; 0x153c <fill_missed_array+0xd8>
					}
					else
					{
						dir_array[i][j][0] =0;
    1538:	19 82       	std	Y+1, r1	; 0x01
    153a:	18 82       	st	Y, r1
					}
					if(dir_array[i][j][ly]==1)
    153c:	f8 01       	movw	r30, r16
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	19 f4       	brne	.+6      	; 0x154e <fill_missed_array+0xea>
					{
						dir_array[i][j][2] = 1;
    1548:	9d 83       	std	Y+5, r25	; 0x05
    154a:	8c 83       	std	Y+4, r24	; 0x04
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <fill_missed_array+0xee>
					}
					else
					{
						dir_array[i][j][2] = 0;
    154e:	1d 82       	std	Y+5, r1	; 0x05
    1550:	1c 82       	std	Y+4, r1	; 0x04
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<9 ; i++)
	{
		for(int j = 1 ; j<9 ; j++)
    1552:	08 94       	sec
    1554:	c1 1c       	adc	r12, r1
    1556:	d1 1c       	adc	r13, r1
    1558:	06 5f       	subi	r16, 0xF6	; 246
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	28 96       	adiw	r28, 0x08	; 8
    155e:	f9 e0       	ldi	r31, 0x09	; 9
    1560:	cf 16       	cp	r12, r31
    1562:	d1 04       	cpc	r13, r1
    1564:	09 f0       	breq	.+2      	; 0x1568 <fill_missed_array+0x104>
    1566:	8e cf       	rjmp	.-228    	; 0x1484 <fill_missed_array+0x20>
}

void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<9 ; i++)
    1568:	08 94       	sec
    156a:	e1 1c       	adc	r14, r1
    156c:	f1 1c       	adc	r15, r1
    156e:	89 e0       	ldi	r24, 0x09	; 9
    1570:	e8 16       	cp	r14, r24
    1572:	f1 04       	cpc	r15, r1
    1574:	f9 f0       	breq	.+62     	; 0x15b4 <fill_missed_array+0x150>
    1576:	87 01       	movw	r16, r14
    1578:	00 0f       	add	r16, r16
    157a:	11 1f       	adc	r17, r17
    157c:	c7 01       	movw	r24, r14
    157e:	63 e0       	ldi	r22, 0x03	; 3
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	6a 95       	dec	r22
    1586:	e1 f7       	brne	.-8      	; 0x1580 <fill_missed_array+0x11c>
    1588:	08 0f       	add	r16, r24
    158a:	19 1f       	adc	r17, r25
    158c:	53 e0       	ldi	r21, 0x03	; 3
    158e:	00 0f       	add	r16, r16
    1590:	11 1f       	adc	r17, r17
    1592:	5a 95       	dec	r21
    1594:	e1 f7       	brne	.-8      	; 0x158e <fill_missed_array+0x12a>
    1596:	09 53       	subi	r16, 0x39	; 57
    1598:	1e 4f       	sbci	r17, 0xFE	; 254
    159a:	e8 01       	movw	r28, r16
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	c4 2e       	mov	r12, r20
    15a0:	d1 2c       	mov	r13, r1
				lcd_clear();
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    15a2:	47 01       	movw	r8, r14
    15a4:	08 94       	sec
    15a6:	81 1c       	adc	r8, r1
    15a8:	91 1c       	adc	r9, r1
    15aa:	57 01       	movw	r10, r14
    15ac:	08 94       	sec
    15ae:	a1 08       	sbc	r10, r1
    15b0:	b1 08       	sbc	r11, r1
    15b2:	68 cf       	rjmp	.-304    	; 0x1484 <fill_missed_array+0x20>
					}
				}
			}
		}
	}
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	08 95       	ret

000015ce <coordinates_tobe_reached>:

void coordinates_tobe_reached()
{
    15ce:	2f 92       	push	r2
    15d0:	3f 92       	push	r3
    15d2:	4f 92       	push	r4
    15d4:	5f 92       	push	r5
    15d6:	6f 92       	push	r6
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	68 97       	sbiw	r28, 0x18	; 24
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
	int stop=0, t1, t2;
	mx = 0;
    1602:	10 92 ec 00 	sts	0x00EC, r1
    1606:	10 92 eb 00 	sts	0x00EB, r1
	my = 0;
    160a:	10 92 ee 00 	sts	0x00EE, r1
    160e:	10 92 ed 00 	sts	0x00ED, r1
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1612:	80 90 cd 00 	lds	r8, 0x00CD
    1616:	90 90 ce 00 	lds	r9, 0x00CE
    161a:	a0 90 cf 00 	lds	r10, 0x00CF
    161e:	b0 90 d0 00 	lds	r11, 0x00D0
    1622:	cc 24       	eor	r12, r12
    1624:	dd 24       	eor	r13, r13
    1626:	c8 18       	sub	r12, r8
    1628:	d9 08       	sbc	r13, r9
    162a:	de 82       	std	Y+6, r13	; 0x06
    162c:	cd 82       	std	Y+5, r12	; 0x05
    162e:	dc 82       	std	Y+4, r13	; 0x04
    1630:	cb 82       	std	Y+3, r12	; 0x03
    1632:	da 82       	std	Y+2, r13	; 0x02
    1634:	c9 82       	std	Y+1, r12	; 0x01
    1636:	00 e0       	ldi	r16, 0x00	; 0
    1638:	10 e0       	ldi	r17, 0x00	; 0
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    163a:	22 27       	eor	r18, r18
    163c:	33 27       	eor	r19, r19
    163e:	2a 19       	sub	r18, r10
    1640:	3b 09       	sbc	r19, r11
    1642:	3e 8b       	std	Y+22, r19	; 0x16
    1644:	2d 8b       	std	Y+21, r18	; 0x15
    1646:	94 c1       	rjmp	.+808    	; 0x1970 <coordinates_tobe_reached+0x3a2>
	my = 0;
	for(int i = 0 ; i<10 ; i++)
	{
		for(int j = 0 ; j<10 ; j++)
		{
			if(!(is_coordinate_null(i,j)))
    1648:	c8 01       	movw	r24, r16
    164a:	6f 89       	ldd	r22, Y+23	; 0x17
    164c:	78 8d       	ldd	r23, Y+24	; 0x18
    164e:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1652:	89 2b       	or	r24, r25
    1654:	09 f0       	breq	.+2      	; 0x1658 <coordinates_tobe_reached+0x8a>
    1656:	59 c1       	rjmp	.+690    	; 0x190a <coordinates_tobe_reached+0x33c>
			{
				if(dir_array[i][j][0]==1)
    1658:	f7 01       	movw	r30, r14
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	09 f0       	breq	.+2      	; 0x1664 <coordinates_tobe_reached+0x96>
    1662:	4a c0       	rjmp	.+148    	; 0x16f8 <coordinates_tobe_reached+0x12a>
				{
					if(is_coordinate_null(i,j+1))
    1664:	6f 89       	ldd	r22, Y+23	; 0x17
    1666:	78 8d       	ldd	r23, Y+24	; 0x18
    1668:	6f 5f       	subi	r22, 0xFF	; 255
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	c8 01       	movw	r24, r16
    166e:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1672:	89 2b       	or	r24, r25
    1674:	09 f4       	brne	.+2      	; 0x1678 <coordinates_tobe_reached+0xaa>
    1676:	40 c0       	rjmp	.+128    	; 0x16f8 <coordinates_tobe_reached+0x12a>
					{
						if(mx==0 && my==0)
    1678:	60 91 eb 00 	lds	r22, 0x00EB
    167c:	70 91 ec 00 	lds	r23, 0x00EC
    1680:	61 15       	cp	r22, r1
    1682:	71 05       	cpc	r23, r1
    1684:	31 f4       	brne	.+12     	; 0x1692 <coordinates_tobe_reached+0xc4>
    1686:	80 91 ed 00 	lds	r24, 0x00ED
    168a:	90 91 ee 00 	lds	r25, 0x00EE
    168e:	89 2b       	or	r24, r25
    1690:	49 f1       	breq	.+82     	; 0x16e4 <coordinates_tobe_reached+0x116>
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    1692:	68 19       	sub	r22, r8
    1694:	79 09       	sbc	r23, r9
    1696:	80 91 ed 00 	lds	r24, 0x00ED
    169a:	90 91 ee 00 	lds	r25, 0x00EE
    169e:	8a 19       	sub	r24, r10
    16a0:	9b 09       	sbc	r25, r11
							if(t1<t2)
    16a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    16a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    16a6:	ee 9f       	mul	r30, r30
    16a8:	a0 01       	movw	r20, r0
    16aa:	ef 9f       	mul	r30, r31
    16ac:	50 0d       	add	r21, r0
    16ae:	fe 9f       	mul	r31, r30
    16b0:	50 0d       	add	r21, r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    16b6:	38 89       	ldd	r19, Y+16	; 0x10
    16b8:	42 0f       	add	r20, r18
    16ba:	53 1f       	adc	r21, r19
    16bc:	fc 01       	movw	r30, r24
    16be:	ee 9f       	mul	r30, r30
    16c0:	c0 01       	movw	r24, r0
    16c2:	ef 9f       	mul	r30, r31
    16c4:	90 0d       	add	r25, r0
    16c6:	fe 9f       	mul	r31, r30
    16c8:	90 0d       	add	r25, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	66 9f       	mul	r22, r22
    16ce:	90 01       	movw	r18, r0
    16d0:	67 9f       	mul	r22, r23
    16d2:	30 0d       	add	r19, r0
    16d4:	76 9f       	mul	r23, r22
    16d6:	30 0d       	add	r19, r0
    16d8:	11 24       	eor	r1, r1
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	48 17       	cp	r20, r24
    16e0:	59 07       	cpc	r21, r25
    16e2:	54 f4       	brge	.+20     	; 0x16f8 <coordinates_tobe_reached+0x12a>
							{
								mx = i;
    16e4:	10 93 ec 00 	sts	0x00EC, r17
    16e8:	00 93 eb 00 	sts	0x00EB, r16
								my = j;
    16ec:	2f 89       	ldd	r18, Y+23	; 0x17
    16ee:	38 8d       	ldd	r19, Y+24	; 0x18
    16f0:	30 93 ee 00 	sts	0x00EE, r19
    16f4:	20 93 ed 00 	sts	0x00ED, r18
							}
						}
					}
				}
				if(dir_array[i][j][1]==1)
    16f8:	f7 01       	movw	r30, r14
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	09 f0       	breq	.+2      	; 0x1704 <coordinates_tobe_reached+0x136>
    1702:	52 c0       	rjmp	.+164    	; 0x17a8 <coordinates_tobe_reached+0x1da>
				{
					if(is_coordinate_null(i+1,j))
    1704:	8b 89       	ldd	r24, Y+19	; 0x13
    1706:	9c 89       	ldd	r25, Y+20	; 0x14
    1708:	6f 89       	ldd	r22, Y+23	; 0x17
    170a:	78 8d       	ldd	r23, Y+24	; 0x18
    170c:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1710:	89 2b       	or	r24, r25
    1712:	09 f4       	brne	.+2      	; 0x1716 <coordinates_tobe_reached+0x148>
    1714:	49 c0       	rjmp	.+146    	; 0x17a8 <coordinates_tobe_reached+0x1da>
					{
						if(mx==0 && my==0)
    1716:	60 91 eb 00 	lds	r22, 0x00EB
    171a:	70 91 ec 00 	lds	r23, 0x00EC
    171e:	61 15       	cp	r22, r1
    1720:	71 05       	cpc	r23, r1
    1722:	89 f4       	brne	.+34     	; 0x1746 <coordinates_tobe_reached+0x178>
    1724:	80 91 ed 00 	lds	r24, 0x00ED
    1728:	90 91 ee 00 	lds	r25, 0x00EE
    172c:	89 2b       	or	r24, r25
    172e:	59 f4       	brne	.+22     	; 0x1746 <coordinates_tobe_reached+0x178>
						{
							mx = i;
    1730:	10 93 ec 00 	sts	0x00EC, r17
    1734:	00 93 eb 00 	sts	0x00EB, r16
							my = j;
    1738:	2f 89       	ldd	r18, Y+23	; 0x17
    173a:	38 8d       	ldd	r19, Y+24	; 0x18
    173c:	30 93 ee 00 	sts	0x00EE, r19
    1740:	20 93 ed 00 	sts	0x00ED, r18
    1744:	31 c0       	rjmp	.+98     	; 0x17a8 <coordinates_tobe_reached+0x1da>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    1746:	68 19       	sub	r22, r8
    1748:	79 09       	sbc	r23, r9
    174a:	80 91 ed 00 	lds	r24, 0x00ED
    174e:	90 91 ee 00 	lds	r25, 0x00EE
    1752:	8a 19       	sub	r24, r10
    1754:	9b 09       	sbc	r25, r11
							
							if(t1<t2)
    1756:	66 9c       	mul	r6, r6
    1758:	a0 01       	movw	r20, r0
    175a:	67 9c       	mul	r6, r7
    175c:	50 0d       	add	r21, r0
    175e:	76 9c       	mul	r7, r6
    1760:	50 0d       	add	r21, r0
    1762:	11 24       	eor	r1, r1
    1764:	eb 85       	ldd	r30, Y+11	; 0x0b
    1766:	fc 85       	ldd	r31, Y+12	; 0x0c
    1768:	4e 0f       	add	r20, r30
    176a:	5f 1f       	adc	r21, r31
    176c:	9c 01       	movw	r18, r24
    176e:	22 9f       	mul	r18, r18
    1770:	c0 01       	movw	r24, r0
    1772:	23 9f       	mul	r18, r19
    1774:	90 0d       	add	r25, r0
    1776:	32 9f       	mul	r19, r18
    1778:	90 0d       	add	r25, r0
    177a:	11 24       	eor	r1, r1
    177c:	66 9f       	mul	r22, r22
    177e:	90 01       	movw	r18, r0
    1780:	67 9f       	mul	r22, r23
    1782:	30 0d       	add	r19, r0
    1784:	76 9f       	mul	r23, r22
    1786:	30 0d       	add	r19, r0
    1788:	11 24       	eor	r1, r1
    178a:	82 0f       	add	r24, r18
    178c:	93 1f       	adc	r25, r19
    178e:	48 17       	cp	r20, r24
    1790:	59 07       	cpc	r21, r25
    1792:	54 f4       	brge	.+20     	; 0x17a8 <coordinates_tobe_reached+0x1da>
							{
								mx = i;
    1794:	10 93 ec 00 	sts	0x00EC, r17
    1798:	00 93 eb 00 	sts	0x00EB, r16
								my = j;
    179c:	8f 89       	ldd	r24, Y+23	; 0x17
    179e:	98 8d       	ldd	r25, Y+24	; 0x18
    17a0:	90 93 ee 00 	sts	0x00EE, r25
    17a4:	80 93 ed 00 	sts	0x00ED, r24
							}
						}
					}
				}
				if(dir_array[i][j][2]==1)
    17a8:	f7 01       	movw	r30, r14
    17aa:	84 81       	ldd	r24, Z+4	; 0x04
    17ac:	95 81       	ldd	r25, Z+5	; 0x05
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <coordinates_tobe_reached+0x1e6>
    17b2:	53 c0       	rjmp	.+166    	; 0x185a <coordinates_tobe_reached+0x28c>
				{
					if(is_coordinate_null(i,j-1))
    17b4:	6f 89       	ldd	r22, Y+23	; 0x17
    17b6:	78 8d       	ldd	r23, Y+24	; 0x18
    17b8:	61 50       	subi	r22, 0x01	; 1
    17ba:	70 40       	sbci	r23, 0x00	; 0
    17bc:	c8 01       	movw	r24, r16
    17be:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    17c2:	89 2b       	or	r24, r25
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <coordinates_tobe_reached+0x1fa>
    17c6:	49 c0       	rjmp	.+146    	; 0x185a <coordinates_tobe_reached+0x28c>
					{
						if(mx==0 && my==0)
    17c8:	60 91 eb 00 	lds	r22, 0x00EB
    17cc:	70 91 ec 00 	lds	r23, 0x00EC
    17d0:	61 15       	cp	r22, r1
    17d2:	71 05       	cpc	r23, r1
    17d4:	89 f4       	brne	.+34     	; 0x17f8 <coordinates_tobe_reached+0x22a>
    17d6:	80 91 ed 00 	lds	r24, 0x00ED
    17da:	90 91 ee 00 	lds	r25, 0x00EE
    17de:	89 2b       	or	r24, r25
    17e0:	59 f4       	brne	.+22     	; 0x17f8 <coordinates_tobe_reached+0x22a>
						{
							mx = i;
    17e2:	10 93 ec 00 	sts	0x00EC, r17
    17e6:	00 93 eb 00 	sts	0x00EB, r16
							my = j;
    17ea:	2f 89       	ldd	r18, Y+23	; 0x17
    17ec:	38 8d       	ldd	r19, Y+24	; 0x18
    17ee:	30 93 ee 00 	sts	0x00EE, r19
    17f2:	20 93 ed 00 	sts	0x00ED, r18
    17f6:	31 c0       	rjmp	.+98     	; 0x185a <coordinates_tobe_reached+0x28c>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    17f8:	68 19       	sub	r22, r8
    17fa:	79 09       	sbc	r23, r9
    17fc:	80 91 ed 00 	lds	r24, 0x00ED
    1800:	90 91 ee 00 	lds	r25, 0x00EE
    1804:	8a 19       	sub	r24, r10
    1806:	9b 09       	sbc	r25, r11
							if(t1<t2)
    1808:	44 9c       	mul	r4, r4
    180a:	a0 01       	movw	r20, r0
    180c:	45 9c       	mul	r4, r5
    180e:	50 0d       	add	r21, r0
    1810:	54 9c       	mul	r5, r4
    1812:	50 0d       	add	r21, r0
    1814:	11 24       	eor	r1, r1
    1816:	e9 85       	ldd	r30, Y+9	; 0x09
    1818:	fa 85       	ldd	r31, Y+10	; 0x0a
    181a:	4e 0f       	add	r20, r30
    181c:	5f 1f       	adc	r21, r31
    181e:	9c 01       	movw	r18, r24
    1820:	22 9f       	mul	r18, r18
    1822:	c0 01       	movw	r24, r0
    1824:	23 9f       	mul	r18, r19
    1826:	90 0d       	add	r25, r0
    1828:	32 9f       	mul	r19, r18
    182a:	90 0d       	add	r25, r0
    182c:	11 24       	eor	r1, r1
    182e:	66 9f       	mul	r22, r22
    1830:	90 01       	movw	r18, r0
    1832:	67 9f       	mul	r22, r23
    1834:	30 0d       	add	r19, r0
    1836:	76 9f       	mul	r23, r22
    1838:	30 0d       	add	r19, r0
    183a:	11 24       	eor	r1, r1
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	48 17       	cp	r20, r24
    1842:	59 07       	cpc	r21, r25
    1844:	54 f4       	brge	.+20     	; 0x185a <coordinates_tobe_reached+0x28c>
							{
								mx = i;
    1846:	10 93 ec 00 	sts	0x00EC, r17
    184a:	00 93 eb 00 	sts	0x00EB, r16
								my = j;
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	90 93 ee 00 	sts	0x00EE, r25
    1856:	80 93 ed 00 	sts	0x00ED, r24
							}
						}
					}
				}
				if(dir_array[i][j][3]==1)
    185a:	f7 01       	movw	r30, r14
    185c:	86 81       	ldd	r24, Z+6	; 0x06
    185e:	97 81       	ldd	r25, Z+7	; 0x07
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	09 f0       	breq	.+2      	; 0x1866 <coordinates_tobe_reached+0x298>
    1864:	52 c0       	rjmp	.+164    	; 0x190a <coordinates_tobe_reached+0x33c>
				{
					if(is_coordinate_null(i-1,j))
    1866:	89 89       	ldd	r24, Y+17	; 0x11
    1868:	9a 89       	ldd	r25, Y+18	; 0x12
    186a:	6f 89       	ldd	r22, Y+23	; 0x17
    186c:	78 8d       	ldd	r23, Y+24	; 0x18
    186e:	0e 94 3c 06 	call	0xc78	; 0xc78 <is_coordinate_null>
    1872:	89 2b       	or	r24, r25
    1874:	09 f4       	brne	.+2      	; 0x1878 <coordinates_tobe_reached+0x2aa>
    1876:	49 c0       	rjmp	.+146    	; 0x190a <coordinates_tobe_reached+0x33c>
					{
						if(mx==0 && my==0)
    1878:	60 91 eb 00 	lds	r22, 0x00EB
    187c:	70 91 ec 00 	lds	r23, 0x00EC
    1880:	61 15       	cp	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	89 f4       	brne	.+34     	; 0x18a8 <coordinates_tobe_reached+0x2da>
    1886:	80 91 ed 00 	lds	r24, 0x00ED
    188a:	90 91 ee 00 	lds	r25, 0x00EE
    188e:	89 2b       	or	r24, r25
    1890:	59 f4       	brne	.+22     	; 0x18a8 <coordinates_tobe_reached+0x2da>
						{
							mx = i;
    1892:	10 93 ec 00 	sts	0x00EC, r17
    1896:	00 93 eb 00 	sts	0x00EB, r16
							my = j;
    189a:	2f 89       	ldd	r18, Y+23	; 0x17
    189c:	38 8d       	ldd	r19, Y+24	; 0x18
    189e:	30 93 ee 00 	sts	0x00EE, r19
    18a2:	20 93 ed 00 	sts	0x00ED, r18
    18a6:	31 c0       	rjmp	.+98     	; 0x190a <coordinates_tobe_reached+0x33c>
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
							t2 = (((mx-x_coordinate)*(mx-x_coordinate))+((my-y_coordinate)*(my-y_coordinate)));
    18a8:	68 19       	sub	r22, r8
    18aa:	79 09       	sbc	r23, r9
    18ac:	80 91 ed 00 	lds	r24, 0x00ED
    18b0:	90 91 ee 00 	lds	r25, 0x00EE
    18b4:	8a 19       	sub	r24, r10
    18b6:	9b 09       	sbc	r25, r11
							if(t1<t2)
    18b8:	22 9c       	mul	r2, r2
    18ba:	a0 01       	movw	r20, r0
    18bc:	23 9c       	mul	r2, r3
    18be:	50 0d       	add	r21, r0
    18c0:	32 9c       	mul	r3, r2
    18c2:	50 0d       	add	r21, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	ef 81       	ldd	r30, Y+7	; 0x07
    18c8:	f8 85       	ldd	r31, Y+8	; 0x08
    18ca:	4e 0f       	add	r20, r30
    18cc:	5f 1f       	adc	r21, r31
    18ce:	9c 01       	movw	r18, r24
    18d0:	22 9f       	mul	r18, r18
    18d2:	c0 01       	movw	r24, r0
    18d4:	23 9f       	mul	r18, r19
    18d6:	90 0d       	add	r25, r0
    18d8:	32 9f       	mul	r19, r18
    18da:	90 0d       	add	r25, r0
    18dc:	11 24       	eor	r1, r1
    18de:	66 9f       	mul	r22, r22
    18e0:	90 01       	movw	r18, r0
    18e2:	67 9f       	mul	r22, r23
    18e4:	30 0d       	add	r19, r0
    18e6:	76 9f       	mul	r23, r22
    18e8:	30 0d       	add	r19, r0
    18ea:	11 24       	eor	r1, r1
    18ec:	82 0f       	add	r24, r18
    18ee:	93 1f       	adc	r25, r19
    18f0:	48 17       	cp	r20, r24
    18f2:	59 07       	cpc	r21, r25
    18f4:	54 f4       	brge	.+20     	; 0x190a <coordinates_tobe_reached+0x33c>
							{
								mx = i;
    18f6:	10 93 ec 00 	sts	0x00EC, r17
    18fa:	00 93 eb 00 	sts	0x00EB, r16
								my = j;
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	90 93 ee 00 	sts	0x00EE, r25
    1906:	80 93 ed 00 	sts	0x00ED, r24
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<10 ; i++)
	{
		for(int j = 0 ; j<10 ; j++)
    190a:	ef 89       	ldd	r30, Y+23	; 0x17
    190c:	f8 8d       	ldd	r31, Y+24	; 0x18
    190e:	31 96       	adiw	r30, 0x01	; 1
    1910:	f8 8f       	std	Y+24, r31	; 0x18
    1912:	ef 8b       	std	Y+23, r30	; 0x17
    1914:	28 e0       	ldi	r18, 0x08	; 8
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	e2 0e       	add	r14, r18
    191a:	f3 1e       	adc	r15, r19
    191c:	08 94       	sec
    191e:	21 1c       	adc	r2, r1
    1920:	31 1c       	adc	r3, r1
    1922:	08 94       	sec
    1924:	41 1c       	adc	r4, r1
    1926:	51 1c       	adc	r5, r1
    1928:	08 94       	sec
    192a:	61 1c       	adc	r6, r1
    192c:	71 1c       	adc	r7, r1
    192e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1930:	9e 85       	ldd	r25, Y+14	; 0x0e
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	9e 87       	std	Y+14, r25	; 0x0e
    1936:	8d 87       	std	Y+13, r24	; 0x0d
    1938:	3a 97       	sbiw	r30, 0x0a	; 10
    193a:	09 f0       	breq	.+2      	; 0x193e <coordinates_tobe_reached+0x370>
    193c:	85 ce       	rjmp	.-758    	; 0x1648 <coordinates_tobe_reached+0x7a>
void coordinates_tobe_reached()
{
	int stop=0, t1, t2;
	mx = 0;
	my = 0;
	for(int i = 0 ; i<10 ; i++)
    193e:	0f 5f       	subi	r16, 0xFF	; 255
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	08 94       	sec
    1944:	c1 1c       	adc	r12, r1
    1946:	d1 1c       	adc	r13, r1
    1948:	ed 81       	ldd	r30, Y+5	; 0x05
    194a:	fe 81       	ldd	r31, Y+6	; 0x06
    194c:	31 96       	adiw	r30, 0x01	; 1
    194e:	fe 83       	std	Y+6, r31	; 0x06
    1950:	ed 83       	std	Y+5, r30	; 0x05
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	3c 83       	std	Y+4, r19	; 0x04
    195c:	2b 83       	std	Y+3, r18	; 0x03
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	0a 30       	cpi	r16, 0x0A	; 10
    196a:	11 05       	cpc	r17, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <coordinates_tobe_reached+0x3a2>
    196e:	4a c0       	rjmp	.+148    	; 0x1a04 <coordinates_tobe_reached+0x436>
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1970:	cc 9c       	mul	r12, r12
    1972:	f0 01       	movw	r30, r0
    1974:	cd 9c       	mul	r12, r13
    1976:	f0 0d       	add	r31, r0
    1978:	dc 9c       	mul	r13, r12
    197a:	f0 0d       	add	r31, r0
    197c:	11 24       	eor	r1, r1
    197e:	f8 8b       	std	Y+16, r31	; 0x10
    1980:	ef 87       	std	Y+15, r30	; 0x0f
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	88 9f       	mul	r24, r24
    1988:	90 01       	movw	r18, r0
    198a:	89 9f       	mul	r24, r25
    198c:	30 0d       	add	r19, r0
    198e:	98 9f       	mul	r25, r24
    1990:	30 0d       	add	r19, r0
    1992:	11 24       	eor	r1, r1
    1994:	3c 87       	std	Y+12, r19	; 0x0c
    1996:	2b 87       	std	Y+11, r18	; 0x0b
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	22 9f       	mul	r18, r18
    199e:	f0 01       	movw	r30, r0
    19a0:	23 9f       	mul	r18, r19
    19a2:	f0 0d       	add	r31, r0
    19a4:	32 9f       	mul	r19, r18
    19a6:	f0 0d       	add	r31, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	fa 87       	std	Y+10, r31	; 0x0a
    19ac:	e9 87       	std	Y+9, r30	; 0x09
							mx = i;
							my = j;
						}
						else
						{
							t1 = (((i-x_coordinate)*(i-x_coordinate))+((j-y_coordinate)*(j-y_coordinate)));   //applying distance formula
    19ae:	e9 81       	ldd	r30, Y+1	; 0x01
    19b0:	fa 81       	ldd	r31, Y+2	; 0x02
    19b2:	ee 9f       	mul	r30, r30
    19b4:	c0 01       	movw	r24, r0
    19b6:	ef 9f       	mul	r30, r31
    19b8:	90 0d       	add	r25, r0
    19ba:	fe 9f       	mul	r31, r30
    19bc:	90 0d       	add	r25, r0
    19be:	11 24       	eor	r1, r1
    19c0:	98 87       	std	Y+8, r25	; 0x08
    19c2:	8f 83       	std	Y+7, r24	; 0x07
    19c4:	20 e5       	ldi	r18, 0x50	; 80
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	02 9f       	mul	r16, r18
    19ca:	70 01       	movw	r14, r0
    19cc:	03 9f       	mul	r16, r19
    19ce:	f0 0c       	add	r15, r0
    19d0:	12 9f       	mul	r17, r18
    19d2:	f0 0c       	add	r15, r0
    19d4:	11 24       	eor	r1, r1
    19d6:	8f eb       	ldi	r24, 0xBF	; 191
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	e8 0e       	add	r14, r24
    19dc:	f9 1e       	adc	r15, r25
    19de:	ed 89       	ldd	r30, Y+21	; 0x15
    19e0:	fe 89       	ldd	r31, Y+22	; 0x16
    19e2:	fe 87       	std	Y+14, r31	; 0x0e
    19e4:	ed 87       	std	Y+13, r30	; 0x0d
    19e6:	1f 01       	movw	r2, r30
    19e8:	2f 01       	movw	r4, r30
    19ea:	3f 01       	movw	r6, r30
    19ec:	18 8e       	std	Y+24, r1	; 0x18
    19ee:	1f 8a       	std	Y+23, r1	; 0x17
						}
					}
				}
				if(dir_array[i][j][3]==1)
				{
					if(is_coordinate_null(i-1,j))
    19f0:	98 01       	movw	r18, r16
    19f2:	21 50       	subi	r18, 0x01	; 1
    19f4:	30 40       	sbci	r19, 0x00	; 0
    19f6:	3a 8b       	std	Y+18, r19	; 0x12
    19f8:	29 8b       	std	Y+17, r18	; 0x11
						}
					}
				}
				if(dir_array[i][j][1]==1)
				{
					if(is_coordinate_null(i+1,j))
    19fa:	c8 01       	movw	r24, r16
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
    1a02:	22 ce       	rjmp	.-956    	; 0x1648 <coordinates_tobe_reached+0x7a>
					}
				}	
			}	
		}
	}
}
    1a04:	68 96       	adiw	r28, 0x18	; 24
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	bf 90       	pop	r11
    1a22:	af 90       	pop	r10
    1a24:	9f 90       	pop	r9
    1a26:	8f 90       	pop	r8
    1a28:	7f 90       	pop	r7
    1a2a:	6f 90       	pop	r6
    1a2c:	5f 90       	pop	r5
    1a2e:	4f 90       	pop	r4
    1a30:	3f 90       	pop	r3
    1a32:	2f 90       	pop	r2
    1a34:	08 95       	ret

00001a36 <get_path>:
void get_path()
{ 
    1a36:	6f 92       	push	r6
    1a38:	7f 92       	push	r7
    1a3a:	8f 92       	push	r8
    1a3c:	9f 92       	push	r9
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
	int x , y;
	y = y_coordinate;
    1a52:	60 91 cf 00 	lds	r22, 0x00CF
    1a56:	70 91 d0 00 	lds	r23, 0x00D0
	x = x_coordinate;
    1a5a:	40 91 cd 00 	lds	r20, 0x00CD
    1a5e:	50 91 ce 00 	lds	r21, 0x00CE
    1a62:	05 ee       	ldi	r16, 0xE5	; 229
    1a64:	14 e0       	ldi	r17, 0x04	; 4
    1a66:	f8 01       	movw	r30, r16
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
	{
		path_array[ls][0] = 0;
    1a68:	11 82       	std	Z+1, r1	; 0x01
    1a6a:	10 82       	st	Z, r1
		path_array[ls][1] = 0;
    1a6c:	13 82       	std	Z+3, r1	; 0x03
    1a6e:	12 82       	std	Z+2, r1	; 0x02
    1a70:	34 96       	adiw	r30, 0x04	; 4
{ 
	int x , y;
	y = y_coordinate;
	x = x_coordinate;
  //startingno = map_array[x_coordinate][y_coordinate];
	for(int ls = 0; ls<15; ls++)
    1a72:	85 e0       	ldi	r24, 0x05	; 5
    1a74:	e1 32       	cpi	r30, 0x21	; 33
    1a76:	f8 07       	cpc	r31, r24
    1a78:	b9 f7       	brne	.-18     	; 0x1a68 <get_path+0x32>
    1a7a:	47 c2       	rjmp	.+1166   	; 0x1f0a <get_path+0x4d4>

	}
	int ipl=0;
	while(map_array[x][y]!=0)
	{
		if(map_array[x+1][y]<map_array[x][y] && dir_array[x][y][1]==1 && dir_array[x+1][y][3]==1 && x<9)
    1a7c:	6a 01       	movw	r12, r20
    1a7e:	08 94       	sec
    1a80:	c1 1c       	adc	r12, r1
    1a82:	d1 1c       	adc	r13, r1
    1a84:	e6 01       	movw	r28, r12
    1a86:	cc 0f       	add	r28, r28
    1a88:	dd 1f       	adc	r29, r29
    1a8a:	c6 01       	movw	r24, r12
    1a8c:	23 e0       	ldi	r18, 0x03	; 3
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	2a 95       	dec	r18
    1a94:	e1 f7       	brne	.-8      	; 0x1a8e <get_path+0x58>
    1a96:	c8 0f       	add	r28, r24
    1a98:	d9 1f       	adc	r29, r25
    1a9a:	c6 0f       	add	r28, r22
    1a9c:	d7 1f       	adc	r29, r23
    1a9e:	7e 01       	movw	r14, r28
    1aa0:	ee 0c       	add	r14, r14
    1aa2:	ff 1c       	adc	r15, r15
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	e9 50       	subi	r30, 0x09	; 9
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	a0 80       	ld	r10, Z
    1aac:	b1 80       	ldd	r11, Z+1	; 0x01
    1aae:	a8 14       	cp	r10, r8
    1ab0:	b9 04       	cpc	r11, r9
    1ab2:	0c f0       	brlt	.+2      	; 0x1ab6 <get_path+0x80>
    1ab4:	72 c0       	rjmp	.+228    	; 0x1b9a <get_path+0x164>
    1ab6:	83 e0       	ldi	r24, 0x03	; 3
    1ab8:	aa 0f       	add	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	8a 95       	dec	r24
    1abe:	e1 f7       	brne	.-8      	; 0x1ab8 <get_path+0x82>
    1ac0:	af 53       	subi	r26, 0x3F	; 63
    1ac2:	be 4f       	sbci	r27, 0xFE	; 254
    1ac4:	8d 91       	ld	r24, X+
    1ac6:	9c 91       	ld	r25, X
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	09 f0       	breq	.+2      	; 0x1ace <get_path+0x98>
    1acc:	66 c0       	rjmp	.+204    	; 0x1b9a <get_path+0x164>
    1ace:	9e 01       	movw	r18, r28
    1ad0:	a3 e0       	ldi	r26, 0x03	; 3
    1ad2:	22 0f       	add	r18, r18
    1ad4:	33 1f       	adc	r19, r19
    1ad6:	aa 95       	dec	r26
    1ad8:	e1 f7       	brne	.-8      	; 0x1ad2 <get_path+0x9c>
    1ada:	21 54       	subi	r18, 0x41	; 65
    1adc:	3e 4f       	sbci	r19, 0xFE	; 254
    1ade:	f9 01       	movw	r30, r18
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <get_path+0xb4>
    1ae8:	58 c0       	rjmp	.+176    	; 0x1b9a <get_path+0x164>
    1aea:	49 30       	cpi	r20, 0x09	; 9
    1aec:	51 05       	cpc	r21, r1
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <get_path+0xbc>
    1af0:	54 c0       	rjmp	.+168    	; 0x1b9a <get_path+0x164>
		{
			x = x+1;
			path_array[ipl][0]=x;
    1af2:	f8 01       	movw	r30, r16
    1af4:	d1 82       	std	Z+1, r13	; 0x01
    1af6:	c0 82       	st	Z, r12
			path_array[ipl][1]=y;
    1af8:	73 83       	std	Z+3, r23	; 0x03
    1afa:	62 83       	std	Z+2, r22	; 0x02
			if(map_array[x+1][y]<map_array[x][y] && dir_array[x+1][y][3]==1  && dir_array[x][y][0]==0  && dir_array[x][y][1]==1 && dir_array[x][y][2]==0 && dir_array[x][y][3]==1 && x<9)
    1afc:	a6 01       	movw	r20, r12
    1afe:	4f 5f       	subi	r20, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	da 01       	movw	r26, r20
    1b04:	aa 0f       	add	r26, r26
    1b06:	bb 1f       	adc	r27, r27
    1b08:	ca 01       	movw	r24, r20
    1b0a:	e3 e0       	ldi	r30, 0x03	; 3
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	ea 95       	dec	r30
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <get_path+0xd6>
    1b14:	a8 0f       	add	r26, r24
    1b16:	b9 1f       	adc	r27, r25
    1b18:	a6 0f       	add	r26, r22
    1b1a:	b7 1f       	adc	r27, r23
    1b1c:	fd 01       	movw	r30, r26
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	e9 50       	subi	r30, 0x09	; 9
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	8a 15       	cp	r24, r10
    1b2c:	9b 05       	cpc	r25, r11
    1b2e:	0c f0       	brlt	.+2      	; 0x1b32 <get_path+0xfc>
    1b30:	d2 c1       	rjmp	.+932    	; 0x1ed6 <get_path+0x4a0>
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	aa 0f       	add	r26, r26
    1b36:	bb 1f       	adc	r27, r27
    1b38:	8a 95       	dec	r24
    1b3a:	e1 f7       	brne	.-8      	; 0x1b34 <get_path+0xfe>
    1b3c:	a1 54       	subi	r26, 0x41	; 65
    1b3e:	be 4f       	sbci	r27, 0xFE	; 254
    1b40:	16 96       	adiw	r26, 0x06	; 6
    1b42:	8d 91       	ld	r24, X+
    1b44:	9c 91       	ld	r25, X
    1b46:	17 97       	sbiw	r26, 0x07	; 7
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <get_path+0x118>
    1b4c:	c4 c1       	rjmp	.+904    	; 0x1ed6 <get_path+0x4a0>
    1b4e:	f9 01       	movw	r30, r18
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	89 2b       	or	r24, r25
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <get_path+0x124>
    1b58:	be c1       	rjmp	.+892    	; 0x1ed6 <get_path+0x4a0>
    1b5a:	b3 e0       	ldi	r27, 0x03	; 3
    1b5c:	cc 0f       	add	r28, r28
    1b5e:	dd 1f       	adc	r29, r29
    1b60:	ba 95       	dec	r27
    1b62:	e1 f7       	brne	.-8      	; 0x1b5c <get_path+0x126>
    1b64:	cf 53       	subi	r28, 0x3F	; 63
    1b66:	de 4f       	sbci	r29, 0xFE	; 254
    1b68:	88 81       	ld	r24, Y
    1b6a:	99 81       	ldd	r25, Y+1	; 0x01
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <get_path+0x13c>
    1b70:	b2 c1       	rjmp	.+868    	; 0x1ed6 <get_path+0x4a0>
    1b72:	ee 0c       	add	r14, r14
    1b74:	ff 1c       	adc	r15, r15
    1b76:	ee 0c       	add	r14, r14
    1b78:	ff 1c       	adc	r15, r15
    1b7a:	83 ec       	ldi	r24, 0xC3	; 195
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	e8 0e       	add	r14, r24
    1b80:	f9 1e       	adc	r15, r25
    1b82:	f7 01       	movw	r30, r14
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	89 2b       	or	r24, r25
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <get_path+0x158>
    1b8c:	a4 c1       	rjmp	.+840    	; 0x1ed6 <get_path+0x4a0>
    1b8e:	f9 e0       	ldi	r31, 0x09	; 9
    1b90:	cf 16       	cp	r12, r31
    1b92:	d1 04       	cpc	r13, r1
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <get_path+0x162>
    1b96:	9f c1       	rjmp	.+830    	; 0x1ed6 <get_path+0x4a0>
    1b98:	94 c0       	rjmp	.+296    	; 0x1cc2 <get_path+0x28c>
				x = x+1;
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;
			}
		}
		else if(map_array[x-1][y]<map_array[x][y] && dir_array[x][y][3]==1 && dir_array[x-1][y][1]==1 && x>=1)
    1b9a:	7a 01       	movw	r14, r20
    1b9c:	08 94       	sec
    1b9e:	e1 08       	sbc	r14, r1
    1ba0:	f1 08       	sbc	r15, r1
    1ba2:	97 01       	movw	r18, r14
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	c7 01       	movw	r24, r14
    1baa:	e3 e0       	ldi	r30, 0x03	; 3
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	ea 95       	dec	r30
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <get_path+0x176>
    1bb4:	28 0f       	add	r18, r24
    1bb6:	39 1f       	adc	r19, r25
    1bb8:	26 0f       	add	r18, r22
    1bba:	37 1f       	adc	r19, r23
    1bbc:	e9 01       	movw	r28, r18
    1bbe:	cc 0f       	add	r28, r28
    1bc0:	dd 1f       	adc	r29, r29
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e9 50       	subi	r30, 0x09	; 9
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	c0 80       	ld	r12, Z
    1bca:	d1 80       	ldd	r13, Z+1	; 0x01
    1bcc:	c8 14       	cp	r12, r8
    1bce:	d9 04       	cpc	r13, r9
    1bd0:	0c f0       	brlt	.+2      	; 0x1bd4 <get_path+0x19e>
    1bd2:	7b c0       	rjmp	.+246    	; 0x1cca <get_path+0x294>
    1bd4:	fa 01       	movw	r30, r20
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	ca 01       	movw	r24, r20
    1bdc:	a3 e0       	ldi	r26, 0x03	; 3
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	aa 95       	dec	r26
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <get_path+0x1a8>
    1be6:	e8 0f       	add	r30, r24
    1be8:	f9 1f       	adc	r31, r25
    1bea:	e6 0f       	add	r30, r22
    1bec:	f7 1f       	adc	r31, r23
    1bee:	b3 e0       	ldi	r27, 0x03	; 3
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	ba 95       	dec	r27
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <get_path+0x1ba>
    1bf8:	e1 54       	subi	r30, 0x41	; 65
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	86 81       	ldd	r24, Z+6	; 0x06
    1bfe:	97 81       	ldd	r25, Z+7	; 0x07
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <get_path+0x1d0>
    1c04:	62 c0       	rjmp	.+196    	; 0x1cca <get_path+0x294>
    1c06:	f9 01       	movw	r30, r18
    1c08:	a3 e0       	ldi	r26, 0x03	; 3
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	aa 95       	dec	r26
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <get_path+0x1d4>
    1c12:	ef 53       	subi	r30, 0x3F	; 63
    1c14:	fe 4f       	sbci	r31, 0xFE	; 254
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <get_path+0x1ea>
    1c1e:	55 c0       	rjmp	.+170    	; 0x1cca <get_path+0x294>
    1c20:	14 16       	cp	r1, r20
    1c22:	15 06       	cpc	r1, r21
    1c24:	0c f0       	brlt	.+2      	; 0x1c28 <get_path+0x1f2>
    1c26:	51 c0       	rjmp	.+162    	; 0x1cca <get_path+0x294>
		{

			x = x-1;
			path_array[ipl][0]=x;
    1c28:	f8 01       	movw	r30, r16
    1c2a:	f1 82       	std	Z+1, r15	; 0x01
    1c2c:	e0 82       	st	Z, r14
			path_array[ipl][1]=y;
    1c2e:	73 83       	std	Z+3, r23	; 0x03
    1c30:	62 83       	std	Z+2, r22	; 0x02
			if(map_array[x-1][y]<map_array[x][y] && dir_array[x-1][y][1]==1  && dir_array[x][y][0]==0  && dir_array[x][y][1]==1 && dir_array[x][y][2]==0 && dir_array[x][y][3]==1 && x>=1)
    1c32:	a7 01       	movw	r20, r14
    1c34:	41 50       	subi	r20, 0x01	; 1
    1c36:	50 40       	sbci	r21, 0x00	; 0
    1c38:	da 01       	movw	r26, r20
    1c3a:	aa 0f       	add	r26, r26
    1c3c:	bb 1f       	adc	r27, r27
    1c3e:	ca 01       	movw	r24, r20
    1c40:	e3 e0       	ldi	r30, 0x03	; 3
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	ea 95       	dec	r30
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <get_path+0x20c>
    1c4a:	a8 0f       	add	r26, r24
    1c4c:	b9 1f       	adc	r27, r25
    1c4e:	a6 0f       	add	r26, r22
    1c50:	b7 1f       	adc	r27, r23
    1c52:	fd 01       	movw	r30, r26
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	e9 50       	subi	r30, 0x09	; 9
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	8c 15       	cp	r24, r12
    1c62:	9d 05       	cpc	r25, r13
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <get_path+0x232>
    1c66:	39 c1       	rjmp	.+626    	; 0x1eda <get_path+0x4a4>
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	aa 0f       	add	r26, r26
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	8a 95       	dec	r24
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <get_path+0x234>
    1c72:	af 53       	subi	r26, 0x3F	; 63
    1c74:	be 4f       	sbci	r27, 0xFE	; 254
    1c76:	8d 91       	ld	r24, X+
    1c78:	9c 91       	ld	r25, X
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <get_path+0x24a>
    1c7e:	2d c1       	rjmp	.+602    	; 0x1eda <get_path+0x4a4>
    1c80:	f9 01       	movw	r30, r18
    1c82:	b3 e0       	ldi	r27, 0x03	; 3
    1c84:	ee 0f       	add	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	ba 95       	dec	r27
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <get_path+0x24e>
    1c8c:	e1 54       	subi	r30, 0x41	; 65
    1c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	89 2b       	or	r24, r25
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <get_path+0x264>
    1c98:	20 c1       	rjmp	.+576    	; 0x1eda <get_path+0x4a4>
    1c9a:	cc 0f       	add	r28, r28
    1c9c:	dd 1f       	adc	r29, r29
    1c9e:	cc 0f       	add	r28, r28
    1ca0:	dd 1f       	adc	r29, r29
    1ca2:	cd 53       	subi	r28, 0x3D	; 61
    1ca4:	de 4f       	sbci	r29, 0xFE	; 254
    1ca6:	88 81       	ld	r24, Y
    1ca8:	99 81       	ldd	r25, Y+1	; 0x01
    1caa:	89 2b       	or	r24, r25
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <get_path+0x27a>
    1cae:	15 c1       	rjmp	.+554    	; 0x1eda <get_path+0x4a4>
    1cb0:	86 81       	ldd	r24, Z+6	; 0x06
    1cb2:	97 81       	ldd	r25, Z+7	; 0x07
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <get_path+0x284>
    1cb8:	10 c1       	rjmp	.+544    	; 0x1eda <get_path+0x4a4>
    1cba:	1e 14       	cp	r1, r14
    1cbc:	1f 04       	cpc	r1, r15
    1cbe:	0c f0       	brlt	.+2      	; 0x1cc2 <get_path+0x28c>
    1cc0:	0c c1       	rjmp	.+536    	; 0x1eda <get_path+0x4a4>
			{
				x = x-1;
				path_array[ipl][0]=x;
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	51 83       	std	Z+1, r21	; 0x01
    1cc6:	40 83       	st	Z, r20
    1cc8:	0d c1       	rjmp	.+538    	; 0x1ee4 <get_path+0x4ae>
				path_array[ipl][1]=y;

			}
		}

		else if(map_array[x][y+1]<map_array[x][y] && dir_array[x][y][0]==1 && dir_array[x][y+1][2]==1 && y<9)
    1cca:	7b 01       	movw	r14, r22
    1ccc:	08 94       	sec
    1cce:	e1 1c       	adc	r14, r1
    1cd0:	f1 1c       	adc	r15, r1
    1cd2:	9a 01       	movw	r18, r20
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	ca 01       	movw	r24, r20
    1cda:	e3 e0       	ldi	r30, 0x03	; 3
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	ea 95       	dec	r30
    1ce2:	e1 f7       	brne	.-8      	; 0x1cdc <get_path+0x2a6>
    1ce4:	28 0f       	add	r18, r24
    1ce6:	39 1f       	adc	r19, r25
    1ce8:	e9 01       	movw	r28, r18
    1cea:	ce 0d       	add	r28, r14
    1cec:	df 1d       	adc	r29, r15
    1cee:	de 01       	movw	r26, r28
    1cf0:	aa 0f       	add	r26, r26
    1cf2:	bb 1f       	adc	r27, r27
    1cf4:	fd 01       	movw	r30, r26
    1cf6:	e9 50       	subi	r30, 0x09	; 9
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	c0 80       	ld	r12, Z
    1cfc:	d1 80       	ldd	r13, Z+1	; 0x01
    1cfe:	c8 14       	cp	r12, r8
    1d00:	d9 04       	cpc	r13, r9
    1d02:	0c f0       	brlt	.+2      	; 0x1d06 <get_path+0x2d0>
    1d04:	63 c0       	rjmp	.+198    	; 0x1dcc <get_path+0x396>
    1d06:	f9 01       	movw	r30, r18
    1d08:	e6 0f       	add	r30, r22
    1d0a:	f7 1f       	adc	r31, r23
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	ee 0f       	add	r30, r30
    1d10:	ff 1f       	adc	r31, r31
    1d12:	8a 95       	dec	r24
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <get_path+0x2d8>
    1d16:	e1 54       	subi	r30, 0x41	; 65
    1d18:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <get_path+0x2ee>
    1d22:	54 c0       	rjmp	.+168    	; 0x1dcc <get_path+0x396>
    1d24:	aa 0f       	add	r26, r26
    1d26:	bb 1f       	adc	r27, r27
    1d28:	aa 0f       	add	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	ad 53       	subi	r26, 0x3D	; 61
    1d2e:	be 4f       	sbci	r27, 0xFE	; 254
    1d30:	8d 91       	ld	r24, X+
    1d32:	9c 91       	ld	r25, X
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <get_path+0x304>
    1d38:	49 c0       	rjmp	.+146    	; 0x1dcc <get_path+0x396>
    1d3a:	69 30       	cpi	r22, 0x09	; 9
    1d3c:	71 05       	cpc	r23, r1
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <get_path+0x30c>
    1d40:	45 c0       	rjmp	.+138    	; 0x1dcc <get_path+0x396>
		{

			y = y+1;
			path_array[ipl][0]=x;
    1d42:	f8 01       	movw	r30, r16
    1d44:	51 83       	std	Z+1, r21	; 0x01
    1d46:	40 83       	st	Z, r20
			path_array[ipl][1]=y;
    1d48:	f3 82       	std	Z+3, r15	; 0x03
    1d4a:	e2 82       	std	Z+2, r14	; 0x02
			if(map_array[x][y+1]<map_array[x][y]  && dir_array[x][y+1][2]==1 && dir_array[x][y][0]==1 && dir_array[x][y][1]==0 && dir_array[x][y][2]==1 && dir_array[x][y][3]==0 && y<9)
    1d4c:	b7 01       	movw	r22, r14
    1d4e:	6f 5f       	subi	r22, 0xFF	; 255
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	d9 01       	movw	r26, r18
    1d54:	a6 0f       	add	r26, r22
    1d56:	b7 1f       	adc	r27, r23
    1d58:	aa 0f       	add	r26, r26
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	fd 01       	movw	r30, r26
    1d5e:	e9 50       	subi	r30, 0x09	; 9
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	8c 15       	cp	r24, r12
    1d68:	9d 05       	cpc	r25, r13
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <get_path+0x338>
    1d6c:	b8 c0       	rjmp	.+368    	; 0x1ede <get_path+0x4a8>
    1d6e:	aa 0f       	add	r26, r26
    1d70:	bb 1f       	adc	r27, r27
    1d72:	aa 0f       	add	r26, r26
    1d74:	bb 1f       	adc	r27, r27
    1d76:	ad 53       	subi	r26, 0x3D	; 61
    1d78:	be 4f       	sbci	r27, 0xFE	; 254
    1d7a:	8d 91       	ld	r24, X+
    1d7c:	9c 91       	ld	r25, X
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <get_path+0x34e>
    1d82:	ad c0       	rjmp	.+346    	; 0x1ede <get_path+0x4a8>
    1d84:	fe 01       	movw	r30, r28
    1d86:	b3 e0       	ldi	r27, 0x03	; 3
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	ba 95       	dec	r27
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <get_path+0x352>
    1d90:	e1 54       	subi	r30, 0x41	; 65
    1d92:	fe 4f       	sbci	r31, 0xFE	; 254
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	09 f0       	breq	.+2      	; 0x1d9e <get_path+0x368>
    1d9c:	a0 c0       	rjmp	.+320    	; 0x1ede <get_path+0x4a8>
    1d9e:	a3 e0       	ldi	r26, 0x03	; 3
    1da0:	cc 0f       	add	r28, r28
    1da2:	dd 1f       	adc	r29, r29
    1da4:	aa 95       	dec	r26
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <get_path+0x36a>
    1da8:	cf 53       	subi	r28, 0x3F	; 63
    1daa:	de 4f       	sbci	r29, 0xFE	; 254
    1dac:	88 81       	ld	r24, Y
    1dae:	99 81       	ldd	r25, Y+1	; 0x01
    1db0:	89 2b       	or	r24, r25
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <get_path+0x380>
    1db4:	94 c0       	rjmp	.+296    	; 0x1ede <get_path+0x4a8>
    1db6:	86 81       	ldd	r24, Z+6	; 0x06
    1db8:	97 81       	ldd	r25, Z+7	; 0x07
    1dba:	89 2b       	or	r24, r25
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <get_path+0x38a>
    1dbe:	8f c0       	rjmp	.+286    	; 0x1ede <get_path+0x4a8>
    1dc0:	f9 e0       	ldi	r31, 0x09	; 9
    1dc2:	ef 16       	cp	r14, r31
    1dc4:	f1 04       	cpc	r15, r1
    1dc6:	0c f0       	brlt	.+2      	; 0x1dca <get_path+0x394>
    1dc8:	8a c0       	rjmp	.+276    	; 0x1ede <get_path+0x4a8>
    1dca:	81 c0       	rjmp	.+258    	; 0x1ece <get_path+0x498>
				path_array[ipl][0]=x;
				path_array[ipl][1]=y;

			}
		}
		else if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y][2]==1 && dir_array[x][y-1][0]==1 && y>=1)
    1dcc:	5b 01       	movw	r10, r22
    1dce:	08 94       	sec
    1dd0:	a1 08       	sbc	r10, r1
    1dd2:	b1 08       	sbc	r11, r1
    1dd4:	9a 01       	movw	r18, r20
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	ca 01       	movw	r24, r20
    1ddc:	e3 e0       	ldi	r30, 0x03	; 3
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	ea 95       	dec	r30
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <get_path+0x3a8>
    1de6:	28 0f       	add	r18, r24
    1de8:	39 1f       	adc	r19, r25
    1dea:	e9 01       	movw	r28, r18
    1dec:	ca 0d       	add	r28, r10
    1dee:	db 1d       	adc	r29, r11
    1df0:	7e 01       	movw	r14, r28
    1df2:	ee 0c       	add	r14, r14
    1df4:	ff 1c       	adc	r15, r15
    1df6:	f7 01       	movw	r30, r14
    1df8:	e9 50       	subi	r30, 0x09	; 9
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 80       	ld	r6, Z
    1dfe:	71 80       	ldd	r7, Z+1	; 0x01
    1e00:	68 14       	cp	r6, r8
    1e02:	79 04       	cpc	r7, r9
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <get_path+0x3d2>
    1e06:	6e c0       	rjmp	.+220    	; 0x1ee4 <get_path+0x4ae>
    1e08:	f9 01       	movw	r30, r18
    1e0a:	e6 0f       	add	r30, r22
    1e0c:	f7 1f       	adc	r31, r23
    1e0e:	a3 e0       	ldi	r26, 0x03	; 3
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	aa 95       	dec	r26
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <get_path+0x3da>
    1e18:	ed 53       	subi	r30, 0x3D	; 61
    1e1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <get_path+0x3f0>
    1e24:	5f c0       	rjmp	.+190    	; 0x1ee4 <get_path+0x4ae>
    1e26:	6e 01       	movw	r12, r28
    1e28:	e3 e0       	ldi	r30, 0x03	; 3
    1e2a:	cc 0c       	add	r12, r12
    1e2c:	dd 1c       	adc	r13, r13
    1e2e:	ea 95       	dec	r30
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <get_path+0x3f4>
    1e32:	8f eb       	ldi	r24, 0xBF	; 191
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	c8 0e       	add	r12, r24
    1e38:	d9 1e       	adc	r13, r25
    1e3a:	f6 01       	movw	r30, r12
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <get_path+0x410>
    1e44:	4f c0       	rjmp	.+158    	; 0x1ee4 <get_path+0x4ae>
    1e46:	16 16       	cp	r1, r22
    1e48:	17 06       	cpc	r1, r23
    1e4a:	0c f0       	brlt	.+2      	; 0x1e4e <get_path+0x418>
    1e4c:	4b c0       	rjmp	.+150    	; 0x1ee4 <get_path+0x4ae>
		{

			y = y-1;
			path_array[ipl][0]=x;
    1e4e:	f8 01       	movw	r30, r16
    1e50:	51 83       	std	Z+1, r21	; 0x01
    1e52:	40 83       	st	Z, r20
			path_array[ipl][1]=y;
    1e54:	b3 82       	std	Z+3, r11	; 0x03
    1e56:	a2 82       	std	Z+2, r10	; 0x02
			if(map_array[x][y-1]<map_array[x][y] && dir_array[x][y-1][0]==1 && dir_array[x][y][0]==1 && dir_array[x][y][1]==0 && dir_array[x][y][2]==1 && dir_array[x][y][3]==0 && y>=1)
    1e58:	b5 01       	movw	r22, r10
    1e5a:	61 50       	subi	r22, 0x01	; 1
    1e5c:	70 40       	sbci	r23, 0x00	; 0
    1e5e:	d9 01       	movw	r26, r18
    1e60:	a6 0f       	add	r26, r22
    1e62:	b7 1f       	adc	r27, r23
    1e64:	fd 01       	movw	r30, r26
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	e9 50       	subi	r30, 0x09	; 9
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	91 81       	ldd	r25, Z+1	; 0x01
    1e72:	86 15       	cp	r24, r6
    1e74:	97 05       	cpc	r25, r7
    1e76:	ac f5       	brge	.+106    	; 0x1ee2 <get_path+0x4ac>
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	aa 0f       	add	r26, r26
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	8a 95       	dec	r24
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <get_path+0x444>
    1e82:	a1 54       	subi	r26, 0x41	; 65
    1e84:	be 4f       	sbci	r27, 0xFE	; 254
    1e86:	8d 91       	ld	r24, X+
    1e88:	9c 91       	ld	r25, X
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	51 f5       	brne	.+84     	; 0x1ee2 <get_path+0x4ac>
    1e8e:	f3 e0       	ldi	r31, 0x03	; 3
    1e90:	cc 0f       	add	r28, r28
    1e92:	dd 1f       	adc	r29, r29
    1e94:	fa 95       	dec	r31
    1e96:	e1 f7       	brne	.-8      	; 0x1e90 <get_path+0x45a>
    1e98:	cf 53       	subi	r28, 0x3F	; 63
    1e9a:	de 4f       	sbci	r29, 0xFE	; 254
    1e9c:	88 81       	ld	r24, Y
    1e9e:	99 81       	ldd	r25, Y+1	; 0x01
    1ea0:	89 2b       	or	r24, r25
    1ea2:	f9 f4       	brne	.+62     	; 0x1ee2 <get_path+0x4ac>
    1ea4:	ee 0c       	add	r14, r14
    1ea6:	ff 1c       	adc	r15, r15
    1ea8:	ee 0c       	add	r14, r14
    1eaa:	ff 1c       	adc	r15, r15
    1eac:	83 ec       	ldi	r24, 0xC3	; 195
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	e8 0e       	add	r14, r24
    1eb2:	f9 1e       	adc	r15, r25
    1eb4:	f7 01       	movw	r30, r14
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	91 f4       	brne	.+36     	; 0x1ee2 <get_path+0x4ac>
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	86 81       	ldd	r24, Z+6	; 0x06
    1ec2:	97 81       	ldd	r25, Z+7	; 0x07
    1ec4:	89 2b       	or	r24, r25
    1ec6:	69 f4       	brne	.+26     	; 0x1ee2 <get_path+0x4ac>
    1ec8:	1a 14       	cp	r1, r10
    1eca:	1b 04       	cpc	r1, r11
    1ecc:	54 f4       	brge	.+20     	; 0x1ee2 <get_path+0x4ac>
			{
				y = y-1;
				path_array[ipl][0]=x;
    1ece:	f8 01       	movw	r30, r16
				path_array[ipl][1]=y;
    1ed0:	73 83       	std	Z+3, r23	; 0x03
    1ed2:	62 83       	std	Z+2, r22	; 0x02
    1ed4:	07 c0       	rjmp	.+14     	; 0x1ee4 <get_path+0x4ae>
    1ed6:	a6 01       	movw	r20, r12
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <get_path+0x4ae>
    1eda:	a7 01       	movw	r20, r14
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <get_path+0x4ae>
    1ede:	b7 01       	movw	r22, r14
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <get_path+0x4ae>
    1ee2:	b5 01       	movw	r22, r10
    1ee4:	0c 5f       	subi	r16, 0xFC	; 252
    1ee6:	1f 4f       	sbci	r17, 0xFF	; 255
		// if(is_coordinate_null(x,y))
		// {
		//   break;
		// }
		ipl++;
		if(ipl>15)
    1ee8:	f5 e0       	ldi	r31, 0x05	; 5
    1eea:	05 32       	cpi	r16, 0x25	; 37
    1eec:	1f 07       	cpc	r17, r31
    1eee:	69 f4       	brne	.+26     	; 0x1f0a <get_path+0x4d4>
		{
			lcd_clear();
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("Broke path ");
    1ef8:	88 e7       	ldi	r24, 0x78	; 120
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(2);
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    1f08:	18 c0       	rjmp	.+48     	; 0x1f3a <get_path+0x504>
		path_array[ls][0] = 0;
		path_array[ls][1] = 0;

	}
	int ipl=0;
	while(map_array[x][y]!=0)
    1f0a:	da 01       	movw	r26, r20
    1f0c:	aa 0f       	add	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	ca 01       	movw	r24, r20
    1f12:	23 e0       	ldi	r18, 0x03	; 3
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	2a 95       	dec	r18
    1f1a:	e1 f7       	brne	.-8      	; 0x1f14 <get_path+0x4de>
    1f1c:	a8 0f       	add	r26, r24
    1f1e:	b9 1f       	adc	r27, r25
    1f20:	a6 0f       	add	r26, r22
    1f22:	b7 1f       	adc	r27, r23
    1f24:	fd 01       	movw	r30, r26
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	e9 50       	subi	r30, 0x09	; 9
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 80       	ld	r8, Z
    1f30:	91 80       	ldd	r9, Z+1	; 0x01
    1f32:	81 14       	cp	r8, r1
    1f34:	91 04       	cpc	r9, r1
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <get_path+0x504>
    1f38:	a1 cd       	rjmp	.-1214   	; 0x1a7c <get_path+0x46>
			lcd_write_string("Broke path ");
			delay_sec(2);
			break;
		}
	}
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	7f 90       	pop	r7
    1f54:	6f 90       	pop	r6
    1f56:	08 95       	ret

00001f58 <build_map>:
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
    1f58:	6f 92       	push	r6
    1f5a:	7f 92       	push	r7
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	3c 01       	movw	r6, r24
    1f76:	6b 01       	movw	r12, r22
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
	for (int i = 0; i < 10; i++)
    1f7c:	04 e1       	ldi	r16, 0x14	; 20
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (int j = 0; j < 10; j++)
		{
			map_array[i][j] = 100;
    1f80:	c4 e6       	ldi	r28, 0x64	; 100
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
    1f84:	0a c0       	rjmp	.+20     	; 0x1f9a <build_map+0x42>
    1f86:	c1 93       	st	Z+, r28
    1f88:	d1 93       	st	Z+, r29
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	8a 30       	cpi	r24, 0x0A	; 10
    1f8e:	91 05       	cpc	r25, r1
    1f90:	d1 f7       	brne	.-12     	; 0x1f86 <build_map+0x2e>
		}
	}
}
void build_map(int start_x , int start_y , int destn_x , int destn_y)  
{
	for (int i = 0; i < 10; i++)
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	aa 30       	cpi	r26, 0x0A	; 10
    1f96:	b1 05       	cpc	r27, r1
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <build_map+0x5a>
    1f9a:	a0 9f       	mul	r26, r16
    1f9c:	f0 01       	movw	r30, r0
    1f9e:	a1 9f       	mul	r26, r17
    1fa0:	f0 0d       	add	r31, r0
    1fa2:	b0 9f       	mul	r27, r16
    1fa4:	f0 0d       	add	r31, r0
    1fa6:	11 24       	eor	r1, r1
    1fa8:	e9 50       	subi	r30, 0x09	; 9
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	ea cf       	rjmp	.-44     	; 0x1f86 <build_map+0x2e>
		}
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
    1fb2:	ca 01       	movw	r24, r20
    1fb4:	fa 01       	movw	r30, r20
    1fb6:	43 e0       	ldi	r20, 0x03	; 3
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	4a 95       	dec	r20
    1fbe:	e1 f7       	brne	.-8      	; 0x1fb8 <build_map+0x60>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	e8 0f       	add	r30, r24
    1fc6:	f9 1f       	adc	r31, r25
    1fc8:	e2 0f       	add	r30, r18
    1fca:	f3 1f       	adc	r31, r19
    1fcc:	ee 0f       	add	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	e9 50       	subi	r30, 0x09	; 9
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	11 82       	std	Z+1, r1	; 0x01
    1fd6:	10 82       	st	Z, r1
    1fd8:	00 e0       	ldi	r16, 0x00	; 0
    1fda:	10 e0       	ldi	r17, 0x00	; 0
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<10; l++)
    1fdc:	b4 e1       	ldi	r27, 0x14	; 20
    1fde:	8b 2e       	mov	r8, r27
    1fe0:	91 2c       	mov	r9, r1
    1fe2:	a6 ef       	ldi	r26, 0xF6	; 246
    1fe4:	aa 2e       	mov	r10, r26
    1fe6:	af ef       	ldi	r26, 0xFF	; 255
    1fe8:	ba 2e       	mov	r11, r26
    1fea:	9b c0       	rjmp	.+310    	; 0x2122 <build_map+0x1ca>
		{
			for(int s=0; s<10; s++)
			{
				if(map_array[l][s]==fi)
    1fec:	54 96       	adiw	r26, 0x14	; 20
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	55 97       	sbiw	r26, 0x15	; 21
    1ff4:	80 17       	cp	r24, r16
    1ff6:	91 07       	cpc	r25, r17
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <build_map+0xa4>
    1ffa:	4a c0       	rjmp	.+148    	; 0x2090 <build_map+0x138>
				{
					if(dir_array[l][s][0]==1 && dir_array[l][s+1][2]==1)
    1ffc:	80 85       	ldd	r24, Z+8	; 0x08
    1ffe:	91 85       	ldd	r25, Z+9	; 0x09
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	79 f4       	brne	.+30     	; 0x2022 <build_map+0xca>
    2004:	84 89       	ldd	r24, Z+20	; 0x14
    2006:	95 89       	ldd	r25, Z+21	; 0x15
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	59 f4       	brne	.+22     	; 0x2022 <build_map+0xca>
					{
						if(map_array[l][s+1]==100)
    200c:	56 96       	adiw	r26, 0x16	; 22
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	57 97       	sbiw	r26, 0x17	; 23
    2014:	84 36       	cpi	r24, 0x64	; 100
    2016:	91 05       	cpc	r25, r1
    2018:	21 f4       	brne	.+8      	; 0x2022 <build_map+0xca>
						{
							map_array[l][s+1]=(fi+1);
    201a:	57 96       	adiw	r26, 0x17	; 23
    201c:	7c 93       	st	X, r23
    201e:	6e 93       	st	-X, r22
    2020:	56 97       	sbiw	r26, 0x16	; 22
						}
					}
					if(dir_array[l][s][1]==1 && dir_array[l+1][s][3]==1)
    2022:	82 85       	ldd	r24, Z+10	; 0x0a
    2024:	93 85       	ldd	r25, Z+11	; 0x0b
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	79 f4       	brne	.+30     	; 0x2048 <build_map+0xf0>
    202a:	e2 5a       	subi	r30, 0xA2	; 162
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	ee 55       	subi	r30, 0x5E	; 94
    2034:	f0 40       	sbci	r31, 0x00	; 0
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	39 f4       	brne	.+14     	; 0x2048 <build_map+0xf0>
					{
						if(map_array[l+1][s]==100)
    203a:	8e 89       	ldd	r24, Y+22	; 0x16
    203c:	9f 89       	ldd	r25, Y+23	; 0x17
    203e:	84 36       	cpi	r24, 0x64	; 100
    2040:	91 05       	cpc	r25, r1
    2042:	11 f4       	brne	.+4      	; 0x2048 <build_map+0xf0>
						{
							map_array[l+1][s]=(fi+1);
    2044:	7f 8b       	std	Y+23, r23	; 0x17
    2046:	6e 8b       	std	Y+22, r22	; 0x16
						}
					}
					if(dir_array[l][s][2]==1 && dir_array[l][s-1][0]==1)
    2048:	84 85       	ldd	r24, Z+12	; 0x0c
    204a:	95 85       	ldd	r25, Z+13	; 0x0d
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	59 f4       	brne	.+22     	; 0x2066 <build_map+0x10e>
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	39 f4       	brne	.+14     	; 0x2066 <build_map+0x10e>
					{
						if(map_array[l][s-1]==100)
    2058:	88 81       	ld	r24, Y
    205a:	99 81       	ldd	r25, Y+1	; 0x01
    205c:	84 36       	cpi	r24, 0x64	; 100
    205e:	91 05       	cpc	r25, r1
    2060:	11 f4       	brne	.+4      	; 0x2066 <build_map+0x10e>
						{
							map_array[l][s-1]=(fi+1);
    2062:	79 83       	std	Y+1, r23	; 0x01
    2064:	68 83       	st	Y, r22
						}
					}
					if(dir_array[l][s][3]==1 && dir_array[l-1][s][1]==1)
    2066:	86 85       	ldd	r24, Z+14	; 0x0e
    2068:	97 85       	ldd	r25, Z+15	; 0x0f
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	89 f4       	brne	.+34     	; 0x2090 <build_map+0x138>
    206e:	e6 54       	subi	r30, 0x46	; 70
    2070:	f0 40       	sbci	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	ea 5b       	subi	r30, 0xBA	; 186
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	49 f4       	brne	.+18     	; 0x2090 <build_map+0x138>
					{
						if(map_array[l-1][s]==100)
    207e:	8d 91       	ld	r24, X+
    2080:	9c 91       	ld	r25, X
    2082:	11 97       	sbiw	r26, 0x01	; 1
    2084:	84 36       	cpi	r24, 0x64	; 100
    2086:	91 05       	cpc	r25, r1
    2088:	19 f4       	brne	.+6      	; 0x2090 <build_map+0x138>
						{
							map_array[l-1][s]=(fi+1);
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	7c 93       	st	X, r23
    208e:	6e 93       	st	-X, r22
    2090:	12 96       	adiw	r26, 0x02	; 2
    2092:	38 96       	adiw	r30, 0x08	; 8
    2094:	22 96       	adiw	r28, 0x02	; 2
	{
		//l=x ,s=y
		
		for(int l=0; l<10; l++)
		{
			for(int s=0; s<10; s++)
    2096:	ae 15       	cp	r26, r14
    2098:	bf 05       	cpc	r27, r15
    209a:	09 f0       	breq	.+2      	; 0x209e <build_map+0x146>
    209c:	a7 cf       	rjmp	.-178    	; 0x1fec <build_map+0x94>
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
	{
		//l=x ,s=y
		
		for(int l=0; l<10; l++)
    209e:	4f 5f       	subi	r20, 0xFF	; 255
    20a0:	5f 4f       	sbci	r21, 0xFF	; 255
    20a2:	f4 e1       	ldi	r31, 0x14	; 20
    20a4:	ef 2e       	mov	r14, r31
    20a6:	f1 2c       	mov	r15, r1
    20a8:	ea 0e       	add	r14, r26
    20aa:	fb 1e       	adc	r15, r27
    20ac:	4a 30       	cpi	r20, 0x0A	; 10
    20ae:	51 05       	cpc	r21, r1
    20b0:	31 f1       	breq	.+76     	; 0x20fe <build_map+0x1a6>
    20b2:	48 9d       	mul	r20, r8
    20b4:	d0 01       	movw	r26, r0
    20b6:	49 9d       	mul	r20, r9
    20b8:	b0 0d       	add	r27, r0
    20ba:	58 9d       	mul	r21, r8
    20bc:	b0 0d       	add	r27, r0
    20be:	11 24       	eor	r1, r1
    20c0:	ad 51       	subi	r26, 0x1D	; 29
    20c2:	bf 4f       	sbci	r27, 0xFF	; 255
    20c4:	4a 9d       	mul	r20, r10
    20c6:	c0 01       	movw	r24, r0
    20c8:	4b 9d       	mul	r20, r11
    20ca:	90 0d       	add	r25, r0
    20cc:	5a 9d       	mul	r21, r10
    20ce:	90 0d       	add	r25, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	9c 01       	movw	r18, r24
    20d6:	e3 e0       	ldi	r30, 0x03	; 3
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	ea 95       	dec	r30
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <build_map+0x180>
    20e0:	ee 27       	eor	r30, r30
    20e2:	ff 27       	eor	r31, r31
    20e4:	e2 1b       	sub	r30, r18
    20e6:	f3 0b       	sbc	r31, r19
    20e8:	e1 54       	subi	r30, 0x41	; 65
    20ea:	fe 4f       	sbci	r31, 0xFE	; 254
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	cc 27       	eor	r28, r28
    20f2:	dd 27       	eor	r29, r29
    20f4:	c8 1b       	sub	r28, r24
    20f6:	d9 0b       	sbc	r29, r25
    20f8:	c9 50       	subi	r28, 0x09	; 9
    20fa:	df 4f       	sbci	r29, 0xFF	; 255
    20fc:	77 cf       	rjmp	.-274    	; 0x1fec <build_map+0x94>
						}
					}
				}
			}
		}
		fi++;
    20fe:	0f 5f       	subi	r16, 0xFF	; 255
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
		if(fi>50)
    2102:	03 33       	cpi	r16, 0x33	; 51
    2104:	11 05       	cpc	r17, r1
    2106:	69 f4       	brne	.+26     	; 0x2122 <build_map+0x1ca>
		{
		lcd_clear();
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_string("Broke build");
    2110:	84 e8       	ldi	r24, 0x84	; 132
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		delay_sec(2);
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    2120:	20 c0       	rjmp	.+64     	; 0x2162 <build_map+0x20a>
	}	
	// int tx = x, ty = y; 
	// map_array[x][y]=0;
	int fi = 0;
	map_array[destn_x][destn_y]=0;
	while(map_array[start_x][start_y]==100)
    2122:	c3 01       	movw	r24, r6
    2124:	f3 01       	movw	r30, r6
    2126:	73 e0       	ldi	r23, 0x03	; 3
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	7a 95       	dec	r23
    212e:	e1 f7       	brne	.-8      	; 0x2128 <build_map+0x1d0>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	e8 0f       	add	r30, r24
    2136:	f9 1f       	adc	r31, r25
    2138:	ec 0d       	add	r30, r12
    213a:	fd 1d       	adc	r31, r13
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	e9 50       	subi	r30, 0x09	; 9
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	84 36       	cpi	r24, 0x64	; 100
    214a:	91 05       	cpc	r25, r1
    214c:	51 f4       	brne	.+20     	; 0x2162 <build_map+0x20a>
    214e:	47 ef       	ldi	r20, 0xF7	; 247
    2150:	e4 2e       	mov	r14, r20
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	f4 2e       	mov	r15, r20
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
					}
					if(dir_array[l][s][3]==1 && dir_array[l-1][s][1]==1)
					{
						if(map_array[l-1][s]==100)
						{
							map_array[l-1][s]=(fi+1);
    215a:	b8 01       	movw	r22, r16
    215c:	6f 5f       	subi	r22, 0xFF	; 255
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	a8 cf       	rjmp	.-176    	; 0x20b2 <build_map+0x15a>
		delay_sec(2);
		break;
		}
	}

}
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	bf 90       	pop	r11
    2174:	af 90       	pop	r10
    2176:	9f 90       	pop	r9
    2178:	8f 90       	pop	r8
    217a:	7f 90       	pop	r7
    217c:	6f 90       	pop	r6
    217e:	08 95       	ret

00002180 <checkAndCorrectDirection>:
	bot_brake();
	delay_millisec(500);
}

void checkAndCorrectDirection(int req_dir)
{
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	ec 01       	movw	r28, r24
	if(req_dir == 1)
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	91 05       	cpc	r25, r1
    218a:	79 f4       	brne	.+30     	; 0x21aa <checkAndCorrectDirection+0x2a>
	{
		switch(dir)
    218c:	80 91 cb 00 	lds	r24, 0x00CB
    2190:	90 91 cc 00 	lds	r25, 0x00CC
    2194:	2f ef       	ldi	r18, 0xFF	; 255
    2196:	8f 3f       	cpi	r24, 0xFF	; 255
    2198:	92 07       	cpc	r25, r18
    219a:	19 f0       	breq	.+6      	; 0x21a2 <checkAndCorrectDirection+0x22>
    219c:	02 97       	sbiw	r24, 0x02	; 2
    219e:	29 f4       	brne	.+10     	; 0x21aa <checkAndCorrectDirection+0x2a>
    21a0:	32 c0       	rjmp	.+100    	; 0x2206 <checkAndCorrectDirection+0x86>
		{	
			
			case +2: turn_right();sense_of_directon();break;

			case -1:turn_left();sense_of_directon();break;
    21a2:	0e 94 61 05 	call	0xac2	; 0xac2 <turn_left>
    21a6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
			default:break;

		}
	}

	if(req_dir == 2)
    21aa:	c2 30       	cpi	r28, 0x02	; 2
    21ac:	d1 05       	cpc	r29, r1
    21ae:	81 f4       	brne	.+32     	; 0x21d0 <checkAndCorrectDirection+0x50>
	{
		switch(dir)
    21b0:	80 91 cb 00 	lds	r24, 0x00CB
    21b4:	90 91 cc 00 	lds	r25, 0x00CC
    21b8:	2f ef       	ldi	r18, 0xFF	; 255
    21ba:	8f 3f       	cpi	r24, 0xFF	; 255
    21bc:	92 07       	cpc	r25, r18
    21be:	19 f0       	breq	.+6      	; 0x21c6 <checkAndCorrectDirection+0x46>
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <checkAndCorrectDirection+0x50>
    21c4:	23 c0       	rjmp	.+70     	; 0x220c <checkAndCorrectDirection+0x8c>
		{	
			case +1: turn_left();sense_of_directon();break;
			case -1:turn_right();sense_of_directon();break;
    21c6:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
    21ca:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <checkAndCorrectDirection+0x6c>
			default:break;
		}
	}

	if(req_dir == -1)
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
    21d2:	cf 3f       	cpi	r28, 0xFF	; 255
    21d4:	d8 07       	cpc	r29, r24
    21d6:	51 f4       	brne	.+20     	; 0x21ec <checkAndCorrectDirection+0x6c>
	{
		switch(dir)
    21d8:	80 91 cb 00 	lds	r24, 0x00CB
    21dc:	90 91 cc 00 	lds	r25, 0x00CC
    21e0:	2f ef       	ldi	r18, 0xFF	; 255
    21e2:	8e 3f       	cpi	r24, 0xFE	; 254
    21e4:	92 07       	cpc	r25, r18
    21e6:	79 f0       	breq	.+30     	; 0x2206 <checkAndCorrectDirection+0x86>
    21e8:	02 97       	sbiw	r24, 0x02	; 2
    21ea:	81 f0       	breq	.+32     	; 0x220c <checkAndCorrectDirection+0x8c>
			default:break;
		}
	}


	if(req_dir == -2)
    21ec:	ce 5f       	subi	r28, 0xFE	; 254
    21ee:	df 4f       	sbci	r29, 0xFF	; 255
    21f0:	89 f4       	brne	.+34     	; 0x2214 <checkAndCorrectDirection+0x94>
	{
		switch(dir)
    21f2:	80 91 cb 00 	lds	r24, 0x00CB
    21f6:	90 91 cc 00 	lds	r25, 0x00CC
    21fa:	2f ef       	ldi	r18, 0xFF	; 255
    21fc:	8f 3f       	cpi	r24, 0xFF	; 255
    21fe:	92 07       	cpc	r25, r18
    2200:	29 f0       	breq	.+10     	; 0x220c <checkAndCorrectDirection+0x8c>
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	39 f4       	brne	.+14     	; 0x2214 <checkAndCorrectDirection+0x94>
		{	
			case +1:turn_right();sense_of_directon();break; 
    2206:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <checkAndCorrectDirection+0x90>
				
			case -1: turn_left();sense_of_directon();break;
    220c:	0e 94 61 05 	call	0xac2	; 0xac2 <turn_left>
    2210:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2214:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2216:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2218:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    221a:	af 9a       	sbi	0x15, 7	; 21
			default:break;

		}
	}
	bot_brake();
	delay_sec(1);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	08 95       	ret

0000222a <go_to_coordinate>:
	}

}

void go_to_coordinate(int next_x, int next_y)
{
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	ec 01       	movw	r28, r24
    2234:	8b 01       	movw	r16, r22
	if (next_x > x_coordinate)
    2236:	80 91 cd 00 	lds	r24, 0x00CD
    223a:	90 91 ce 00 	lds	r25, 0x00CE
    223e:	8c 17       	cp	r24, r28
    2240:	9d 07       	cpc	r25, r29
    2242:	ec f4       	brge	.+58     	; 0x227e <go_to_coordinate+0x54>
	{	
		right=0;
    2244:	10 92 e0 04 	sts	0x04E0, r1
    2248:	10 92 df 04 	sts	0x04DF, r1
		checkAndCorrectDirection(1);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 c0 10 	call	0x2180	; 0x2180 <checkAndCorrectDirection>
    2254:	0b c0       	rjmp	.+22     	; 0x226c <go_to_coordinate+0x42>
		while(bit_is_set(PINA,4))
		{
			line_track_new();
    2256:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			if(bit_is_clear(PINA,7))
    225a:	cf 99       	sbic	0x19, 7	; 25
    225c:	07 c0       	rjmp	.+14     	; 0x226c <go_to_coordinate+0x42>
			{
				right = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	90 93 e0 04 	sts	0x04E0, r25
    2266:	80 93 df 04 	sts	0x04DF, r24
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <go_to_coordinate+0x46>
{
	if (next_x > x_coordinate)
	{	
		right=0;
		checkAndCorrectDirection(1);
		while(bit_is_set(PINA,4))
    226c:	cc 99       	sbic	0x19, 4	; 25
    226e:	f3 cf       	rjmp	.-26     	; 0x2256 <go_to_coordinate+0x2c>
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    2270:	8f e8       	ldi	r24, 0x8F	; 143
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	99 bd       	out	0x29, r25	; 41
    2276:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2278:	9b bd       	out	0x2b, r25	; 43
    227a:	8a bd       	out	0x2a, r24	; 42
    227c:	43 c0       	rjmp	.+134    	; 0x2304 <go_to_coordinate+0xda>
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
		//delay_millisec(500);
	}
	else if(next_x<x_coordinate)
    227e:	c8 17       	cp	r28, r24
    2280:	d9 07       	cpc	r29, r25
    2282:	84 f4       	brge	.+32     	; 0x22a4 <go_to_coordinate+0x7a>
	{
		right=0;
    2284:	10 92 e0 04 	sts	0x04E0, r1
    2288:	10 92 df 04 	sts	0x04DF, r1
		checkAndCorrectDirection(-1);
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	9f ef       	ldi	r25, 0xFF	; 255
    2290:	0e 94 c0 10 	call	0x2180	; 0x2180 <checkAndCorrectDirection>
    2294:	04 c0       	rjmp	.+8      	; 0x229e <go_to_coordinate+0x74>
		while(bit_is_set(PINA,4))
		{
			line_track_new();
    2296:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			if(bit_is_clear(PINA,7))
    229a:	cf 9b       	sbis	0x19, 7	; 25
    229c:	2a c0       	rjmp	.+84     	; 0x22f2 <go_to_coordinate+0xc8>
	}
	else if(next_x<x_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-1);
		while(bit_is_set(PINA,4))
    229e:	cc 99       	sbic	0x19, 4	; 25
    22a0:	fa cf       	rjmp	.-12     	; 0x2296 <go_to_coordinate+0x6c>
    22a2:	30 c0       	rjmp	.+96     	; 0x2304 <go_to_coordinate+0xda>
			}
		}
		bot_brake();
	}

	else if (next_y>y_coordinate)
    22a4:	80 91 cf 00 	lds	r24, 0x00CF
    22a8:	90 91 d0 00 	lds	r25, 0x00D0
    22ac:	86 17       	cp	r24, r22
    22ae:	97 07       	cpc	r25, r23
    22b0:	84 f4       	brge	.+32     	; 0x22d2 <go_to_coordinate+0xa8>
	{	
		right=0;
    22b2:	10 92 e0 04 	sts	0x04E0, r1
    22b6:	10 92 df 04 	sts	0x04DF, r1
		checkAndCorrectDirection(2);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 c0 10 	call	0x2180	; 0x2180 <checkAndCorrectDirection>
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <go_to_coordinate+0xa2>
		while(bit_is_set(PINA,4))
		{
			line_track_new();
    22c4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			if(bit_is_clear(PINA,7))
    22c8:	cf 9b       	sbis	0x19, 7	; 25
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <go_to_coordinate+0xc8>

	else if (next_y>y_coordinate)
	{	
		right=0;
		checkAndCorrectDirection(2);
		while(bit_is_set(PINA,4))
    22cc:	cc 99       	sbic	0x19, 4	; 25
    22ce:	fa cf       	rjmp	.-12     	; 0x22c4 <go_to_coordinate+0x9a>
    22d0:	19 c0       	rjmp	.+50     	; 0x2304 <go_to_coordinate+0xda>
				break;
			}
		}
		bot_brake();
	}
	else if(next_y<y_coordinate)
    22d2:	68 17       	cp	r22, r24
    22d4:	79 07       	cpc	r23, r25
    22d6:	d4 f4       	brge	.+52     	; 0x230c <go_to_coordinate+0xe2>
	{
		right=0;
    22d8:	10 92 e0 04 	sts	0x04E0, r1
    22dc:	10 92 df 04 	sts	0x04DF, r1
		checkAndCorrectDirection(-2);
    22e0:	8e ef       	ldi	r24, 0xFE	; 254
    22e2:	9f ef       	ldi	r25, 0xFF	; 255
    22e4:	0e 94 c0 10 	call	0x2180	; 0x2180 <checkAndCorrectDirection>
    22e8:	0b c0       	rjmp	.+22     	; 0x2300 <go_to_coordinate+0xd6>
		while(bit_is_set(PINA,4))
		{
			line_track_new();
    22ea:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			if(bit_is_clear(PINA,7))
    22ee:	cf 99       	sbic	0x19, 7	; 25
    22f0:	07 c0       	rjmp	.+14     	; 0x2300 <go_to_coordinate+0xd6>
			{
				right = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	90 93 e0 04 	sts	0x04E0, r25
    22fa:	80 93 df 04 	sts	0x04DF, r24
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <go_to_coordinate+0xda>
	}
	else if(next_y<y_coordinate)
	{
		right=0;
		checkAndCorrectDirection(-2);
		while(bit_is_set(PINA,4))
    2300:	cc 99       	sbic	0x19, 4	; 25
    2302:	f3 cf       	rjmp	.-26     	; 0x22ea <go_to_coordinate+0xc0>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2304:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2306:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2308:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    230a:	af 9a       	sbi	0x15, 7	; 21
				break;
			}
		}
		bot_brake();
	}	
	x_coordinate = next_x;               ///good work
    230c:	d0 93 ce 00 	sts	0x00CE, r29
    2310:	c0 93 cd 00 	sts	0x00CD, r28
	y_coordinate = next_y;
    2314:	10 93 d0 00 	sts	0x00D0, r17
    2318:	00 93 cf 00 	sts	0x00CF, r16
	lcd_clear();
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,1,x_coordinate,2);
    2324:	40 91 cd 00 	lds	r20, 0x00CD
    2328:	50 91 ce 00 	lds	r21, 0x00CE
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	22 e0       	ldi	r18, 0x02	; 2
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(5,1,y_coordinate,2);
    233c:	40 91 cf 00 	lds	r20, 0x00CF
    2340:	50 91 d0 00 	lds	r21, 0x00D0
    2344:	85 e0       	ldi	r24, 0x05	; 5
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	22 e0       	ldi	r18, 0x02	; 2
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(3,0,irc,5);
    2354:	40 91 e1 00 	lds	r20, 0x00E1
    2358:	50 91 e2 00 	lds	r21, 0x00E2
    235c:	83 e0       	ldi	r24, 0x03	; 3
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	60 e0       	ldi	r22, 0x00	; 0
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	25 e0       	ldi	r18, 0x05	; 5
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    236c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    236e:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2370:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2372:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	delay_millisec(500);
    2374:	84 ef       	ldi	r24, 0xF4	; 244
    2376:	91 e0       	ldi	r25, 0x01	; 1
    2378:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret

00002386 <map_all>:
	}
	bot_brake();
	delay_sec(1);
}
void map_all()
{
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
		{
			right_junc_check();
		}
		else
		{
			special_flag = 1;
    238e:	01 e0       	ldi	r16, 0x01	; 1
    2390:	10 e0       	ldi	r17, 0x00	; 0
}
void map_all()
{
	while(1)
	{
		build_map(x_coordinate, y_coordinate, mx, my);
    2392:	60 91 cf 00 	lds	r22, 0x00CF
    2396:	70 91 d0 00 	lds	r23, 0x00D0
    239a:	40 91 eb 00 	lds	r20, 0x00EB
    239e:	50 91 ec 00 	lds	r21, 0x00EC
    23a2:	20 91 ed 00 	lds	r18, 0x00ED
    23a6:	30 91 ee 00 	lds	r19, 0x00EE
    23aa:	80 91 cd 00 	lds	r24, 0x00CD
    23ae:	90 91 ce 00 	lds	r25, 0x00CE
    23b2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <build_map>
		get_path();
    23b6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <get_path>
		
		right = 0;
    23ba:	10 92 e0 04 	sts	0x04E0, r1
    23be:	10 92 df 04 	sts	0x04DF, r1
		lcd_clear();
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		lcd_write_int_xy(0,0,path_array[0][0],2);
    23ca:	40 91 e5 04 	lds	r20, 0x04E5
    23ce:	50 91 e6 04 	lds	r21, 0x04E6
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	22 e0       	ldi	r18, 0x02	; 2
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(3,0,path_array[0][1],2);
    23e2:	40 91 e7 04 	lds	r20, 0x04E7
    23e6:	50 91 e8 04 	lds	r21, 0x04E8
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	22 e0       	ldi	r18, 0x02	; 2
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(6,0,path_array[1][0],2);
    23fa:	40 91 e9 04 	lds	r20, 0x04E9
    23fe:	50 91 ea 04 	lds	r21, 0x04EA
    2402:	86 e0       	ldi	r24, 0x06	; 6
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	22 e0       	ldi	r18, 0x02	; 2
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_int_xy(9,0,path_array[1][1],2);
    2412:	40 91 eb 04 	lds	r20, 0x04EB
    2416:	50 91 ec 04 	lds	r21, 0x04EC
    241a:	89 e0       	ldi	r24, 0x09	; 9
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	22 e0       	ldi	r18, 0x02	; 2
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		delay_sec(4);
    242a:	84 e0       	ldi	r24, 0x04	; 4
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    2432:	c5 ee       	ldi	r28, 0xE5	; 229
    2434:	d4 e0       	ldi	r29, 0x04	; 4
		for(int i=0; i<15; i++)
		{
			if(path_array[i][0]==0 && path_array[i][1]==0)
    2436:	88 81       	ld	r24, Y
    2438:	99 81       	ldd	r25, Y+1	; 0x01
    243a:	89 2b       	or	r24, r25
    243c:	21 f4       	brne	.+8      	; 0x2446 <map_all+0xc0>
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	89 2b       	or	r24, r25
    2444:	b1 f0       	breq	.+44     	; 0x2472 <map_all+0xec>
			{
				break;
			}
			if(right==1)
    2446:	80 91 df 04 	lds	r24, 0x04DF
    244a:	90 91 e0 04 	lds	r25, 0x04E0
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	29 f4       	brne	.+10     	; 0x245c <map_all+0xd6>
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <map_all+0xd2>
			{
				while(bit_is_set(PIND,7))
				{
					line_track_new();
    2454:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			{
				break;
			}
			if(right==1)
			{
				while(bit_is_set(PIND,7))
    2458:	87 99       	sbic	0x10, 7	; 16
    245a:	fc cf       	rjmp	.-8      	; 0x2454 <map_all+0xce>
				{
					line_track_new();
				}
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);
    245c:	6a 81       	ldd	r22, Y+2	; 0x02
    245e:	7b 81       	ldd	r23, Y+3	; 0x03
    2460:	88 81       	ld	r24, Y
    2462:	99 81       	ldd	r25, Y+1	; 0x01
    2464:	0e 94 15 11 	call	0x222a	; 0x222a <go_to_coordinate>
    2468:	24 96       	adiw	r28, 0x04	; 4
		lcd_write_int_xy(0,0,path_array[0][0],2);
		lcd_write_int_xy(3,0,path_array[0][1],2);
		lcd_write_int_xy(6,0,path_array[1][0],2);
		lcd_write_int_xy(9,0,path_array[1][1],2);
		delay_sec(4);
		for(int i=0; i<15; i++)
    246a:	85 e0       	ldi	r24, 0x05	; 5
    246c:	c1 32       	cpi	r28, 0x21	; 33
    246e:	d8 07       	cpc	r29, r24
    2470:	11 f7       	brne	.-60     	; 0x2436 <map_all+0xb0>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2472:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2474:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2476:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2478:	af 9a       	sbi	0x15, 7	; 21
			}
			go_to_coordinate(path_array[i][0], path_array[i][1]);

		}
		bot_brake();
		delay_sec(2);
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
		irc=0;
    2482:	10 92 e2 00 	sts	0x00E2, r1
    2486:	10 92 e1 00 	sts	0x00E1, r1
		Coordinates_changed_by = 0;
    248a:	10 92 ea 00 	sts	0x00EA, r1
    248e:	10 92 e9 00 	sts	0x00E9, r1
		if(right==1)
    2492:	80 91 df 04 	lds	r24, 0x04DF
    2496:	90 91 e0 04 	lds	r25, 0x04E0
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	19 f4       	brne	.+6      	; 0x24a4 <map_all+0x11e>
		{
			right_junc_check();
    249e:	0e 94 a5 12 	call	0x254a	; 0x254a <right_junc_check>
    24a2:	06 c0       	rjmp	.+12     	; 0x24b0 <map_all+0x12a>
		}
		else
		{
			special_flag = 1;
    24a4:	10 93 f0 00 	sts	0x00F0, r17
    24a8:	00 93 ef 00 	sts	0x00EF, r16
			left_junc_check();
    24ac:	0e 94 48 09 	call	0x1290	; 0x1290 <left_junc_check>
		}
		irc = 0;
    24b0:	10 92 e2 00 	sts	0x00E2, r1
    24b4:	10 92 e1 00 	sts	0x00E1, r1
		special_flag = 0;
    24b8:	10 92 f0 00 	sts	0x00F0, r1
    24bc:	10 92 ef 00 	sts	0x00EF, r1
		repeat = 0;
    24c0:	10 92 f2 00 	sts	0x00F2, r1
    24c4:	10 92 f1 00 	sts	0x00F1, r1
    24c8:	1b c0       	rjmp	.+54     	; 0x2500 <map_all+0x17a>
		while(repeat==0)      //lsr (copied from int main) 
		{
			line_track_new();	
    24ca:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			LED&=0b11110000;
    24ce:	85 b3       	in	r24, 0x15	; 21
    24d0:	80 7f       	andi	r24, 0xF0	; 240
    24d2:	85 bb       	out	0x15, r24	; 21
			LED|=sensorbyte;
    24d4:	85 b3       	in	r24, 0x15	; 21
    24d6:	90 91 d2 00 	lds	r25, 0x00D2
    24da:	89 2b       	or	r24, r25
    24dc:	85 bb       	out	0x15, r24	; 21
			if(bit_is_clear(PINA,7))
    24de:	cf 99       	sbic	0x19, 7	; 25
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <map_all+0x160>
			{
				right_junc_check();
    24e2:	0e 94 a5 12 	call	0x254a	; 0x254a <right_junc_check>
			}
			left_junc_check();
    24e6:	0e 94 48 09 	call	0x1290	; 0x1290 <left_junc_check>
			frSensorCheck();
    24ea:	0e 94 c8 09 	call	0x1390	; 0x1390 <frSensorCheck>
			irc++;
    24ee:	80 91 e1 00 	lds	r24, 0x00E1
    24f2:	90 91 e2 00 	lds	r25, 0x00E2
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	90 93 e2 00 	sts	0x00E2, r25
    24fc:	80 93 e1 00 	sts	0x00E1, r24
			left_junc_check();
		}
		irc = 0;
		special_flag = 0;
		repeat = 0;
		while(repeat==0)      //lsr (copied from int main) 
    2500:	80 91 f1 00 	lds	r24, 0x00F1
    2504:	90 91 f2 00 	lds	r25, 0x00F2
    2508:	89 2b       	or	r24, r25
    250a:	f9 f2       	breq	.-66     	; 0x24ca <map_all+0x144>
			}
			left_junc_check();
			frSensorCheck();
			irc++;
		}
		fill_missed_array();
    250c:	0e 94 32 0a 	call	0x1464	; 0x1464 <fill_missed_array>
		mx = 0;
    2510:	10 92 ec 00 	sts	0x00EC, r1
    2514:	10 92 eb 00 	sts	0x00EB, r1
		my = 0;
    2518:	10 92 ee 00 	sts	0x00EE, r1
    251c:	10 92 ed 00 	sts	0x00ED, r1
		coordinates_tobe_reached();
    2520:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <coordinates_tobe_reached>
		if(mx==0 && my == 0)
    2524:	80 91 eb 00 	lds	r24, 0x00EB
    2528:	90 91 ec 00 	lds	r25, 0x00EC
    252c:	89 2b       	or	r24, r25
    252e:	09 f0       	breq	.+2      	; 0x2532 <map_all+0x1ac>
    2530:	30 cf       	rjmp	.-416    	; 0x2392 <map_all+0xc>
    2532:	80 91 ed 00 	lds	r24, 0x00ED
    2536:	90 91 ee 00 	lds	r25, 0x00EE
    253a:	89 2b       	or	r24, r25
    253c:	09 f0       	breq	.+2      	; 0x2540 <map_all+0x1ba>
    253e:	29 cf       	rjmp	.-430    	; 0x2392 <map_all+0xc>
		{
			break;
		}
	}
}
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	1f 91       	pop	r17
    2546:	0f 91       	pop	r16
    2548:	08 95       	ret

0000254a <right_junc_check>:
			}
		}
	}
}
void right_junc_check()
{	
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
    2552:	8f e8       	ldi	r24, 0x8F	; 143
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	9b bd       	out	0x2b, r25	; 43
    2558:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
    255a:	99 bd       	out	0x29, r25	; 41
    255c:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    255e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2560:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    2562:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2564:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	// lcd_clear();
	// lcd_write_int_xy(0,0,irc,5);
	//delay_sec(1);
	
	lcd_clear();
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	if(irc>2000)
    256e:	20 91 e1 00 	lds	r18, 0x00E1
    2572:	30 91 e2 00 	lds	r19, 0x00E2
    2576:	87 e0       	ldi	r24, 0x07	; 7
    2578:	21 3d       	cpi	r18, 0xD1	; 209
    257a:	38 07       	cpc	r19, r24
    257c:	1c f0       	brlt	.+6      	; 0x2584 <right_junc_check+0x3a>
	{
		// lcd_write_string("Sixty");
		
		Coordinates_changed_by = 2;
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <right_junc_check+0x3e>
	}
	else
	{
		// lcd_write_string("Thirty");
		Coordinates_changed_by = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	90 93 ea 00 	sts	0x00EA, r25
    258c:	80 93 e9 00 	sts	0x00E9, r24
	}

	
	//delay_sec(2);
	if(irc==0)
    2590:	23 2b       	or	r18, r19
    2592:	21 f4       	brne	.+8      	; 0x259c <right_junc_check+0x52>
	{
		Coordinates_changed_by = 0;
    2594:	10 92 ea 00 	sts	0x00EA, r1
    2598:	10 92 e9 00 	sts	0x00E9, r1
	}
	update_coordinates();
    259c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <update_coordinates>
	lcountPrev = lcount;
    25a0:	80 91 d9 00 	lds	r24, 0x00D9
    25a4:	90 91 da 00 	lds	r25, 0x00DA
    25a8:	90 93 de 00 	sts	0x00DE, r25
    25ac:	80 93 dd 00 	sts	0x00DD, r24
    25b0:	04 c0       	rjmp	.+8      	; 0x25ba <right_junc_check+0x70>
	while(bit_is_set(PIND, 7))
	{
		line_track_new();
    25b2:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		left_count();
    25b6:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
	{
		Coordinates_changed_by = 0;
	}
	update_coordinates();
	lcountPrev = lcount;
	while(bit_is_set(PIND, 7))
    25ba:	87 99       	sbic	0x10, 7	; 16
    25bc:	fa cf       	rjmp	.-12     	; 0x25b2 <right_junc_check+0x68>
	{
		line_track_new();
		left_count();
	}
	//End Condition
	if(bit_is_clear(PINA,6) && bit_is_clear(PIND,6) && bit_is_clear(PINA,5) && bit_is_clear(PINA,7))
    25be:	ce 99       	sbic	0x19, 6	; 25
    25c0:	95 c1       	rjmp	.+810    	; 0x28ec <right_junc_check+0x3a2>
    25c2:	86 99       	sbic	0x10, 6	; 16
    25c4:	93 c1       	rjmp	.+806    	; 0x28ec <right_junc_check+0x3a2>
    25c6:	cd 99       	sbic	0x19, 5	; 25
    25c8:	91 c1       	rjmp	.+802    	; 0x28ec <right_junc_check+0x3a2>
    25ca:	cf 99       	sbic	0x19, 7	; 25
    25cc:	8f c1       	rjmp	.+798    	; 0x28ec <right_junc_check+0x3a2>
	{
		int endx = x_coordinate, endy = y_coordinate;
    25ce:	c0 91 cd 00 	lds	r28, 0x00CD
    25d2:	d0 91 ce 00 	lds	r29, 0x00CE
    25d6:	00 91 cf 00 	lds	r16, 0x00CF
    25da:	10 91 d0 00 	lds	r17, 0x00D0
		update_array(0,0,1,0);
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		lcd_clear();
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    25fa:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    25fc:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    25fe:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    2600:	af 9a       	sbi	0x15, 7	; 21
		//set_pwm1a(399);
		//set_pwm1b(399);
		bot_brake();
		delay_sec(1);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
		end_zone_uturn();
    260a:	0e 94 23 05 	call	0xa46	; 0xa46 <end_zone_uturn>
		sense_of_directon();
    260e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
		fill_missed_array();
    2612:	0e 94 32 0a 	call	0x1464	; 0x1464 <fill_missed_array>
		coordinates_tobe_reached();
    2616:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <coordinates_tobe_reached>
		flick();
    261a:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
		lcd_clear();
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		
		lcd_write_string_xy(0,0,"mx: ");
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	40 e9       	ldi	r20, 0x90	; 144
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_int_xy(4,0,mx,2);
    2636:	40 91 eb 00 	lds	r20, 0x00EB
    263a:	50 91 ec 00 	lds	r21, 0x00EC
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	22 e0       	ldi	r18, 0x02	; 2
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_string_xy(07,0,"my: ");
    264e:	87 e0       	ldi	r24, 0x07	; 7
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	45 e9       	ldi	r20, 0x95	; 149
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_int_xy(11,0,my,2);
    265e:	40 91 ed 00 	lds	r20, 0x00ED
    2662:	50 91 ee 00 	lds	r21, 0x00EE
    2666:	8b e0       	ldi	r24, 0x0B	; 11
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	22 e0       	ldi	r18, 0x02	; 2
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_string_xy(0,1,"x: ");
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	4a e9       	ldi	r20, 0x9A	; 154
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_int_xy(4,1,x_coordinate,2);
    2686:	40 91 cd 00 	lds	r20, 0x00CD
    268a:	50 91 ce 00 	lds	r21, 0x00CE
    268e:	84 e0       	ldi	r24, 0x04	; 4
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	22 e0       	ldi	r18, 0x02	; 2
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		lcd_write_string_xy(07,1,"y: ");
    269e:	87 e0       	ldi	r24, 0x07	; 7
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	4e e9       	ldi	r20, 0x9E	; 158
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_int_xy(11,1,y_coordinate,2);
    26ae:	40 91 cf 00 	lds	r20, 0x00CF
    26b2:	50 91 d0 00 	lds	r21, 0x00D0
    26b6:	8b e0       	ldi	r24, 0x0B	; 11
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	61 e0       	ldi	r22, 0x01	; 1
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	22 e0       	ldi	r18, 0x02	; 2
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
		delay_sec(5);
    26c6:	85 e0       	ldi	r24, 0x05	; 5
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
		if(mx!=0 && my!=0)
    26ce:	80 91 eb 00 	lds	r24, 0x00EB
    26d2:	90 91 ec 00 	lds	r25, 0x00EC
    26d6:	89 2b       	or	r24, r25
    26d8:	41 f0       	breq	.+16     	; 0x26ea <right_junc_check+0x1a0>
    26da:	80 91 ed 00 	lds	r24, 0x00ED
    26de:	90 91 ee 00 	lds	r25, 0x00EE
    26e2:	89 2b       	or	r24, r25
    26e4:	11 f0       	breq	.+4      	; 0x26ea <right_junc_check+0x1a0>
		{
			map_all();
    26e6:	0e 94 c3 11 	call	0x2386	; 0x2386 <map_all>
		}
		x_coordinate = 4;
    26ea:	84 e0       	ldi	r24, 0x04	; 4
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	90 93 ce 00 	sts	0x00CE, r25
    26f2:	80 93 cd 00 	sts	0x00CD, r24
		y_coordinate = 4;
    26f6:	90 93 d0 00 	sts	0x00D0, r25
    26fa:	80 93 cf 00 	sts	0x00CF, r24
		dir = 2;
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	90 93 cc 00 	sts	0x00CC, r25
    2706:	80 93 cb 00 	sts	0x00CB, r24
		
		
		lcd_write_string("Press Any Key");
    270a:	82 ea       	ldi	r24, 0xA2	; 162
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2712:	82 99       	sbic	0x10, 2	; 16
    2714:	b1 c1       	rjmp	.+866    	; 0x2a78 <right_junc_check+0x52e>
		while(1)
		{
			if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
			{
				build_map(4,4,endx,endy);
    2716:	84 e0       	ldi	r24, 0x04	; 4
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	64 e0       	ldi	r22, 0x04	; 4
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	ae 01       	movw	r20, r28
    2720:	98 01       	movw	r18, r16
    2722:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <build_map>
				get_path();
    2726:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <get_path>
				right = 0;
    272a:	10 92 e0 04 	sts	0x04E0, r1
    272e:	10 92 df 04 	sts	0x04DF, r1
				lcd_clear();
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				lcd_write_int_xy(0,0,endx,2);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	ae 01       	movw	r20, r28
    2744:	22 e0       	ldi	r18, 0x02	; 2
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(5,0,endy,2);
    274c:	85 e0       	ldi	r24, 0x05	; 5
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	a8 01       	movw	r20, r16
    2756:	22 e0       	ldi	r18, 0x02	; 2
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				delay_sec(5);
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
				lcd_write_int_xy(0,0,path_array[0][0],1);
    2766:	40 91 e5 04 	lds	r20, 0x04E5
    276a:	50 91 e6 04 	lds	r21, 0x04E6
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	70 e0       	ldi	r23, 0x00	; 0
    2776:	21 e0       	ldi	r18, 0x01	; 1
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(1,0,path_array[0][1],1);
    277e:	40 91 e7 04 	lds	r20, 0x04E7
    2782:	50 91 e8 04 	lds	r21, 0x04E8
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	21 e0       	ldi	r18, 0x01	; 1
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(3,0,path_array[1][0],1);
    2796:	40 91 e9 04 	lds	r20, 0x04E9
    279a:	50 91 ea 04 	lds	r21, 0x04EA
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	21 e0       	ldi	r18, 0x01	; 1
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(4,0,path_array[1][1],1);
    27ae:	40 91 eb 04 	lds	r20, 0x04EB
    27b2:	50 91 ec 04 	lds	r21, 0x04EC
    27b6:	84 e0       	ldi	r24, 0x04	; 4
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	21 e0       	ldi	r18, 0x01	; 1
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(6,0,path_array[2][0],1);
    27c6:	40 91 ed 04 	lds	r20, 0x04ED
    27ca:	50 91 ee 04 	lds	r21, 0x04EE
    27ce:	86 e0       	ldi	r24, 0x06	; 6
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	21 e0       	ldi	r18, 0x01	; 1
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(7,0,path_array[2][1],1);
    27de:	40 91 ef 04 	lds	r20, 0x04EF
    27e2:	50 91 f0 04 	lds	r21, 0x04F0
    27e6:	87 e0       	ldi	r24, 0x07	; 7
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	21 e0       	ldi	r18, 0x01	; 1
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(9,0,path_array[3][0],1);
    27f6:	40 91 f1 04 	lds	r20, 0x04F1
    27fa:	50 91 f2 04 	lds	r21, 0x04F2
    27fe:	89 e0       	ldi	r24, 0x09	; 9
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	60 e0       	ldi	r22, 0x00	; 0
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	21 e0       	ldi	r18, 0x01	; 1
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(10,0,path_array[3][1],1);
    280e:	40 91 f3 04 	lds	r20, 0x04F3
    2812:	50 91 f4 04 	lds	r21, 0x04F4
    2816:	8a e0       	ldi	r24, 0x0A	; 10
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	21 e0       	ldi	r18, 0x01	; 1
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(12,0,path_array[4][0],1);
    2826:	40 91 f5 04 	lds	r20, 0x04F5
    282a:	50 91 f6 04 	lds	r21, 0x04F6
    282e:	8c e0       	ldi	r24, 0x0C	; 12
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	21 e0       	ldi	r18, 0x01	; 1
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(13,0,path_array[4][1],1);
    283e:	40 91 f7 04 	lds	r20, 0x04F7
    2842:	50 91 f8 04 	lds	r21, 0x04F8
    2846:	8d e0       	ldi	r24, 0x0D	; 13
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	21 e0       	ldi	r18, 0x01	; 1
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(0,1,path_array[5][0],1);
    2856:	40 91 f9 04 	lds	r20, 0x04F9
    285a:	50 91 fa 04 	lds	r21, 0x04FA
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	61 e0       	ldi	r22, 0x01	; 1
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	21 e0       	ldi	r18, 0x01	; 1
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
				lcd_write_int_xy(1,1,path_array[5][1],1);
    286e:	40 91 fb 04 	lds	r20, 0x04FB
    2872:	50 91 fc 04 	lds	r21, 0x04FC
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	61 e0       	ldi	r22, 0x01	; 1
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	21 e0       	ldi	r18, 0x01	; 1
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    2886:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2888:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    288a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    288c:	af 9a       	sbi	0x15, 7	; 21
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    288e:	82 99       	sbic	0x10, 2	; 16
    2890:	fa c0       	rjmp	.+500    	; 0x2a86 <right_junc_check+0x53c>
				while(1)
				{
					
					if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
					{	
						lcd_clear();
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
						delay_sec(1);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
    28a2:	c5 ee       	ldi	r28, 0xE5	; 229
    28a4:	d4 e0       	ldi	r29, 0x04	; 4
						break;
					}
				}
				for(int i=0; i<15; i++)
				{
					if(path_array[i][0]==0 && path_array[i][1]==0)
    28a6:	88 81       	ld	r24, Y
    28a8:	99 81       	ldd	r25, Y+1	; 0x01
    28aa:	89 2b       	or	r24, r25
    28ac:	21 f4       	brne	.+8      	; 0x28b6 <right_junc_check+0x36c>
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	89 2b       	or	r24, r25
    28b4:	b1 f0       	breq	.+44     	; 0x28e2 <right_junc_check+0x398>
					{
						break;
					}
					if(right==1)
    28b6:	80 91 df 04 	lds	r24, 0x04DF
    28ba:	90 91 e0 04 	lds	r25, 0x04E0
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	29 f4       	brne	.+10     	; 0x28cc <right_junc_check+0x382>
    28c2:	02 c0       	rjmp	.+4      	; 0x28c8 <right_junc_check+0x37e>
					{
						while(bit_is_set(PIND,7))
						{
							line_track_new();
    28c4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
					{
						break;
					}
					if(right==1)
					{
						while(bit_is_set(PIND,7))
    28c8:	87 99       	sbic	0x10, 7	; 16
    28ca:	fc cf       	rjmp	.-8      	; 0x28c4 <right_junc_check+0x37a>
						{
							line_track_new();
						}
					}
					go_to_coordinate(path_array[i][0], path_array[i][1]);
    28cc:	6a 81       	ldd	r22, Y+2	; 0x02
    28ce:	7b 81       	ldd	r23, Y+3	; 0x03
    28d0:	88 81       	ld	r24, Y
    28d2:	99 81       	ldd	r25, Y+1	; 0x01
    28d4:	0e 94 15 11 	call	0x222a	; 0x222a <go_to_coordinate>
    28d8:	24 96       	adiw	r28, 0x04	; 4
						lcd_clear();
						delay_sec(1);
						break;
					}
				}
				for(int i=0; i<15; i++)
    28da:	85 e0       	ldi	r24, 0x05	; 5
    28dc:	c1 32       	cpi	r28, 0x21	; 33
    28de:	d8 07       	cpc	r29, r24
    28e0:	11 f7       	brne	.-60     	; 0x28a6 <right_junc_check+0x35c>
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_stop(void)
{
 MOTOR1A=0;
    28e2:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
    28e4:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
    28e6:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
    28e8:	af 98       	cbi	0x15, 7	; 21
    28ea:	fb cf       	rjmp	.-10     	; 0x28e2 <right_junc_check+0x398>
			}

		}
		
	}
	if(bit_is_clear(PINA,6) || bit_is_clear(PIND,6))
    28ec:	ce 9b       	sbis	0x19, 6	; 25
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <right_junc_check+0x3aa>
    28f0:	86 99       	sbic	0x10, 6	; 16
    28f2:	07 c0       	rjmp	.+14     	; 0x2902 <right_junc_check+0x3b8>
	{
		straight = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	90 93 dc 00 	sts	0x00DC, r25
    28fc:	80 93 db 00 	sts	0x00DB, r24
    2900:	04 c0       	rjmp	.+8      	; 0x290a <right_junc_check+0x3c0>
	}
	else
	{
		straight = 0;
    2902:	10 92 dc 00 	sts	0x00DC, r1
    2906:	10 92 db 00 	sts	0x00DB, r1
	}
	
	
	turn_right();						////actual turn
    290a:	0e 94 97 05 	call	0xb2e	; 0xb2e <turn_right>
	
	l = 0;
    290e:	10 92 d8 00 	sts	0x00D8, r1
    2912:	10 92 d7 00 	sts	0x00D7, r1
}
void bot_brake(void)
{
MOTOR1A=1;
    2916:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    2918:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    291a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    291c:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	//delay_millisec(100);
	flag1 = 0;
    291e:	10 92 e0 00 	sts	0x00E0, r1
    2922:	10 92 df 00 	sts	0x00DF, r1
	irc = 0;
    2926:	10 92 e2 00 	sts	0x00E2, r1
    292a:	10 92 e1 00 	sts	0x00E1, r1
	temp = lcount - lcountPrev;
    292e:	20 91 d9 00 	lds	r18, 0x00D9
    2932:	30 91 da 00 	lds	r19, 0x00DA
    2936:	80 91 dd 00 	lds	r24, 0x00DD
    293a:	90 91 de 00 	lds	r25, 0x00DE
    293e:	28 1b       	sub	r18, r24
    2940:	39 0b       	sbc	r19, r25
    2942:	30 93 e6 00 	sts	0x00E6, r19
    2946:	20 93 e5 00 	sts	0x00E5, r18
	//delay_millisec(2000);
	// lcd_clear();
	
	//delay_sec(2);
	//lcd_clear();
	if(straight==1 && temp==1)
    294a:	80 91 db 00 	lds	r24, 0x00DB
    294e:	90 91 dc 00 	lds	r25, 0x00DC
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	91 05       	cpc	r25, r1
    2956:	a9 f4       	brne	.+42     	; 0x2982 <right_junc_check+0x438>
    2958:	21 30       	cpi	r18, 0x01	; 1
    295a:	31 05       	cpc	r19, r1
    295c:	09 f0       	breq	.+2      	; 0x2960 <right_junc_check+0x416>
    295e:	54 c0       	rjmp	.+168    	; 0x2a08 <right_junc_check+0x4be>
	{
		// lcd_write_string("|- Detected");
		update_array(1,1,1,0);
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		lcd_write_string_xy(0,1,"1");
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	61 e0       	ldi	r22, 0x01	; 1
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	40 eb       	ldi	r20, 0xB0	; 176
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	2a c0       	rjmp	.+84     	; 0x29d6 <right_junc_check+0x48c>
		lcd_write_string_xy(2,1,"1");
		lcd_write_string_xy(4,1,"1");
		lcd_write_string_xy(6,1,"0");
	}
	else if(straight==0 && temp==1)
    2982:	89 2b       	or	r24, r25
    2984:	09 f0       	breq	.+2      	; 0x2988 <right_junc_check+0x43e>
    2986:	6d c0       	rjmp	.+218    	; 0x2a62 <right_junc_check+0x518>
    2988:	21 30       	cpi	r18, 0x01	; 1
    298a:	31 05       	cpc	r19, r1
    298c:	89 f4       	brne	.+34     	; 0x29b0 <right_junc_check+0x466>
	{
		// lcd_write_string("T Detected");
		update_array(0,1,1,1);
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	61 e0       	ldi	r22, 0x01	; 1
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	21 e0       	ldi	r18, 0x01	; 1
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		lcd_write_string_xy(0,1,"0");
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	42 eb       	ldi	r20, 0xB2	; 178
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	3f c0       	rjmp	.+126    	; 0x2a2e <right_junc_check+0x4e4>
		lcd_write_string_xy(2,1,"1");
		lcd_write_string_xy(4,1,"1");
		lcd_write_string_xy(6,1,"1");
	}
	else if(straight==0 && temp==0)
    29b0:	23 2b       	or	r18, r19
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <right_junc_check+0x46c>
    29b4:	56 c0       	rjmp	.+172    	; 0x2a62 <right_junc_check+0x518>
	{
		// lcd_write_string("L Detected");
		update_array(0,1,1,0);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	61 e0       	ldi	r22, 0x01	; 1
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		lcd_write_string_xy(0,1,"0");
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	42 eb       	ldi	r20, 0xB2	; 178
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_string_xy(2,1,"1");
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	40 eb       	ldi	r20, 0xB0	; 176
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_string_xy(4,1,"1");
    29ea:	84 e0       	ldi	r24, 0x04	; 4
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	40 eb       	ldi	r20, 0xB0	; 176
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_string_xy(6,1,"0");
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	42 eb       	ldi	r20, 0xB2	; 178
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	2b c0       	rjmp	.+86     	; 0x2a5e <right_junc_check+0x514>
	}
	else if(straight==1 && temp==2)
    2a08:	22 30       	cpi	r18, 0x02	; 2
    2a0a:	31 05       	cpc	r19, r1
    2a0c:	51 f5       	brne	.+84     	; 0x2a62 <right_junc_check+0x518>
	{
		// lcd_write_string("+ Detected");
		update_array(1,1,1,1);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	61 e0       	ldi	r22, 0x01	; 1
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	41 e0       	ldi	r20, 0x01	; 1
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	21 e0       	ldi	r18, 0x01	; 1
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
		lcd_write_string_xy(0,1,"1");
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	40 eb       	ldi	r20, 0xB0	; 176
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_string_xy(2,1,"1");
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	40 eb       	ldi	r20, 0xB0	; 176
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_string_xy(4,1,"1");
    2a42:	84 e0       	ldi	r24, 0x04	; 4
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	61 e0       	ldi	r22, 0x01	; 1
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	40 eb       	ldi	r20, 0xB0	; 176
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		lcd_write_string_xy(6,1,"1");
    2a52:	86 e0       	ldi	r24, 0x06	; 6
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	61 e0       	ldi	r22, 0x01	; 1
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	40 eb       	ldi	r20, 0xB0	; 176
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
	}
	//delay_millisec(2000);
	temp = 0;
    2a62:	10 92 e6 00 	sts	0x00E6, r1
    2a66:	10 92 e5 00 	sts	0x00E5, r1
	sense_of_directon();
    2a6a:	0e 94 d5 05 	call	0xbaa	; 0xbaa <sense_of_directon>
	// lcd_clear();
	// lcd_write_int_xy(0,0,dir,3);
	//delay_sec(2);
	
}
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	08 95       	ret
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2a78:	80 9b       	sbis	0x10, 0	; 16
    2a7a:	4d ce       	rjmp	.-870    	; 0x2716 <right_junc_check+0x1cc>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2a7c:	81 9b       	sbis	0x10, 1	; 16
    2a7e:	4b ce       	rjmp	.-874    	; 0x2716 <right_junc_check+0x1cc>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2a80:	83 9b       	sbis	0x10, 3	; 16
    2a82:	49 ce       	rjmp	.-878    	; 0x2716 <right_junc_check+0x1cc>
    2a84:	46 ce       	rjmp	.-884    	; 0x2712 <right_junc_check+0x1c8>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2a86:	80 9b       	sbis	0x10, 0	; 16
    2a88:	04 cf       	rjmp	.-504    	; 0x2892 <right_junc_check+0x348>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2a8a:	81 9b       	sbis	0x10, 1	; 16
    2a8c:	02 cf       	rjmp	.-508    	; 0x2892 <right_junc_check+0x348>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2a8e:	83 9b       	sbis	0x10, 3	; 16
    2a90:	00 cf       	rjmp	.-512    	; 0x2892 <right_junc_check+0x348>
    2a92:	fd ce       	rjmp	.-518    	; 0x288e <right_junc_check+0x344>

00002a94 <main>:
	}
}

int main(void)
{
	init_devices();
    2a94:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("LCD Working");
    2aa0:	84 eb       	ldi	r24, 0xB4	; 180
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<10 ; i++)
    2aac:	40 e5       	ldi	r20, 0x50	; 80
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	12 c0       	rjmp	.+36     	; 0x2ad6 <main+0x42>
	{
		for(j=0 ; j<10; j++)
		{
			for(k=0 ; k<4 ; k++)
			{
				dir_array[i][j][k] = 0;
    2ab2:	11 82       	std	Z+1, r1	; 0x01
    2ab4:	10 82       	st	Z, r1
    2ab6:	13 82       	std	Z+3, r1	; 0x03
    2ab8:	12 82       	std	Z+2, r1	; 0x02
    2aba:	15 82       	std	Z+5, r1	; 0x05
    2abc:	14 82       	std	Z+4, r1	; 0x04
    2abe:	17 82       	std	Z+7, r1	; 0x07
    2ac0:	16 82       	std	Z+6, r1	; 0x06
	lcd_write_string("LCD Working");
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<10 ; i++)
	{
		for(j=0 ; j<10; j++)
    2ac2:	01 96       	adiw	r24, 0x01	; 1
    2ac4:	38 96       	adiw	r30, 0x08	; 8
    2ac6:	8a 30       	cpi	r24, 0x0A	; 10
    2ac8:	91 05       	cpc	r25, r1
    2aca:	99 f7       	brne	.-26     	; 0x2ab2 <main+0x1e>
	init_devices();
	lcd_clear();
	lcd_write_string("LCD Working");
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<10 ; i++)
    2acc:	2f 5f       	subi	r18, 0xFF	; 255
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	2a 30       	cpi	r18, 0x0A	; 10
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	61 f0       	breq	.+24     	; 0x2aee <main+0x5a>
    2ad6:	24 9f       	mul	r18, r20
    2ad8:	f0 01       	movw	r30, r0
    2ada:	25 9f       	mul	r18, r21
    2adc:	f0 0d       	add	r31, r0
    2ade:	34 9f       	mul	r19, r20
    2ae0:	f0 0d       	add	r31, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	e1 54       	subi	r30, 0x41	; 65
    2ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	e2 cf       	rjmp	.-60     	; 0x2ab2 <main+0x1e>
			{
				dir_array[i][j][k] = 0;
			}
		}
	}
	lcd_clear();
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("Press Any Key");
    2af6:	82 ea       	ldi	r24, 0xA2	; 162
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
	update_array(1,0,0,0);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	0e 94 ab 06 	call	0xd56	; 0xd56 <update_array>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    2b12:	82 99       	sbic	0x10, 2	; 16
    2b14:	1c c0       	rjmp	.+56     	; 0x2b4e <main+0xba>
	{	
		if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
		{
			while(1)
			{
				line_track_new();	
    2b16:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
				LED&=0b11110000;
    2b1a:	85 b3       	in	r24, 0x15	; 21
    2b1c:	80 7f       	andi	r24, 0xF0	; 240
    2b1e:	85 bb       	out	0x15, r24	; 21
				LED|=sensorbyte;
    2b20:	85 b3       	in	r24, 0x15	; 21
    2b22:	90 91 d2 00 	lds	r25, 0x00D2
    2b26:	89 2b       	or	r24, r25
    2b28:	85 bb       	out	0x15, r24	; 21
				if(bit_is_clear(PINA,7))
    2b2a:	cf 99       	sbic	0x19, 7	; 25
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <main+0x9e>
				{
					right_junc_check();
    2b2e:	0e 94 a5 12 	call	0x254a	; 0x254a <right_junc_check>
				}
				left_junc_check();
    2b32:	0e 94 48 09 	call	0x1290	; 0x1290 <left_junc_check>
				frSensorCheck();
    2b36:	0e 94 c8 09 	call	0x1390	; 0x1390 <frSensorCheck>
				irc++;
    2b3a:	80 91 e1 00 	lds	r24, 0x00E1
    2b3e:	90 91 e2 00 	lds	r25, 0x00E2
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	90 93 e2 00 	sts	0x00E2, r25
    2b48:	80 93 e1 00 	sts	0x00E1, r24
    2b4c:	e4 cf       	rjmp	.-56     	; 0x2b16 <main+0x82>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    2b4e:	80 9b       	sbis	0x10, 0	; 16
    2b50:	e2 cf       	rjmp	.-60     	; 0x2b16 <main+0x82>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    2b52:	81 9b       	sbis	0x10, 1	; 16
    2b54:	e0 cf       	rjmp	.-64     	; 0x2b16 <main+0x82>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    2b56:	83 9b       	sbis	0x10, 3	; 16
    2b58:	de cf       	rjmp	.-68     	; 0x2b16 <main+0x82>
    2b5a:	db cf       	rjmp	.-74     	; 0x2b12 <main+0x7e>

00002b5c <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 47 18 	call	0x308e	; 0x308e <__eerd_byte_m32>
    2b64:	80 93 21 05 	sts	0x0521, r24
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 47 18 	call	0x308e	; 0x308e <__eerd_byte_m32>
    2b70:	80 93 22 05 	sts	0x0522, r24
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 47 18 	call	0x308e	; 0x308e <__eerd_byte_m32>
    2b7c:	80 93 23 05 	sts	0x0523, r24
    2b80:	83 e0       	ldi	r24, 0x03	; 3
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 47 18 	call	0x308e	; 0x308e <__eerd_byte_m32>
    2b88:	80 93 24 05 	sts	0x0524, r24
		eeprom_addr++;
	}
}
    2b8c:	08 95       	ret

00002b8e <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    2b92:	20 91 25 05 	lds	r18, 0x0525
    2b96:	80 91 e1 04 	lds	r24, 0x04E1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	82 0f       	add	r24, r18
    2b9e:	91 1d       	adc	r25, r1
    2ba0:	95 95       	asr	r25
    2ba2:	87 95       	ror	r24
    2ba4:	80 93 21 05 	sts	0x0521, r24
    2ba8:	20 91 26 05 	lds	r18, 0x0526
    2bac:	80 91 e2 04 	lds	r24, 0x04E2
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	82 0f       	add	r24, r18
    2bb4:	91 1d       	adc	r25, r1
    2bb6:	95 95       	asr	r25
    2bb8:	87 95       	ror	r24
    2bba:	80 93 22 05 	sts	0x0522, r24
    2bbe:	20 91 27 05 	lds	r18, 0x0527
    2bc2:	80 91 e3 04 	lds	r24, 0x04E3
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	82 0f       	add	r24, r18
    2bca:	91 1d       	adc	r25, r1
    2bcc:	95 95       	asr	r25
    2bce:	87 95       	ror	r24
    2bd0:	80 93 23 05 	sts	0x0523, r24
    2bd4:	20 91 28 05 	lds	r18, 0x0528
    2bd8:	80 91 e4 04 	lds	r24, 0x04E4
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	82 0f       	add	r24, r18
    2be0:	91 1d       	adc	r25, r1
    2be2:	95 95       	asr	r25
    2be4:	87 95       	ror	r24
    2be6:	80 93 24 05 	sts	0x0524, r24
    2bea:	c0 e0       	ldi	r28, 0x00	; 0
    2bec:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    2bee:	fe 01       	movw	r30, r28
    2bf0:	ef 5d       	subi	r30, 0xDF	; 223
    2bf2:	fa 4f       	sbci	r31, 0xFA	; 250
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	60 81       	ld	r22, Z
    2bf8:	0e 94 4f 18 	call	0x309e	; 0x309e <__eewr_byte_m32>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    2bfc:	21 96       	adiw	r28, 0x01	; 1
    2bfe:	c4 30       	cpi	r28, 0x04	; 4
    2c00:	d1 05       	cpc	r29, r1
    2c02:	a9 f7       	brne	.-22     	; 0x2bee <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <__subsf3>:
    2c0a:	50 58       	subi	r21, 0x80	; 128

00002c0c <__addsf3>:
    2c0c:	bb 27       	eor	r27, r27
    2c0e:	aa 27       	eor	r26, r26
    2c10:	0e d0       	rcall	.+28     	; 0x2c2e <__addsf3x>
    2c12:	75 c1       	rjmp	.+746    	; 0x2efe <__fp_round>
    2c14:	66 d1       	rcall	.+716    	; 0x2ee2 <__fp_pscA>
    2c16:	30 f0       	brcs	.+12     	; 0x2c24 <__addsf3+0x18>
    2c18:	6b d1       	rcall	.+726    	; 0x2ef0 <__fp_pscB>
    2c1a:	20 f0       	brcs	.+8      	; 0x2c24 <__addsf3+0x18>
    2c1c:	31 f4       	brne	.+12     	; 0x2c2a <__addsf3+0x1e>
    2c1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2c20:	11 f4       	brne	.+4      	; 0x2c26 <__addsf3+0x1a>
    2c22:	1e f4       	brtc	.+6      	; 0x2c2a <__addsf3+0x1e>
    2c24:	5b c1       	rjmp	.+694    	; 0x2edc <__fp_nan>
    2c26:	0e f4       	brtc	.+2      	; 0x2c2a <__addsf3+0x1e>
    2c28:	e0 95       	com	r30
    2c2a:	e7 fb       	bst	r30, 7
    2c2c:	51 c1       	rjmp	.+674    	; 0x2ed0 <__fp_inf>

00002c2e <__addsf3x>:
    2c2e:	e9 2f       	mov	r30, r25
    2c30:	77 d1       	rcall	.+750    	; 0x2f20 <__fp_split3>
    2c32:	80 f3       	brcs	.-32     	; 0x2c14 <__addsf3+0x8>
    2c34:	ba 17       	cp	r27, r26
    2c36:	62 07       	cpc	r22, r18
    2c38:	73 07       	cpc	r23, r19
    2c3a:	84 07       	cpc	r24, r20
    2c3c:	95 07       	cpc	r25, r21
    2c3e:	18 f0       	brcs	.+6      	; 0x2c46 <__addsf3x+0x18>
    2c40:	71 f4       	brne	.+28     	; 0x2c5e <__addsf3x+0x30>
    2c42:	9e f5       	brtc	.+102    	; 0x2caa <__addsf3x+0x7c>
    2c44:	8f c1       	rjmp	.+798    	; 0x2f64 <__fp_zero>
    2c46:	0e f4       	brtc	.+2      	; 0x2c4a <__addsf3x+0x1c>
    2c48:	e0 95       	com	r30
    2c4a:	0b 2e       	mov	r0, r27
    2c4c:	ba 2f       	mov	r27, r26
    2c4e:	a0 2d       	mov	r26, r0
    2c50:	0b 01       	movw	r0, r22
    2c52:	b9 01       	movw	r22, r18
    2c54:	90 01       	movw	r18, r0
    2c56:	0c 01       	movw	r0, r24
    2c58:	ca 01       	movw	r24, r20
    2c5a:	a0 01       	movw	r20, r0
    2c5c:	11 24       	eor	r1, r1
    2c5e:	ff 27       	eor	r31, r31
    2c60:	59 1b       	sub	r21, r25
    2c62:	99 f0       	breq	.+38     	; 0x2c8a <__addsf3x+0x5c>
    2c64:	59 3f       	cpi	r21, 0xF9	; 249
    2c66:	50 f4       	brcc	.+20     	; 0x2c7c <__addsf3x+0x4e>
    2c68:	50 3e       	cpi	r21, 0xE0	; 224
    2c6a:	68 f1       	brcs	.+90     	; 0x2cc6 <__addsf3x+0x98>
    2c6c:	1a 16       	cp	r1, r26
    2c6e:	f0 40       	sbci	r31, 0x00	; 0
    2c70:	a2 2f       	mov	r26, r18
    2c72:	23 2f       	mov	r18, r19
    2c74:	34 2f       	mov	r19, r20
    2c76:	44 27       	eor	r20, r20
    2c78:	58 5f       	subi	r21, 0xF8	; 248
    2c7a:	f3 cf       	rjmp	.-26     	; 0x2c62 <__addsf3x+0x34>
    2c7c:	46 95       	lsr	r20
    2c7e:	37 95       	ror	r19
    2c80:	27 95       	ror	r18
    2c82:	a7 95       	ror	r26
    2c84:	f0 40       	sbci	r31, 0x00	; 0
    2c86:	53 95       	inc	r21
    2c88:	c9 f7       	brne	.-14     	; 0x2c7c <__addsf3x+0x4e>
    2c8a:	7e f4       	brtc	.+30     	; 0x2caa <__addsf3x+0x7c>
    2c8c:	1f 16       	cp	r1, r31
    2c8e:	ba 0b       	sbc	r27, r26
    2c90:	62 0b       	sbc	r22, r18
    2c92:	73 0b       	sbc	r23, r19
    2c94:	84 0b       	sbc	r24, r20
    2c96:	ba f0       	brmi	.+46     	; 0x2cc6 <__addsf3x+0x98>
    2c98:	91 50       	subi	r25, 0x01	; 1
    2c9a:	a1 f0       	breq	.+40     	; 0x2cc4 <__addsf3x+0x96>
    2c9c:	ff 0f       	add	r31, r31
    2c9e:	bb 1f       	adc	r27, r27
    2ca0:	66 1f       	adc	r22, r22
    2ca2:	77 1f       	adc	r23, r23
    2ca4:	88 1f       	adc	r24, r24
    2ca6:	c2 f7       	brpl	.-16     	; 0x2c98 <__addsf3x+0x6a>
    2ca8:	0e c0       	rjmp	.+28     	; 0x2cc6 <__addsf3x+0x98>
    2caa:	ba 0f       	add	r27, r26
    2cac:	62 1f       	adc	r22, r18
    2cae:	73 1f       	adc	r23, r19
    2cb0:	84 1f       	adc	r24, r20
    2cb2:	48 f4       	brcc	.+18     	; 0x2cc6 <__addsf3x+0x98>
    2cb4:	87 95       	ror	r24
    2cb6:	77 95       	ror	r23
    2cb8:	67 95       	ror	r22
    2cba:	b7 95       	ror	r27
    2cbc:	f7 95       	ror	r31
    2cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    2cc0:	08 f0       	brcs	.+2      	; 0x2cc4 <__addsf3x+0x96>
    2cc2:	b3 cf       	rjmp	.-154    	; 0x2c2a <__addsf3+0x1e>
    2cc4:	93 95       	inc	r25
    2cc6:	88 0f       	add	r24, r24
    2cc8:	08 f0       	brcs	.+2      	; 0x2ccc <__addsf3x+0x9e>
    2cca:	99 27       	eor	r25, r25
    2ccc:	ee 0f       	add	r30, r30
    2cce:	97 95       	ror	r25
    2cd0:	87 95       	ror	r24
    2cd2:	08 95       	ret

00002cd4 <__cmpsf2>:
    2cd4:	d9 d0       	rcall	.+434    	; 0x2e88 <__fp_cmp>
    2cd6:	08 f4       	brcc	.+2      	; 0x2cda <__cmpsf2+0x6>
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	08 95       	ret

00002cdc <__divsf3>:
    2cdc:	0c d0       	rcall	.+24     	; 0x2cf6 <__divsf3x>
    2cde:	0f c1       	rjmp	.+542    	; 0x2efe <__fp_round>
    2ce0:	07 d1       	rcall	.+526    	; 0x2ef0 <__fp_pscB>
    2ce2:	40 f0       	brcs	.+16     	; 0x2cf4 <__divsf3+0x18>
    2ce4:	fe d0       	rcall	.+508    	; 0x2ee2 <__fp_pscA>
    2ce6:	30 f0       	brcs	.+12     	; 0x2cf4 <__divsf3+0x18>
    2ce8:	21 f4       	brne	.+8      	; 0x2cf2 <__divsf3+0x16>
    2cea:	5f 3f       	cpi	r21, 0xFF	; 255
    2cec:	19 f0       	breq	.+6      	; 0x2cf4 <__divsf3+0x18>
    2cee:	f0 c0       	rjmp	.+480    	; 0x2ed0 <__fp_inf>
    2cf0:	51 11       	cpse	r21, r1
    2cf2:	39 c1       	rjmp	.+626    	; 0x2f66 <__fp_szero>
    2cf4:	f3 c0       	rjmp	.+486    	; 0x2edc <__fp_nan>

00002cf6 <__divsf3x>:
    2cf6:	14 d1       	rcall	.+552    	; 0x2f20 <__fp_split3>
    2cf8:	98 f3       	brcs	.-26     	; 0x2ce0 <__divsf3+0x4>

00002cfa <__divsf3_pse>:
    2cfa:	99 23       	and	r25, r25
    2cfc:	c9 f3       	breq	.-14     	; 0x2cf0 <__divsf3+0x14>
    2cfe:	55 23       	and	r21, r21
    2d00:	b1 f3       	breq	.-20     	; 0x2cee <__divsf3+0x12>
    2d02:	95 1b       	sub	r25, r21
    2d04:	55 0b       	sbc	r21, r21
    2d06:	bb 27       	eor	r27, r27
    2d08:	aa 27       	eor	r26, r26
    2d0a:	62 17       	cp	r22, r18
    2d0c:	73 07       	cpc	r23, r19
    2d0e:	84 07       	cpc	r24, r20
    2d10:	38 f0       	brcs	.+14     	; 0x2d20 <__divsf3_pse+0x26>
    2d12:	9f 5f       	subi	r25, 0xFF	; 255
    2d14:	5f 4f       	sbci	r21, 0xFF	; 255
    2d16:	22 0f       	add	r18, r18
    2d18:	33 1f       	adc	r19, r19
    2d1a:	44 1f       	adc	r20, r20
    2d1c:	aa 1f       	adc	r26, r26
    2d1e:	a9 f3       	breq	.-22     	; 0x2d0a <__divsf3_pse+0x10>
    2d20:	33 d0       	rcall	.+102    	; 0x2d88 <__divsf3_pse+0x8e>
    2d22:	0e 2e       	mov	r0, r30
    2d24:	3a f0       	brmi	.+14     	; 0x2d34 <__divsf3_pse+0x3a>
    2d26:	e0 e8       	ldi	r30, 0x80	; 128
    2d28:	30 d0       	rcall	.+96     	; 0x2d8a <__divsf3_pse+0x90>
    2d2a:	91 50       	subi	r25, 0x01	; 1
    2d2c:	50 40       	sbci	r21, 0x00	; 0
    2d2e:	e6 95       	lsr	r30
    2d30:	00 1c       	adc	r0, r0
    2d32:	ca f7       	brpl	.-14     	; 0x2d26 <__divsf3_pse+0x2c>
    2d34:	29 d0       	rcall	.+82     	; 0x2d88 <__divsf3_pse+0x8e>
    2d36:	fe 2f       	mov	r31, r30
    2d38:	27 d0       	rcall	.+78     	; 0x2d88 <__divsf3_pse+0x8e>
    2d3a:	66 0f       	add	r22, r22
    2d3c:	77 1f       	adc	r23, r23
    2d3e:	88 1f       	adc	r24, r24
    2d40:	bb 1f       	adc	r27, r27
    2d42:	26 17       	cp	r18, r22
    2d44:	37 07       	cpc	r19, r23
    2d46:	48 07       	cpc	r20, r24
    2d48:	ab 07       	cpc	r26, r27
    2d4a:	b0 e8       	ldi	r27, 0x80	; 128
    2d4c:	09 f0       	breq	.+2      	; 0x2d50 <__divsf3_pse+0x56>
    2d4e:	bb 0b       	sbc	r27, r27
    2d50:	80 2d       	mov	r24, r0
    2d52:	bf 01       	movw	r22, r30
    2d54:	ff 27       	eor	r31, r31
    2d56:	93 58       	subi	r25, 0x83	; 131
    2d58:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5a:	2a f0       	brmi	.+10     	; 0x2d66 <__divsf3_pse+0x6c>
    2d5c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d5e:	51 05       	cpc	r21, r1
    2d60:	68 f0       	brcs	.+26     	; 0x2d7c <__divsf3_pse+0x82>
    2d62:	b6 c0       	rjmp	.+364    	; 0x2ed0 <__fp_inf>
    2d64:	00 c1       	rjmp	.+512    	; 0x2f66 <__fp_szero>
    2d66:	5f 3f       	cpi	r21, 0xFF	; 255
    2d68:	ec f3       	brlt	.-6      	; 0x2d64 <__divsf3_pse+0x6a>
    2d6a:	98 3e       	cpi	r25, 0xE8	; 232
    2d6c:	dc f3       	brlt	.-10     	; 0x2d64 <__divsf3_pse+0x6a>
    2d6e:	86 95       	lsr	r24
    2d70:	77 95       	ror	r23
    2d72:	67 95       	ror	r22
    2d74:	b7 95       	ror	r27
    2d76:	f7 95       	ror	r31
    2d78:	9f 5f       	subi	r25, 0xFF	; 255
    2d7a:	c9 f7       	brne	.-14     	; 0x2d6e <__divsf3_pse+0x74>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	91 1d       	adc	r25, r1
    2d80:	96 95       	lsr	r25
    2d82:	87 95       	ror	r24
    2d84:	97 f9       	bld	r25, 7
    2d86:	08 95       	ret
    2d88:	e1 e0       	ldi	r30, 0x01	; 1
    2d8a:	66 0f       	add	r22, r22
    2d8c:	77 1f       	adc	r23, r23
    2d8e:	88 1f       	adc	r24, r24
    2d90:	bb 1f       	adc	r27, r27
    2d92:	62 17       	cp	r22, r18
    2d94:	73 07       	cpc	r23, r19
    2d96:	84 07       	cpc	r24, r20
    2d98:	ba 07       	cpc	r27, r26
    2d9a:	20 f0       	brcs	.+8      	; 0x2da4 <__divsf3_pse+0xaa>
    2d9c:	62 1b       	sub	r22, r18
    2d9e:	73 0b       	sbc	r23, r19
    2da0:	84 0b       	sbc	r24, r20
    2da2:	ba 0b       	sbc	r27, r26
    2da4:	ee 1f       	adc	r30, r30
    2da6:	88 f7       	brcc	.-30     	; 0x2d8a <__divsf3_pse+0x90>
    2da8:	e0 95       	com	r30
    2daa:	08 95       	ret

00002dac <__fixsfsi>:
    2dac:	04 d0       	rcall	.+8      	; 0x2db6 <__fixunssfsi>
    2dae:	68 94       	set
    2db0:	b1 11       	cpse	r27, r1
    2db2:	d9 c0       	rjmp	.+434    	; 0x2f66 <__fp_szero>
    2db4:	08 95       	ret

00002db6 <__fixunssfsi>:
    2db6:	bc d0       	rcall	.+376    	; 0x2f30 <__fp_splitA>
    2db8:	88 f0       	brcs	.+34     	; 0x2ddc <__fixunssfsi+0x26>
    2dba:	9f 57       	subi	r25, 0x7F	; 127
    2dbc:	90 f0       	brcs	.+36     	; 0x2de2 <__fixunssfsi+0x2c>
    2dbe:	b9 2f       	mov	r27, r25
    2dc0:	99 27       	eor	r25, r25
    2dc2:	b7 51       	subi	r27, 0x17	; 23
    2dc4:	a0 f0       	brcs	.+40     	; 0x2dee <__fixunssfsi+0x38>
    2dc6:	d1 f0       	breq	.+52     	; 0x2dfc <__fixunssfsi+0x46>
    2dc8:	66 0f       	add	r22, r22
    2dca:	77 1f       	adc	r23, r23
    2dcc:	88 1f       	adc	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	1a f0       	brmi	.+6      	; 0x2dd8 <__fixunssfsi+0x22>
    2dd2:	ba 95       	dec	r27
    2dd4:	c9 f7       	brne	.-14     	; 0x2dc8 <__fixunssfsi+0x12>
    2dd6:	12 c0       	rjmp	.+36     	; 0x2dfc <__fixunssfsi+0x46>
    2dd8:	b1 30       	cpi	r27, 0x01	; 1
    2dda:	81 f0       	breq	.+32     	; 0x2dfc <__fixunssfsi+0x46>
    2ddc:	c3 d0       	rcall	.+390    	; 0x2f64 <__fp_zero>
    2dde:	b1 e0       	ldi	r27, 0x01	; 1
    2de0:	08 95       	ret
    2de2:	c0 c0       	rjmp	.+384    	; 0x2f64 <__fp_zero>
    2de4:	67 2f       	mov	r22, r23
    2de6:	78 2f       	mov	r23, r24
    2de8:	88 27       	eor	r24, r24
    2dea:	b8 5f       	subi	r27, 0xF8	; 248
    2dec:	39 f0       	breq	.+14     	; 0x2dfc <__fixunssfsi+0x46>
    2dee:	b9 3f       	cpi	r27, 0xF9	; 249
    2df0:	cc f3       	brlt	.-14     	; 0x2de4 <__fixunssfsi+0x2e>
    2df2:	86 95       	lsr	r24
    2df4:	77 95       	ror	r23
    2df6:	67 95       	ror	r22
    2df8:	b3 95       	inc	r27
    2dfa:	d9 f7       	brne	.-10     	; 0x2df2 <__fixunssfsi+0x3c>
    2dfc:	3e f4       	brtc	.+14     	; 0x2e0c <__fixunssfsi+0x56>
    2dfe:	90 95       	com	r25
    2e00:	80 95       	com	r24
    2e02:	70 95       	com	r23
    2e04:	61 95       	neg	r22
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	08 95       	ret

00002e0e <__floatunsisf>:
    2e0e:	e8 94       	clt
    2e10:	09 c0       	rjmp	.+18     	; 0x2e24 <__floatsisf+0x12>

00002e12 <__floatsisf>:
    2e12:	97 fb       	bst	r25, 7
    2e14:	3e f4       	brtc	.+14     	; 0x2e24 <__floatsisf+0x12>
    2e16:	90 95       	com	r25
    2e18:	80 95       	com	r24
    2e1a:	70 95       	com	r23
    2e1c:	61 95       	neg	r22
    2e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e20:	8f 4f       	sbci	r24, 0xFF	; 255
    2e22:	9f 4f       	sbci	r25, 0xFF	; 255
    2e24:	99 23       	and	r25, r25
    2e26:	a9 f0       	breq	.+42     	; 0x2e52 <__floatsisf+0x40>
    2e28:	f9 2f       	mov	r31, r25
    2e2a:	96 e9       	ldi	r25, 0x96	; 150
    2e2c:	bb 27       	eor	r27, r27
    2e2e:	93 95       	inc	r25
    2e30:	f6 95       	lsr	r31
    2e32:	87 95       	ror	r24
    2e34:	77 95       	ror	r23
    2e36:	67 95       	ror	r22
    2e38:	b7 95       	ror	r27
    2e3a:	f1 11       	cpse	r31, r1
    2e3c:	f8 cf       	rjmp	.-16     	; 0x2e2e <__floatsisf+0x1c>
    2e3e:	fa f4       	brpl	.+62     	; 0x2e7e <__floatsisf+0x6c>
    2e40:	bb 0f       	add	r27, r27
    2e42:	11 f4       	brne	.+4      	; 0x2e48 <__floatsisf+0x36>
    2e44:	60 ff       	sbrs	r22, 0
    2e46:	1b c0       	rjmp	.+54     	; 0x2e7e <__floatsisf+0x6c>
    2e48:	6f 5f       	subi	r22, 0xFF	; 255
    2e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e50:	16 c0       	rjmp	.+44     	; 0x2e7e <__floatsisf+0x6c>
    2e52:	88 23       	and	r24, r24
    2e54:	11 f0       	breq	.+4      	; 0x2e5a <__floatsisf+0x48>
    2e56:	96 e9       	ldi	r25, 0x96	; 150
    2e58:	11 c0       	rjmp	.+34     	; 0x2e7c <__floatsisf+0x6a>
    2e5a:	77 23       	and	r23, r23
    2e5c:	21 f0       	breq	.+8      	; 0x2e66 <__floatsisf+0x54>
    2e5e:	9e e8       	ldi	r25, 0x8E	; 142
    2e60:	87 2f       	mov	r24, r23
    2e62:	76 2f       	mov	r23, r22
    2e64:	05 c0       	rjmp	.+10     	; 0x2e70 <__floatsisf+0x5e>
    2e66:	66 23       	and	r22, r22
    2e68:	71 f0       	breq	.+28     	; 0x2e86 <__floatsisf+0x74>
    2e6a:	96 e8       	ldi	r25, 0x86	; 134
    2e6c:	86 2f       	mov	r24, r22
    2e6e:	70 e0       	ldi	r23, 0x00	; 0
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	2a f0       	brmi	.+10     	; 0x2e7e <__floatsisf+0x6c>
    2e74:	9a 95       	dec	r25
    2e76:	66 0f       	add	r22, r22
    2e78:	77 1f       	adc	r23, r23
    2e7a:	88 1f       	adc	r24, r24
    2e7c:	da f7       	brpl	.-10     	; 0x2e74 <__floatsisf+0x62>
    2e7e:	88 0f       	add	r24, r24
    2e80:	96 95       	lsr	r25
    2e82:	87 95       	ror	r24
    2e84:	97 f9       	bld	r25, 7
    2e86:	08 95       	ret

00002e88 <__fp_cmp>:
    2e88:	99 0f       	add	r25, r25
    2e8a:	00 08       	sbc	r0, r0
    2e8c:	55 0f       	add	r21, r21
    2e8e:	aa 0b       	sbc	r26, r26
    2e90:	e0 e8       	ldi	r30, 0x80	; 128
    2e92:	fe ef       	ldi	r31, 0xFE	; 254
    2e94:	16 16       	cp	r1, r22
    2e96:	17 06       	cpc	r1, r23
    2e98:	e8 07       	cpc	r30, r24
    2e9a:	f9 07       	cpc	r31, r25
    2e9c:	c0 f0       	brcs	.+48     	; 0x2ece <__fp_cmp+0x46>
    2e9e:	12 16       	cp	r1, r18
    2ea0:	13 06       	cpc	r1, r19
    2ea2:	e4 07       	cpc	r30, r20
    2ea4:	f5 07       	cpc	r31, r21
    2ea6:	98 f0       	brcs	.+38     	; 0x2ece <__fp_cmp+0x46>
    2ea8:	62 1b       	sub	r22, r18
    2eaa:	73 0b       	sbc	r23, r19
    2eac:	84 0b       	sbc	r24, r20
    2eae:	95 0b       	sbc	r25, r21
    2eb0:	39 f4       	brne	.+14     	; 0x2ec0 <__fp_cmp+0x38>
    2eb2:	0a 26       	eor	r0, r26
    2eb4:	61 f0       	breq	.+24     	; 0x2ece <__fp_cmp+0x46>
    2eb6:	23 2b       	or	r18, r19
    2eb8:	24 2b       	or	r18, r20
    2eba:	25 2b       	or	r18, r21
    2ebc:	21 f4       	brne	.+8      	; 0x2ec6 <__fp_cmp+0x3e>
    2ebe:	08 95       	ret
    2ec0:	0a 26       	eor	r0, r26
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <__fp_cmp+0x3e>
    2ec4:	a1 40       	sbci	r26, 0x01	; 1
    2ec6:	a6 95       	lsr	r26
    2ec8:	8f ef       	ldi	r24, 0xFF	; 255
    2eca:	81 1d       	adc	r24, r1
    2ecc:	81 1d       	adc	r24, r1
    2ece:	08 95       	ret

00002ed0 <__fp_inf>:
    2ed0:	97 f9       	bld	r25, 7
    2ed2:	9f 67       	ori	r25, 0x7F	; 127
    2ed4:	80 e8       	ldi	r24, 0x80	; 128
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	08 95       	ret

00002edc <__fp_nan>:
    2edc:	9f ef       	ldi	r25, 0xFF	; 255
    2ede:	80 ec       	ldi	r24, 0xC0	; 192
    2ee0:	08 95       	ret

00002ee2 <__fp_pscA>:
    2ee2:	00 24       	eor	r0, r0
    2ee4:	0a 94       	dec	r0
    2ee6:	16 16       	cp	r1, r22
    2ee8:	17 06       	cpc	r1, r23
    2eea:	18 06       	cpc	r1, r24
    2eec:	09 06       	cpc	r0, r25
    2eee:	08 95       	ret

00002ef0 <__fp_pscB>:
    2ef0:	00 24       	eor	r0, r0
    2ef2:	0a 94       	dec	r0
    2ef4:	12 16       	cp	r1, r18
    2ef6:	13 06       	cpc	r1, r19
    2ef8:	14 06       	cpc	r1, r20
    2efa:	05 06       	cpc	r0, r21
    2efc:	08 95       	ret

00002efe <__fp_round>:
    2efe:	09 2e       	mov	r0, r25
    2f00:	03 94       	inc	r0
    2f02:	00 0c       	add	r0, r0
    2f04:	11 f4       	brne	.+4      	; 0x2f0a <__fp_round+0xc>
    2f06:	88 23       	and	r24, r24
    2f08:	52 f0       	brmi	.+20     	; 0x2f1e <__fp_round+0x20>
    2f0a:	bb 0f       	add	r27, r27
    2f0c:	40 f4       	brcc	.+16     	; 0x2f1e <__fp_round+0x20>
    2f0e:	bf 2b       	or	r27, r31
    2f10:	11 f4       	brne	.+4      	; 0x2f16 <__fp_round+0x18>
    2f12:	60 ff       	sbrs	r22, 0
    2f14:	04 c0       	rjmp	.+8      	; 0x2f1e <__fp_round+0x20>
    2f16:	6f 5f       	subi	r22, 0xFF	; 255
    2f18:	7f 4f       	sbci	r23, 0xFF	; 255
    2f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1e:	08 95       	ret

00002f20 <__fp_split3>:
    2f20:	57 fd       	sbrc	r21, 7
    2f22:	90 58       	subi	r25, 0x80	; 128
    2f24:	44 0f       	add	r20, r20
    2f26:	55 1f       	adc	r21, r21
    2f28:	59 f0       	breq	.+22     	; 0x2f40 <__fp_splitA+0x10>
    2f2a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f2c:	71 f0       	breq	.+28     	; 0x2f4a <__fp_splitA+0x1a>
    2f2e:	47 95       	ror	r20

00002f30 <__fp_splitA>:
    2f30:	88 0f       	add	r24, r24
    2f32:	97 fb       	bst	r25, 7
    2f34:	99 1f       	adc	r25, r25
    2f36:	61 f0       	breq	.+24     	; 0x2f50 <__fp_splitA+0x20>
    2f38:	9f 3f       	cpi	r25, 0xFF	; 255
    2f3a:	79 f0       	breq	.+30     	; 0x2f5a <__fp_splitA+0x2a>
    2f3c:	87 95       	ror	r24
    2f3e:	08 95       	ret
    2f40:	12 16       	cp	r1, r18
    2f42:	13 06       	cpc	r1, r19
    2f44:	14 06       	cpc	r1, r20
    2f46:	55 1f       	adc	r21, r21
    2f48:	f2 cf       	rjmp	.-28     	; 0x2f2e <__fp_split3+0xe>
    2f4a:	46 95       	lsr	r20
    2f4c:	f1 df       	rcall	.-30     	; 0x2f30 <__fp_splitA>
    2f4e:	08 c0       	rjmp	.+16     	; 0x2f60 <__fp_splitA+0x30>
    2f50:	16 16       	cp	r1, r22
    2f52:	17 06       	cpc	r1, r23
    2f54:	18 06       	cpc	r1, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	f1 cf       	rjmp	.-30     	; 0x2f3c <__fp_splitA+0xc>
    2f5a:	86 95       	lsr	r24
    2f5c:	71 05       	cpc	r23, r1
    2f5e:	61 05       	cpc	r22, r1
    2f60:	08 94       	sec
    2f62:	08 95       	ret

00002f64 <__fp_zero>:
    2f64:	e8 94       	clt

00002f66 <__fp_szero>:
    2f66:	bb 27       	eor	r27, r27
    2f68:	66 27       	eor	r22, r22
    2f6a:	77 27       	eor	r23, r23
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	97 f9       	bld	r25, 7
    2f70:	08 95       	ret

00002f72 <__gesf2>:
    2f72:	8a df       	rcall	.-236    	; 0x2e88 <__fp_cmp>
    2f74:	08 f4       	brcc	.+2      	; 0x2f78 <__gesf2+0x6>
    2f76:	8f ef       	ldi	r24, 0xFF	; 255
    2f78:	08 95       	ret

00002f7a <__mulsf3>:
    2f7a:	0b d0       	rcall	.+22     	; 0x2f92 <__mulsf3x>
    2f7c:	c0 cf       	rjmp	.-128    	; 0x2efe <__fp_round>
    2f7e:	b1 df       	rcall	.-158    	; 0x2ee2 <__fp_pscA>
    2f80:	28 f0       	brcs	.+10     	; 0x2f8c <__mulsf3+0x12>
    2f82:	b6 df       	rcall	.-148    	; 0x2ef0 <__fp_pscB>
    2f84:	18 f0       	brcs	.+6      	; 0x2f8c <__mulsf3+0x12>
    2f86:	95 23       	and	r25, r21
    2f88:	09 f0       	breq	.+2      	; 0x2f8c <__mulsf3+0x12>
    2f8a:	a2 cf       	rjmp	.-188    	; 0x2ed0 <__fp_inf>
    2f8c:	a7 cf       	rjmp	.-178    	; 0x2edc <__fp_nan>
    2f8e:	11 24       	eor	r1, r1
    2f90:	ea cf       	rjmp	.-44     	; 0x2f66 <__fp_szero>

00002f92 <__mulsf3x>:
    2f92:	c6 df       	rcall	.-116    	; 0x2f20 <__fp_split3>
    2f94:	a0 f3       	brcs	.-24     	; 0x2f7e <__mulsf3+0x4>

00002f96 <__mulsf3_pse>:
    2f96:	95 9f       	mul	r25, r21
    2f98:	d1 f3       	breq	.-12     	; 0x2f8e <__mulsf3+0x14>
    2f9a:	95 0f       	add	r25, r21
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	55 1f       	adc	r21, r21
    2fa0:	62 9f       	mul	r22, r18
    2fa2:	f0 01       	movw	r30, r0
    2fa4:	72 9f       	mul	r23, r18
    2fa6:	bb 27       	eor	r27, r27
    2fa8:	f0 0d       	add	r31, r0
    2faa:	b1 1d       	adc	r27, r1
    2fac:	63 9f       	mul	r22, r19
    2fae:	aa 27       	eor	r26, r26
    2fb0:	f0 0d       	add	r31, r0
    2fb2:	b1 1d       	adc	r27, r1
    2fb4:	aa 1f       	adc	r26, r26
    2fb6:	64 9f       	mul	r22, r20
    2fb8:	66 27       	eor	r22, r22
    2fba:	b0 0d       	add	r27, r0
    2fbc:	a1 1d       	adc	r26, r1
    2fbe:	66 1f       	adc	r22, r22
    2fc0:	82 9f       	mul	r24, r18
    2fc2:	22 27       	eor	r18, r18
    2fc4:	b0 0d       	add	r27, r0
    2fc6:	a1 1d       	adc	r26, r1
    2fc8:	62 1f       	adc	r22, r18
    2fca:	73 9f       	mul	r23, r19
    2fcc:	b0 0d       	add	r27, r0
    2fce:	a1 1d       	adc	r26, r1
    2fd0:	62 1f       	adc	r22, r18
    2fd2:	83 9f       	mul	r24, r19
    2fd4:	a0 0d       	add	r26, r0
    2fd6:	61 1d       	adc	r22, r1
    2fd8:	22 1f       	adc	r18, r18
    2fda:	74 9f       	mul	r23, r20
    2fdc:	33 27       	eor	r19, r19
    2fde:	a0 0d       	add	r26, r0
    2fe0:	61 1d       	adc	r22, r1
    2fe2:	23 1f       	adc	r18, r19
    2fe4:	84 9f       	mul	r24, r20
    2fe6:	60 0d       	add	r22, r0
    2fe8:	21 1d       	adc	r18, r1
    2fea:	82 2f       	mov	r24, r18
    2fec:	76 2f       	mov	r23, r22
    2fee:	6a 2f       	mov	r22, r26
    2ff0:	11 24       	eor	r1, r1
    2ff2:	9f 57       	subi	r25, 0x7F	; 127
    2ff4:	50 40       	sbci	r21, 0x00	; 0
    2ff6:	8a f0       	brmi	.+34     	; 0x301a <__mulsf3_pse+0x84>
    2ff8:	e1 f0       	breq	.+56     	; 0x3032 <__mulsf3_pse+0x9c>
    2ffa:	88 23       	and	r24, r24
    2ffc:	4a f0       	brmi	.+18     	; 0x3010 <__mulsf3_pse+0x7a>
    2ffe:	ee 0f       	add	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	bb 1f       	adc	r27, r27
    3004:	66 1f       	adc	r22, r22
    3006:	77 1f       	adc	r23, r23
    3008:	88 1f       	adc	r24, r24
    300a:	91 50       	subi	r25, 0x01	; 1
    300c:	50 40       	sbci	r21, 0x00	; 0
    300e:	a9 f7       	brne	.-22     	; 0x2ffa <__mulsf3_pse+0x64>
    3010:	9e 3f       	cpi	r25, 0xFE	; 254
    3012:	51 05       	cpc	r21, r1
    3014:	70 f0       	brcs	.+28     	; 0x3032 <__mulsf3_pse+0x9c>
    3016:	5c cf       	rjmp	.-328    	; 0x2ed0 <__fp_inf>
    3018:	a6 cf       	rjmp	.-180    	; 0x2f66 <__fp_szero>
    301a:	5f 3f       	cpi	r21, 0xFF	; 255
    301c:	ec f3       	brlt	.-6      	; 0x3018 <__mulsf3_pse+0x82>
    301e:	98 3e       	cpi	r25, 0xE8	; 232
    3020:	dc f3       	brlt	.-10     	; 0x3018 <__mulsf3_pse+0x82>
    3022:	86 95       	lsr	r24
    3024:	77 95       	ror	r23
    3026:	67 95       	ror	r22
    3028:	b7 95       	ror	r27
    302a:	f7 95       	ror	r31
    302c:	e7 95       	ror	r30
    302e:	9f 5f       	subi	r25, 0xFF	; 255
    3030:	c1 f7       	brne	.-16     	; 0x3022 <__mulsf3_pse+0x8c>
    3032:	fe 2b       	or	r31, r30
    3034:	88 0f       	add	r24, r24
    3036:	91 1d       	adc	r25, r1
    3038:	96 95       	lsr	r25
    303a:	87 95       	ror	r24
    303c:	97 f9       	bld	r25, 7
    303e:	08 95       	ret

00003040 <__divmodhi4>:
    3040:	97 fb       	bst	r25, 7
    3042:	09 2e       	mov	r0, r25
    3044:	07 26       	eor	r0, r23
    3046:	0a d0       	rcall	.+20     	; 0x305c <__divmodhi4_neg1>
    3048:	77 fd       	sbrc	r23, 7
    304a:	04 d0       	rcall	.+8      	; 0x3054 <__divmodhi4_neg2>
    304c:	0c d0       	rcall	.+24     	; 0x3066 <__udivmodhi4>
    304e:	06 d0       	rcall	.+12     	; 0x305c <__divmodhi4_neg1>
    3050:	00 20       	and	r0, r0
    3052:	1a f4       	brpl	.+6      	; 0x305a <__divmodhi4_exit>

00003054 <__divmodhi4_neg2>:
    3054:	70 95       	com	r23
    3056:	61 95       	neg	r22
    3058:	7f 4f       	sbci	r23, 0xFF	; 255

0000305a <__divmodhi4_exit>:
    305a:	08 95       	ret

0000305c <__divmodhi4_neg1>:
    305c:	f6 f7       	brtc	.-4      	; 0x305a <__divmodhi4_exit>
    305e:	90 95       	com	r25
    3060:	81 95       	neg	r24
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	08 95       	ret

00003066 <__udivmodhi4>:
    3066:	aa 1b       	sub	r26, r26
    3068:	bb 1b       	sub	r27, r27
    306a:	51 e1       	ldi	r21, 0x11	; 17
    306c:	07 c0       	rjmp	.+14     	; 0x307c <__udivmodhi4_ep>

0000306e <__udivmodhi4_loop>:
    306e:	aa 1f       	adc	r26, r26
    3070:	bb 1f       	adc	r27, r27
    3072:	a6 17       	cp	r26, r22
    3074:	b7 07       	cpc	r27, r23
    3076:	10 f0       	brcs	.+4      	; 0x307c <__udivmodhi4_ep>
    3078:	a6 1b       	sub	r26, r22
    307a:	b7 0b       	sbc	r27, r23

0000307c <__udivmodhi4_ep>:
    307c:	88 1f       	adc	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	5a 95       	dec	r21
    3082:	a9 f7       	brne	.-22     	; 0x306e <__udivmodhi4_loop>
    3084:	80 95       	com	r24
    3086:	90 95       	com	r25
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	08 95       	ret

0000308e <__eerd_byte_m32>:
    308e:	e1 99       	sbic	0x1c, 1	; 28
    3090:	fe cf       	rjmp	.-4      	; 0x308e <__eerd_byte_m32>
    3092:	9f bb       	out	0x1f, r25	; 31
    3094:	8e bb       	out	0x1e, r24	; 30
    3096:	e0 9a       	sbi	0x1c, 0	; 28
    3098:	99 27       	eor	r25, r25
    309a:	8d b3       	in	r24, 0x1d	; 29
    309c:	08 95       	ret

0000309e <__eewr_byte_m32>:
    309e:	26 2f       	mov	r18, r22

000030a0 <__eewr_r18_m32>:
    30a0:	e1 99       	sbic	0x1c, 1	; 28
    30a2:	fe cf       	rjmp	.-4      	; 0x30a0 <__eewr_r18_m32>
    30a4:	9f bb       	out	0x1f, r25	; 31
    30a6:	8e bb       	out	0x1e, r24	; 30
    30a8:	2d bb       	out	0x1d, r18	; 29
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	e2 9a       	sbi	0x1c, 2	; 28
    30b0:	e1 9a       	sbi	0x1c, 1	; 28
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	08 95       	ret

000030b8 <_exit>:
    30b8:	f8 94       	cli

000030ba <__stop_program>:
    30ba:	ff cf       	rjmp	.-2      	; 0x30ba <__stop_program>
