
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00002010  000020a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002bd  008000f0  008000f0  00002134  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000602  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000186e  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e8  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b8c  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000410  00000000  00000000  00005f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ea  00000000  00000000  00006348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a2  00000000  00000000  00006932  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000070d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <main>
      8a:	0c 94 06 10 	jmp	0x200c	; 0x200c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     18e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     286:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 f0 00 	sts	0x00F0, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 f0 00 	lds	r24, 0x00F0
     300:	82 2b       	or	r24, r18
     302:	80 93 f0 00 	sts	0x00F0, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 97 03 	sts	0x0397, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 98 03 	sts	0x0398, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 99 03 	sts	0x0399, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 9a 03 	sts	0x039A, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 9f 03 	sts	0x039F, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 a0 03 	sts	0x03A0, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 a1 03 	sts	0x03A1, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 a2 03 	sts	0x03A2, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <__stack+0x31>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
int dir = 2, Coordinates_changed_by = 0 ;
int x_coordinate = 5, y_coordinate = 5 ;
int dir_array[9][9][4];
int mx, my;
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 f0 00 	lds	r24, 0x00F0
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 f2 00 	sts	0x00F2, r25
     778:	80 93 f1 00 	sts	0x00F1, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 fd 00 	lds	r24, 0x00FD
     780:	90 91 fe 00 	lds	r25, 0x00FE
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 f2 00 	sts	0x00F2, r1
     78c:	10 92 f1 00 	sts	0x00F1, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 f2 00 	sts	0x00F2, r25
     7a0:	80 93 f1 00 	sts	0x00F1, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 f1 00 	lds	r22, 0x00F1
     7a8:	70 91 f2 00 	lds	r23, 0x00F2
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 a3 03 	lds	r22, 0x03A3
     7c0:	70 91 a4 03 	lds	r23, 0x03A4
     7c4:	80 91 a5 03 	lds	r24, 0x03A5
     7c8:	90 91 a6 03 	lds	r25, 0x03A6
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 a9 03 	sts	0x03A9, r22
     7dc:	70 93 aa 03 	sts	0x03AA, r23
     7e0:	80 93 ab 03 	sts	0x03AB, r24
     7e4:	90 93 ac 03 	sts	0x03AC, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 e1 00 	lds	r18, 0x00E1
     7f0:	30 91 e2 00 	lds	r19, 0x00E2
     7f4:	40 91 e3 00 	lds	r20, 0x00E3
     7f8:	50 91 e4 00 	lds	r21, 0x00E4
     7fc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 e5 00 	lds	r18, 0x00E5
     80c:	30 91 e6 00 	lds	r19, 0x00E6
     810:	40 91 e7 00 	lds	r20, 0x00E7
     814:	50 91 e8 00 	lds	r21, 0x00E8
     818:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 09 01 	sts	0x0109, r22
     830:	70 93 0a 01 	sts	0x010A, r23
     834:	80 93 0b 01 	sts	0x010B, r24
     838:	90 93 0c 01 	sts	0x010C, r25
	prev_error = mpos ;
     83c:	a0 92 a3 03 	sts	0x03A3, r10
     840:	b0 92 a4 03 	sts	0x03A4, r11
     844:	c0 92 a5 03 	sts	0x03A5, r12
     848:	d0 92 a6 03 	sts	0x03A6, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 df 00 	lds	r22, 0x00DF
     850:	70 91 e0 00 	lds	r23, 0x00E0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__subsf3>
     868:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__addsf3>
     87c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 e9 00 	sts	0x00E9, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
     92a:	08 95       	ret

0000092c <left_count>:
	bot_brake();
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     92c:	cc 99       	sbic	0x19, 4	; 25
     92e:	16 c0       	rjmp	.+44     	; 0x95c <left_count+0x30>
	{
		if(l==0)
     930:	80 91 f5 00 	lds	r24, 0x00F5
     934:	90 91 f6 00 	lds	r25, 0x00F6
     938:	89 2b       	or	r24, r25
     93a:	a1 f4       	brne	.+40     	; 0x964 <left_count+0x38>
		{
			lcount++;
     93c:	80 91 f7 00 	lds	r24, 0x00F7
     940:	90 91 f8 00 	lds	r25, 0x00F8
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	90 93 f8 00 	sts	0x00F8, r25
     94a:	80 93 f7 00 	sts	0x00F7, r24
			l = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 f6 00 	sts	0x00F6, r25
     956:	80 93 f5 00 	sts	0x00F5, r24
     95a:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     95c:	10 92 f6 00 	sts	0x00F6, r1
     960:	10 92 f5 00 	sts	0x00F5, r1
     964:	08 95       	ret

00000966 <special_case_check>:
	
}

void special_case_check()         ////called inside left_junc_check
{
	if(bit_is_clear(PINA,5) || flag1 == 1)
     966:	cd 9b       	sbis	0x19, 5	; 25
     968:	06 c0       	rjmp	.+12     	; 0x976 <special_case_check+0x10>
     96a:	80 91 fd 00 	lds	r24, 0x00FD
     96e:	90 91 fe 00 	lds	r25, 0x00FE
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	79 f5       	brne	.+94     	; 0x9d4 <special_case_check+0x6e>
	{
		flag1 = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 fe 00 	sts	0x00FE, r25
     97e:	80 93 fd 00 	sts	0x00FD, r24
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
     982:	cc 99       	sbic	0x19, 4	; 25
     984:	27 c0       	rjmp	.+78     	; 0x9d4 <special_case_check+0x6e>
     986:	86 9b       	sbis	0x10, 6	; 16
     988:	14 c0       	rjmp	.+40     	; 0x9b2 <special_case_check+0x4c>
     98a:	ce 9b       	sbis	0x19, 6	; 25
     98c:	12 c0       	rjmp	.+36     	; 0x9b2 <special_case_check+0x4c>
     98e:	08 95       	ret
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     990:	3b bd       	out	0x2b, r19	; 43
     992:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     994:	39 bd       	out	0x29, r19	; 41
     996:	28 bd       	out	0x28, r18	; 40
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     998:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     99a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     99c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     99e:	af 98       	cbi	0x15, 7	; 21
			{
				set_pwm1a(240);
				set_pwm1b(240);
				bot_forward();
				flag1 = 0;
				if(bit_is_clear(PIND, 7))
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	87 99       	sbic	0x10, 7	; 16
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <special_case_check+0x54>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     9a8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     9aa:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9ac:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     9ae:	af 9a       	sbi	0x15, 7	; 21
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <special_case_check+0x54>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9b6:	20 ef       	ldi	r18, 0xF0	; 240
     9b8:	30 e0       	ldi	r19, 0x00	; 0
	{
		flag1 = 1;
		
		if(bit_is_clear(PINA,4) && (bit_is_clear(PIND,6) || bit_is_clear(PINA,6)))
		{
			while(bit_is_clear(PINA,4) && bit_is_set(PIND, 7)) 
     9ba:	cc 9b       	sbis	0x19, 4	; 25
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <special_case_check+0x62>
     9be:	90 93 fe 00 	sts	0x00FE, r25
     9c2:	80 93 fd 00 	sts	0x00FD, r24
     9c6:	08 95       	ret
     9c8:	87 99       	sbic	0x10, 7	; 16
     9ca:	e2 cf       	rjmp	.-60     	; 0x990 <special_case_check+0x2a>
     9cc:	90 93 fe 00 	sts	0x00FE, r25
     9d0:	80 93 fd 00 	sts	0x00FD, r24
     9d4:	08 95       	ret

000009d6 <line_track_new>:
	
}

void line_track_new()
{
	check_sensors();
     9d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     9da:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     9dc:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     9de:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9e0:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     9e2:	ce 9b       	sbis	0x19, 6	; 25
     9e4:	09 c0       	rjmp	.+18     	; 0x9f8 <line_track_new+0x22>
     9e6:	86 99       	sbic	0x10, 6	; 16
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <line_track_new+0x22>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9ea:	86 ee       	ldi	r24, 0xE6	; 230
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	9b bd       	out	0x2b, r25	; 43
     9f0:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     9f2:	82 e2       	ldi	r24, 0x22	; 34
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	1a c0       	rjmp	.+52     	; 0xa2c <line_track_new+0x56>
	{
		set_pwm1a(230);
		set_pwm1b(290);

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     9f8:	86 9b       	sbis	0x10, 6	; 16
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <line_track_new+0x38>
     9fc:	ce 99       	sbic	0x19, 6	; 25
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <line_track_new+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a00:	82 e2       	ldi	r24, 0x22	; 34
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	9b bd       	out	0x2b, r25	; 43
     a06:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a08:	86 ee       	ldi	r24, 0xE6	; 230
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <line_track_new+0x56>
	{
		set_pwm1a(290);
		set_pwm1b(230);
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     a0e:	86 9b       	sbis	0x10, 6	; 16
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <line_track_new+0x46>
     a12:	ce 9b       	sbis	0x19, 6	; 25
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <line_track_new+0x46>
	{
		line_track();
     a16:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     a1a:	0a c0       	rjmp	.+20     	; 0xa30 <line_track_new+0x5a>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     a1c:	86 99       	sbic	0x10, 6	; 16
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <line_track_new+0x5a>
     a20:	ce 99       	sbic	0x19, 6	; 25
     a22:	06 c0       	rjmp	.+12     	; 0xa30 <line_track_new+0x5a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	9b bd       	out	0x2b, r25	; 43
     a2a:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a2c:	99 bd       	out	0x29, r25	; 41
     a2e:	88 bd       	out	0x28, r24	; 40
	{
		set_pwm1a(260);
		set_pwm1b(260);
	}
		delay_microsec(10);
     a30:	8a e0       	ldi	r24, 0x0A	; 10
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
}
     a38:	08 95       	ret

00000a3a <turn_left>:
	//delay_millisec(100);
}

void turn_left()
{	
	turn = 'l';
     a3a:	8c e6       	ldi	r24, 0x6C	; 108
     a3c:	80 93 e9 00 	sts	0x00E9, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a40:	89 e0       	ldi	r24, 0x09	; 9
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	08 c0       	rjmp	.+16     	; 0xa56 <turn_left+0x1c>
     a46:	9b bd       	out	0x2b, r25	; 43
     a48:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a4a:	99 bd       	out	0x29, r25	; 41
     a4c:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a4e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a50:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a52:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a54:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_set(PINA,5))
     a56:	cd 99       	sbic	0x19, 5	; 25
     a58:	f6 cf       	rjmp	.-20     	; 0xa46 <turn_left+0xc>
     a5a:	09 c0       	rjmp	.+18     	; 0xa6e <turn_left+0x34>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a5c:	9b bd       	out	0x2b, r25	; 43
     a5e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a60:	99 bd       	out	0x29, r25	; 41
     a62:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a64:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a66:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a68:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a6a:	af 98       	cbi	0x15, 7	; 21
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <turn_left+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a6e:	88 ec       	ldi	r24, 0xC8	; 200
     a70:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(265);
		set_pwm1b(265);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a72:	ce 9b       	sbis	0x19, 6	; 25
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <turn_left+0x46>
     a76:	86 99       	sbic	0x10, 6	; 16
     a78:	f1 cf       	rjmp	.-30     	; 0xa5c <turn_left+0x22>
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <turn_left+0x46>
		set_pwm1b(200);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     a7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
	{
		set_pwm1a(200);
		set_pwm1b(200);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     a80:	cc 9b       	sbis	0x19, 4	; 25
     a82:	fc cf       	rjmp	.-8      	; 0xa7c <turn_left+0x42>
     a84:	87 9b       	sbis	0x10, 7	; 16
     a86:	fa cf       	rjmp	.-12     	; 0xa7c <turn_left+0x42>
     a88:	8f e8       	ldi	r24, 0x8F	; 143
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	9b bd       	out	0x2b, r25	; 43
     a8e:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a90:	99 bd       	out	0x29, r25	; 41
     a92:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     a94:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     a96:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a98:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     a9a:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
}
     a9c:	08 95       	ret

00000a9e <turn_right>:
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
void turn_right()
{	
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
	turn = 'r';
     aa2:	82 e7       	ldi	r24, 0x72	; 114
     aa4:	80 93 e9 00 	sts	0x00E9, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     aa8:	cf ef       	ldi	r28, 0xFF	; 255
     aaa:	d0 e0       	ldi	r29, 0x00	; 0
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <turn_right+0x24>
     aae:	db bd       	out	0x2b, r29	; 43
     ab0:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     ab2:	d9 bd       	out	0x29, r29	; 41
     ab4:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     ab6:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     ab8:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     aba:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     abc:	af 9a       	sbi	0x15, 7	; 21
	while(bit_is_set(PINA,7))
	{
		set_pwm1a(255);
		set_pwm1b(255);
		bot_spot_right();
		left_count();
     abe:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_set(PINA,7))
     ac2:	cf 99       	sbic	0x19, 7	; 25
     ac4:	f4 cf       	rjmp	.-24     	; 0xaae <turn_right+0x10>
     ac6:	0b c0       	rjmp	.+22     	; 0xade <turn_right+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ac8:	db bd       	out	0x2b, r29	; 43
     aca:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     acc:	d9 bd       	out	0x29, r29	; 41
     ace:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     ad0:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     ad2:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     ad4:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     ad6:	af 9a       	sbi	0x15, 7	; 21
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
	{
		set_pwm1a(200);
		set_pwm1b(200);
		bot_spot_right();
		left_count();
     ad8:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <turn_right+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     ade:	c8 ec       	ldi	r28, 0xC8	; 200
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
		set_pwm1a(255);
		set_pwm1b(255);
		bot_spot_right();
		left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     ae2:	ce 9b       	sbis	0x19, 6	; 25
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <turn_right+0x52>
     ae6:	86 99       	sbic	0x10, 6	; 16
     ae8:	ef cf       	rjmp	.-34     	; 0xac8 <turn_right+0x2a>
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <turn_right+0x52>
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     aec:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
		set_pwm1a(200);
		set_pwm1b(200);
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     af0:	cc 9b       	sbis	0x19, 4	; 25
     af2:	fc cf       	rjmp	.-8      	; 0xaec <turn_right+0x4e>
     af4:	87 9b       	sbis	0x10, 7	; 16
     af6:	fa cf       	rjmp	.-12     	; 0xaec <turn_right+0x4e>
     af8:	8f e8       	ldi	r24, 0x8F	; 143
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	9b bd       	out	0x2b, r25	; 43
     afe:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     b00:	99 bd       	out	0x29, r25	; 41
     b02:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     b04:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     b06:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     b08:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     b0a:	af 9a       	sbi	0x15, 7	; 21
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	//delay_millisec(100);
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <sense_of_directon>:
}


void sense_of_directon(void)
{
	if(turn == 'r')	
     b12:	80 91 e9 00 	lds	r24, 0x00E9
     b16:	82 37       	cpi	r24, 0x72	; 114
     b18:	d1 f4       	brne	.+52     	; 0xb4e <sense_of_directon+0x3c>
	{
		switch(dir)
     b1a:	80 91 ea 00 	lds	r24, 0x00EA
     b1e:	90 91 eb 00 	lds	r25, 0x00EB
     b22:	2f ef       	ldi	r18, 0xFF	; 255
     b24:	8f 3f       	cpi	r24, 0xFF	; 255
     b26:	92 07       	cpc	r25, r18
     b28:	59 f1       	breq	.+86     	; 0xb80 <sense_of_directon+0x6e>
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	8f 3f       	cpi	r24, 0xFF	; 255
     b2e:	92 07       	cpc	r25, r18
     b30:	09 f0       	breq	.+2      	; 0xb34 <sense_of_directon+0x22>
     b32:	2c f4       	brge	.+10     	; 0xb3e <sense_of_directon+0x2c>
     b34:	8e 5f       	subi	r24, 0xFE	; 254
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	09 f0       	breq	.+2      	; 0xb3c <sense_of_directon+0x2a>
     b3a:	51 c0       	rjmp	.+162    	; 0xbde <sense_of_directon+0xcc>
     b3c:	3d c0       	rjmp	.+122    	; 0xbb8 <sense_of_directon+0xa6>
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	09 f4       	brne	.+2      	; 0xb46 <sense_of_directon+0x34>
     b44:	3f c0       	rjmp	.+126    	; 0xbc4 <sense_of_directon+0xb2>
     b46:	02 97       	sbiw	r24, 0x02	; 2
     b48:	09 f0       	breq	.+2      	; 0xb4c <sense_of_directon+0x3a>
     b4a:	49 c0       	rjmp	.+146    	; 0xbde <sense_of_directon+0xcc>
     b4c:	38 c0       	rjmp	.+112    	; 0xbbe <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     b4e:	8c 36       	cpi	r24, 0x6C	; 108
     b50:	d1 f4       	brne	.+52     	; 0xb86 <sense_of_directon+0x74>
	{
		switch(dir)
     b52:	80 91 ea 00 	lds	r24, 0x00EA
     b56:	90 91 eb 00 	lds	r25, 0x00EB
     b5a:	2f ef       	ldi	r18, 0xFF	; 255
     b5c:	8f 3f       	cpi	r24, 0xFF	; 255
     b5e:	92 07       	cpc	r25, r18
     b60:	89 f1       	breq	.+98     	; 0xbc4 <sense_of_directon+0xb2>
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	8f 3f       	cpi	r24, 0xFF	; 255
     b66:	92 07       	cpc	r25, r18
     b68:	09 f0       	breq	.+2      	; 0xb6c <sense_of_directon+0x5a>
     b6a:	24 f4       	brge	.+8      	; 0xb74 <sense_of_directon+0x62>
     b6c:	8e 5f       	subi	r24, 0xFE	; 254
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	b1 f5       	brne	.+108    	; 0xbde <sense_of_directon+0xcc>
     b72:	25 c0       	rjmp	.+74     	; 0xbbe <sense_of_directon+0xac>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	19 f0       	breq	.+6      	; 0xb80 <sense_of_directon+0x6e>
     b7a:	02 97       	sbiw	r24, 0x02	; 2
     b7c:	81 f5       	brne	.+96     	; 0xbde <sense_of_directon+0xcc>
     b7e:	1c c0       	rjmp	.+56     	; 0xbb8 <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	21 c0       	rjmp	.+66     	; 0xbc8 <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     b86:	85 37       	cpi	r24, 0x75	; 117
     b88:	51 f5       	brne	.+84     	; 0xbde <sense_of_directon+0xcc>
	{
		switch(dir)
     b8a:	80 91 ea 00 	lds	r24, 0x00EA
     b8e:	90 91 eb 00 	lds	r25, 0x00EB
     b92:	2f ef       	ldi	r18, 0xFF	; 255
     b94:	8f 3f       	cpi	r24, 0xFF	; 255
     b96:	92 07       	cpc	r25, r18
     b98:	91 f0       	breq	.+36     	; 0xbbe <sense_of_directon+0xac>
     b9a:	2f ef       	ldi	r18, 0xFF	; 255
     b9c:	8f 3f       	cpi	r24, 0xFF	; 255
     b9e:	92 07       	cpc	r25, r18
     ba0:	09 f0       	breq	.+2      	; 0xba4 <sense_of_directon+0x92>
     ba2:	24 f4       	brge	.+8      	; 0xbac <sense_of_directon+0x9a>
     ba4:	8e 5f       	subi	r24, 0xFE	; 254
     ba6:	9f 4f       	sbci	r25, 0xFF	; 255
     ba8:	d1 f4       	brne	.+52     	; 0xbde <sense_of_directon+0xcc>
     baa:	13 c0       	rjmp	.+38     	; 0xbd2 <sense_of_directon+0xc0>
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	91 05       	cpc	r25, r1
     bb0:	19 f0       	breq	.+6      	; 0xbb8 <sense_of_directon+0xa6>
     bb2:	02 97       	sbiw	r24, 0x02	; 2
     bb4:	a1 f4       	brne	.+40     	; 0xbde <sense_of_directon+0xcc>
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	9f ef       	ldi	r25, 0xFF	; 255
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     bc4:	8e ef       	ldi	r24, 0xFE	; 254
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	90 93 eb 00 	sts	0x00EB, r25
     bcc:	80 93 ea 00 	sts	0x00EA, r24
     bd0:	08 95       	ret
			case -2: dir = +2; break;	
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	90 93 eb 00 	sts	0x00EB, r25
     bda:	80 93 ea 00 	sts	0x00EA, r24
     bde:	08 95       	ret

00000be0 <update_array>:
	}
	
}

void update_array(int y,int x,int ny,int nx)
{
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	8c 01       	movw	r16, r24
     bee:	79 01       	movw	r14, r18
	////checking if the path is already traversed before i.e(if all 4 values is zero)
	if(dir_array[x_coordinate][y_coordinate][0]==0 && dir_array[x_coordinate][y_coordinate][1]==0 && dir_array[x_coordinate][y_coordinate][2]==0 && dir_array[x_coordinate][y_coordinate][3]==0)
     bf0:	80 91 ec 00 	lds	r24, 0x00EC
     bf4:	90 91 ed 00 	lds	r25, 0x00ED
     bf8:	20 91 ee 00 	lds	r18, 0x00EE
     bfc:	30 91 ef 00 	lds	r19, 0x00EF
     c00:	fc 01       	movw	r30, r24
     c02:	a3 e0       	ldi	r26, 0x03	; 3
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	aa 95       	dec	r26
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <update_array+0x24>
     c0c:	e8 0f       	add	r30, r24
     c0e:	f9 1f       	adc	r31, r25
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	df 01       	movw	r26, r30
     c16:	23 e0       	ldi	r18, 0x03	; 3
     c18:	aa 0f       	add	r26, r26
     c1a:	bb 1f       	adc	r27, r27
     c1c:	2a 95       	dec	r18
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <update_array+0x38>
     c20:	a3 5f       	subi	r26, 0xF3	; 243
     c22:	be 4f       	sbci	r27, 0xFE	; 254
     c24:	8d 91       	ld	r24, X+
     c26:	9c 91       	ld	r25, X
     c28:	11 97       	sbiw	r26, 0x01	; 1
     c2a:	89 2b       	or	r24, r25
     c2c:	09 f0       	breq	.+2      	; 0xc30 <update_array+0x50>
     c2e:	62 c0       	rjmp	.+196    	; 0xcf4 <update_array+0x114>
     c30:	ef 01       	movw	r28, r30
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	cc 0f       	add	r28, r28
     c36:	dd 1f       	adc	r29, r29
     c38:	9a 95       	dec	r25
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <update_array+0x54>
     c3c:	c1 5f       	subi	r28, 0xF1	; 241
     c3e:	de 4f       	sbci	r29, 0xFE	; 254
     c40:	88 81       	ld	r24, Y
     c42:	99 81       	ldd	r25, Y+1	; 0x01
     c44:	89 2b       	or	r24, r25
     c46:	09 f0       	breq	.+2      	; 0xc4a <update_array+0x6a>
     c48:	55 c0       	rjmp	.+170    	; 0xcf4 <update_array+0x114>
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	8a 95       	dec	r24
     c52:	e1 f7       	brne	.-8      	; 0xc4c <update_array+0x6c>
     c54:	ef 5e       	subi	r30, 0xEF	; 239
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	80 81       	ld	r24, Z
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	89 2b       	or	r24, r25
     c5e:	09 f0       	breq	.+2      	; 0xc62 <update_array+0x82>
     c60:	49 c0       	rjmp	.+146    	; 0xcf4 <update_array+0x114>
     c62:	16 96       	adiw	r26, 0x06	; 6
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	17 97       	sbiw	r26, 0x07	; 7
     c6a:	89 2b       	or	r24, r25
     c6c:	09 f0       	breq	.+2      	; 0xc70 <update_array+0x90>
     c6e:	42 c0       	rjmp	.+132    	; 0xcf4 <update_array+0x114>
	{	
		switch(dir)
     c70:	80 91 ea 00 	lds	r24, 0x00EA
     c74:	90 91 eb 00 	lds	r25, 0x00EB
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	8f 3f       	cpi	r24, 0xFF	; 255
     c7c:	92 07       	cpc	r25, r18
     c7e:	81 f1       	breq	.+96     	; 0xce0 <update_array+0x100>
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	8f 3f       	cpi	r24, 0xFF	; 255
     c84:	92 07       	cpc	r25, r18
     c86:	09 f0       	breq	.+2      	; 0xc8a <update_array+0xaa>
     c88:	24 f4       	brge	.+8      	; 0xc92 <update_array+0xb2>
     c8a:	8e 5f       	subi	r24, 0xFE	; 254
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	91 f5       	brne	.+100    	; 0xcf4 <update_array+0x114>
     c90:	1c c0       	rjmp	.+56     	; 0xcca <update_array+0xea>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	91 05       	cpc	r25, r1
     c96:	71 f0       	breq	.+28     	; 0xcb4 <update_array+0xd4>
     c98:	02 97       	sbiw	r24, 0x02	; 2
     c9a:	61 f5       	brne	.+88     	; 0xcf4 <update_array+0x114>
		{
			case 2:
			dir_array[x_coordinate][y_coordinate][0] = y;
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	1c 93       	st	X, r17
     ca0:	0e 93       	st	-X, r16
			dir_array[x_coordinate][y_coordinate][1] = x;
     ca2:	79 83       	std	Y+1, r23	; 0x01
     ca4:	68 83       	st	Y, r22
			dir_array[x_coordinate][y_coordinate][2] = ny;
     ca6:	51 83       	std	Z+1, r21	; 0x01
     ca8:	40 83       	st	Z, r20
			dir_array[x_coordinate][y_coordinate][3] = nx;
     caa:	17 96       	adiw	r26, 0x07	; 7
     cac:	fc 92       	st	X, r15
     cae:	ee 92       	st	-X, r14
     cb0:	16 97       	sbiw	r26, 0x06	; 6
     cb2:	20 c0       	rjmp	.+64     	; 0xcf4 <update_array+0x114>
			break;
			case 1:
			dir_array[x_coordinate][y_coordinate][1] = y;
     cb4:	19 83       	std	Y+1, r17	; 0x01
     cb6:	08 83       	st	Y, r16
			dir_array[x_coordinate][y_coordinate][2] = x;
     cb8:	71 83       	std	Z+1, r23	; 0x01
     cba:	60 83       	st	Z, r22
			dir_array[x_coordinate][y_coordinate][3] = ny;
     cbc:	17 96       	adiw	r26, 0x07	; 7
     cbe:	5c 93       	st	X, r21
     cc0:	4e 93       	st	-X, r20
     cc2:	16 97       	sbiw	r26, 0x06	; 6
			dir_array[x_coordinate][y_coordinate][0] = nx;
     cc4:	ed 92       	st	X+, r14
     cc6:	fc 92       	st	X, r15
     cc8:	15 c0       	rjmp	.+42     	; 0xcf4 <update_array+0x114>
			break;
			case -2:
			dir_array[x_coordinate][y_coordinate][2] = y;
     cca:	11 83       	std	Z+1, r17	; 0x01
     ccc:	00 83       	st	Z, r16
			dir_array[x_coordinate][y_coordinate][3] = x;
     cce:	17 96       	adiw	r26, 0x07	; 7
     cd0:	7c 93       	st	X, r23
     cd2:	6e 93       	st	-X, r22
     cd4:	16 97       	sbiw	r26, 0x06	; 6
			dir_array[x_coordinate][y_coordinate][0] = ny;
     cd6:	4d 93       	st	X+, r20
     cd8:	5c 93       	st	X, r21
			dir_array[x_coordinate][y_coordinate][1] = nx;
     cda:	f9 82       	std	Y+1, r15	; 0x01
     cdc:	e8 82       	st	Y, r14
     cde:	0a c0       	rjmp	.+20     	; 0xcf4 <update_array+0x114>
			break;
			case -1:
			dir_array[x_coordinate][y_coordinate][3] = y;
     ce0:	17 96       	adiw	r26, 0x07	; 7
     ce2:	1c 93       	st	X, r17
     ce4:	0e 93       	st	-X, r16
     ce6:	16 97       	sbiw	r26, 0x06	; 6
			dir_array[x_coordinate][y_coordinate][0] = x;
     ce8:	6d 93       	st	X+, r22
     cea:	7c 93       	st	X, r23
			dir_array[x_coordinate][y_coordinate][1] = ny;
     cec:	59 83       	std	Y+1, r21	; 0x01
     cee:	48 83       	st	Y, r20
			dir_array[x_coordinate][y_coordinate][2] = nx;
     cf0:	f1 82       	std	Z+1, r15	; 0x01
     cf2:	e0 82       	st	Z, r14
			break;
		}
	}	
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <update_coordinates>:
}


void update_coordinates(void)
{	
	int value = Coordinates_changed_by;
     d02:	20 91 07 01 	lds	r18, 0x0107
     d06:	30 91 08 01 	lds	r19, 0x0108
     d0a:	80 91 ea 00 	lds	r24, 0x00EA
     d0e:	90 91 eb 00 	lds	r25, 0x00EB
	
	if(value==2)		//to store the middle point in 60cm shift i.e to make it continous
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	09 f0       	breq	.+2      	; 0xd1a <update_coordinates+0x18>
     d18:	79 c0       	rjmp	.+242    	; 0xe0c <update_coordinates+0x10a>
	{
		switch(dir)
     d1a:	2f ef       	ldi	r18, 0xFF	; 255
     d1c:	8f 3f       	cpi	r24, 0xFF	; 255
     d1e:	92 07       	cpc	r25, r18
     d20:	51 f1       	breq	.+84     	; 0xd76 <update_coordinates+0x74>
     d22:	4f ef       	ldi	r20, 0xFF	; 255
     d24:	8f 3f       	cpi	r24, 0xFF	; 255
     d26:	94 07       	cpc	r25, r20
     d28:	09 f0       	breq	.+2      	; 0xd2c <update_coordinates+0x2a>
     d2a:	2c f4       	brge	.+10     	; 0xd36 <update_coordinates+0x34>
     d2c:	8e 5f       	subi	r24, 0xFE	; 254
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	09 f0       	breq	.+2      	; 0xd34 <update_coordinates+0x32>
     d32:	a2 c0       	rjmp	.+324    	; 0xe78 <update_coordinates+0x176>
     d34:	52 c0       	rjmp	.+164    	; 0xdda <update_coordinates+0xd8>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	91 05       	cpc	r25, r1
     d3a:	21 f0       	breq	.+8      	; 0xd44 <update_coordinates+0x42>
     d3c:	02 97       	sbiw	r24, 0x02	; 2
     d3e:	09 f0       	breq	.+2      	; 0xd42 <update_coordinates+0x40>
     d40:	9b c0       	rjmp	.+310    	; 0xe78 <update_coordinates+0x176>
     d42:	32 c0       	rjmp	.+100    	; 0xda8 <update_coordinates+0xa6>
		{
			case +1 :	x_coordinate+=1;						
     d44:	80 91 ec 00 	lds	r24, 0x00EC
     d48:	90 91 ed 00 	lds	r25, 0x00ED
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	90 93 ed 00 	sts	0x00ED, r25
     d52:	80 93 ec 00 	sts	0x00EC, r24
						update_array(1,0,1,0);
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
						x_coordinate+=1;
     d6a:	80 91 ec 00 	lds	r24, 0x00EC
     d6e:	90 91 ed 00 	lds	r25, 0x00ED
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	6b c0       	rjmp	.+214    	; 0xe4c <update_coordinates+0x14a>
						break;

			case -1 :	x_coordinate-=1;						
     d76:	80 91 ec 00 	lds	r24, 0x00EC
     d7a:	90 91 ed 00 	lds	r25, 0x00ED
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	90 93 ed 00 	sts	0x00ED, r25
     d84:	80 93 ec 00 	sts	0x00EC, r24
						update_array(1,0,1,0);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	41 e0       	ldi	r20, 0x01	; 1
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
						x_coordinate-=1;
     d9c:	80 91 ec 00 	lds	r24, 0x00EC
     da0:	90 91 ed 00 	lds	r25, 0x00ED
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	52 c0       	rjmp	.+164    	; 0xe4c <update_coordinates+0x14a>
						break;
					
			case +2 :	y_coordinate+=1;						
     da8:	80 91 ee 00 	lds	r24, 0x00EE
     dac:	90 91 ef 00 	lds	r25, 0x00EF
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	90 93 ef 00 	sts	0x00EF, r25
     db6:	80 93 ee 00 	sts	0x00EE, r24
						update_array(1,0,1,0);
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
						y_coordinate+=1;
     dce:	80 91 ee 00 	lds	r24, 0x00EE
     dd2:	90 91 ef 00 	lds	r25, 0x00EF
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	4b c0       	rjmp	.+150    	; 0xe70 <update_coordinates+0x16e>
						
						break;

			case -2 :	y_coordinate-=1;						
     dda:	80 91 ee 00 	lds	r24, 0x00EE
     dde:	90 91 ef 00 	lds	r25, 0x00EF
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	90 93 ef 00 	sts	0x00EF, r25
     de8:	80 93 ee 00 	sts	0x00EE, r24
						update_array(1,0,1,0);	
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
						y_coordinate-=1;
     e00:	80 91 ee 00 	lds	r24, 0x00EE
     e04:	90 91 ef 00 	lds	r25, 0x00EF
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	32 c0       	rjmp	.+100    	; 0xe70 <update_coordinates+0x16e>
						break;	
		}
	}
	else
	{
		switch(dir)
     e0c:	4f ef       	ldi	r20, 0xFF	; 255
     e0e:	8f 3f       	cpi	r24, 0xFF	; 255
     e10:	94 07       	cpc	r25, r20
     e12:	b1 f0       	breq	.+44     	; 0xe40 <update_coordinates+0x13e>
     e14:	4f ef       	ldi	r20, 0xFF	; 255
     e16:	8f 3f       	cpi	r24, 0xFF	; 255
     e18:	94 07       	cpc	r25, r20
     e1a:	09 f0       	breq	.+2      	; 0xe1e <update_coordinates+0x11c>
     e1c:	24 f4       	brge	.+8      	; 0xe26 <update_coordinates+0x124>
     e1e:	8e 5f       	subi	r24, 0xFE	; 254
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	51 f5       	brne	.+84     	; 0xe78 <update_coordinates+0x176>
     e24:	1f c0       	rjmp	.+62     	; 0xe64 <update_coordinates+0x162>
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	91 05       	cpc	r25, r1
     e2a:	19 f0       	breq	.+6      	; 0xe32 <update_coordinates+0x130>
     e2c:	02 97       	sbiw	r24, 0x02	; 2
     e2e:	21 f5       	brne	.+72     	; 0xe78 <update_coordinates+0x176>
     e30:	12 c0       	rjmp	.+36     	; 0xe56 <update_coordinates+0x154>
		{
			case +1 : x_coordinate+=value; break;
     e32:	80 91 ec 00 	lds	r24, 0x00EC
     e36:	90 91 ed 00 	lds	r25, 0x00ED
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <update_coordinates+0x14a>
			case -1 : x_coordinate-=value; break;
     e40:	80 91 ec 00 	lds	r24, 0x00EC
     e44:	90 91 ed 00 	lds	r25, 0x00ED
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	90 93 ed 00 	sts	0x00ED, r25
     e50:	80 93 ec 00 	sts	0x00EC, r24
     e54:	11 c0       	rjmp	.+34     	; 0xe78 <update_coordinates+0x176>
			case +2 : y_coordinate+=value; break;
     e56:	80 91 ee 00 	lds	r24, 0x00EE
     e5a:	90 91 ef 00 	lds	r25, 0x00EF
     e5e:	82 0f       	add	r24, r18
     e60:	93 1f       	adc	r25, r19
     e62:	06 c0       	rjmp	.+12     	; 0xe70 <update_coordinates+0x16e>
			case -2 : y_coordinate-=value; break;	
     e64:	80 91 ee 00 	lds	r24, 0x00EE
     e68:	90 91 ef 00 	lds	r25, 0x00EF
     e6c:	82 1b       	sub	r24, r18
     e6e:	93 0b       	sbc	r25, r19
     e70:	90 93 ef 00 	sts	0x00EF, r25
     e74:	80 93 ee 00 	sts	0x00EE, r24
		}
	}
	lcd_clear();
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(4,0,x_coordinate,2);
     e80:	40 91 ec 00 	lds	r20, 0x00EC
     e84:	50 91 ed 00 	lds	r21, 0x00ED
     e88:	84 e0       	ldi	r24, 0x04	; 4
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	22 e0       	ldi	r18, 0x02	; 2
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(8,0,y_coordinate,2);
     e98:	40 91 ee 00 	lds	r20, 0x00EE
     e9c:	50 91 ef 00 	lds	r21, 0x00EF
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	22 e0       	ldi	r18, 0x02	; 2
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	Coordinates_changed_by = 0;
     eb0:	10 92 08 01 	sts	0x0108, r1
     eb4:	10 92 07 01 	sts	0x0107, r1
}
     eb8:	08 95       	ret

00000eba <left_junc_check>:
		set_pwm1b(260);
	}
		delay_microsec(10);
}
void left_junc_check()                                 
{	
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29

	if(bit_is_clear(PINA,5))
     ebe:	cd 99       	sbic	0x19, 5	; 25
     ec0:	20 c0       	rjmp	.+64     	; 0xf02 <left_junc_check+0x48>
	{
		flag1 = 1;
     ec2:	c1 e0       	ldi	r28, 0x01	; 1
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
     ec6:	d0 93 fe 00 	sts	0x00FE, r29
     eca:	c0 93 fd 00 	sts	0x00FD, r28
		//bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		if(irc>2000)
     ece:	80 91 ff 00 	lds	r24, 0x00FF
     ed2:	90 91 00 01 	lds	r25, 0x0100
     ed6:	81 5d       	subi	r24, 0xD1	; 209
     ed8:	97 40       	sbci	r25, 0x07	; 7
     eda:	5c f0       	brlt	.+22     	; 0xef2 <left_junc_check+0x38>
		{	
			lcd_clear();
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("sixty");
			Coordinates_changed_by = 2;
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 08 01 	sts	0x0108, r25
     eec:	80 93 07 01 	sts	0x0107, r24
     ef0:	08 c0       	rjmp	.+16     	; 0xf02 <left_junc_check+0x48>
		}
		else
		{
			lcd_clear();
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
     efa:	d0 93 08 01 	sts	0x0108, r29
     efe:	c0 93 07 01 	sts	0x0107, r28
		}				
	}
	if((bit_is_clear(PINA,6) || bit_is_clear(PIND,6)) && bit_is_clear(PINA,4))
     f02:	ce 9b       	sbis	0x19, 6	; 25
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <left_junc_check+0x50>
     f06:	86 99       	sbic	0x10, 6	; 16
     f08:	17 c0       	rjmp	.+46     	; 0xf38 <left_junc_check+0x7e>
     f0a:	cc 99       	sbic	0x19, 4	; 25
     f0c:	15 c0       	rjmp	.+42     	; 0xf38 <left_junc_check+0x7e>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     f0e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     f10:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     f12:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     f14:	af 9a       	sbi	0x15, 7	; 21
	{
		bot_brake();
		update_coordinates();
     f16:	0e 94 81 06 	call	0xd02	; 0xd02 <update_coordinates>
		//delay_sec(2);
		//lcd_clear();
		update_array(1,0,1,1);			
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
		// lcd_write_string("-| detected");
		//delay_millisec(500);
		irc = 0;
     f2e:	10 92 00 01 	sts	0x0100, r1
     f32:	10 92 ff 00 	sts	0x00FF, r1
     f36:	22 c0       	rjmp	.+68     	; 0xf7c <left_junc_check+0xc2>
	}
	
	else if(bit_is_clear(PINA,4) && bit_is_set(PINA,6) && bit_is_set(PIND,6))
     f38:	cc 99       	sbic	0x19, 4	; 25
     f3a:	20 c0       	rjmp	.+64     	; 0xf7c <left_junc_check+0xc2>
     f3c:	ce 9b       	sbis	0x19, 6	; 25
     f3e:	1e c0       	rjmp	.+60     	; 0xf7c <left_junc_check+0xc2>
     f40:	86 9b       	sbis	0x10, 6	; 16
     f42:	1c c0       	rjmp	.+56     	; 0xf7c <left_junc_check+0xc2>
	{
		// lcd_clear();
		// bot_brake();
		// lcd_write_string("L detected");
		update_coordinates();
     f44:	0e 94 81 06 	call	0xd02	; 0xd02 <update_coordinates>
		//delay_sec(2);
		irc = 0;
     f48:	10 92 00 01 	sts	0x0100, r1
     f4c:	10 92 ff 00 	sts	0x00FF, r1
		turn_left();						
     f50:	0e 94 1d 05 	call	0xa3a	; 0xa3a <turn_left>

		update_array(0,0,1,1);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	21 e0       	ldi	r18, 0x01	; 1
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     f68:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     f6a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     f6c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     f6e:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		sense_of_directon();
     f70:	0e 94 89 05 	call	0xb12	; 0xb12 <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_millisec(2000);
		flag1 = 0;
     f74:	10 92 fe 00 	sts	0x00FE, r1
     f78:	10 92 fd 00 	sts	0x00FD, r1
	}

	special_case_check();       ///////////
     f7c:	0e 94 b3 04 	call	0x966	; 0x966 <special_case_check>
	
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <frSensorCheck>:
		
	}
}
void frSensorCheck()
{
	if(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     f86:	ce 9b       	sbis	0x19, 6	; 25
     f88:	35 c0       	rjmp	.+106    	; 0xff4 <frSensorCheck+0x6e>
     f8a:	86 9b       	sbis	0x10, 6	; 16
     f8c:	33 c0       	rjmp	.+102    	; 0xff4 <frSensorCheck+0x6e>
	{
		////just confirming if its really a dead end or the bot has simply just wobbled
		if(sensorbyte==0b0011 || sensorbyte==0b1100 || sensorbyte==0b0100 || sensorbyte==0b0010 || sensorbyte==0b0110)
     f8e:	80 91 f0 00 	lds	r24, 0x00F0
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	41 f0       	breq	.+16     	; 0xfa6 <frSensorCheck+0x20>
     f96:	8c 30       	cpi	r24, 0x0C	; 12
     f98:	31 f0       	breq	.+12     	; 0xfa6 <frSensorCheck+0x20>
     f9a:	84 30       	cpi	r24, 0x04	; 4
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <frSensorCheck+0x20>
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <frSensorCheck+0x20>
     fa2:	86 30       	cpi	r24, 0x06	; 6
     fa4:	f9 f4       	brne	.+62     	; 0xfe4 <frSensorCheck+0x5e>
		{
			if(flag1==0)
     fa6:	80 91 fd 00 	lds	r24, 0x00FD
     faa:	90 91 fe 00 	lds	r25, 0x00FE
     fae:	89 2b       	or	r24, r25
     fb0:	09 f5       	brne	.+66     	; 0xff4 <frSensorCheck+0x6e>
			{
				//lcd_clear();
				// lcd_write_string("Uturn Detected");
				if(irc>2000)
     fb2:	80 91 ff 00 	lds	r24, 0x00FF
     fb6:	90 91 00 01 	lds	r25, 0x0100
     fba:	20 91 07 01 	lds	r18, 0x0107
     fbe:	30 91 08 01 	lds	r19, 0x0108
     fc2:	81 5d       	subi	r24, 0xD1	; 209
     fc4:	97 40       	sbci	r25, 0x07	; 7
     fc6:	2c f0       	brlt	.+10     	; 0xfd2 <frSensorCheck+0x4c>
				{
					// lcd_write_string("Sixty");
					if(Coordinates_changed_by ==0)
     fc8:	23 2b       	or	r18, r19
     fca:	a1 f4       	brne	.+40     	; 0xff4 <frSensorCheck+0x6e>
					{
						Coordinates_changed_by = 2;
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <frSensorCheck+0x54>
					}
				}
				else
				{
					// lcd_write_string("Thirty");
					if(Coordinates_changed_by ==0)
     fd2:	23 2b       	or	r18, r19
     fd4:	79 f4       	brne	.+30     	; 0xff4 <frSensorCheck+0x6e>
					{
						Coordinates_changed_by = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	90 93 08 01 	sts	0x0108, r25
     fde:	80 93 07 01 	sts	0x0107, r24
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <frSensorCheck+0x6e>
				//delay_sec(2);
			}
		}
		else
		{
			lcd_clear();
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("ERROR Fr Snsr");
     fec:	80 e6       	ldi	r24, 0x60	; 96
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
		}
	}
	
	if(sensorbyte==0b0000 && bit_is_set(PINA,4) && bit_is_set(PINA,5) && bit_is_set(PINA,6) && bit_is_set(PINA,7) && bit_is_set(PIND, 6) && bit_is_set(PIND, 7) && flag1==0)
     ff4:	80 91 f0 00 	lds	r24, 0x00F0
     ff8:	88 23       	and	r24, r24
     ffa:	71 f5       	brne	.+92     	; 0x1058 <frSensorCheck+0xd2>
     ffc:	cc 9b       	sbis	0x19, 4	; 25
     ffe:	2c c0       	rjmp	.+88     	; 0x1058 <frSensorCheck+0xd2>
    1000:	cd 9b       	sbis	0x19, 5	; 25
    1002:	2a c0       	rjmp	.+84     	; 0x1058 <frSensorCheck+0xd2>
    1004:	ce 9b       	sbis	0x19, 6	; 25
    1006:	28 c0       	rjmp	.+80     	; 0x1058 <frSensorCheck+0xd2>
    1008:	cf 9b       	sbis	0x19, 7	; 25
    100a:	26 c0       	rjmp	.+76     	; 0x1058 <frSensorCheck+0xd2>
    100c:	86 9b       	sbis	0x10, 6	; 16
    100e:	24 c0       	rjmp	.+72     	; 0x1058 <frSensorCheck+0xd2>
    1010:	87 9b       	sbis	0x10, 7	; 16
    1012:	22 c0       	rjmp	.+68     	; 0x1058 <frSensorCheck+0xd2>
    1014:	80 91 fd 00 	lds	r24, 0x00FD
    1018:	90 91 fe 00 	lds	r25, 0x00FE
    101c:	89 2b       	or	r24, r25
    101e:	e1 f4       	brne	.+56     	; 0x1058 <frSensorCheck+0xd2>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1020:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1022:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1024:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1026:	af 9a       	sbi	0x15, 7	; 21
	{
		//lcd_clear();
		//lcd_write_string("Uturn");
		bot_brake();
		update_coordinates();
    1028:	0e 94 81 06 	call	0xd02	; 0xd02 <update_coordinates>
		update_array(0,0,1,0);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	41 e0       	ldi	r20, 0x01	; 1
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
		//delay_sec(2);

		Uturn();
    1040:	0e 94 67 04 	call	0x8ce	; 0x8ce <Uturn>
		//bot_brake();
		sense_of_directon();
    1044:	0e 94 89 05 	call	0xb12	; 0xb12 <sense_of_directon>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		// delay_sec(2);
		flag1 = 0;
    1048:	10 92 fe 00 	sts	0x00FE, r1
    104c:	10 92 fd 00 	sts	0x00FD, r1
		irc = 0;
    1050:	10 92 00 01 	sts	0x0100, r1
    1054:	10 92 ff 00 	sts	0x00FF, r1
    1058:	08 95       	ret

0000105a <is_coordinate_null>:
			break;
		}
	}	
}
int is_coordinate_null(int x,int y)
{
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
	if(dir_array[x][y][0]==0 && dir_array[x][y][1]==0 && dir_array[x][y][2]==0 && dir_array[x][y][3]==0)
    105e:	dc 01       	movw	r26, r24
    1060:	33 e0       	ldi	r19, 0x03	; 3
    1062:	aa 0f       	add	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	3a 95       	dec	r19
    1068:	e1 f7       	brne	.-8      	; 0x1062 <is_coordinate_null+0x8>
    106a:	a8 0f       	add	r26, r24
    106c:	b9 1f       	adc	r27, r25
    106e:	a6 0f       	add	r26, r22
    1070:	b7 1f       	adc	r27, r23
    1072:	ed 01       	movw	r28, r26
    1074:	23 e0       	ldi	r18, 0x03	; 3
    1076:	cc 0f       	add	r28, r28
    1078:	dd 1f       	adc	r29, r29
    107a:	2a 95       	dec	r18
    107c:	e1 f7       	brne	.-8      	; 0x1076 <is_coordinate_null+0x1c>
    107e:	c3 5f       	subi	r28, 0xF3	; 243
    1080:	de 4f       	sbci	r29, 0xFE	; 254
    1082:	88 81       	ld	r24, Y
    1084:	99 81       	ldd	r25, Y+1	; 0x01
    1086:	89 2b       	or	r24, r25
    1088:	09 f5       	brne	.+66     	; 0x10cc <is_coordinate_null+0x72>
    108a:	fd 01       	movw	r30, r26
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	9a 95       	dec	r25
    1094:	e1 f7       	brne	.-8      	; 0x108e <is_coordinate_null+0x34>
    1096:	e1 5f       	subi	r30, 0xF1	; 241
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	89 2b       	or	r24, r25
    10a0:	a9 f4       	brne	.+42     	; 0x10cc <is_coordinate_null+0x72>
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	aa 0f       	add	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	8a 95       	dec	r24
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <is_coordinate_null+0x4a>
    10ac:	af 5e       	subi	r26, 0xEF	; 239
    10ae:	be 4f       	sbci	r27, 0xFE	; 254
    10b0:	8d 91       	ld	r24, X+
    10b2:	9c 91       	ld	r25, X
    10b4:	89 2b       	or	r24, r25
    10b6:	51 f4       	brne	.+20     	; 0x10cc <is_coordinate_null+0x72>
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	89 2b       	or	r24, r25
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <is_coordinate_null+0x6a>
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	28 27       	eor	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <is_coordinate_null+0x76>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    10d0:	c9 01       	movw	r24, r18
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <fill_missed_array>:
void fill_missed_array()
{
    10d8:	8f 92       	push	r8
    10da:	9f 92       	push	r9
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	71 e0       	ldi	r23, 0x01	; 1
    10f2:	e7 2e       	mov	r14, r23
    10f4:	f1 2c       	mov	r15, r1
    10f6:	79 c0       	rjmp	.+242    	; 0x11ea <fill_missed_array+0x112>
	int hx, hy, lx, ly;
	for(int i = 1 ; i<8 ; i++)
	{
		for(int j = 1 ; j<8 ; j++)
		{
			if(is_coordinate_null(i,j))
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    1100:	89 2b       	or	r24, r25
    1102:	09 f4       	brne	.+2      	; 0x1106 <fill_missed_array+0x2e>
    1104:	60 c0       	rjmp	.+192    	; 0x11c6 <fill_missed_array+0xee>
			{
				hx = i+1;
				hy = j+1;
				lx = i-1;
				ly = j-1;
				lcd_clear();
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    110e:	c4 01       	movw	r24, r8
    1110:	b6 01       	movw	r22, r12
    1112:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    1116:	89 2b       	or	r24, r25
    1118:	09 f0       	breq	.+2      	; 0x111c <fill_missed_array+0x44>
    111a:	55 c0       	rjmp	.+170    	; 0x11c6 <fill_missed_array+0xee>
    111c:	c5 01       	movw	r24, r10
    111e:	b6 01       	movw	r22, r12
    1120:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    1124:	89 2b       	or	r24, r25
    1126:	09 f0       	breq	.+2      	; 0x112a <fill_missed_array+0x52>
    1128:	4e c0       	rjmp	.+156    	; 0x11c6 <fill_missed_array+0xee>
    112a:	b6 01       	movw	r22, r12
    112c:	61 50       	subi	r22, 0x01	; 1
    112e:	70 40       	sbci	r23, 0x00	; 0
    1130:	c7 01       	movw	r24, r14
    1132:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    1136:	89 2b       	or	r24, r25
    1138:	09 f0       	breq	.+2      	; 0x113c <fill_missed_array+0x64>
    113a:	45 c0       	rjmp	.+138    	; 0x11c6 <fill_missed_array+0xee>
    113c:	b6 01       	movw	r22, r12
    113e:	6f 5f       	subi	r22, 0xFF	; 255
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	c7 01       	movw	r24, r14
    1144:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    1148:	89 2b       	or	r24, r25
    114a:	e9 f5       	brne	.+122    	; 0x11c6 <fill_missed_array+0xee>
				{
					lcd_clear();
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("Filliable");
    1154:	8e e6       	ldi	r24, 0x6E	; 110
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_millisec(2000);
    115c:	80 ed       	ldi	r24, 0xD0	; 208
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
					if(dir_array[hx][j][3]==1)
    1164:	c2 5b       	subi	r28, 0xB2	; 178
    1166:	df 4f       	sbci	r29, 0xFF	; 255
    1168:	88 81       	ld	r24, Y
    116a:	99 81       	ldd	r25, Y+1	; 0x01
    116c:	ce 54       	subi	r28, 0x4E	; 78
    116e:	d0 40       	sbci	r29, 0x00	; 0
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	19 f4       	brne	.+6      	; 0x117c <fill_missed_array+0xa4>
					{
						dir_array[i][j][1] = 1;
    1176:	9b 83       	std	Y+3, r25	; 0x03
    1178:	8a 83       	std	Y+2, r24	; 0x02
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <fill_missed_array+0xa8>
					}
					else
					{
						dir_array[i][j][1] = 0;
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	1a 82       	std	Y+2, r1	; 0x02
					}
					if(dir_array[lx][j][1]==1)
    1180:	c6 54       	subi	r28, 0x46	; 70
    1182:	d0 40       	sbci	r29, 0x00	; 0
    1184:	88 81       	ld	r24, Y
    1186:	99 81       	ldd	r25, Y+1	; 0x01
    1188:	ca 5b       	subi	r28, 0xBA	; 186
    118a:	df 4f       	sbci	r29, 0xFF	; 255
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	19 f4       	brne	.+6      	; 0x1198 <fill_missed_array+0xc0>
					{
						dir_array[i][j][3] = 1;
    1192:	9f 83       	std	Y+7, r25	; 0x07
    1194:	8e 83       	std	Y+6, r24	; 0x06
    1196:	02 c0       	rjmp	.+4      	; 0x119c <fill_missed_array+0xc4>
					}
					else
					{
						dir_array[i][j][3] = 0;
    1198:	1f 82       	std	Y+7, r1	; 0x07
    119a:	1e 82       	std	Y+6, r1	; 0x06
					}
					if(dir_array[i][hy][2]==1)
    119c:	8c 85       	ldd	r24, Y+12	; 0x0c
    119e:	9d 85       	ldd	r25, Y+13	; 0x0d
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	19 f4       	brne	.+6      	; 0x11ac <fill_missed_array+0xd4>
					{
						dir_array[i][j][0] = 1;
    11a6:	99 83       	std	Y+1, r25	; 0x01
    11a8:	88 83       	st	Y, r24
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <fill_missed_array+0xd8>
					}
					else
					{
						dir_array[i][j][0] =0;
    11ac:	19 82       	std	Y+1, r1	; 0x01
    11ae:	18 82       	st	Y, r1
					}
					if(dir_array[i][j][ly]==1)
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <fill_missed_array+0xea>
					{
						dir_array[i][j][2] = 1;
    11bc:	9d 83       	std	Y+5, r25	; 0x05
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <fill_missed_array+0xee>
					}
					else
					{
						dir_array[i][j][2] = 0;
    11c2:	1d 82       	std	Y+5, r1	; 0x05
    11c4:	1c 82       	std	Y+4, r1	; 0x04
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<8 ; i++)
	{
		for(int j = 1 ; j<8 ; j++)
    11c6:	08 94       	sec
    11c8:	c1 1c       	adc	r12, r1
    11ca:	d1 1c       	adc	r13, r1
    11cc:	06 5f       	subi	r16, 0xF6	; 246
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	28 96       	adiw	r28, 0x08	; 8
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	cf 16       	cp	r12, r31
    11d6:	d1 04       	cpc	r13, r1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <fill_missed_array+0x104>
    11da:	8e cf       	rjmp	.-228    	; 0x10f8 <fill_missed_array+0x20>
	}
}
void fill_missed_array()
{
	int hx, hy, lx, ly;
	for(int i = 1 ; i<8 ; i++)
    11dc:	08 94       	sec
    11de:	e1 1c       	adc	r14, r1
    11e0:	f1 1c       	adc	r15, r1
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	e8 16       	cp	r14, r24
    11e6:	f1 04       	cpc	r15, r1
    11e8:	e1 f0       	breq	.+56     	; 0x1222 <fill_missed_array+0x14a>
    11ea:	87 01       	movw	r16, r14
    11ec:	63 e0       	ldi	r22, 0x03	; 3
    11ee:	00 0f       	add	r16, r16
    11f0:	11 1f       	adc	r17, r17
    11f2:	6a 95       	dec	r22
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <fill_missed_array+0x116>
    11f6:	0e 0d       	add	r16, r14
    11f8:	1f 1d       	adc	r17, r15
    11fa:	53 e0       	ldi	r21, 0x03	; 3
    11fc:	00 0f       	add	r16, r16
    11fe:	11 1f       	adc	r17, r17
    1200:	5a 95       	dec	r21
    1202:	e1 f7       	brne	.-8      	; 0x11fc <fill_missed_array+0x124>
    1204:	0b 5e       	subi	r16, 0xEB	; 235
    1206:	1e 4f       	sbci	r17, 0xFE	; 254
    1208:	e8 01       	movw	r28, r16
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	c4 2e       	mov	r12, r20
    120e:	d1 2c       	mov	r13, r1
				lcd_clear();
				//lcd_write_string("Null");
				//lcd_write_int_xy(0,1,i,2);
				//lcd_write_int_xy(4,1,j,2);
				//delay_millisec(2000);
				if(!(is_coordinate_null(hx,j) || is_coordinate_null(lx,j) || is_coordinate_null(i,ly) || is_coordinate_null(i,hy)))
    1210:	47 01       	movw	r8, r14
    1212:	08 94       	sec
    1214:	81 1c       	adc	r8, r1
    1216:	91 1c       	adc	r9, r1
    1218:	57 01       	movw	r10, r14
    121a:	08 94       	sec
    121c:	a1 08       	sbc	r10, r1
    121e:	b1 08       	sbc	r11, r1
    1220:	6b cf       	rjmp	.-298    	; 0x10f8 <fill_missed_array+0x20>
					}
				}
			}
		}
	}
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	af 90       	pop	r10
    1236:	9f 90       	pop	r9
    1238:	8f 90       	pop	r8
    123a:	08 95       	ret

0000123c <coordinates_tobe_reached>:
void coordinates_tobe_reached()
{
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	00 e0       	ldi	r16, 0x00	; 0
    125a:	10 e0       	ldi	r17, 0x00	; 0
	int stop=0;
	for(int i = 0 ; i<9 ; i++)
    125c:	e8 e4       	ldi	r30, 0x48	; 72
    125e:	6e 2e       	mov	r6, r30
    1260:	71 2c       	mov	r7, r1
    1262:	60 c0       	rjmp	.+192    	; 0x1324 <coordinates_tobe_reached+0xe8>
	{
		for(int j = 0 ; j<9 ; j++)
		{
			if(!(is_coordinate_null(i,j)))
    1264:	c8 01       	movw	r24, r16
    1266:	be 01       	movw	r22, r28
    1268:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    126c:	89 2b       	or	r24, r25
    126e:	09 f0       	breq	.+2      	; 0x1272 <coordinates_tobe_reached+0x36>
    1270:	4b c0       	rjmp	.+150    	; 0x1308 <coordinates_tobe_reached+0xcc>
			{
				if(dir_array[i][j][0]==1)
    1272:	f7 01       	movw	r30, r14
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	51 f4       	brne	.+20     	; 0x1290 <coordinates_tobe_reached+0x54>
    127c:	6e 01       	movw	r12, r28
    127e:	08 94       	sec
    1280:	c1 1c       	adc	r12, r1
    1282:	d1 1c       	adc	r13, r1
				{
					if(is_coordinate_null(i,j+1))
    1284:	c8 01       	movw	r24, r16
    1286:	b6 01       	movw	r22, r12
    1288:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    128c:	89 2b       	or	r24, r25
    128e:	f9 f4       	brne	.+62     	; 0x12ce <coordinates_tobe_reached+0x92>
						my = j+1;
						stop = 1;
						break;
					}
				}
				if(dir_array[i][j][1]==1)
    1290:	f7 01       	movw	r30, r14
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	59 f4       	brne	.+22     	; 0x12b0 <coordinates_tobe_reached+0x74>
				{
					if(is_coordinate_null(i+1,j))
    129a:	c5 01       	movw	r24, r10
    129c:	be 01       	movw	r22, r28
    129e:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    12a2:	89 2b       	or	r24, r25
    12a4:	29 f0       	breq	.+10     	; 0x12b0 <coordinates_tobe_reached+0x74>
					{
						mx = i+1;
    12a6:	b0 92 a8 03 	sts	0x03A8, r11
    12aa:	a0 92 a7 03 	sts	0x03A7, r10
    12ae:	27 c0       	rjmp	.+78     	; 0x12fe <coordinates_tobe_reached+0xc2>
						my = j;
						stop = 1;
						break;
					}
				}
				if(dir_array[i][j][2]==1)
    12b0:	f7 01       	movw	r30, r14
    12b2:	84 81       	ldd	r24, Z+4	; 0x04
    12b4:	95 81       	ldd	r25, Z+5	; 0x05
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	99 f4       	brne	.+38     	; 0x12e0 <coordinates_tobe_reached+0xa4>
    12ba:	6e 01       	movw	r12, r28
    12bc:	08 94       	sec
    12be:	c1 08       	sbc	r12, r1
    12c0:	d1 08       	sbc	r13, r1
				{
					if(is_coordinate_null(i,j-1))
    12c2:	c8 01       	movw	r24, r16
    12c4:	b6 01       	movw	r22, r12
    12c6:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    12ca:	89 2b       	or	r24, r25
    12cc:	49 f0       	breq	.+18     	; 0x12e0 <coordinates_tobe_reached+0xa4>
					{
						mx = i;
    12ce:	10 93 a8 03 	sts	0x03A8, r17
    12d2:	00 93 a7 03 	sts	0x03A7, r16
						my = j-1;
    12d6:	d0 92 96 03 	sts	0x0396, r13
    12da:	c0 92 95 03 	sts	0x0395, r12
    12de:	38 c0       	rjmp	.+112    	; 0x1350 <coordinates_tobe_reached+0x114>
						stop = 1;
						break;
					}
				}
				if(dir_array[i][j][3]==1)
    12e0:	f7 01       	movw	r30, r14
    12e2:	86 81       	ldd	r24, Z+6	; 0x06
    12e4:	97 81       	ldd	r25, Z+7	; 0x07
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	79 f4       	brne	.+30     	; 0x1308 <coordinates_tobe_reached+0xcc>
				{
					if(is_coordinate_null(i-1,j))
    12ea:	c4 01       	movw	r24, r8
    12ec:	be 01       	movw	r22, r28
    12ee:	0e 94 2d 08 	call	0x105a	; 0x105a <is_coordinate_null>
    12f2:	89 2b       	or	r24, r25
    12f4:	49 f0       	breq	.+18     	; 0x1308 <coordinates_tobe_reached+0xcc>
					{
						mx = i-1;
    12f6:	90 92 a8 03 	sts	0x03A8, r9
    12fa:	80 92 a7 03 	sts	0x03A7, r8
						my = j;
    12fe:	d0 93 96 03 	sts	0x0396, r29
    1302:	c0 93 95 03 	sts	0x0395, r28
    1306:	24 c0       	rjmp	.+72     	; 0x1350 <coordinates_tobe_reached+0x114>
void coordinates_tobe_reached()
{
	int stop=0;
	for(int i = 0 ; i<9 ; i++)
	{
		for(int j = 0 ; j<9 ; j++)
    1308:	21 96       	adiw	r28, 0x01	; 1
    130a:	88 e0       	ldi	r24, 0x08	; 8
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	e8 0e       	add	r14, r24
    1310:	f9 1e       	adc	r15, r25
    1312:	c9 30       	cpi	r28, 0x09	; 9
    1314:	d1 05       	cpc	r29, r1
    1316:	09 f0       	breq	.+2      	; 0x131a <coordinates_tobe_reached+0xde>
    1318:	a5 cf       	rjmp	.-182    	; 0x1264 <coordinates_tobe_reached+0x28>
	}
}
void coordinates_tobe_reached()
{
	int stop=0;
	for(int i = 0 ; i<9 ; i++)
    131a:	0f 5f       	subi	r16, 0xFF	; 255
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	09 30       	cpi	r16, 0x09	; 9
    1320:	11 05       	cpc	r17, r1
    1322:	b1 f0       	breq	.+44     	; 0x1350 <coordinates_tobe_reached+0x114>
    1324:	06 9d       	mul	r16, r6
    1326:	70 01       	movw	r14, r0
    1328:	07 9d       	mul	r16, r7
    132a:	f0 0c       	add	r15, r0
    132c:	16 9d       	mul	r17, r6
    132e:	f0 0c       	add	r15, r0
    1330:	11 24       	eor	r1, r1
    1332:	ed e0       	ldi	r30, 0x0D	; 13
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	ee 0e       	add	r14, r30
    1338:	ff 1e       	adc	r15, r31
    133a:	c0 e0       	ldi	r28, 0x00	; 0
    133c:	d0 e0       	ldi	r29, 0x00	; 0
						my = j-1;
						stop = 1;
						break;
					}
				}
				if(dir_array[i][j][3]==1)
    133e:	48 01       	movw	r8, r16
    1340:	08 94       	sec
    1342:	81 08       	sbc	r8, r1
    1344:	91 08       	sbc	r9, r1
						my = j+1;
						stop = 1;
						break;
					}
				}
				if(dir_array[i][j][1]==1)
    1346:	58 01       	movw	r10, r16
    1348:	08 94       	sec
    134a:	a1 1c       	adc	r10, r1
    134c:	b1 1c       	adc	r11, r1
    134e:	8a cf       	rjmp	.-236    	; 0x1264 <coordinates_tobe_reached+0x28>
		if(stop==1)
		{
			break;
		}
	}
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	7f 90       	pop	r7
    136a:	6f 90       	pop	r6
    136c:	08 95       	ret

0000136e <right_junc_check>:
			}
		}
	}
}
void right_junc_check()
{	
    136e:	cf 92       	push	r12
    1370:	df 92       	push	r13
    1372:	ef 92       	push	r14
    1374:	ff 92       	push	r15
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
	
	if(bit_is_clear(PINA,7))
    137e:	cf 99       	sbic	0x19, 7	; 25
    1380:	2c c3       	rjmp	.+1624   	; 0x19da <right_junc_check+0x66c>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1382:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1384:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1386:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1388:	af 9a       	sbi	0x15, 7	; 21
	{
		bot_brake();
		// lcd_clear();
		// lcd_write_int_xy(0,0,irc,5);
		// delay_sec(1);
		lcd_clear();
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		if(irc>2000)
    1392:	80 91 ff 00 	lds	r24, 0x00FF
    1396:	90 91 00 01 	lds	r25, 0x0100
    139a:	81 5d       	subi	r24, 0xD1	; 209
    139c:	97 40       	sbci	r25, 0x07	; 7
    139e:	1c f0       	brlt	.+6      	; 0x13a6 <right_junc_check+0x38>
		{
			// lcd_write_string("Sixty");
			
			Coordinates_changed_by = 2;
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <right_junc_check+0x3c>
		}
		else
		{
			// lcd_write_string("Thirty");
			Coordinates_changed_by = 1;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	90 93 08 01 	sts	0x0108, r25
    13ae:	80 93 07 01 	sts	0x0107, r24
		}
		
		//delay_sec(2);
		update_coordinates();
    13b2:	0e 94 81 06 	call	0xd02	; 0xd02 <update_coordinates>
		lcountPrev = lcount;
    13b6:	80 91 f7 00 	lds	r24, 0x00F7
    13ba:	90 91 f8 00 	lds	r25, 0x00F8
    13be:	90 93 fc 00 	sts	0x00FC, r25
    13c2:	80 93 fb 00 	sts	0x00FB, r24
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <right_junc_check+0x62>
		while(bit_is_set(PIND, 7))
		{
			line_track_new();
    13c8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
			left_count();
    13cc:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
		}
		
		//delay_sec(2);
		update_coordinates();
		lcountPrev = lcount;
		while(bit_is_set(PIND, 7))
    13d0:	87 99       	sbic	0x10, 7	; 16
    13d2:	fa cf       	rjmp	.-12     	; 0x13c8 <right_junc_check+0x5a>
		{
			line_track_new();
			left_count();
		}
		//End Condition
		if(bit_is_clear(PINA,6) && bit_is_clear(PIND,6) && bit_is_clear(PINA,5) && bit_is_clear(PINA,7))
    13d4:	ce 99       	sbic	0x19, 6	; 25
    13d6:	38 c2       	rjmp	.+1136   	; 0x1848 <right_junc_check+0x4da>
    13d8:	86 99       	sbic	0x10, 6	; 16
    13da:	36 c2       	rjmp	.+1132   	; 0x1848 <right_junc_check+0x4da>
    13dc:	cd 99       	sbic	0x19, 5	; 25
    13de:	34 c2       	rjmp	.+1128   	; 0x1848 <right_junc_check+0x4da>
    13e0:	cf 99       	sbic	0x19, 7	; 25
    13e2:	32 c2       	rjmp	.+1124   	; 0x1848 <right_junc_check+0x4da>
		{
			lcd_clear();
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    13ec:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    13ee:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    13f0:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    13f2:	af 9a       	sbi	0x15, 7	; 21
			bot_brake();
			fill_missed_array();
    13f4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <fill_missed_array>
			coordinates_tobe_reached();
    13f8:	0e 94 1e 09 	call	0x123c	; 0x123c <coordinates_tobe_reached>
			flick();
    13fc:	0e 94 b6 01 	call	0x36c	; 0x36c <flick>
			lcd_clear();
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string_xy(0,0,"mx: ");
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	48 e7       	ldi	r20, 0x78	; 120
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(4,0,mx,2);
    1418:	40 91 a7 03 	lds	r20, 0x03A7
    141c:	50 91 a8 03 	lds	r21, 0x03A8
    1420:	84 e0       	ldi	r24, 0x04	; 4
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	22 e0       	ldi	r18, 0x02	; 2
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(07,0,"my: ");
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	4d e7       	ldi	r20, 0x7D	; 125
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_int_xy(11,0,my,2);
    1440:	40 91 95 03 	lds	r20, 0x0395
    1444:	50 91 96 03 	lds	r21, 0x0396
    1448:	8b e0       	ldi	r24, 0x0B	; 11
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	22 e0       	ldi	r18, 0x02	; 2
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
			lcd_write_string_xy(0,1,"Press a Key-->");
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	61 e0       	ldi	r22, 0x01	; 1
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	42 e8       	ldi	r20, 0x82	; 130
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    1468:	82 99       	sbic	0x10, 2	; 16
    146a:	b0 c2       	rjmp	.+1376   	; 0x19cc <right_junc_check+0x65e>
			while(1)
			{
				if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
				{
					lcd_clear();
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					//lcd_write_string("");
					delay_sec(1);
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					break;
				}
			}
			
			lcd_write_string("Press Any Key");
    147c:	81 e9       	ldi	r24, 0x91	; 145
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
    1484:	c5 e0       	ldi	r28, 0x05	; 5
    1486:	d0 e0       	ldi	r29, 0x00	; 0
    1488:	55 e0       	ldi	r21, 0x05	; 5
    148a:	c5 2e       	mov	r12, r21
    148c:	d1 2c       	mov	r13, r1
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    148e:	83 99       	sbic	0x10, 3	; 16
    1490:	76 c0       	rjmp	.+236    	; 0x157e <right_junc_check+0x210>
			int i=5, j=5;
			while(1)
			{
				if(pressed_switch3())
				{
					lcd_clear();
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("D3 Pressed");
    149a:	8f e9       	ldi	r24, 0x9F	; 159
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					lcd_clear();
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					j-=1;
    14b2:	08 94       	sec
    14b4:	c1 08       	sbc	r12, r1
    14b6:	d1 08       	sbc	r13, r1
					lcd_write_string("[");
    14b8:	8a ea       	ldi	r24, 0xAA	; 170
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					lcd_write_int_xy(2,0,dir_array[i][j][0],1);
    14c0:	8e 01       	movw	r16, r28
    14c2:	43 e0       	ldi	r20, 0x03	; 3
    14c4:	00 0f       	add	r16, r16
    14c6:	11 1f       	adc	r17, r17
    14c8:	4a 95       	dec	r20
    14ca:	e1 f7       	brne	.-8      	; 0x14c4 <right_junc_check+0x156>
    14cc:	0c 0f       	add	r16, r28
    14ce:	1d 1f       	adc	r17, r29
    14d0:	0c 0d       	add	r16, r12
    14d2:	1d 1d       	adc	r17, r13
    14d4:	33 e0       	ldi	r19, 0x03	; 3
    14d6:	00 0f       	add	r16, r16
    14d8:	11 1f       	adc	r17, r17
    14da:	3a 95       	dec	r19
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <right_junc_check+0x168>
    14de:	2d e0       	ldi	r18, 0x0D	; 13
    14e0:	e2 2e       	mov	r14, r18
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	f2 2e       	mov	r15, r18
    14e6:	e0 0e       	add	r14, r16
    14e8:	f1 1e       	adc	r15, r17
    14ea:	f7 01       	movw	r30, r14
    14ec:	40 81       	ld	r20, Z
    14ee:	51 81       	ldd	r21, Z+1	; 0x01
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(4,0,dir_array[i][j][1],1);
    1500:	f8 01       	movw	r30, r16
    1502:	e1 5f       	subi	r30, 0xF1	; 241
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	40 81       	ld	r20, Z
    1508:	51 81       	ldd	r21, Z+1	; 0x01
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(6,0,dir_array[i][j][2],1);
    151a:	0f 5e       	subi	r16, 0xEF	; 239
    151c:	1e 4f       	sbci	r17, 0xFE	; 254
    151e:	f8 01       	movw	r30, r16
    1520:	40 81       	ld	r20, Z
    1522:	51 81       	ldd	r21, Z+1	; 0x01
    1524:	86 e0       	ldi	r24, 0x06	; 6
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	21 e0       	ldi	r18, 0x01	; 1
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(8,0,dir_array[i][j][3],1);
    1534:	f7 01       	movw	r30, r14
    1536:	46 81       	ldd	r20, Z+6	; 0x06
    1538:	57 81       	ldd	r21, Z+7	; 0x07
    153a:	88 e0       	ldi	r24, 0x08	; 8
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_string_xy(10,0,"]");
    154a:	8a e0       	ldi	r24, 0x0A	; 10
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	4c ea       	ldi	r20, 0xAC	; 172
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
					lcd_write_int_xy(0,1,i,1);
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	ae 01       	movw	r20, r28
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(2,1,j,1);
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	a6 01       	movw	r20, r12
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    157e:	82 99       	sbic	0x10, 2	; 16
    1580:	74 c0       	rjmp	.+232    	; 0x166a <right_junc_check+0x2fc>
				}
				if(pressed_switch2())
				{
					lcd_clear();
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("D2 Pressed");
    158a:	8e ea       	ldi	r24, 0xAE	; 174
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					lcd_clear();
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					i-=1;
    15a2:	21 97       	sbiw	r28, 0x01	; 1
					lcd_write_string("[");
    15a4:	8a ea       	ldi	r24, 0xAA	; 170
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					lcd_write_int_xy(2,0,dir_array[i][j][0],1);
    15ac:	8e 01       	movw	r16, r28
    15ae:	b3 e0       	ldi	r27, 0x03	; 3
    15b0:	00 0f       	add	r16, r16
    15b2:	11 1f       	adc	r17, r17
    15b4:	ba 95       	dec	r27
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <right_junc_check+0x242>
    15b8:	0c 0f       	add	r16, r28
    15ba:	1d 1f       	adc	r17, r29
    15bc:	0c 0d       	add	r16, r12
    15be:	1d 1d       	adc	r17, r13
    15c0:	a3 e0       	ldi	r26, 0x03	; 3
    15c2:	00 0f       	add	r16, r16
    15c4:	11 1f       	adc	r17, r17
    15c6:	aa 95       	dec	r26
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <right_junc_check+0x254>
    15ca:	fd e0       	ldi	r31, 0x0D	; 13
    15cc:	ef 2e       	mov	r14, r31
    15ce:	f1 e0       	ldi	r31, 0x01	; 1
    15d0:	ff 2e       	mov	r15, r31
    15d2:	e0 0e       	add	r14, r16
    15d4:	f1 1e       	adc	r15, r17
    15d6:	f7 01       	movw	r30, r14
    15d8:	40 81       	ld	r20, Z
    15da:	51 81       	ldd	r21, Z+1	; 0x01
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	21 e0       	ldi	r18, 0x01	; 1
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(4,0,dir_array[i][j][1],1);
    15ec:	f8 01       	movw	r30, r16
    15ee:	e1 5f       	subi	r30, 0xF1	; 241
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	40 81       	ld	r20, Z
    15f4:	51 81       	ldd	r21, Z+1	; 0x01
    15f6:	84 e0       	ldi	r24, 0x04	; 4
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(6,0,dir_array[i][j][2],1);
    1606:	0f 5e       	subi	r16, 0xEF	; 239
    1608:	1e 4f       	sbci	r17, 0xFE	; 254
    160a:	f8 01       	movw	r30, r16
    160c:	40 81       	ld	r20, Z
    160e:	51 81       	ldd	r21, Z+1	; 0x01
    1610:	86 e0       	ldi	r24, 0x06	; 6
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(8,0,dir_array[i][j][3],1);
    1620:	f7 01       	movw	r30, r14
    1622:	46 81       	ldd	r20, Z+6	; 0x06
    1624:	57 81       	ldd	r21, Z+7	; 0x07
    1626:	88 e0       	ldi	r24, 0x08	; 8
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_string_xy(10,0,"]");
    1636:	8a e0       	ldi	r24, 0x0A	; 10
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	4c ea       	ldi	r20, 0xAC	; 172
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
					lcd_write_int_xy(0,1,i,1);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	ae 01       	movw	r20, r28
    1650:	21 e0       	ldi	r18, 0x01	; 1
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(2,1,j,1);
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	a6 01       	movw	r20, r12
    1662:	21 e0       	ldi	r18, 0x01	; 1
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    166a:	81 99       	sbic	0x10, 1	; 16
    166c:	74 c0       	rjmp	.+232    	; 0x1756 <right_junc_check+0x3e8>
				}
				if(pressed_switch1())
				{
					lcd_clear();
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("D1 Pressed");
    1676:	89 eb       	ldi	r24, 0xB9	; 185
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					lcd_clear();
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					i+=1;
    168e:	21 96       	adiw	r28, 0x01	; 1
					lcd_write_string("[");
    1690:	8a ea       	ldi	r24, 0xAA	; 170
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					lcd_write_int_xy(2,0,dir_array[i][j][0],1);
    1698:	8e 01       	movw	r16, r28
    169a:	63 e0       	ldi	r22, 0x03	; 3
    169c:	00 0f       	add	r16, r16
    169e:	11 1f       	adc	r17, r17
    16a0:	6a 95       	dec	r22
    16a2:	e1 f7       	brne	.-8      	; 0x169c <right_junc_check+0x32e>
    16a4:	0c 0f       	add	r16, r28
    16a6:	1d 1f       	adc	r17, r29
    16a8:	0c 0d       	add	r16, r12
    16aa:	1d 1d       	adc	r17, r13
    16ac:	53 e0       	ldi	r21, 0x03	; 3
    16ae:	00 0f       	add	r16, r16
    16b0:	11 1f       	adc	r17, r17
    16b2:	5a 95       	dec	r21
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <right_junc_check+0x340>
    16b6:	4d e0       	ldi	r20, 0x0D	; 13
    16b8:	e4 2e       	mov	r14, r20
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	f4 2e       	mov	r15, r20
    16be:	e0 0e       	add	r14, r16
    16c0:	f1 1e       	adc	r15, r17
    16c2:	f7 01       	movw	r30, r14
    16c4:	40 81       	ld	r20, Z
    16c6:	51 81       	ldd	r21, Z+1	; 0x01
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	21 e0       	ldi	r18, 0x01	; 1
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(4,0,dir_array[i][j][1],1);
    16d8:	f8 01       	movw	r30, r16
    16da:	e1 5f       	subi	r30, 0xF1	; 241
    16dc:	fe 4f       	sbci	r31, 0xFE	; 254
    16de:	40 81       	ld	r20, Z
    16e0:	51 81       	ldd	r21, Z+1	; 0x01
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	21 e0       	ldi	r18, 0x01	; 1
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(6,0,dir_array[i][j][2],1);
    16f2:	0f 5e       	subi	r16, 0xEF	; 239
    16f4:	1e 4f       	sbci	r17, 0xFE	; 254
    16f6:	f8 01       	movw	r30, r16
    16f8:	40 81       	ld	r20, Z
    16fa:	51 81       	ldd	r21, Z+1	; 0x01
    16fc:	86 e0       	ldi	r24, 0x06	; 6
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	21 e0       	ldi	r18, 0x01	; 1
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(8,0,dir_array[i][j][3],1);
    170c:	f7 01       	movw	r30, r14
    170e:	46 81       	ldd	r20, Z+6	; 0x06
    1710:	57 81       	ldd	r21, Z+7	; 0x07
    1712:	88 e0       	ldi	r24, 0x08	; 8
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	21 e0       	ldi	r18, 0x01	; 1
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_string_xy(10,0,"]");
    1722:	8a e0       	ldi	r24, 0x0A	; 10
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	4c ea       	ldi	r20, 0xAC	; 172
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
					lcd_write_int_xy(0,1,i,1);
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	ae 01       	movw	r20, r28
    173c:	21 e0       	ldi	r18, 0x01	; 1
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(2,1,j,1);
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	a6 01       	movw	r20, r12
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    1756:	80 99       	sbic	0x10, 0	; 16
    1758:	9a ce       	rjmp	.-716    	; 0x148e <right_junc_check+0x120>
				}
				if(pressed_switch0())
				{
					lcd_clear();
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					lcd_write_string("D0 Pressed");
    1762:	84 ec       	ldi	r24, 0xC4	; 196
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					delay_sec(1);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
					lcd_clear();
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
					j+=1;
    177a:	08 94       	sec
    177c:	c1 1c       	adc	r12, r1
    177e:	d1 1c       	adc	r13, r1
					lcd_write_string("[");
    1780:	8a ea       	ldi	r24, 0xAA	; 170
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
					lcd_write_int_xy(2,0,dir_array[i][j][0],1);
    1788:	8e 01       	movw	r16, r28
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	00 0f       	add	r16, r16
    178e:	11 1f       	adc	r17, r17
    1790:	9a 95       	dec	r25
    1792:	e1 f7       	brne	.-8      	; 0x178c <right_junc_check+0x41e>
    1794:	0c 0f       	add	r16, r28
    1796:	1d 1f       	adc	r17, r29
    1798:	0c 0d       	add	r16, r12
    179a:	1d 1d       	adc	r17, r13
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	00 0f       	add	r16, r16
    17a0:	11 1f       	adc	r17, r17
    17a2:	8a 95       	dec	r24
    17a4:	e1 f7       	brne	.-8      	; 0x179e <right_junc_check+0x430>
    17a6:	bd e0       	ldi	r27, 0x0D	; 13
    17a8:	eb 2e       	mov	r14, r27
    17aa:	b1 e0       	ldi	r27, 0x01	; 1
    17ac:	fb 2e       	mov	r15, r27
    17ae:	e0 0e       	add	r14, r16
    17b0:	f1 1e       	adc	r15, r17
    17b2:	f7 01       	movw	r30, r14
    17b4:	40 81       	ld	r20, Z
    17b6:	51 81       	ldd	r21, Z+1	; 0x01
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	21 e0       	ldi	r18, 0x01	; 1
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(4,0,dir_array[i][j][1],1);
    17c8:	f8 01       	movw	r30, r16
    17ca:	e1 5f       	subi	r30, 0xF1	; 241
    17cc:	fe 4f       	sbci	r31, 0xFE	; 254
    17ce:	40 81       	ld	r20, Z
    17d0:	51 81       	ldd	r21, Z+1	; 0x01
    17d2:	84 e0       	ldi	r24, 0x04	; 4
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(6,0,dir_array[i][j][2],1);
    17e2:	0f 5e       	subi	r16, 0xEF	; 239
    17e4:	1e 4f       	sbci	r17, 0xFE	; 254
    17e6:	f8 01       	movw	r30, r16
    17e8:	40 81       	ld	r20, Z
    17ea:	51 81       	ldd	r21, Z+1	; 0x01
    17ec:	86 e0       	ldi	r24, 0x06	; 6
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(8,0,dir_array[i][j][3],1);
    17fc:	f7 01       	movw	r30, r14
    17fe:	46 81       	ldd	r20, Z+6	; 0x06
    1800:	57 81       	ldd	r21, Z+7	; 0x07
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	21 e0       	ldi	r18, 0x01	; 1
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_string_xy(10,0,"]");
    1812:	8a e0       	ldi	r24, 0x0A	; 10
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	4c ea       	ldi	r20, 0xAC	; 172
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
					lcd_write_int_xy(0,1,i,1);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	ae 01       	movw	r20, r28
    182c:	21 e0       	ldi	r18, 0x01	; 1
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
					lcd_write_int_xy(2,1,j,1);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	a6 01       	movw	r20, r12
    183e:	21 e0       	ldi	r18, 0x01	; 1
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
    1846:	23 ce       	rjmp	.-954    	; 0x148e <right_junc_check+0x120>
				}

			}
			
		}
		if(bit_is_clear(PINA,6) || bit_is_clear(PIND,6))
    1848:	ce 9b       	sbis	0x19, 6	; 25
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <right_junc_check+0x4e2>
    184c:	86 99       	sbic	0x10, 6	; 16
    184e:	07 c0       	rjmp	.+14     	; 0x185e <right_junc_check+0x4f0>
		{
			straight = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	90 93 fa 00 	sts	0x00FA, r25
    1858:	80 93 f9 00 	sts	0x00F9, r24
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <right_junc_check+0x4f8>
		}
		else
		{
			straight = 0;
    185e:	10 92 fa 00 	sts	0x00FA, r1
    1862:	10 92 f9 00 	sts	0x00F9, r1
		}
		
		
		turn_right();						////actual turn
    1866:	0e 94 4f 05 	call	0xa9e	; 0xa9e <turn_right>
		
		l = 0;
    186a:	10 92 f6 00 	sts	0x00F6, r1
    186e:	10 92 f5 00 	sts	0x00F5, r1
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
    1872:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
    1874:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
    1876:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
    1878:	af 9a       	sbi	0x15, 7	; 21
		bot_brake();
		//delay_millisec(100);
		flag1 = 0;
    187a:	10 92 fe 00 	sts	0x00FE, r1
    187e:	10 92 fd 00 	sts	0x00FD, r1
		irc = 0;
    1882:	10 92 00 01 	sts	0x0100, r1
    1886:	10 92 ff 00 	sts	0x00FF, r1
		temp = lcount - lcountPrev;
    188a:	20 91 f7 00 	lds	r18, 0x00F7
    188e:	30 91 f8 00 	lds	r19, 0x00F8
    1892:	80 91 fb 00 	lds	r24, 0x00FB
    1896:	90 91 fc 00 	lds	r25, 0x00FC
    189a:	28 1b       	sub	r18, r24
    189c:	39 0b       	sbc	r19, r25
    189e:	30 93 04 01 	sts	0x0104, r19
    18a2:	20 93 03 01 	sts	0x0103, r18
		//delay_millisec(2000);
		// lcd_clear();
		
		//delay_sec(2);
		//lcd_clear();
		if(straight==1 && temp==1)
    18a6:	80 91 f9 00 	lds	r24, 0x00F9
    18aa:	90 91 fa 00 	lds	r25, 0x00FA
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	91 05       	cpc	r25, r1
    18b2:	a9 f4       	brne	.+42     	; 0x18de <right_junc_check+0x570>
    18b4:	21 30       	cpi	r18, 0x01	; 1
    18b6:	31 05       	cpc	r19, r1
    18b8:	09 f0       	breq	.+2      	; 0x18bc <right_junc_check+0x54e>
    18ba:	54 c0       	rjmp	.+168    	; 0x1964 <right_junc_check+0x5f6>
		{
			// lcd_write_string("|- Detected");
			update_array(1,1,1,0);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	41 e0       	ldi	r20, 0x01	; 1
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
			lcd_write_string_xy(0,1,"1");
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	4f ec       	ldi	r20, 0xCF	; 207
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	2a c0       	rjmp	.+84     	; 0x1932 <right_junc_check+0x5c4>
			lcd_write_string_xy(2,1,"1");
			lcd_write_string_xy(4,1,"1");
			lcd_write_string_xy(6,1,"0");
		}
		else if(straight==0 && temp==1)
    18de:	89 2b       	or	r24, r25
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <right_junc_check+0x576>
    18e2:	6d c0       	rjmp	.+218    	; 0x19be <right_junc_check+0x650>
    18e4:	21 30       	cpi	r18, 0x01	; 1
    18e6:	31 05       	cpc	r19, r1
    18e8:	89 f4       	brne	.+34     	; 0x190c <right_junc_check+0x59e>
		{
			// lcd_write_string("T Detected");
			update_array(0,1,1,1);
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	41 e0       	ldi	r20, 0x01	; 1
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
			lcd_write_string_xy(0,1,"0");
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	41 ed       	ldi	r20, 0xD1	; 209
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	3f c0       	rjmp	.+126    	; 0x198a <right_junc_check+0x61c>
			lcd_write_string_xy(2,1,"1");
			lcd_write_string_xy(4,1,"1");
			lcd_write_string_xy(6,1,"1");
		}
		else if(straight==0 && temp==0)
    190c:	23 2b       	or	r18, r19
    190e:	09 f0       	breq	.+2      	; 0x1912 <right_junc_check+0x5a4>
    1910:	56 c0       	rjmp	.+172    	; 0x19be <right_junc_check+0x650>
		{
			// lcd_write_string("L Detected");
			update_array(0,1,1,0);
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
			lcd_write_string_xy(0,1,"0");
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	41 ed       	ldi	r20, 0xD1	; 209
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(2,1,"1");
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	61 e0       	ldi	r22, 0x01	; 1
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	4f ec       	ldi	r20, 0xCF	; 207
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(4,1,"1");
    1946:	84 e0       	ldi	r24, 0x04	; 4
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	4f ec       	ldi	r20, 0xCF	; 207
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(6,1,"0");
    1956:	86 e0       	ldi	r24, 0x06	; 6
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	61 e0       	ldi	r22, 0x01	; 1
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	41 ed       	ldi	r20, 0xD1	; 209
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	2b c0       	rjmp	.+86     	; 0x19ba <right_junc_check+0x64c>
		}
		else if(straight==1 && temp==2)
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	51 f5       	brne	.+84     	; 0x19be <right_junc_check+0x650>
		{
			// lcd_write_string("+ Detected");
			update_array(1,1,1,1);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	21 e0       	ldi	r18, 0x01	; 1
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
			lcd_write_string_xy(0,1,"1");
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	4f ec       	ldi	r20, 0xCF	; 207
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(2,1,"1");
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	4f ec       	ldi	r20, 0xCF	; 207
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(4,1,"1");
    199e:	84 e0       	ldi	r24, 0x04	; 4
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	4f ec       	ldi	r20, 0xCF	; 207
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
			lcd_write_string_xy(6,1,"1");
    19ae:	86 e0       	ldi	r24, 0x06	; 6
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	4f ec       	ldi	r20, 0xCF	; 207
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_write_string_xy>
		}
		//delay_millisec(2000);
		temp = 0;
    19be:	10 92 04 01 	sts	0x0104, r1
    19c2:	10 92 03 01 	sts	0x0103, r1
		sense_of_directon();
    19c6:	0e 94 89 05 	call	0xb12	; 0xb12 <sense_of_directon>
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <right_junc_check+0x66c>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    19cc:	80 9b       	sbis	0x10, 0	; 16
    19ce:	4e cd       	rjmp	.-1380   	; 0x146c <right_junc_check+0xfe>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    19d0:	81 9b       	sbis	0x10, 1	; 16
    19d2:	4c cd       	rjmp	.-1384   	; 0x146c <right_junc_check+0xfe>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    19d4:	83 9b       	sbis	0x10, 3	; 16
    19d6:	4a cd       	rjmp	.-1388   	; 0x146c <right_junc_check+0xfe>
    19d8:	47 cd       	rjmp	.-1394   	; 0x1468 <right_junc_check+0xfa>
		// lcd_clear();
		// lcd_write_int_xy(0,0,dir,3);
		//delay_sec(2);
		
	}
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	ef 90       	pop	r14
    19e6:	df 90       	pop	r13
    19e8:	cf 90       	pop	r12
    19ea:	08 95       	ret

000019ec <main>:
}


int main(void)
{
	init_devices();
    19ec:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("LCD Working");
    19f8:	83 ed       	ldi	r24, 0xD3	; 211
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<9 ; i++)
    1a04:	48 e4       	ldi	r20, 0x48	; 72
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	12 c0       	rjmp	.+36     	; 0x1a2e <main+0x42>
	{
		for(j=0 ; j<9 ; j++)
		{
			for(k=0 ; k<4 ; k++)
			{
				dir_array[i][j][k] = 0;
    1a0a:	11 82       	std	Z+1, r1	; 0x01
    1a0c:	10 82       	st	Z, r1
    1a0e:	13 82       	std	Z+3, r1	; 0x03
    1a10:	12 82       	std	Z+2, r1	; 0x02
    1a12:	15 82       	std	Z+5, r1	; 0x05
    1a14:	14 82       	std	Z+4, r1	; 0x04
    1a16:	17 82       	std	Z+7, r1	; 0x07
    1a18:	16 82       	std	Z+6, r1	; 0x06
	lcd_write_string("LCD Working");
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<9 ; i++)
	{
		for(j=0 ; j<9 ; j++)
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	38 96       	adiw	r30, 0x08	; 8
    1a1e:	89 30       	cpi	r24, 0x09	; 9
    1a20:	91 05       	cpc	r25, r1
    1a22:	99 f7       	brne	.-26     	; 0x1a0a <main+0x1e>
	init_devices();
	lcd_clear();
	lcd_write_string("LCD Working");
	int i, j, k;
	//array initializing to zero
	for(i=0 ; i<9 ; i++)
    1a24:	2f 5f       	subi	r18, 0xFF	; 255
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	29 30       	cpi	r18, 0x09	; 9
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <main+0x5a>
    1a2e:	24 9f       	mul	r18, r20
    1a30:	f0 01       	movw	r30, r0
    1a32:	25 9f       	mul	r18, r21
    1a34:	f0 0d       	add	r31, r0
    1a36:	34 9f       	mul	r19, r20
    1a38:	f0 0d       	add	r31, r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	e3 5f       	subi	r30, 0xF3	; 243
    1a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	e2 cf       	rjmp	.-60     	; 0x1a0a <main+0x1e>
			{
				dir_array[i][j][k] = 0;
			}
		}
	}
	lcd_clear();
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("Press Any Key");
    1a4e:	81 e9       	ldi	r24, 0x91	; 145
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
	update_array(1,0,0,0);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <update_array>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
    1a6a:	82 99       	sbic	0x10, 2	; 16
    1a6c:	1a c0       	rjmp	.+52     	; 0x1aa2 <main+0xb6>
	{	
		if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
		{
			while(1)
			{
				line_track_new();	
    1a6e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <line_track_new>
				LED&=0b11110000;
    1a72:	85 b3       	in	r24, 0x15	; 21
    1a74:	80 7f       	andi	r24, 0xF0	; 240
    1a76:	85 bb       	out	0x15, r24	; 21
				LED|=sensorbyte;
    1a78:	85 b3       	in	r24, 0x15	; 21
    1a7a:	90 91 f0 00 	lds	r25, 0x00F0
    1a7e:	89 2b       	or	r24, r25
    1a80:	85 bb       	out	0x15, r24	; 21
				right_junc_check();
    1a82:	0e 94 b7 09 	call	0x136e	; 0x136e <right_junc_check>
				left_junc_check();
    1a86:	0e 94 5d 07 	call	0xeba	; 0xeba <left_junc_check>
				frSensorCheck();
    1a8a:	0e 94 c3 07 	call	0xf86	; 0xf86 <frSensorCheck>
				irc++;
    1a8e:	80 91 ff 00 	lds	r24, 0x00FF
    1a92:	90 91 00 01 	lds	r25, 0x0100
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	90 93 00 01 	sts	0x0100, r25
    1a9c:	80 93 ff 00 	sts	0x00FF, r24
    1aa0:	e6 cf       	rjmp	.-52     	; 0x1a6e <main+0x82>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
    1aa2:	80 9b       	sbis	0x10, 0	; 16
    1aa4:	e4 cf       	rjmp	.-56     	; 0x1a6e <main+0x82>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
    1aa6:	81 9b       	sbis	0x10, 1	; 16
    1aa8:	e2 cf       	rjmp	.-60     	; 0x1a6e <main+0x82>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
    1aaa:	83 9b       	sbis	0x10, 3	; 16
    1aac:	e0 cf       	rjmp	.-64     	; 0x1a6e <main+0x82>
    1aae:	dd cf       	rjmp	.-70     	; 0x1a6a <main+0x7e>

00001ab0 <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__eerd_byte_m16>
    1ab8:	80 93 9b 03 	sts	0x039B, r24
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__eerd_byte_m16>
    1ac4:	80 93 9c 03 	sts	0x039C, r24
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__eerd_byte_m16>
    1ad0:	80 93 9d 03 	sts	0x039D, r24
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__eerd_byte_m16>
    1adc:	80 93 9e 03 	sts	0x039E, r24
		eeprom_addr++;
	}
}
    1ae0:	08 95       	ret

00001ae2 <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
    1ae6:	20 91 9f 03 	lds	r18, 0x039F
    1aea:	80 91 97 03 	lds	r24, 0x0397
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	82 0f       	add	r24, r18
    1af2:	91 1d       	adc	r25, r1
    1af4:	95 95       	asr	r25
    1af6:	87 95       	ror	r24
    1af8:	80 93 9b 03 	sts	0x039B, r24
    1afc:	20 91 a0 03 	lds	r18, 0x03A0
    1b00:	80 91 98 03 	lds	r24, 0x0398
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	82 0f       	add	r24, r18
    1b08:	91 1d       	adc	r25, r1
    1b0a:	95 95       	asr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	80 93 9c 03 	sts	0x039C, r24
    1b12:	20 91 a1 03 	lds	r18, 0x03A1
    1b16:	80 91 99 03 	lds	r24, 0x0399
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	82 0f       	add	r24, r18
    1b1e:	91 1d       	adc	r25, r1
    1b20:	95 95       	asr	r25
    1b22:	87 95       	ror	r24
    1b24:	80 93 9d 03 	sts	0x039D, r24
    1b28:	20 91 a2 03 	lds	r18, 0x03A2
    1b2c:	80 91 9a 03 	lds	r24, 0x039A
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	82 0f       	add	r24, r18
    1b34:	91 1d       	adc	r25, r1
    1b36:	95 95       	asr	r25
    1b38:	87 95       	ror	r24
    1b3a:	80 93 9e 03 	sts	0x039E, r24
    1b3e:	c0 e0       	ldi	r28, 0x00	; 0
    1b40:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
    1b42:	fe 01       	movw	r30, r28
    1b44:	e5 56       	subi	r30, 0x65	; 101
    1b46:	fc 4f       	sbci	r31, 0xFC	; 252
    1b48:	ce 01       	movw	r24, r28
    1b4a:	60 81       	ld	r22, Z
    1b4c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
    1b50:	21 96       	adiw	r28, 0x01	; 1
    1b52:	c4 30       	cpi	r28, 0x04	; 4
    1b54:	d1 05       	cpc	r29, r1
    1b56:	a9 f7       	brne	.-22     	; 0x1b42 <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <__subsf3>:
    1b5e:	50 58       	subi	r21, 0x80	; 128

00001b60 <__addsf3>:
    1b60:	bb 27       	eor	r27, r27
    1b62:	aa 27       	eor	r26, r26
    1b64:	0e d0       	rcall	.+28     	; 0x1b82 <__addsf3x>
    1b66:	75 c1       	rjmp	.+746    	; 0x1e52 <__fp_round>
    1b68:	66 d1       	rcall	.+716    	; 0x1e36 <__fp_pscA>
    1b6a:	30 f0       	brcs	.+12     	; 0x1b78 <__addsf3+0x18>
    1b6c:	6b d1       	rcall	.+726    	; 0x1e44 <__fp_pscB>
    1b6e:	20 f0       	brcs	.+8      	; 0x1b78 <__addsf3+0x18>
    1b70:	31 f4       	brne	.+12     	; 0x1b7e <__addsf3+0x1e>
    1b72:	9f 3f       	cpi	r25, 0xFF	; 255
    1b74:	11 f4       	brne	.+4      	; 0x1b7a <__addsf3+0x1a>
    1b76:	1e f4       	brtc	.+6      	; 0x1b7e <__addsf3+0x1e>
    1b78:	5b c1       	rjmp	.+694    	; 0x1e30 <__fp_nan>
    1b7a:	0e f4       	brtc	.+2      	; 0x1b7e <__addsf3+0x1e>
    1b7c:	e0 95       	com	r30
    1b7e:	e7 fb       	bst	r30, 7
    1b80:	51 c1       	rjmp	.+674    	; 0x1e24 <__fp_inf>

00001b82 <__addsf3x>:
    1b82:	e9 2f       	mov	r30, r25
    1b84:	77 d1       	rcall	.+750    	; 0x1e74 <__fp_split3>
    1b86:	80 f3       	brcs	.-32     	; 0x1b68 <__addsf3+0x8>
    1b88:	ba 17       	cp	r27, r26
    1b8a:	62 07       	cpc	r22, r18
    1b8c:	73 07       	cpc	r23, r19
    1b8e:	84 07       	cpc	r24, r20
    1b90:	95 07       	cpc	r25, r21
    1b92:	18 f0       	brcs	.+6      	; 0x1b9a <__addsf3x+0x18>
    1b94:	71 f4       	brne	.+28     	; 0x1bb2 <__addsf3x+0x30>
    1b96:	9e f5       	brtc	.+102    	; 0x1bfe <__addsf3x+0x7c>
    1b98:	8f c1       	rjmp	.+798    	; 0x1eb8 <__fp_zero>
    1b9a:	0e f4       	brtc	.+2      	; 0x1b9e <__addsf3x+0x1c>
    1b9c:	e0 95       	com	r30
    1b9e:	0b 2e       	mov	r0, r27
    1ba0:	ba 2f       	mov	r27, r26
    1ba2:	a0 2d       	mov	r26, r0
    1ba4:	0b 01       	movw	r0, r22
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	90 01       	movw	r18, r0
    1baa:	0c 01       	movw	r0, r24
    1bac:	ca 01       	movw	r24, r20
    1bae:	a0 01       	movw	r20, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	ff 27       	eor	r31, r31
    1bb4:	59 1b       	sub	r21, r25
    1bb6:	99 f0       	breq	.+38     	; 0x1bde <__addsf3x+0x5c>
    1bb8:	59 3f       	cpi	r21, 0xF9	; 249
    1bba:	50 f4       	brcc	.+20     	; 0x1bd0 <__addsf3x+0x4e>
    1bbc:	50 3e       	cpi	r21, 0xE0	; 224
    1bbe:	68 f1       	brcs	.+90     	; 0x1c1a <__addsf3x+0x98>
    1bc0:	1a 16       	cp	r1, r26
    1bc2:	f0 40       	sbci	r31, 0x00	; 0
    1bc4:	a2 2f       	mov	r26, r18
    1bc6:	23 2f       	mov	r18, r19
    1bc8:	34 2f       	mov	r19, r20
    1bca:	44 27       	eor	r20, r20
    1bcc:	58 5f       	subi	r21, 0xF8	; 248
    1bce:	f3 cf       	rjmp	.-26     	; 0x1bb6 <__addsf3x+0x34>
    1bd0:	46 95       	lsr	r20
    1bd2:	37 95       	ror	r19
    1bd4:	27 95       	ror	r18
    1bd6:	a7 95       	ror	r26
    1bd8:	f0 40       	sbci	r31, 0x00	; 0
    1bda:	53 95       	inc	r21
    1bdc:	c9 f7       	brne	.-14     	; 0x1bd0 <__addsf3x+0x4e>
    1bde:	7e f4       	brtc	.+30     	; 0x1bfe <__addsf3x+0x7c>
    1be0:	1f 16       	cp	r1, r31
    1be2:	ba 0b       	sbc	r27, r26
    1be4:	62 0b       	sbc	r22, r18
    1be6:	73 0b       	sbc	r23, r19
    1be8:	84 0b       	sbc	r24, r20
    1bea:	ba f0       	brmi	.+46     	; 0x1c1a <__addsf3x+0x98>
    1bec:	91 50       	subi	r25, 0x01	; 1
    1bee:	a1 f0       	breq	.+40     	; 0x1c18 <__addsf3x+0x96>
    1bf0:	ff 0f       	add	r31, r31
    1bf2:	bb 1f       	adc	r27, r27
    1bf4:	66 1f       	adc	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	c2 f7       	brpl	.-16     	; 0x1bec <__addsf3x+0x6a>
    1bfc:	0e c0       	rjmp	.+28     	; 0x1c1a <__addsf3x+0x98>
    1bfe:	ba 0f       	add	r27, r26
    1c00:	62 1f       	adc	r22, r18
    1c02:	73 1f       	adc	r23, r19
    1c04:	84 1f       	adc	r24, r20
    1c06:	48 f4       	brcc	.+18     	; 0x1c1a <__addsf3x+0x98>
    1c08:	87 95       	ror	r24
    1c0a:	77 95       	ror	r23
    1c0c:	67 95       	ror	r22
    1c0e:	b7 95       	ror	r27
    1c10:	f7 95       	ror	r31
    1c12:	9e 3f       	cpi	r25, 0xFE	; 254
    1c14:	08 f0       	brcs	.+2      	; 0x1c18 <__addsf3x+0x96>
    1c16:	b3 cf       	rjmp	.-154    	; 0x1b7e <__addsf3+0x1e>
    1c18:	93 95       	inc	r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <__addsf3x+0x9e>
    1c1e:	99 27       	eor	r25, r25
    1c20:	ee 0f       	add	r30, r30
    1c22:	97 95       	ror	r25
    1c24:	87 95       	ror	r24
    1c26:	08 95       	ret

00001c28 <__cmpsf2>:
    1c28:	d9 d0       	rcall	.+434    	; 0x1ddc <__fp_cmp>
    1c2a:	08 f4       	brcc	.+2      	; 0x1c2e <__cmpsf2+0x6>
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	08 95       	ret

00001c30 <__divsf3>:
    1c30:	0c d0       	rcall	.+24     	; 0x1c4a <__divsf3x>
    1c32:	0f c1       	rjmp	.+542    	; 0x1e52 <__fp_round>
    1c34:	07 d1       	rcall	.+526    	; 0x1e44 <__fp_pscB>
    1c36:	40 f0       	brcs	.+16     	; 0x1c48 <__divsf3+0x18>
    1c38:	fe d0       	rcall	.+508    	; 0x1e36 <__fp_pscA>
    1c3a:	30 f0       	brcs	.+12     	; 0x1c48 <__divsf3+0x18>
    1c3c:	21 f4       	brne	.+8      	; 0x1c46 <__divsf3+0x16>
    1c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c40:	19 f0       	breq	.+6      	; 0x1c48 <__divsf3+0x18>
    1c42:	f0 c0       	rjmp	.+480    	; 0x1e24 <__fp_inf>
    1c44:	51 11       	cpse	r21, r1
    1c46:	39 c1       	rjmp	.+626    	; 0x1eba <__fp_szero>
    1c48:	f3 c0       	rjmp	.+486    	; 0x1e30 <__fp_nan>

00001c4a <__divsf3x>:
    1c4a:	14 d1       	rcall	.+552    	; 0x1e74 <__fp_split3>
    1c4c:	98 f3       	brcs	.-26     	; 0x1c34 <__divsf3+0x4>

00001c4e <__divsf3_pse>:
    1c4e:	99 23       	and	r25, r25
    1c50:	c9 f3       	breq	.-14     	; 0x1c44 <__divsf3+0x14>
    1c52:	55 23       	and	r21, r21
    1c54:	b1 f3       	breq	.-20     	; 0x1c42 <__divsf3+0x12>
    1c56:	95 1b       	sub	r25, r21
    1c58:	55 0b       	sbc	r21, r21
    1c5a:	bb 27       	eor	r27, r27
    1c5c:	aa 27       	eor	r26, r26
    1c5e:	62 17       	cp	r22, r18
    1c60:	73 07       	cpc	r23, r19
    1c62:	84 07       	cpc	r24, r20
    1c64:	38 f0       	brcs	.+14     	; 0x1c74 <__divsf3_pse+0x26>
    1c66:	9f 5f       	subi	r25, 0xFF	; 255
    1c68:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	44 1f       	adc	r20, r20
    1c70:	aa 1f       	adc	r26, r26
    1c72:	a9 f3       	breq	.-22     	; 0x1c5e <__divsf3_pse+0x10>
    1c74:	33 d0       	rcall	.+102    	; 0x1cdc <__divsf3_pse+0x8e>
    1c76:	0e 2e       	mov	r0, r30
    1c78:	3a f0       	brmi	.+14     	; 0x1c88 <__divsf3_pse+0x3a>
    1c7a:	e0 e8       	ldi	r30, 0x80	; 128
    1c7c:	30 d0       	rcall	.+96     	; 0x1cde <__divsf3_pse+0x90>
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	50 40       	sbci	r21, 0x00	; 0
    1c82:	e6 95       	lsr	r30
    1c84:	00 1c       	adc	r0, r0
    1c86:	ca f7       	brpl	.-14     	; 0x1c7a <__divsf3_pse+0x2c>
    1c88:	29 d0       	rcall	.+82     	; 0x1cdc <__divsf3_pse+0x8e>
    1c8a:	fe 2f       	mov	r31, r30
    1c8c:	27 d0       	rcall	.+78     	; 0x1cdc <__divsf3_pse+0x8e>
    1c8e:	66 0f       	add	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	bb 1f       	adc	r27, r27
    1c96:	26 17       	cp	r18, r22
    1c98:	37 07       	cpc	r19, r23
    1c9a:	48 07       	cpc	r20, r24
    1c9c:	ab 07       	cpc	r26, r27
    1c9e:	b0 e8       	ldi	r27, 0x80	; 128
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <__divsf3_pse+0x56>
    1ca2:	bb 0b       	sbc	r27, r27
    1ca4:	80 2d       	mov	r24, r0
    1ca6:	bf 01       	movw	r22, r30
    1ca8:	ff 27       	eor	r31, r31
    1caa:	93 58       	subi	r25, 0x83	; 131
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	2a f0       	brmi	.+10     	; 0x1cba <__divsf3_pse+0x6c>
    1cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	68 f0       	brcs	.+26     	; 0x1cd0 <__divsf3_pse+0x82>
    1cb6:	b6 c0       	rjmp	.+364    	; 0x1e24 <__fp_inf>
    1cb8:	00 c1       	rjmp	.+512    	; 0x1eba <__fp_szero>
    1cba:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbc:	ec f3       	brlt	.-6      	; 0x1cb8 <__divsf3_pse+0x6a>
    1cbe:	98 3e       	cpi	r25, 0xE8	; 232
    1cc0:	dc f3       	brlt	.-10     	; 0x1cb8 <__divsf3_pse+0x6a>
    1cc2:	86 95       	lsr	r24
    1cc4:	77 95       	ror	r23
    1cc6:	67 95       	ror	r22
    1cc8:	b7 95       	ror	r27
    1cca:	f7 95       	ror	r31
    1ccc:	9f 5f       	subi	r25, 0xFF	; 255
    1cce:	c9 f7       	brne	.-14     	; 0x1cc2 <__divsf3_pse+0x74>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	91 1d       	adc	r25, r1
    1cd4:	96 95       	lsr	r25
    1cd6:	87 95       	ror	r24
    1cd8:	97 f9       	bld	r25, 7
    1cda:	08 95       	ret
    1cdc:	e1 e0       	ldi	r30, 0x01	; 1
    1cde:	66 0f       	add	r22, r22
    1ce0:	77 1f       	adc	r23, r23
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	bb 1f       	adc	r27, r27
    1ce6:	62 17       	cp	r22, r18
    1ce8:	73 07       	cpc	r23, r19
    1cea:	84 07       	cpc	r24, r20
    1cec:	ba 07       	cpc	r27, r26
    1cee:	20 f0       	brcs	.+8      	; 0x1cf8 <__divsf3_pse+0xaa>
    1cf0:	62 1b       	sub	r22, r18
    1cf2:	73 0b       	sbc	r23, r19
    1cf4:	84 0b       	sbc	r24, r20
    1cf6:	ba 0b       	sbc	r27, r26
    1cf8:	ee 1f       	adc	r30, r30
    1cfa:	88 f7       	brcc	.-30     	; 0x1cde <__divsf3_pse+0x90>
    1cfc:	e0 95       	com	r30
    1cfe:	08 95       	ret

00001d00 <__fixsfsi>:
    1d00:	04 d0       	rcall	.+8      	; 0x1d0a <__fixunssfsi>
    1d02:	68 94       	set
    1d04:	b1 11       	cpse	r27, r1
    1d06:	d9 c0       	rjmp	.+434    	; 0x1eba <__fp_szero>
    1d08:	08 95       	ret

00001d0a <__fixunssfsi>:
    1d0a:	bc d0       	rcall	.+376    	; 0x1e84 <__fp_splitA>
    1d0c:	88 f0       	brcs	.+34     	; 0x1d30 <__fixunssfsi+0x26>
    1d0e:	9f 57       	subi	r25, 0x7F	; 127
    1d10:	90 f0       	brcs	.+36     	; 0x1d36 <__fixunssfsi+0x2c>
    1d12:	b9 2f       	mov	r27, r25
    1d14:	99 27       	eor	r25, r25
    1d16:	b7 51       	subi	r27, 0x17	; 23
    1d18:	a0 f0       	brcs	.+40     	; 0x1d42 <__fixunssfsi+0x38>
    1d1a:	d1 f0       	breq	.+52     	; 0x1d50 <__fixunssfsi+0x46>
    1d1c:	66 0f       	add	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	88 1f       	adc	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	1a f0       	brmi	.+6      	; 0x1d2c <__fixunssfsi+0x22>
    1d26:	ba 95       	dec	r27
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <__fixunssfsi+0x12>
    1d2a:	12 c0       	rjmp	.+36     	; 0x1d50 <__fixunssfsi+0x46>
    1d2c:	b1 30       	cpi	r27, 0x01	; 1
    1d2e:	81 f0       	breq	.+32     	; 0x1d50 <__fixunssfsi+0x46>
    1d30:	c3 d0       	rcall	.+390    	; 0x1eb8 <__fp_zero>
    1d32:	b1 e0       	ldi	r27, 0x01	; 1
    1d34:	08 95       	ret
    1d36:	c0 c0       	rjmp	.+384    	; 0x1eb8 <__fp_zero>
    1d38:	67 2f       	mov	r22, r23
    1d3a:	78 2f       	mov	r23, r24
    1d3c:	88 27       	eor	r24, r24
    1d3e:	b8 5f       	subi	r27, 0xF8	; 248
    1d40:	39 f0       	breq	.+14     	; 0x1d50 <__fixunssfsi+0x46>
    1d42:	b9 3f       	cpi	r27, 0xF9	; 249
    1d44:	cc f3       	brlt	.-14     	; 0x1d38 <__fixunssfsi+0x2e>
    1d46:	86 95       	lsr	r24
    1d48:	77 95       	ror	r23
    1d4a:	67 95       	ror	r22
    1d4c:	b3 95       	inc	r27
    1d4e:	d9 f7       	brne	.-10     	; 0x1d46 <__fixunssfsi+0x3c>
    1d50:	3e f4       	brtc	.+14     	; 0x1d60 <__fixunssfsi+0x56>
    1d52:	90 95       	com	r25
    1d54:	80 95       	com	r24
    1d56:	70 95       	com	r23
    1d58:	61 95       	neg	r22
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	08 95       	ret

00001d62 <__floatunsisf>:
    1d62:	e8 94       	clt
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <__floatsisf+0x12>

00001d66 <__floatsisf>:
    1d66:	97 fb       	bst	r25, 7
    1d68:	3e f4       	brtc	.+14     	; 0x1d78 <__floatsisf+0x12>
    1d6a:	90 95       	com	r25
    1d6c:	80 95       	com	r24
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255
    1d74:	8f 4f       	sbci	r24, 0xFF	; 255
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	99 23       	and	r25, r25
    1d7a:	a9 f0       	breq	.+42     	; 0x1da6 <__floatsisf+0x40>
    1d7c:	f9 2f       	mov	r31, r25
    1d7e:	96 e9       	ldi	r25, 0x96	; 150
    1d80:	bb 27       	eor	r27, r27
    1d82:	93 95       	inc	r25
    1d84:	f6 95       	lsr	r31
    1d86:	87 95       	ror	r24
    1d88:	77 95       	ror	r23
    1d8a:	67 95       	ror	r22
    1d8c:	b7 95       	ror	r27
    1d8e:	f1 11       	cpse	r31, r1
    1d90:	f8 cf       	rjmp	.-16     	; 0x1d82 <__floatsisf+0x1c>
    1d92:	fa f4       	brpl	.+62     	; 0x1dd2 <__floatsisf+0x6c>
    1d94:	bb 0f       	add	r27, r27
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <__floatsisf+0x36>
    1d98:	60 ff       	sbrs	r22, 0
    1d9a:	1b c0       	rjmp	.+54     	; 0x1dd2 <__floatsisf+0x6c>
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	16 c0       	rjmp	.+44     	; 0x1dd2 <__floatsisf+0x6c>
    1da6:	88 23       	and	r24, r24
    1da8:	11 f0       	breq	.+4      	; 0x1dae <__floatsisf+0x48>
    1daa:	96 e9       	ldi	r25, 0x96	; 150
    1dac:	11 c0       	rjmp	.+34     	; 0x1dd0 <__floatsisf+0x6a>
    1dae:	77 23       	and	r23, r23
    1db0:	21 f0       	breq	.+8      	; 0x1dba <__floatsisf+0x54>
    1db2:	9e e8       	ldi	r25, 0x8E	; 142
    1db4:	87 2f       	mov	r24, r23
    1db6:	76 2f       	mov	r23, r22
    1db8:	05 c0       	rjmp	.+10     	; 0x1dc4 <__floatsisf+0x5e>
    1dba:	66 23       	and	r22, r22
    1dbc:	71 f0       	breq	.+28     	; 0x1dda <__floatsisf+0x74>
    1dbe:	96 e8       	ldi	r25, 0x86	; 134
    1dc0:	86 2f       	mov	r24, r22
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	2a f0       	brmi	.+10     	; 0x1dd2 <__floatsisf+0x6c>
    1dc8:	9a 95       	dec	r25
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	da f7       	brpl	.-10     	; 0x1dc8 <__floatsisf+0x62>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__fp_cmp>:
    1ddc:	99 0f       	add	r25, r25
    1dde:	00 08       	sbc	r0, r0
    1de0:	55 0f       	add	r21, r21
    1de2:	aa 0b       	sbc	r26, r26
    1de4:	e0 e8       	ldi	r30, 0x80	; 128
    1de6:	fe ef       	ldi	r31, 0xFE	; 254
    1de8:	16 16       	cp	r1, r22
    1dea:	17 06       	cpc	r1, r23
    1dec:	e8 07       	cpc	r30, r24
    1dee:	f9 07       	cpc	r31, r25
    1df0:	c0 f0       	brcs	.+48     	; 0x1e22 <__fp_cmp+0x46>
    1df2:	12 16       	cp	r1, r18
    1df4:	13 06       	cpc	r1, r19
    1df6:	e4 07       	cpc	r30, r20
    1df8:	f5 07       	cpc	r31, r21
    1dfa:	98 f0       	brcs	.+38     	; 0x1e22 <__fp_cmp+0x46>
    1dfc:	62 1b       	sub	r22, r18
    1dfe:	73 0b       	sbc	r23, r19
    1e00:	84 0b       	sbc	r24, r20
    1e02:	95 0b       	sbc	r25, r21
    1e04:	39 f4       	brne	.+14     	; 0x1e14 <__fp_cmp+0x38>
    1e06:	0a 26       	eor	r0, r26
    1e08:	61 f0       	breq	.+24     	; 0x1e22 <__fp_cmp+0x46>
    1e0a:	23 2b       	or	r18, r19
    1e0c:	24 2b       	or	r18, r20
    1e0e:	25 2b       	or	r18, r21
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <__fp_cmp+0x3e>
    1e12:	08 95       	ret
    1e14:	0a 26       	eor	r0, r26
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <__fp_cmp+0x3e>
    1e18:	a1 40       	sbci	r26, 0x01	; 1
    1e1a:	a6 95       	lsr	r26
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	81 1d       	adc	r24, r1
    1e20:	81 1d       	adc	r24, r1
    1e22:	08 95       	ret

00001e24 <__fp_inf>:
    1e24:	97 f9       	bld	r25, 7
    1e26:	9f 67       	ori	r25, 0x7F	; 127
    1e28:	80 e8       	ldi	r24, 0x80	; 128
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	08 95       	ret

00001e30 <__fp_nan>:
    1e30:	9f ef       	ldi	r25, 0xFF	; 255
    1e32:	80 ec       	ldi	r24, 0xC0	; 192
    1e34:	08 95       	ret

00001e36 <__fp_pscA>:
    1e36:	00 24       	eor	r0, r0
    1e38:	0a 94       	dec	r0
    1e3a:	16 16       	cp	r1, r22
    1e3c:	17 06       	cpc	r1, r23
    1e3e:	18 06       	cpc	r1, r24
    1e40:	09 06       	cpc	r0, r25
    1e42:	08 95       	ret

00001e44 <__fp_pscB>:
    1e44:	00 24       	eor	r0, r0
    1e46:	0a 94       	dec	r0
    1e48:	12 16       	cp	r1, r18
    1e4a:	13 06       	cpc	r1, r19
    1e4c:	14 06       	cpc	r1, r20
    1e4e:	05 06       	cpc	r0, r21
    1e50:	08 95       	ret

00001e52 <__fp_round>:
    1e52:	09 2e       	mov	r0, r25
    1e54:	03 94       	inc	r0
    1e56:	00 0c       	add	r0, r0
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <__fp_round+0xc>
    1e5a:	88 23       	and	r24, r24
    1e5c:	52 f0       	brmi	.+20     	; 0x1e72 <__fp_round+0x20>
    1e5e:	bb 0f       	add	r27, r27
    1e60:	40 f4       	brcc	.+16     	; 0x1e72 <__fp_round+0x20>
    1e62:	bf 2b       	or	r27, r31
    1e64:	11 f4       	brne	.+4      	; 0x1e6a <__fp_round+0x18>
    1e66:	60 ff       	sbrs	r22, 0
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <__fp_round+0x20>
    1e6a:	6f 5f       	subi	r22, 0xFF	; 255
    1e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e70:	9f 4f       	sbci	r25, 0xFF	; 255
    1e72:	08 95       	ret

00001e74 <__fp_split3>:
    1e74:	57 fd       	sbrc	r21, 7
    1e76:	90 58       	subi	r25, 0x80	; 128
    1e78:	44 0f       	add	r20, r20
    1e7a:	55 1f       	adc	r21, r21
    1e7c:	59 f0       	breq	.+22     	; 0x1e94 <__fp_splitA+0x10>
    1e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e80:	71 f0       	breq	.+28     	; 0x1e9e <__fp_splitA+0x1a>
    1e82:	47 95       	ror	r20

00001e84 <__fp_splitA>:
    1e84:	88 0f       	add	r24, r24
    1e86:	97 fb       	bst	r25, 7
    1e88:	99 1f       	adc	r25, r25
    1e8a:	61 f0       	breq	.+24     	; 0x1ea4 <__fp_splitA+0x20>
    1e8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e8e:	79 f0       	breq	.+30     	; 0x1eae <__fp_splitA+0x2a>
    1e90:	87 95       	ror	r24
    1e92:	08 95       	ret
    1e94:	12 16       	cp	r1, r18
    1e96:	13 06       	cpc	r1, r19
    1e98:	14 06       	cpc	r1, r20
    1e9a:	55 1f       	adc	r21, r21
    1e9c:	f2 cf       	rjmp	.-28     	; 0x1e82 <__fp_split3+0xe>
    1e9e:	46 95       	lsr	r20
    1ea0:	f1 df       	rcall	.-30     	; 0x1e84 <__fp_splitA>
    1ea2:	08 c0       	rjmp	.+16     	; 0x1eb4 <__fp_splitA+0x30>
    1ea4:	16 16       	cp	r1, r22
    1ea6:	17 06       	cpc	r1, r23
    1ea8:	18 06       	cpc	r1, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	f1 cf       	rjmp	.-30     	; 0x1e90 <__fp_splitA+0xc>
    1eae:	86 95       	lsr	r24
    1eb0:	71 05       	cpc	r23, r1
    1eb2:	61 05       	cpc	r22, r1
    1eb4:	08 94       	sec
    1eb6:	08 95       	ret

00001eb8 <__fp_zero>:
    1eb8:	e8 94       	clt

00001eba <__fp_szero>:
    1eba:	bb 27       	eor	r27, r27
    1ebc:	66 27       	eor	r22, r22
    1ebe:	77 27       	eor	r23, r23
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	97 f9       	bld	r25, 7
    1ec4:	08 95       	ret

00001ec6 <__gesf2>:
    1ec6:	8a df       	rcall	.-236    	; 0x1ddc <__fp_cmp>
    1ec8:	08 f4       	brcc	.+2      	; 0x1ecc <__gesf2+0x6>
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	08 95       	ret

00001ece <__mulsf3>:
    1ece:	0b d0       	rcall	.+22     	; 0x1ee6 <__mulsf3x>
    1ed0:	c0 cf       	rjmp	.-128    	; 0x1e52 <__fp_round>
    1ed2:	b1 df       	rcall	.-158    	; 0x1e36 <__fp_pscA>
    1ed4:	28 f0       	brcs	.+10     	; 0x1ee0 <__mulsf3+0x12>
    1ed6:	b6 df       	rcall	.-148    	; 0x1e44 <__fp_pscB>
    1ed8:	18 f0       	brcs	.+6      	; 0x1ee0 <__mulsf3+0x12>
    1eda:	95 23       	and	r25, r21
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <__mulsf3+0x12>
    1ede:	a2 cf       	rjmp	.-188    	; 0x1e24 <__fp_inf>
    1ee0:	a7 cf       	rjmp	.-178    	; 0x1e30 <__fp_nan>
    1ee2:	11 24       	eor	r1, r1
    1ee4:	ea cf       	rjmp	.-44     	; 0x1eba <__fp_szero>

00001ee6 <__mulsf3x>:
    1ee6:	c6 df       	rcall	.-116    	; 0x1e74 <__fp_split3>
    1ee8:	a0 f3       	brcs	.-24     	; 0x1ed2 <__mulsf3+0x4>

00001eea <__mulsf3_pse>:
    1eea:	95 9f       	mul	r25, r21
    1eec:	d1 f3       	breq	.-12     	; 0x1ee2 <__mulsf3+0x14>
    1eee:	95 0f       	add	r25, r21
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	62 9f       	mul	r22, r18
    1ef6:	f0 01       	movw	r30, r0
    1ef8:	72 9f       	mul	r23, r18
    1efa:	bb 27       	eor	r27, r27
    1efc:	f0 0d       	add	r31, r0
    1efe:	b1 1d       	adc	r27, r1
    1f00:	63 9f       	mul	r22, r19
    1f02:	aa 27       	eor	r26, r26
    1f04:	f0 0d       	add	r31, r0
    1f06:	b1 1d       	adc	r27, r1
    1f08:	aa 1f       	adc	r26, r26
    1f0a:	64 9f       	mul	r22, r20
    1f0c:	66 27       	eor	r22, r22
    1f0e:	b0 0d       	add	r27, r0
    1f10:	a1 1d       	adc	r26, r1
    1f12:	66 1f       	adc	r22, r22
    1f14:	82 9f       	mul	r24, r18
    1f16:	22 27       	eor	r18, r18
    1f18:	b0 0d       	add	r27, r0
    1f1a:	a1 1d       	adc	r26, r1
    1f1c:	62 1f       	adc	r22, r18
    1f1e:	73 9f       	mul	r23, r19
    1f20:	b0 0d       	add	r27, r0
    1f22:	a1 1d       	adc	r26, r1
    1f24:	62 1f       	adc	r22, r18
    1f26:	83 9f       	mul	r24, r19
    1f28:	a0 0d       	add	r26, r0
    1f2a:	61 1d       	adc	r22, r1
    1f2c:	22 1f       	adc	r18, r18
    1f2e:	74 9f       	mul	r23, r20
    1f30:	33 27       	eor	r19, r19
    1f32:	a0 0d       	add	r26, r0
    1f34:	61 1d       	adc	r22, r1
    1f36:	23 1f       	adc	r18, r19
    1f38:	84 9f       	mul	r24, r20
    1f3a:	60 0d       	add	r22, r0
    1f3c:	21 1d       	adc	r18, r1
    1f3e:	82 2f       	mov	r24, r18
    1f40:	76 2f       	mov	r23, r22
    1f42:	6a 2f       	mov	r22, r26
    1f44:	11 24       	eor	r1, r1
    1f46:	9f 57       	subi	r25, 0x7F	; 127
    1f48:	50 40       	sbci	r21, 0x00	; 0
    1f4a:	8a f0       	brmi	.+34     	; 0x1f6e <__mulsf3_pse+0x84>
    1f4c:	e1 f0       	breq	.+56     	; 0x1f86 <__mulsf3_pse+0x9c>
    1f4e:	88 23       	and	r24, r24
    1f50:	4a f0       	brmi	.+18     	; 0x1f64 <__mulsf3_pse+0x7a>
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	bb 1f       	adc	r27, r27
    1f58:	66 1f       	adc	r22, r22
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	91 50       	subi	r25, 0x01	; 1
    1f60:	50 40       	sbci	r21, 0x00	; 0
    1f62:	a9 f7       	brne	.-22     	; 0x1f4e <__mulsf3_pse+0x64>
    1f64:	9e 3f       	cpi	r25, 0xFE	; 254
    1f66:	51 05       	cpc	r21, r1
    1f68:	70 f0       	brcs	.+28     	; 0x1f86 <__mulsf3_pse+0x9c>
    1f6a:	5c cf       	rjmp	.-328    	; 0x1e24 <__fp_inf>
    1f6c:	a6 cf       	rjmp	.-180    	; 0x1eba <__fp_szero>
    1f6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f70:	ec f3       	brlt	.-6      	; 0x1f6c <__mulsf3_pse+0x82>
    1f72:	98 3e       	cpi	r25, 0xE8	; 232
    1f74:	dc f3       	brlt	.-10     	; 0x1f6c <__mulsf3_pse+0x82>
    1f76:	86 95       	lsr	r24
    1f78:	77 95       	ror	r23
    1f7a:	67 95       	ror	r22
    1f7c:	b7 95       	ror	r27
    1f7e:	f7 95       	ror	r31
    1f80:	e7 95       	ror	r30
    1f82:	9f 5f       	subi	r25, 0xFF	; 255
    1f84:	c1 f7       	brne	.-16     	; 0x1f76 <__mulsf3_pse+0x8c>
    1f86:	fe 2b       	or	r31, r30
    1f88:	88 0f       	add	r24, r24
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	96 95       	lsr	r25
    1f8e:	87 95       	ror	r24
    1f90:	97 f9       	bld	r25, 7
    1f92:	08 95       	ret

00001f94 <__divmodhi4>:
    1f94:	97 fb       	bst	r25, 7
    1f96:	09 2e       	mov	r0, r25
    1f98:	07 26       	eor	r0, r23
    1f9a:	0a d0       	rcall	.+20     	; 0x1fb0 <__divmodhi4_neg1>
    1f9c:	77 fd       	sbrc	r23, 7
    1f9e:	04 d0       	rcall	.+8      	; 0x1fa8 <__divmodhi4_neg2>
    1fa0:	0c d0       	rcall	.+24     	; 0x1fba <__udivmodhi4>
    1fa2:	06 d0       	rcall	.+12     	; 0x1fb0 <__divmodhi4_neg1>
    1fa4:	00 20       	and	r0, r0
    1fa6:	1a f4       	brpl	.+6      	; 0x1fae <__divmodhi4_exit>

00001fa8 <__divmodhi4_neg2>:
    1fa8:	70 95       	com	r23
    1faa:	61 95       	neg	r22
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255

00001fae <__divmodhi4_exit>:
    1fae:	08 95       	ret

00001fb0 <__divmodhi4_neg1>:
    1fb0:	f6 f7       	brtc	.-4      	; 0x1fae <__divmodhi4_exit>
    1fb2:	90 95       	com	r25
    1fb4:	81 95       	neg	r24
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	08 95       	ret

00001fba <__udivmodhi4>:
    1fba:	aa 1b       	sub	r26, r26
    1fbc:	bb 1b       	sub	r27, r27
    1fbe:	51 e1       	ldi	r21, 0x11	; 17
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <__udivmodhi4_ep>

00001fc2 <__udivmodhi4_loop>:
    1fc2:	aa 1f       	adc	r26, r26
    1fc4:	bb 1f       	adc	r27, r27
    1fc6:	a6 17       	cp	r26, r22
    1fc8:	b7 07       	cpc	r27, r23
    1fca:	10 f0       	brcs	.+4      	; 0x1fd0 <__udivmodhi4_ep>
    1fcc:	a6 1b       	sub	r26, r22
    1fce:	b7 0b       	sbc	r27, r23

00001fd0 <__udivmodhi4_ep>:
    1fd0:	88 1f       	adc	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	5a 95       	dec	r21
    1fd6:	a9 f7       	brne	.-22     	; 0x1fc2 <__udivmodhi4_loop>
    1fd8:	80 95       	com	r24
    1fda:	90 95       	com	r25
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	08 95       	ret

00001fe2 <__eerd_byte_m16>:
    1fe2:	e1 99       	sbic	0x1c, 1	; 28
    1fe4:	fe cf       	rjmp	.-4      	; 0x1fe2 <__eerd_byte_m16>
    1fe6:	9f bb       	out	0x1f, r25	; 31
    1fe8:	8e bb       	out	0x1e, r24	; 30
    1fea:	e0 9a       	sbi	0x1c, 0	; 28
    1fec:	99 27       	eor	r25, r25
    1fee:	8d b3       	in	r24, 0x1d	; 29
    1ff0:	08 95       	ret

00001ff2 <__eewr_byte_m16>:
    1ff2:	26 2f       	mov	r18, r22

00001ff4 <__eewr_r18_m16>:
    1ff4:	e1 99       	sbic	0x1c, 1	; 28
    1ff6:	fe cf       	rjmp	.-4      	; 0x1ff4 <__eewr_r18_m16>
    1ff8:	9f bb       	out	0x1f, r25	; 31
    1ffa:	8e bb       	out	0x1e, r24	; 30
    1ffc:	2d bb       	out	0x1d, r18	; 29
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	e2 9a       	sbi	0x1c, 2	; 28
    2004:	e1 9a       	sbi	0x1c, 1	; 28
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	08 95       	ret

0000200c <_exit>:
    200c:	f8 94       	cli

0000200e <__stop_program>:
    200e:	ff cf       	rjmp	.-2      	; 0x200e <__stop_program>
