
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000013da  0000146e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d7  008000c2  008000c2  000014d0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000057e  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165f  00000000  00000000  00001a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c6  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000146a  00000000  00000000  00003493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000594  00000000  00000000  00004ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e2  00000000  00000000  00005234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00005916  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 06 	call	0xd9a	; 0xd9a <main>
      8a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <port_init>:


//PORT INITIALIZE
void port_init(void)
{
 PORTA = 0xFF;
      92:	8f ef       	ldi	r24, 0xFF	; 255
      94:	8b bb       	out	0x1b, r24	; 27
 DDRA  = 0x00;
      96:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0xFF;  
      98:	88 bb       	out	0x18, r24	; 24
 DDRB  = 0x00;
      9a:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00; //m103 output only
      9c:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xFF;
      9e:	84 bb       	out	0x14, r24	; 20
 PORTD = 0xFF;
      a0:	82 bb       	out	0x12, r24	; 18
 DDRD  = 0x00;
      a2:	11 ba       	out	0x11, r1	; 17
}
      a4:	08 95       	ret

000000a6 <pwm1_init>:

//PWM1 INITIALIZE
void pwm1_init(void)
{

 PWM1A_DIR=1;
      a6:	8c 9a       	sbi	0x11, 4	; 17
 PWM1B_DIR=1;
      a8:	8d 9a       	sbi	0x11, 5	; 17
 TCCR1B = 0x00; //stop
      aa:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0x00; //setup
      ac:	1d bc       	out	0x2d, r1	; 45
 TCNT1L = 0x00;
      ae:	1c bc       	out	0x2c, r1	; 44
 OCR1AH = 0x00;
      b0:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0x00;
      b2:	1a bc       	out	0x2a, r1	; 42
 OCR1BH = 0x00;
      b4:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0x00;
      b6:	18 bc       	out	0x28, r1	; 40
 ICR1H  = 0x01;// 0x03 For Max Limit 999
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	87 bd       	out	0x27, r24	; 39
 ICR1L  = 0x8F;// 0xE7 For Max Limit 999
      bc:	8f e8       	ldi	r24, 0x8F	; 143
      be:	86 bd       	out	0x26, r24	; 38
 TCCR1A = 0xA2;
      c0:	82 ea       	ldi	r24, 0xA2	; 162
      c2:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x19; //start Timer
      c4:	89 e1       	ldi	r24, 0x19	; 25
      c6:	8e bd       	out	0x2e, r24	; 46
}
      c8:	08 95       	ret

000000ca <adc_init>:

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
      ca:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
      cc:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
      ce:	80 e6       	ldi	r24, 0x60	; 96
      d0:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
      d2:	87 e8       	ldi	r24, 0x87	; 135
      d4:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
      d6:	80 e8       	ldi	r24, 0x80	; 128
      d8:	88 b9       	out	0x08, r24	; 8
}
      da:	08 95       	ret

000000dc <adc_start>:
//ADC START
unsigned char adc_start(unsigned char channel)
{
 unsigned char i;
 
     ADCH=0x00;
      dc:	15 b8       	out	0x05, r1	; 5

	 i=channel&0x07;
	 ADMUX=i|0x60;                //i|0x40 for 10 bits
      de:	87 70       	andi	r24, 0x07	; 7
      e0:	80 66       	ori	r24, 0x60	; 96
      e2:	87 b9       	out	0x07, r24	; 7
	 ADCSRA|=1<<ADSC;
      e4:	36 9a       	sbi	0x06, 6	; 6
	   
		 while(ADCSRA & (1<<ADSC));       // wait for conv. to complete
      e6:	36 99       	sbic	0x06, 6	; 6
      e8:	fe cf       	rjmp	.-4      	; 0xe6 <adc_start+0xa>
		    unsigned char temp=ADCH;      //unsigned int temp=ADC;   for 10 bits
      ea:	85 b1       	in	r24, 0x05	; 5
   
 return temp;
}
      ec:	08 95       	ret

000000ee <delay_sec>:

//DELAY FUNCTIONS
void delay_sec(int x)
{
      ee:	ac 01       	movw	r20, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      f2:	60 e9       	ldi	r22, 0x90	; 144
      f4:	71 e0       	ldi	r23, 0x01	; 1
      f6:	0c c0       	rjmp	.+24     	; 0x110 <delay_sec+0x22>
      f8:	fb 01       	movw	r30, r22
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <delay_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     100:	d9 f7       	brne	.-10     	; 0xf8 <delay_sec+0xa>
 unsigned char i,j;
 for(i=0;i<x;i++)
  for(j=0;j<4;j++)
     102:	2f 5f       	subi	r18, 0xFF	; 255
     104:	24 30       	cpi	r18, 0x04	; 4
     106:	19 f0       	breq	.+6      	; 0x10e <delay_sec+0x20>
     108:	84 ec       	ldi	r24, 0xC4	; 196
     10a:	99 e0       	ldi	r25, 0x09	; 9
     10c:	f5 cf       	rjmp	.-22     	; 0xf8 <delay_sec+0xa>

//DELAY FUNCTIONS
void delay_sec(int x)
{
 unsigned char i,j;
 for(i=0;i<x;i++)
     10e:	3f 5f       	subi	r19, 0xFF	; 255
     110:	83 2f       	mov	r24, r19
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	84 17       	cp	r24, r20
     116:	95 07       	cpc	r25, r21
     118:	14 f4       	brge	.+4      	; 0x11e <delay_sec+0x30>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <delay_sec+0x1a>
     11e:	08 95       	ret

00000120 <delay_millisec>:
  for(j=0;j<4;j++)
   _delay_ms(250);
}

void delay_millisec(int n)
{
     120:	af 92       	push	r10
     122:	bf 92       	push	r11
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
	_delay_ms(n);
     130:	aa 27       	eor	r26, r26
     132:	97 fd       	sbrc	r25, 7
     134:	a0 95       	com	r26
     136:	ba 2f       	mov	r27, r26
     138:	bc 01       	movw	r22, r24
     13a:	cd 01       	movw	r24, r26
     13c:	0e 94 98 08 	call	0x1130	; 0x1130 <__floatsisf>
     140:	5b 01       	movw	r10, r22
     142:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4a e7       	ldi	r20, 0x7A	; 122
     14a:	55 e4       	ldi	r21, 0x45	; 69
     14c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     150:	7b 01       	movw	r14, r22
     152:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	40 e8       	ldi	r20, 0x80	; 128
     15a:	5f e3       	ldi	r21, 0x3F	; 63
     15c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	1c f4       	brge	.+6      	; 0x16a <delay_millisec+0x4a>
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	24 c0       	rjmp	.+72     	; 0x1b2 <delay_millisec+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     16a:	c8 01       	movw	r24, r16
     16c:	b7 01       	movw	r22, r14
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	0e 94 48 09 	call	0x1290	; 0x1290 <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	b4 f4       	brge	.+44     	; 0x1aa <delay_millisec+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	c6 01       	movw	r24, r12
     180:	b5 01       	movw	r22, r10
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e2       	ldi	r20, 0x20	; 32
     188:	51 e4       	ldi	r21, 0x41	; 65
     18a:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     18e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     192:	80 e9       	ldi	r24, 0x90	; 144
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <delay_millisec+0x82>
     198:	fc 01       	movw	r30, r24
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <delay_millisec+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	61 50       	subi	r22, 0x01	; 1
     1a0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	c1 f7       	brne	.-16     	; 0x198 <delay_millisec+0x78>
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <delay_millisec+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1aa:	c8 01       	movw	r24, r16
     1ac:	b7 01       	movw	r22, r14
     1ae:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     1b2:	cb 01       	movw	r24, r22
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <delay_millisec+0x94>
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <delay_microsec>:

void delay_microsec(int n)
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
	_delay_us(n);
     1da:	aa 27       	eor	r26, r26
     1dc:	97 fd       	sbrc	r25, 7
     1de:	a0 95       	com	r26
     1e0:	ba 2f       	mov	r27, r26
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 98 08 	call	0x1130	; 0x1130 <__floatsisf>
     1ea:	5b 01       	movw	r10, r22
     1ec:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     1ee:	2b ea       	ldi	r18, 0xAB	; 171
     1f0:	3a ea       	ldi	r19, 0xAA	; 170
     1f2:	4a ea       	ldi	r20, 0xAA	; 170
     1f4:	50 e4       	ldi	r21, 0x40	; 64
     1f6:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     1fa:	7b 01       	movw	r14, r22
     1fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e8       	ldi	r20, 0x80	; 128
     204:	5f e3       	ldi	r21, 0x3F	; 63
     206:	0e 94 f9 07 	call	0xff2	; 0xff2 <__cmpsf2>
     20a:	88 23       	and	r24, r24
     20c:	14 f4       	brge	.+4      	; 0x212 <delay_microsec+0x48>
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	54 c0       	rjmp	.+168    	; 0x2ba <delay_microsec+0xf0>
		__ticks = 1;
	else if (__tmp > 255)
     212:	c8 01       	movw	r24, r16
     214:	b7 01       	movw	r22, r14
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4f e7       	ldi	r20, 0x7F	; 127
     21c:	53 e4       	ldi	r21, 0x43	; 67
     21e:	0e 94 48 09 	call	0x1290	; 0x1290 <__gesf2>
     222:	18 16       	cp	r1, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <delay_microsec+0x5e>
     226:	45 c0       	rjmp	.+138    	; 0x2b2 <delay_microsec+0xe8>
	{
		_delay_ms(__us / 1000.0);
     228:	c6 01       	movw	r24, r12
     22a:	b5 01       	movw	r22, r10
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4a e7       	ldi	r20, 0x7A	; 122
     232:	54 e4       	ldi	r21, 0x44	; 68
     234:	0e 94 fd 07 	call	0xffa	; 0xffa <__divsf3>
     238:	5b 01       	movw	r10, r22
     23a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	4a e7       	ldi	r20, 0x7A	; 122
     242:	55 e4       	ldi	r21, 0x45	; 69
     244:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     248:	7b 01       	movw	r14, r22
     24a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e8       	ldi	r20, 0x80	; 128
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	0e 94 f9 07 	call	0xff2	; 0xff2 <__cmpsf2>
     258:	88 23       	and	r24, r24
     25a:	1c f4       	brge	.+6      	; 0x262 <delay_microsec+0x98>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	24 c0       	rjmp	.+72     	; 0x2aa <delay_microsec+0xe0>
		__ticks = 1;
	else if (__tmp > 65535)
     262:	c8 01       	movw	r24, r16
     264:	b7 01       	movw	r22, r14
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	3f ef       	ldi	r19, 0xFF	; 255
     26a:	4f e7       	ldi	r20, 0x7F	; 127
     26c:	57 e4       	ldi	r21, 0x47	; 71
     26e:	0e 94 48 09 	call	0x1290	; 0x1290 <__gesf2>
     272:	18 16       	cp	r1, r24
     274:	b4 f4       	brge	.+44     	; 0x2a2 <delay_microsec+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	c6 01       	movw	r24, r12
     278:	b5 01       	movw	r22, r10
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e2       	ldi	r20, 0x20	; 32
     280:	51 e4       	ldi	r21, 0x41	; 65
     282:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     286:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     28a:	80 e9       	ldi	r24, 0x90	; 144
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <delay_microsec+0xd0>
     290:	fc 01       	movw	r30, r24
     292:	31 97       	sbiw	r30, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <delay_microsec+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     296:	61 50       	subi	r22, 0x01	; 1
     298:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     29a:	61 15       	cp	r22, r1
     29c:	71 05       	cpc	r23, r1
     29e:	c1 f7       	brne	.-16     	; 0x290 <delay_microsec+0xc6>
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <delay_microsec+0xf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2a2:	c8 01       	movw	r24, r16
     2a4:	b7 01       	movw	r22, r14
     2a6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     2aa:	cb 01       	movw	r24, r22
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <delay_microsec+0xe2>
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <delay_microsec+0xf4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2b2:	c8 01       	movw	r24, r16
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ba:	6a 95       	dec	r22
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <delay_microsec+0xf0>
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	df 90       	pop	r13
     2c8:	cf 90       	pop	r12
     2ca:	bf 90       	pop	r11
     2cc:	af 90       	pop	r10
     2ce:	08 95       	ret

000002d0 <check_sensors>:

//CHECK THE SENSOR VALUES
void check_sensors(void)
{
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
sensorbyte=0;
     2d8:	10 92 c2 00 	sts	0x00C2, r1
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
	  if(temp[i]<threshold)
	  sensorbyte|=(1<<i);
     2e0:	01 e0       	ldi	r16, 0x01	; 1
     2e2:	10 e0       	ldi	r17, 0x00	; 0
unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
	 {
	 
	  temp[i]=adc_start(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
	  if(temp[i]<threshold)
     2ea:	86 34       	cpi	r24, 0x46	; 70
     2ec:	60 f4       	brcc	.+24     	; 0x306 <check_sensors+0x36>
	  sensorbyte|=(1<<i);
     2ee:	98 01       	movw	r18, r16
     2f0:	0c 2e       	mov	r0, r28
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <check_sensors+0x28>
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <check_sensors+0x24>
     2fc:	80 91 c2 00 	lds	r24, 0x00C2
     300:	82 2b       	or	r24, r18
     302:	80 93 c2 00 	sts	0x00C2, r24
     306:	21 96       	adiw	r28, 0x01	; 1
{
sensorbyte=0;

unsigned char i,temp[sensor_num];

	 for(i=0;i<sensor_num;i++)
     308:	c4 30       	cpi	r28, 0x04	; 4
     30a:	d1 05       	cpc	r29, r1
     30c:	59 f7       	brne	.-42     	; 0x2e4 <check_sensors+0x14>
	  /*
	  if(temp[i]<threshold1[i])         // use for calibration
	  sensorbyte|=(1<<i);
	 */
	 } 
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <calibrate_white>:
{
	unsigned char j,i,temp[sensor_num];

	for(j=0;j<sensor_num;j++) 
	 {
		  max[j]=adc_start(j);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     31e:	80 93 83 01 	sts	0x0183, r24
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     328:	80 93 84 01 	sts	0x0184, r24
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     332:	80 93 85 01 	sts	0x0185, r24
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     33c:	80 93 86 01 	sts	0x0186, r24
	}

		
}
     340:	08 95       	ret

00000342 <calibrate_black>:

	unsigned char j,i,temp[sensor_num];
	 
	 for(j=0;j<sensor_num;j++) 
	 {
		  min[j]=adc_start(j);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     348:	80 93 8b 01 	sts	0x018B, r24
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     352:	80 93 8c 01 	sts	0x018C, r24
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     35c:	80 93 8d 01 	sts	0x018D, r24
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_start>
     366:	80 93 8e 01 	sts	0x018E, r24
 	}

		
}
     36a:	08 95       	ret

0000036c <flick>:
	 
}

//LED FLICKER FUNCTION
void flick (void)
{
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	c0 e0       	ldi	r28, 0x00	; 0
     374:	d0 e0       	ldi	r29, 0x00	; 0
unsigned int i=0;

	for(i=0;i<5;i++)
	{
		LED=0xff;
     376:	1f ef       	ldi	r17, 0xFF	; 255
     378:	15 bb       	out	0x15, r17	; 21
		delay_millisec(100);
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
		LED=0x00;
     382:	15 ba       	out	0x15, r1	; 21
		delay_millisec(100);
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
//LED FLICKER FUNCTION
void flick (void)
{
unsigned int i=0;

	for(i=0;i<5;i++)
     38c:	21 96       	adiw	r28, 0x01	; 1
     38e:	c5 30       	cpi	r28, 0x05	; 5
     390:	d1 05       	cpc	r29, r1
     392:	91 f7       	brne	.-28     	; 0x378 <flick+0xc>
		delay_millisec(100);
		LED=0x00;
		delay_millisec(100);
	}

}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	08 95       	ret

0000039c <set_pwm1a>:

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     39c:	9b bd       	out	0x2b, r25	; 43
     39e:	8a bd       	out	0x2a, r24	; 42
}
     3a0:	08 95       	ret

000003a2 <set_pwm1b>:

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     3a2:	99 bd       	out	0x29, r25	; 41
     3a4:	88 bd       	out	0x28, r24	; 40
}
     3a6:	08 95       	ret

000003a8 <lcd_busy_loop>:
}

void lcd_busy_loop(void)
{
	uint8_t busy,status=0x00,temp;
	LCD_DATA_DDR&=0xF0;
     3a8:	87 b3       	in	r24, 0x17	; 23
     3aa:	80 7f       	andi	r24, 0xF0	; 240
     3ac:	87 bb       	out	0x17, r24	; 23
	SET_RW();		//Read mode
     3ae:	c6 9a       	sbi	0x18, 6	; 24
	CLEAR_RS();		//Read status
     3b0:	c5 98       	cbi	0x18, 5	; 24
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_busy_loop+0xc>
	_delay_us(0.5);		//tAS
	do
	{

		SET_E();
     3b8:	22 e0       	ldi	r18, 0x02	; 2
     3ba:	35 e0       	ldi	r19, 0x05	; 5
     3bc:	c7 9a       	sbi	0x18, 7	; 24
     3be:	82 2f       	mov	r24, r18
     3c0:	8a 95       	dec	r24
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_busy_loop+0x18>
		_delay_us(0.5);
		status=LCD_DATA_PIN;
     3c4:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     3c6:	82 95       	swap	r24
     3c8:	80 7f       	andi	r24, 0xF0	; 240
     3ca:	92 2f       	mov	r25, r18
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <lcd_busy_loop+0x24>
		_delay_us(0.5);
		CLEAR_E();
     3d0:	c7 98       	cbi	0x18, 7	; 24
     3d2:	93 2f       	mov	r25, r19
     3d4:	9a 95       	dec	r25
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <lcd_busy_loop+0x2c>
		_delay_us(1);	//tEL
		SET_E();
     3d8:	c7 9a       	sbi	0x18, 7	; 24
     3da:	92 2f       	mov	r25, r18
     3dc:	9a 95       	dec	r25
     3de:	f1 f7       	brne	.-4      	; 0x3dc <lcd_busy_loop+0x34>
		_delay_us(0.5);
		temp=LCD_DATA_PIN;
     3e0:	96 b3       	in	r25, 0x16	; 22
     3e2:	92 2f       	mov	r25, r18
     3e4:	9a 95       	dec	r25
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <lcd_busy_loop+0x3c>
		temp&=0x0F;
		status=status|temp;
		busy=status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
     3e8:	c7 98       	cbi	0x18, 7	; 24
     3ea:	93 2f       	mov	r25, r19
     3ec:	9a 95       	dec	r25
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_busy_loop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <lcd_busy_loop+0x14>
CLEAR_RW();		//write mode
     3f4:	c6 98       	cbi	0x18, 6	; 24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     3f6:	87 b3       	in	r24, 0x17	; 23
     3f8:	8f 60       	ori	r24, 0x0F	; 15
     3fa:	87 bb       	out	0x17, r24	; 23

}
     3fc:	08 95       	ret

000003fe <lcd_byte>:
 #define DDR(x) _CONCAT(DDR,x)


//LCD FUNCTIONS
void lcd_byte(uint8_t c,uint8_t isdata)
{
     3fe:	28 2f       	mov	r18, r24
uint8_t hn,ln;			//Nibbles
uint8_t temp;
hn=c>>4;
ln=(c & 0x0F);
if(isdata==0)
     400:	66 23       	and	r22, r22
     402:	11 f4       	brne	.+4      	; 0x408 <lcd_byte+0xa>
	CLEAR_RS();
     404:	c5 98       	cbi	0x18, 5	; 24
     406:	01 c0       	rjmp	.+2      	; 0x40a <lcd_byte+0xc>
else
	SET_RS();
     408:	c5 9a       	sbi	0x18, 5	; 24
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	8a 95       	dec	r24
     40e:	f1 f7       	brne	.-4      	; 0x40c <lcd_byte+0xe>
_delay_us(0.500);		//tAS
SET_E();
     410:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(hn);
     412:	88 b3       	in	r24, 0x18	; 24
     414:	92 2f       	mov	r25, r18
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     41e:	98 bb       	out	0x18, r25	; 24
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	89 2f       	mov	r24, r25
     424:	8a 95       	dec	r24
     426:	f1 f7       	brne	.-4      	; 0x424 <lcd_byte+0x26>
_delay_us(1);			//the
CLEAR_E();
     428:	c7 98       	cbi	0x18, 7	; 24
     42a:	89 2f       	mov	r24, r25
     42c:	8a 95       	dec	r24
     42e:	f1 f7       	brne	.-4      	; 0x42c <lcd_byte+0x2e>
_delay_us(1);
SET_E();
     430:	c7 9a       	sbi	0x18, 7	; 24
temp=(LCD_DATA_PORT & 0XF0)|(ln);
     432:	88 b3       	in	r24, 0x18	; 24
     434:	2f 70       	andi	r18, 0x0F	; 15
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	82 2b       	or	r24, r18
LCD_DATA_PORT=temp;
     43a:	88 bb       	out	0x18, r24	; 24
     43c:	89 2f       	mov	r24, r25
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <lcd_byte+0x40>
_delay_us(1);			//tEH
CLEAR_E();
     442:	c7 98       	cbi	0x18, 7	; 24
     444:	9a 95       	dec	r25
     446:	f1 f7       	brne	.-4      	; 0x444 <lcd_byte+0x46>
_delay_us(1);			//tEL
lcd_busy_loop();
     448:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
}
     44c:	08 95       	ret

0000044e <lcd_init>:
	LCD_DATA_DDR|=0x0F;

}

void lcd_init(uint8_t style)
{
     44e:	1f 93       	push	r17
     450:	18 2f       	mov	r17, r24
     452:	8c e2       	ldi	r24, 0x2C	; 44
     454:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     456:	20 e9       	ldi	r18, 0x90	; 144
     458:	31 e0       	ldi	r19, 0x01	; 1
     45a:	f9 01       	movw	r30, r18
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_init+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     462:	d9 f7       	brne	.-10     	; 0x45a <lcd_init+0xc>
	
_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     464:	87 b3       	in	r24, 0x17	; 23
     466:	8f 60       	ori	r24, 0x0F	; 15
     468:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     46a:	bf 9a       	sbi	0x17, 7	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     46c:	bd 9a       	sbi	0x17, 5	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     46e:	be 9a       	sbi	0x17, 6	; 23

	LCD_DATA_PORT&=0XF0;
     470:	88 b3       	in	r24, 0x18	; 24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     476:	c7 98       	cbi	0x18, 7	; 24
	CLEAR_RW();
     478:	c6 98       	cbi	0x18, 6	; 24
	CLEAR_RS();
     47a:	c5 98       	cbi	0x18, 5	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
	_delay_us(0.3);	//tAS
	SET_E();
     482:	c7 9a       	sbi	0x18, 7	; 24
	LCD_DATA_PORT|=(0b00000010);
     484:	c1 9a       	sbi	0x18, 1	; 24
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	98 2f       	mov	r25, r24
     48a:	9a 95       	dec	r25
     48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
	_delay_us(1);
	CLEAR_E();
     48e:	c7 98       	cbi	0x18, 7	; 24
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <__stack+0x31>
	_delay_us(1);
	lcd_busy_loop();                                    //[B] Forgot this delay
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <lcd_busy_loop>
	lcd_cmd (0b00001100|style);	//Display On
     498:	81 2f       	mov	r24, r17
     49a:	8c 60       	ori	r24, 0x0C	; 12
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <lcd_write_string>:
void lcd_write_string(const char *msg)
{
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <lcd_write_string+0x10>
while(*msg!='\0')
 {
	lcd_data (*msg);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	msg++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	lcd_cmd (0b00001100|style);	//Display On
	lcd_cmd (0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void lcd_write_string(const char *msg)
{
while(*msg!='\0')
     4be:	88 81       	ld	r24, Y
     4c0:	88 23       	and	r24, r24
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <lcd_write_string+0x8>
 {
	lcd_data (*msg);
	msg++;
 }
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <lcd_write_int>:

void lcd_write_int(int val,unsigned int field_length)
{
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_write_int+0xe>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <lcd_write_int+0x10>
     4da:	0f 92       	push	r0
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	9c 01       	movw	r18, r24
     4e2:	8b 01       	movw	r16, r22
	char str[5]={0,0,0,0,0};
     4e4:	fe 01       	movw	r30, r28
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	85 e0       	ldi	r24, 0x05	; 5
     4ea:	df 01       	movw	r26, r30
     4ec:	1d 92       	st	X+, r1
     4ee:	8a 95       	dec	r24
     4f0:	e9 f7       	brne	.-6      	; 0x4ec <lcd_write_int+0x22>
     4f2:	fe 01       	movw	r30, r28
     4f4:	35 96       	adiw	r30, 0x05	; 5
     4f6:	0d c0       	rjmp	.+26     	; 0x512 <lcd_write_int+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     4f8:	c9 01       	movw	r24, r18
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	0e 94 af 09 	call	0x135e	; 0x135e <__divmodhi4>
     502:	80 83       	st	Z, r24
	val=val/10;
     504:	c9 01       	movw	r24, r18
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	0e 94 af 09 	call	0x135e	; 0x135e <__divmodhi4>
     50e:	9b 01       	movw	r18, r22
     510:	31 97       	sbiw	r30, 0x01	; 1

void lcd_write_int(int val,unsigned int field_length)
{
	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     512:	21 15       	cp	r18, r1
     514:	31 05       	cpc	r19, r1
     516:	81 f7       	brne	.-32     	; 0x4f8 <lcd_write_int+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     518:	bf ef       	ldi	r27, 0xFF	; 255
     51a:	0f 3f       	cpi	r16, 0xFF	; 255
     51c:	1b 07       	cpc	r17, r27
     51e:	79 f4       	brne	.+30     	; 0x53e <lcd_write_int+0x74>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     524:	ae 01       	movw	r20, r28
     526:	4f 5f       	subi	r20, 0xFF	; 255
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	02 c0       	rjmp	.+4      	; 0x530 <lcd_write_int+0x66>
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	fa 01       	movw	r30, r20
     532:	e2 0f       	add	r30, r18
     534:	f3 1f       	adc	r31, r19
     536:	80 81       	ld	r24, Z
     538:	88 23       	and	r24, r24
     53a:	c1 f3       	breq	.-16     	; 0x52c <lcd_write_int+0x62>
     53c:	04 c0       	rjmp	.+8      	; 0x546 <lcd_write_int+0x7c>
	else
		j=5-field_length;
     53e:	25 e0       	ldi	r18, 0x05	; 5
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	20 1b       	sub	r18, r16
     544:	31 0b       	sbc	r19, r17
     546:	7e 01       	movw	r14, r28
     548:	08 94       	sec
     54a:	e1 1c       	adc	r14, r1
     54c:	f1 1c       	adc	r15, r1
     54e:	e2 0e       	add	r14, r18
     550:	f3 1e       	adc	r15, r19
     552:	89 01       	movw	r16, r18
     554:	09 c0       	rjmp	.+18     	; 0x568 <lcd_write_int+0x9e>

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
	{
	lcd_data (48+str[i]);
     556:	f7 01       	movw	r30, r14
     558:	81 91       	ld	r24, Z+
     55a:	7f 01       	movw	r14, r30
     55c:	80 5d       	subi	r24, 0xD0	; 208
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_data ('-');
	for(i=j;i<5;i++)
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	05 30       	cpi	r16, 0x05	; 5
     56a:	11 05       	cpc	r17, r1
     56c:	a4 f3       	brlt	.-24     	; 0x556 <lcd_write_int+0x8c>
	{
	lcd_data (48+str[i]);
	}
}
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <lcd_goto_xy>:
void lcd_goto_xy(uint8_t x,uint8_t y)
{
 if(x<40)
     586:	88 32       	cpi	r24, 0x28	; 40
     588:	30 f4       	brcc	.+12     	; 0x596 <lcd_goto_xy+0x10>
 {
  if(y) x|=0b01000000;
     58a:	61 11       	cpse	r22, r1
     58c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  lcd_cmd (x);
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
     596:	08 95       	ret

00000598 <lcd_write_string_xy>:
  }
}
void lcd_write_string_xy(int x,int y,char *msg)
 {
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	8a 01       	movw	r16, r20
 lcd_goto_xy(x,y);
     59e:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_string(msg);
     5a2:	c8 01       	movw	r24, r16
     5a4:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
}
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	08 95       	ret

000005ae <lcd_write_int_xy>:

void lcd_write_int_xy(int x,int y,int val,int fl) {
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	8a 01       	movw	r16, r20
     5b8:	79 01       	movw	r14, r18
 lcd_goto_xy(x,y);
     5ba:	0e 94 c3 02 	call	0x586	; 0x586 <lcd_goto_xy>
 lcd_write_int(val,fl);
     5be:	c8 01       	movw	r24, r16
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_write_int>
}
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <usart_init>:

//USART COMMANDS
void usart_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
     5d0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
     5d2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (URSEL) | 0x06;
     5d4:	87 e0       	ldi	r24, 0x07	; 7
     5d6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x67; //set baud rate lo
     5d8:	87 e6       	ldi	r24, 0x67	; 103
     5da:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
     5dc:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x98;
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
}
     5e2:	08 95       	ret

000005e4 <usart_transmit_char>:
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5e4:	5d 9b       	sbis	0x0b, 5	; 11
     5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <usart_transmit_char>
;
/* Put data into buffer, sends the data */
UDR = data;
     5e8:	8c b9       	out	0x0c, r24	; 12
}
     5ea:	08 95       	ret

000005ec <usart_transmit_string>:

void usart_transmit_string(char *msg )
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <usart_transmit_string+0xc>
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     5f0:	5d 9b       	sbis	0x0b, 5	; 11
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <usart_transmit_string+0x4>
;
/* Put data into buffer, sends the data */
UDR = data;
     5f4:	8c b9       	out	0x0c, r24	; 12
void usart_transmit_string(char *msg )
{
while(*msg!='\0')
 {
	usart_transmit_char(*msg);
	msg++;
     5f6:	31 96       	adiw	r30, 0x01	; 1
UDR = data;
}

void usart_transmit_string(char *msg )
{
while(*msg!='\0')
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	c9 f7       	brne	.-14     	; 0x5f0 <usart_transmit_string+0x4>
 {
	usart_transmit_char(*msg);
	msg++;
 }
}
     5fe:	08 95       	ret

00000600 <usart_transmit_newline>:
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     600:	5d 9b       	sbis	0x0b, 5	; 11
     602:	fe cf       	rjmp	.-4      	; 0x600 <usart_transmit_newline>
;
/* Put data into buffer, sends the data */
UDR = data;
     604:	8a e0       	ldi	r24, 0x0A	; 10
     606:	8c b9       	out	0x0c, r24	; 12
 UCSRB = 0x98;
}
void usart_transmit_char( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     608:	5d 9b       	sbis	0x0b, 5	; 11
     60a:	fe cf       	rjmp	.-4      	; 0x608 <usart_transmit_newline+0x8>
;
/* Put data into buffer, sends the data */
UDR = data;
     60c:	8d e0       	ldi	r24, 0x0D	; 13
     60e:	8c b9       	out	0x0c, r24	; 12
}
void usart_transmit_newline(void)
{
usart_transmit_char(10);
usart_transmit_char(13);
}
     610:	08 95       	ret

00000612 <usart_receive_char>:
unsigned char usart_receive_char(void)
{
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     612:	5f 9b       	sbis	0x0b, 7	; 11
     614:	fe cf       	rjmp	.-4      	; 0x612 <usart_receive_char>
;
/* Get and return received data from buffer */
return UDR;
     616:	8c b1       	in	r24, 0x0c	; 12
}
     618:	08 95       	ret

0000061a <bot_motion_init>:

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	84 bb       	out	0x14, r24	; 20
}
     61e:	08 95       	ret

00000620 <bot_left_forward>:
void bot_left_forward(void)
{
 MOTOR1A=1;
     620:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     622:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     624:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     626:	af 98       	cbi	0x15, 7	; 21
}
     628:	08 95       	ret

0000062a <bot_left_backward>:
void bot_left_backward(void)
{
 MOTOR1A=0;
     62a:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     62c:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     62e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     630:	af 98       	cbi	0x15, 7	; 21
}
     632:	08 95       	ret

00000634 <bot_right_forward>:
void bot_right_forward(void)
{
 MOTOR1A=0;
     634:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     636:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     638:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     63a:	af 98       	cbi	0x15, 7	; 21
}
     63c:	08 95       	ret

0000063e <bot_left>:
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_right_forward(void)
{
 MOTOR1A=0;
     63e:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     640:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     642:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0; 
     644:	af 98       	cbi	0x15, 7	; 21
}

void bot_left(void)
{
 bot_right_forward();
}
     646:	08 95       	ret

00000648 <bot_right>:
{
DDRC=0xff;
}
void bot_left_forward(void)
{
 MOTOR1A=1;
     648:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     64a:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     64c:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     64e:	af 98       	cbi	0x15, 7	; 21
}

void bot_right(void)
{
 bot_left_forward();
}
     650:	08 95       	ret

00000652 <bot_right_backward>:

void bot_right_backward(void)
{
 MOTOR1A=0;
     652:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     654:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     656:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1; 
     658:	af 9a       	sbi	0x15, 7	; 21
}
     65a:	08 95       	ret

0000065c <bot_forward>:
void bot_forward(void)
{
MOTOR1A=1;
     65c:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     65e:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     660:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     662:	af 98       	cbi	0x15, 7	; 21
}
     664:	08 95       	ret

00000666 <bot_backward>:
void bot_backward(void)
{
 MOTOR1A=0;
     666:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     668:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=0;
     66a:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     66c:	af 9a       	sbi	0x15, 7	; 21
}
     66e:	08 95       	ret

00000670 <bot_spot_left>:
void bot_spot_left(void)
{
 MOTOR1A=0;
     670:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     672:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     674:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     676:	af 98       	cbi	0x15, 7	; 21
}
     678:	08 95       	ret

0000067a <bot_spot_right>:

void bot_spot_right(void)
{
MOTOR1A=1;
     67a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     67c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     67e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     680:	af 9a       	sbi	0x15, 7	; 21
}
     682:	08 95       	ret

00000684 <bot_stop>:
void bot_stop(void)
{
 MOTOR1A=0;
     684:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=0;
     686:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     688:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=0;
     68a:	af 98       	cbi	0x15, 7	; 21
}
     68c:	08 95       	ret

0000068e <bot_brake>:
void bot_brake(void)
{
MOTOR1A=1;
     68e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     690:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     692:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     694:	af 9a       	sbi	0x15, 7	; 21
}
     696:	08 95       	ret

00000698 <switch_init>:

void switch_init(void)
{
PORTD|=0x0F;
     698:	82 b3       	in	r24, 0x12	; 18
     69a:	8f 60       	ori	r24, 0x0F	; 15
     69c:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     69e:	81 b3       	in	r24, 0x11	; 17
     6a0:	80 7f       	andi	r24, 0xF0	; 240
     6a2:	81 bb       	out	0x11, r24	; 17
}
     6a4:	08 95       	ret

000006a6 <pressed_switch0>:

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	20 95       	com	r18
     6ac:	30 95       	com	r19
     6ae:	21 70       	andi	r18, 0x01	; 1
     6b0:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <pressed_switch1>:

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     6b6:	20 b3       	in	r18, 0x10	; 16
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	20 95       	com	r18
     6c0:	30 95       	com	r19
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6c6:	c9 01       	movw	r24, r18
     6c8:	08 95       	ret

000006ca <pressed_switch2>:

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     6ca:	20 b3       	in	r18, 0x10	; 16
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	36 95       	lsr	r19
     6d4:	27 95       	ror	r18
     6d6:	20 95       	com	r18
     6d8:	30 95       	com	r19
     6da:	21 70       	andi	r18, 0x01	; 1
     6dc:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	08 95       	ret

000006e2 <pressed_switch3>:

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     6e2:	20 b3       	in	r18, 0x10	; 16
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	36 95       	lsr	r19
     6ea:	27 95       	ror	r18
     6ec:	4a 95       	dec	r20
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <pressed_switch3+0x6>
     6f0:	20 95       	com	r18
     6f2:	30 95       	com	r19
     6f4:	21 70       	andi	r18, 0x01	; 1
     6f6:	30 70       	andi	r19, 0x00	; 0
return 1;
else
return 0;
}
     6f8:	c9 01       	movw	r24, r18
     6fa:	08 95       	ret

000006fc <line_track>:
// int dir_array[9][9][4];
int map_array[9][9];
int mx, my;
int new_array[9][2] = {{5,5},{5,6},{5,7},{6,7},{7,7},{7,8},{6,8},{5,8},{5,9}};
void line_track(void)	
{
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     714:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     716:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     718:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     71a:	af 98       	cbi	0x15, 7	; 21
	//check_sensors();
	bot_forward();
	switch(sensorbyte)
     71c:	80 91 c2 00 	lds	r24, 0x00C2
     720:	86 30       	cpi	r24, 0x06	; 6
     722:	91 f1       	breq	.+100    	; 0x788 <line_track+0x8c>
     724:	87 30       	cpi	r24, 0x07	; 7
     726:	60 f4       	brcc	.+24     	; 0x740 <line_track+0x44>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	b1 f0       	breq	.+44     	; 0x758 <line_track+0x5c>
     72c:	83 30       	cpi	r24, 0x03	; 3
     72e:	18 f4       	brcc	.+6      	; 0x736 <line_track+0x3a>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	c1 f5       	brne	.+112    	; 0x7a4 <line_track+0xa8>
     734:	31 c0       	rjmp	.+98     	; 0x798 <line_track+0x9c>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	a9 f0       	breq	.+42     	; 0x764 <line_track+0x68>
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	99 f5       	brne	.+102    	; 0x7a4 <line_track+0xa8>
     73e:	09 c0       	rjmp	.+18     	; 0x752 <line_track+0x56>
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	39 f1       	breq	.+78     	; 0x792 <line_track+0x96>
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	a0 f0       	brcs	.+40     	; 0x770 <line_track+0x74>
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	49 f0       	breq	.+18     	; 0x75e <line_track+0x62>
     74c:	8e 30       	cpi	r24, 0x0E	; 14
     74e:	51 f5       	brne	.+84     	; 0x7a4 <line_track+0xa8>
     750:	0c c0       	rjmp	.+24     	; 0x76a <line_track+0x6e>
	{ 
		case 0b0110:mpos = 0; break;//sensor numbering starts from right

		case 0b0100:mpos = 1; break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	22 c0       	rjmp	.+68     	; 0x79c <line_track+0xa0>

		case 0b0010:mpos = -1; break;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f ef       	ldi	r25, 0xFF	; 255
     75c:	1f c0       	rjmp	.+62     	; 0x79c <line_track+0xa0>

		case 0b1100:mpos = 3; break;
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	1c c0       	rjmp	.+56     	; 0x79c <line_track+0xa0>
		
		case 0b0011:mpos = -3; 
     764:	8d ef       	ldi	r24, 0xFD	; 253
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	05 c0       	rjmp	.+10     	; 0x774 <line_track+0x78>
		{
			mpos = 0;
		}
		break;

		case 0b1110:mpos = 4; break;
     76a:	84 e0       	ldi	r24, 0x04	; 4
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	16 c0       	rjmp	.+44     	; 0x79c <line_track+0xa0>
		
		case 0b0111:mpos = -4; 
     770:	8c ef       	ldi	r24, 0xFC	; 252
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	90 93 c4 00 	sts	0x00C4, r25
     778:	80 93 c3 00 	sts	0x00C3, r24
		//lcd_clear();
		//lcd_write_string("0111");
		if(flag1==1)
     77c:	80 91 cf 00 	lds	r24, 0x00CF
     780:	90 91 d0 00 	lds	r25, 0x00D0
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	71 f4       	brne	.+28     	; 0x7a4 <line_track+0xa8>
		{
			mpos = 0;
     788:	10 92 c4 00 	sts	0x00C4, r1
     78c:	10 92 c3 00 	sts	0x00C3, r1
     790:	09 c0       	rjmp	.+18     	; 0x7a4 <line_track+0xa8>
		}
		break;
		
		
		case 0b1000:mpos = 6; break;
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	02 c0       	rjmp	.+4      	; 0x79c <line_track+0xa0>

		case 0b0001:mpos = -6; break;
     798:	8a ef       	ldi	r24, 0xFA	; 250
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	90 93 c4 00 	sts	0x00C4, r25
     7a0:	80 93 c3 00 	sts	0x00C3, r24
		// }
		break;
		default: break;
	}
	
	act_error = prev_error - mpos;
     7a4:	60 91 c3 00 	lds	r22, 0x00C3
     7a8:	70 91 c4 00 	lds	r23, 0x00C4
     7ac:	88 27       	eor	r24, r24
     7ae:	77 fd       	sbrc	r23, 7
     7b0:	80 95       	com	r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	0e 94 98 08 	call	0x1130	; 0x1130 <__floatsisf>
     7b8:	5b 01       	movw	r10, r22
     7ba:	6c 01       	movw	r12, r24
     7bc:	60 91 8f 01 	lds	r22, 0x018F
     7c0:	70 91 90 01 	lds	r23, 0x0190
     7c4:	80 91 91 01 	lds	r24, 0x0191
     7c8:	90 91 92 01 	lds	r25, 0x0192
     7cc:	a6 01       	movw	r20, r12
     7ce:	95 01       	movw	r18, r10
     7d0:	0e 94 94 07 	call	0xf28	; 0xf28 <__subsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
     7d8:	60 93 95 01 	sts	0x0195, r22
     7dc:	70 93 96 01 	sts	0x0196, r23
     7e0:	80 93 97 01 	sts	0x0197, r24
     7e4:	90 93 98 01 	sts	0x0198, r25
	control = (mpos * kp) - (kd*(act_error));
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	20 91 8e 00 	lds	r18, 0x008E
     7f0:	30 91 8f 00 	lds	r19, 0x008F
     7f4:	40 91 90 00 	lds	r20, 0x0090
     7f8:	50 91 91 00 	lds	r21, 0x0091
     7fc:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     800:	3b 01       	movw	r6, r22
     802:	4c 01       	movw	r8, r24
     804:	c8 01       	movw	r24, r16
     806:	b7 01       	movw	r22, r14
     808:	20 91 92 00 	lds	r18, 0x0092
     80c:	30 91 93 00 	lds	r19, 0x0093
     810:	40 91 94 00 	lds	r20, 0x0094
     814:	50 91 95 00 	lds	r21, 0x0095
     818:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c4 01       	movw	r24, r8
     822:	b3 01       	movw	r22, r6
     824:	0e 94 94 07 	call	0xf28	; 0xf28 <__subsf3>
     828:	7b 01       	movw	r14, r22
     82a:	8c 01       	movw	r16, r24
     82c:	60 93 db 00 	sts	0x00DB, r22
     830:	70 93 dc 00 	sts	0x00DC, r23
     834:	80 93 dd 00 	sts	0x00DD, r24
     838:	90 93 de 00 	sts	0x00DE, r25
	prev_error = mpos ;
     83c:	a0 92 8f 01 	sts	0x018F, r10
     840:	b0 92 90 01 	sts	0x0190, r11
     844:	c0 92 91 01 	sts	0x0191, r12
     848:	d0 92 92 01 	sts	0x0192, r13
	int motor1_value = opt - control;//right motor is m1
     84c:	60 91 8c 00 	lds	r22, 0x008C
     850:	70 91 8d 00 	lds	r23, 0x008D
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 96 08 	call	0x112c	; 0x112c <__floatunsisf>
     85c:	5b 01       	movw	r10, r22
     85e:	6c 01       	movw	r12, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	0e 94 94 07 	call	0xf28	; 0xf28 <__subsf3>
     868:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fixsfsi>
     86c:	7b bd       	out	0x2b, r23	; 43
     86e:	6a bd       	out	0x2a, r22	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     870:	c6 01       	movw	r24, r12
     872:	b5 01       	movw	r22, r10
     874:	a8 01       	movw	r20, r16
     876:	97 01       	movw	r18, r14
     878:	0e 94 95 07 	call	0xf2a	; 0xf2a <__addsf3>
     87c:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fixsfsi>
     880:	79 bd       	out	0x29, r23	; 41
     882:	68 bd       	out	0x28, r22	; 40
	int motor2_value = opt + control;
	set_pwm1a(motor1_value);
	set_pwm1b(motor2_value);
	
	//delay_microsec(10);
}
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	7f 90       	pop	r7
     89a:	6f 90       	pop	r6
     89c:	08 95       	ret

0000089e <init_devices>:

void init_devices(void)
{ 
	port_init();
     89e:	0e 94 49 00 	call	0x92	; 0x92 <port_init>
}

//ADC INITIALIZE
void adc_init(void)
{
 ADC_DIR=0X00;
     8a2:	1a ba       	out	0x1a, r1	; 26
 ADCSRA=0X00;
     8a4:	16 b8       	out	0x06, r1	; 6
 ADMUX=0X60;//0x40 for 10 bits
     8a6:	80 e6       	ldi	r24, 0x60	; 96
     8a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA=0X87;
     8aa:	87 e8       	ldi	r24, 0x87	; 135
     8ac:	86 b9       	out	0x06, r24	; 6
 ACSR=0X80;
     8ae:	80 e8       	ldi	r24, 0x80	; 128
     8b0:	88 b9       	out	0x08, r24	; 8
}

//BOT MOTIONS
void bot_motion_init(void)
{
DDRC=0xff;
     8b2:	8f ef       	ldi	r24, 0xFF	; 255
     8b4:	84 bb       	out	0x14, r24	; 20
	adc_init();
	bot_motion_init();
	lcd_init(underline);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_init>
 MOTOR2B=1;
}

void switch_init(void)
{
PORTD|=0x0F;
     8bc:	82 b3       	in	r24, 0x12	; 18
     8be:	8f 60       	ori	r24, 0x0F	; 15
     8c0:	82 bb       	out	0x12, r24	; 18
DDRD&=0xF0;
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 7f       	andi	r24, 0xF0	; 240
     8c6:	81 bb       	out	0x11, r24	; 17
	switch_init();
	pwm1_init();
     8c8:	0e 94 53 00 	call	0xa6	; 0xa6 <pwm1_init>
}
     8cc:	08 95       	ret

000008ce <Uturn>:

void Uturn()
{	
	turn = 'u';
     8ce:	85 e7       	ldi	r24, 0x75	; 117
     8d0:	80 93 96 00 	sts	0x0096, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8d4:	20 ef       	ldi	r18, 0xF0	; 240
     8d6:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8d8:	82 e2       	ldi	r24, 0x22	; 34
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	08 c0       	rjmp	.+16     	; 0x8ee <Uturn+0x20>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8de:	3b bd       	out	0x2b, r19	; 43
     8e0:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8e2:	99 bd       	out	0x29, r25	; 41
     8e4:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8e6:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8e8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     8ea:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     8ec:	af 98       	cbi	0x15, 7	; 21
	
	while(bit_is_set(PINA,5))
     8ee:	cd 99       	sbic	0x19, 5	; 25
     8f0:	f6 cf       	rjmp	.-20     	; 0x8de <Uturn+0x10>
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <Uturn+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     8f4:	3b bd       	out	0x2b, r19	; 43
     8f6:	2a bd       	out	0x2a, r18	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     8f8:	99 bd       	out	0x29, r25	; 41
     8fa:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     8fc:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     8fe:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     900:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     902:	af 98       	cbi	0x15, 7	; 21
     904:	04 c0       	rjmp	.+8      	; 0x90e <Uturn+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     906:	29 eb       	ldi	r18, 0xB9	; 185
     908:	30 e0       	ldi	r19, 0x00	; 0
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     90a:	87 ed       	ldi	r24, 0xD7	; 215
     90c:	90 e0       	ldi	r25, 0x00	; 0
		set_pwm1a(240);
		set_pwm1b(290);
		bot_spot_left();
		//left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     90e:	ce 9b       	sbis	0x19, 6	; 25
     910:	02 c0       	rjmp	.+4      	; 0x916 <Uturn+0x48>
     912:	86 99       	sbic	0x10, 6	; 16
     914:	ef cf       	rjmp	.-34     	; 0x8f4 <Uturn+0x26>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     916:	8f e8       	ldi	r24, 0x8F	; 143
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	9b bd       	out	0x2b, r25	; 43
     91c:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     91e:	99 bd       	out	0x29, r25	; 41
     920:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     922:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     924:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     926:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     928:	af 9a       	sbi	0x15, 7	; 21
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
     92a:	08 95       	ret

0000092c <left_count>:
	delay_sec(1);
}

void left_count()
{
	if(bit_is_clear(PINA,4))
     92c:	cc 99       	sbic	0x19, 4	; 25
     92e:	16 c0       	rjmp	.+44     	; 0x95c <left_count+0x30>
	{
		if(l==0)
     930:	80 91 c7 00 	lds	r24, 0x00C7
     934:	90 91 c8 00 	lds	r25, 0x00C8
     938:	89 2b       	or	r24, r25
     93a:	a1 f4       	brne	.+40     	; 0x964 <left_count+0x38>
		{
			lcount++;
     93c:	80 91 c9 00 	lds	r24, 0x00C9
     940:	90 91 ca 00 	lds	r25, 0x00CA
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	90 93 ca 00 	sts	0x00CA, r25
     94a:	80 93 c9 00 	sts	0x00C9, r24
			l = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 c8 00 	sts	0x00C8, r25
     956:	80 93 c7 00 	sts	0x00C7, r24
     95a:	08 95       	ret
		}
	}
	else
	{
		l = 0;
     95c:	10 92 c8 00 	sts	0x00C8, r1
     960:	10 92 c7 00 	sts	0x00C7, r1
     964:	08 95       	ret

00000966 <line_track_new>:
}


void line_track_new()
{
	check_sensors();
     966:	0e 94 68 01 	call	0x2d0	; 0x2d0 <check_sensors>
 MOTOR2A=0;
 MOTOR2B=1; 
}
void bot_forward(void)
{
MOTOR1A=1;
     96a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     96c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=1;
     96e:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     970:	af 98       	cbi	0x15, 7	; 21
	bot_forward();
	if(bit_is_set(PINA,6) && bit_is_clear(PIND,6))
     972:	ce 9b       	sbis	0x19, 6	; 25
     974:	09 c0       	rjmp	.+18     	; 0x988 <line_track_new+0x22>
     976:	86 99       	sbic	0x10, 6	; 16
     978:	07 c0       	rjmp	.+14     	; 0x988 <line_track_new+0x22>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     97a:	86 ee       	ldi	r24, 0xE6	; 230
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	9b bd       	out	0x2b, r25	; 43
     980:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     982:	82 e2       	ldi	r24, 0x22	; 34
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	1a c0       	rjmp	.+52     	; 0x9bc <line_track_new+0x56>
	{
		set_pwm1a(230);
		set_pwm1b(290);

	}
	else if(bit_is_set(PIND,6) && bit_is_clear(PINA,6))
     988:	86 9b       	sbis	0x10, 6	; 16
     98a:	09 c0       	rjmp	.+18     	; 0x99e <line_track_new+0x38>
     98c:	ce 99       	sbic	0x19, 6	; 25
     98e:	07 c0       	rjmp	.+14     	; 0x99e <line_track_new+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     990:	82 e2       	ldi	r24, 0x22	; 34
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	9b bd       	out	0x2b, r25	; 43
     996:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     998:	86 ee       	ldi	r24, 0xE6	; 230
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0f c0       	rjmp	.+30     	; 0x9bc <line_track_new+0x56>
	{
		set_pwm1a(290);
		set_pwm1b(230);
	}
	else if(bit_is_set(PIND,6) && bit_is_set(PINA,6))
     99e:	86 9b       	sbis	0x10, 6	; 16
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <line_track_new+0x46>
     9a2:	ce 9b       	sbis	0x19, 6	; 25
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <line_track_new+0x46>
	{
		line_track();
     9a6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <line_track>
     9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <line_track_new+0x5a>
	}
	else if(bit_is_clear(PIND,6) && bit_is_clear(PINA,6))
     9ac:	86 99       	sbic	0x10, 6	; 16
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <line_track_new+0x5a>
     9b0:	ce 99       	sbic	0x19, 6	; 25
     9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <line_track_new+0x5a>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9b4:	84 e0       	ldi	r24, 0x04	; 4
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	9b bd       	out	0x2b, r25	; 43
     9ba:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     9bc:	99 bd       	out	0x29, r25	; 41
     9be:	88 bd       	out	0x28, r24	; 40
	{
		set_pwm1a(260);
		set_pwm1b(260);
	}
		delay_microsec(10);
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_microsec>
		irc++;
     9c8:	80 91 d1 00 	lds	r24, 0x00D1
     9cc:	90 91 d2 00 	lds	r25, 0x00D2
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	90 93 d2 00 	sts	0x00D2, r25
     9d6:	80 93 d1 00 	sts	0x00D1, r24
}
     9da:	08 95       	ret

000009dc <turn_left>:
	//delay_millisec(100);
}

void turn_left()
{	
	turn = 'l';
     9dc:	8c e6       	ldi	r24, 0x6C	; 108
     9de:	80 93 96 00 	sts	0x0096, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9e2:	89 e0       	ldi	r24, 0x09	; 9
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <turn_left+0x1c>
     9e8:	9b bd       	out	0x2b, r25	; 43
     9ea:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     9ec:	99 bd       	out	0x29, r25	; 41
     9ee:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     9f0:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     9f2:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     9f4:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     9f6:	af 98       	cbi	0x15, 7	; 21
	while(bit_is_set(PINA,5))
     9f8:	cd 99       	sbic	0x19, 5	; 25
     9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <turn_left+0xc>
     9fc:	09 c0       	rjmp	.+18     	; 0xa10 <turn_left+0x34>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     9fe:	9b bd       	out	0x2b, r25	; 43
     a00:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a02:	99 bd       	out	0x29, r25	; 41
     a04:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=1;
}
void bot_spot_left(void)
{
 MOTOR1A=0;
     a06:	ac 98       	cbi	0x15, 4	; 21
 MOTOR1B=1;
     a08:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a0a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=0;
     a0c:	af 98       	cbi	0x15, 7	; 21
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <turn_left+0x38>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a10:	8d ec       	ldi	r24, 0xCD	; 205
     a12:	90 e0       	ldi	r25, 0x00	; 0
	{
		set_pwm1a(265);
		set_pwm1b(265);
		bot_spot_left();
	}
	while(bit_is_set(PINA,6) && bit_is_set(PIND,6))
     a14:	ce 9b       	sbis	0x19, 6	; 25
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <turn_left+0x46>
     a18:	86 99       	sbic	0x10, 6	; 16
     a1a:	f1 cf       	rjmp	.-30     	; 0x9fe <turn_left+0x22>
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <turn_left+0x46>
		set_pwm1b(205);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     a1e:	0e 94 b3 04 	call	0x966	; 0x966 <line_track_new>
	{
		set_pwm1a(205);
		set_pwm1b(205);
		bot_spot_left();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     a22:	cc 9b       	sbis	0x19, 4	; 25
     a24:	fc cf       	rjmp	.-8      	; 0xa1e <turn_left+0x42>
     a26:	87 9b       	sbis	0x10, 7	; 16
     a28:	fa cf       	rjmp	.-12     	; 0xa1e <turn_left+0x42>
     a2a:	8f e8       	ldi	r24, 0x8F	; 143
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	9b bd       	out	0x2b, r25	; 43
     a30:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a32:	99 bd       	out	0x29, r25	; 41
     a34:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     a36:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     a38:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     a3a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     a3c:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
	}
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_sec(1);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
}
     a46:	08 95       	ret

00000a48 <turn_right>:
	set_pwm1b(399);
	bot_brake();
	//delay_sec(2);
}
void turn_right()
{	
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	turn = 'r';
     a4c:	82 e7       	ldi	r24, 0x72	; 114
     a4e:	80 93 96 00 	sts	0x0096, r24
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a52:	cf ef       	ldi	r28, 0xFF	; 255
     a54:	d0 e0       	ldi	r29, 0x00	; 0
     a56:	0a c0       	rjmp	.+20     	; 0xa6c <turn_right+0x24>
     a58:	db bd       	out	0x2b, r29	; 43
     a5a:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a5c:	d9 bd       	out	0x29, r29	; 41
     a5e:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     a60:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     a62:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     a64:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     a66:	af 9a       	sbi	0x15, 7	; 21
	while(bit_is_set(PINA,7))
	{
		set_pwm1a(255);
		set_pwm1b(255);
		bot_spot_right();
		left_count();
     a68:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
	//delay_sec(2);
}
void turn_right()
{	
	turn = 'r';
	while(bit_is_set(PINA,7))
     a6c:	cf 99       	sbic	0x19, 7	; 25
     a6e:	f4 cf       	rjmp	.-24     	; 0xa58 <turn_right+0x10>
     a70:	0b c0       	rjmp	.+22     	; 0xa88 <turn_right+0x40>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a72:	db bd       	out	0x2b, r29	; 43
     a74:	ca bd       	out	0x2a, r28	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     a76:	d9 bd       	out	0x29, r29	; 41
     a78:	c8 bd       	out	0x28, r28	; 40
 MOTOR2B=0;
}

void bot_spot_right(void)
{
MOTOR1A=1;
     a7a:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=0;
     a7c:	ad 98       	cbi	0x15, 5	; 21
 MOTOR2A=0;
     a7e:	ae 98       	cbi	0x15, 6	; 21
 MOTOR2B=1;
     a80:	af 9a       	sbi	0x15, 7	; 21
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
	{
		set_pwm1a(205);
		set_pwm1b(205);
		bot_spot_right();
		left_count();
     a82:	0e 94 96 04 	call	0x92c	; 0x92c <left_count>
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <turn_right+0x44>
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     a88:	cd ec       	ldi	r28, 0xCD	; 205
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
		set_pwm1a(255);
		set_pwm1b(255);
		bot_spot_right();
		left_count();
	}
	while((bit_is_set(PINA,6) && bit_is_set(PIND, 6)))
     a8c:	ce 9b       	sbis	0x19, 6	; 25
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <turn_right+0x52>
     a90:	86 99       	sbic	0x10, 6	; 16
     a92:	ef cf       	rjmp	.-34     	; 0xa72 <turn_right+0x2a>
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <turn_right+0x52>
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
	{
		line_track_new();
     a96:	0e 94 b3 04 	call	0x966	; 0x966 <line_track_new>
		set_pwm1a(205);
		set_pwm1b(205);
		bot_spot_right();
		left_count();
	}
	while(bit_is_clear(PINA,4) || bit_is_clear(PIND,7))
     a9a:	cc 9b       	sbis	0x19, 4	; 25
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <turn_right+0x4e>
     a9e:	87 9b       	sbis	0x10, 7	; 16
     aa0:	fa cf       	rjmp	.-12     	; 0xa96 <turn_right+0x4e>
     aa2:	8f e8       	ldi	r24, 0x8F	; 143
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	9b bd       	out	0x2b, r25	; 43
     aa8:	8a bd       	out	0x2a, r24	; 42
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     aaa:	99 bd       	out	0x29, r25	; 41
     aac:	88 bd       	out	0x28, r24	; 40
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     aae:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     ab0:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     ab2:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     ab4:	af 9a       	sbi	0x15, 7	; 21
	}
	
	set_pwm1a(399);
	set_pwm1b(399);
	bot_brake();
	delay_sec(1);
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
	//delay_millisec(100);
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <sense_of_directon>:
		irc++;
}

void sense_of_directon(void)
{
	if(turn == 'r')	
     ac4:	80 91 96 00 	lds	r24, 0x0096
     ac8:	82 37       	cpi	r24, 0x72	; 114
     aca:	d1 f4       	brne	.+52     	; 0xb00 <sense_of_directon+0x3c>
	{
		switch(dir)
     acc:	80 91 97 00 	lds	r24, 0x0097
     ad0:	90 91 98 00 	lds	r25, 0x0098
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	8f 3f       	cpi	r24, 0xFF	; 255
     ad8:	92 07       	cpc	r25, r18
     ada:	59 f1       	breq	.+86     	; 0xb32 <sense_of_directon+0x6e>
     adc:	2f ef       	ldi	r18, 0xFF	; 255
     ade:	8f 3f       	cpi	r24, 0xFF	; 255
     ae0:	92 07       	cpc	r25, r18
     ae2:	09 f0       	breq	.+2      	; 0xae6 <sense_of_directon+0x22>
     ae4:	2c f4       	brge	.+10     	; 0xaf0 <sense_of_directon+0x2c>
     ae6:	8e 5f       	subi	r24, 0xFE	; 254
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	09 f0       	breq	.+2      	; 0xaee <sense_of_directon+0x2a>
     aec:	51 c0       	rjmp	.+162    	; 0xb90 <sense_of_directon+0xcc>
     aee:	3d c0       	rjmp	.+122    	; 0xb6a <sense_of_directon+0xa6>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	91 05       	cpc	r25, r1
     af4:	09 f4       	brne	.+2      	; 0xaf8 <sense_of_directon+0x34>
     af6:	3f c0       	rjmp	.+126    	; 0xb76 <sense_of_directon+0xb2>
     af8:	02 97       	sbiw	r24, 0x02	; 2
     afa:	09 f0       	breq	.+2      	; 0xafe <sense_of_directon+0x3a>
     afc:	49 c0       	rjmp	.+146    	; 0xb90 <sense_of_directon+0xcc>
     afe:	38 c0       	rjmp	.+112    	; 0xb70 <sense_of_directon+0xac>
			case -1: dir = +2; break;
			case +2: dir = +1; break;
			case -2: dir = -1; break;	
		}
	}
	else if(turn == 'l')	
     b00:	8c 36       	cpi	r24, 0x6C	; 108
     b02:	d1 f4       	brne	.+52     	; 0xb38 <sense_of_directon+0x74>
	{
		switch(dir)
     b04:	80 91 97 00 	lds	r24, 0x0097
     b08:	90 91 98 00 	lds	r25, 0x0098
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	8f 3f       	cpi	r24, 0xFF	; 255
     b10:	92 07       	cpc	r25, r18
     b12:	89 f1       	breq	.+98     	; 0xb76 <sense_of_directon+0xb2>
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	8f 3f       	cpi	r24, 0xFF	; 255
     b18:	92 07       	cpc	r25, r18
     b1a:	09 f0       	breq	.+2      	; 0xb1e <sense_of_directon+0x5a>
     b1c:	24 f4       	brge	.+8      	; 0xb26 <sense_of_directon+0x62>
     b1e:	8e 5f       	subi	r24, 0xFE	; 254
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	b1 f5       	brne	.+108    	; 0xb90 <sense_of_directon+0xcc>
     b24:	25 c0       	rjmp	.+74     	; 0xb70 <sense_of_directon+0xac>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	91 05       	cpc	r25, r1
     b2a:	19 f0       	breq	.+6      	; 0xb32 <sense_of_directon+0x6e>
     b2c:	02 97       	sbiw	r24, 0x02	; 2
     b2e:	81 f5       	brne	.+96     	; 0xb90 <sense_of_directon+0xcc>
     b30:	1c c0       	rjmp	.+56     	; 0xb6a <sense_of_directon+0xa6>
		{
			case +1: dir = +2; break;
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	21 c0       	rjmp	.+66     	; 0xb7a <sense_of_directon+0xb6>
			case -1: dir = -2; break;			
			case +2: dir = -1; break;
			case -2: dir = +1; break;	
		}
	}
	else if(turn == 'u')	
     b38:	85 37       	cpi	r24, 0x75	; 117
     b3a:	51 f5       	brne	.+84     	; 0xb90 <sense_of_directon+0xcc>
	{
		switch(dir)
     b3c:	80 91 97 00 	lds	r24, 0x0097
     b40:	90 91 98 00 	lds	r25, 0x0098
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	8f 3f       	cpi	r24, 0xFF	; 255
     b48:	92 07       	cpc	r25, r18
     b4a:	91 f0       	breq	.+36     	; 0xb70 <sense_of_directon+0xac>
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	8f 3f       	cpi	r24, 0xFF	; 255
     b50:	92 07       	cpc	r25, r18
     b52:	09 f0       	breq	.+2      	; 0xb56 <sense_of_directon+0x92>
     b54:	24 f4       	brge	.+8      	; 0xb5e <sense_of_directon+0x9a>
     b56:	8e 5f       	subi	r24, 0xFE	; 254
     b58:	9f 4f       	sbci	r25, 0xFF	; 255
     b5a:	d1 f4       	brne	.+52     	; 0xb90 <sense_of_directon+0xcc>
     b5c:	13 c0       	rjmp	.+38     	; 0xb84 <sense_of_directon+0xc0>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	91 05       	cpc	r25, r1
     b62:	19 f0       	breq	.+6      	; 0xb6a <sense_of_directon+0xa6>
     b64:	02 97       	sbiw	r24, 0x02	; 2
     b66:	a1 f4       	brne	.+40     	; 0xb90 <sense_of_directon+0xcc>
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <sense_of_directon+0xb2>
		{
			case +1: dir = -1; break;
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	9f ef       	ldi	r25, 0xFF	; 255
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <sense_of_directon+0xb6>
			case -1: dir = +1; break;		
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <sense_of_directon+0xb6>
			case +2: dir = -2; break;
     b76:	8e ef       	ldi	r24, 0xFE	; 254
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	90 93 98 00 	sts	0x0098, r25
     b7e:	80 93 97 00 	sts	0x0097, r24
     b82:	08 95       	ret
			case -2: dir = +2; break;	
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 98 00 	sts	0x0098, r25
     b8c:	80 93 97 00 	sts	0x0097, r24
     b90:	08 95       	ret

00000b92 <checkAndCorrectDirection>:
	delay_millisec(500);
}


void checkAndCorrectDirection(int req_dir)
{
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	ec 01       	movw	r28, r24
	if(req_dir == 1)
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	91 05       	cpc	r25, r1
     b9c:	79 f4       	brne	.+30     	; 0xbbc <checkAndCorrectDirection+0x2a>
	{
		switch(dir)
     b9e:	80 91 97 00 	lds	r24, 0x0097
     ba2:	90 91 98 00 	lds	r25, 0x0098
     ba6:	2f ef       	ldi	r18, 0xFF	; 255
     ba8:	8f 3f       	cpi	r24, 0xFF	; 255
     baa:	92 07       	cpc	r25, r18
     bac:	19 f0       	breq	.+6      	; 0xbb4 <checkAndCorrectDirection+0x22>
     bae:	02 97       	sbiw	r24, 0x02	; 2
     bb0:	29 f4       	brne	.+10     	; 0xbbc <checkAndCorrectDirection+0x2a>
     bb2:	32 c0       	rjmp	.+100    	; 0xc18 <checkAndCorrectDirection+0x86>
		{	
			
			case +2: turn_right();sense_of_directon();break;

			case -1:turn_left();sense_of_directon();break;
     bb4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <turn_left>
     bb8:	0e 94 62 05 	call	0xac4	; 0xac4 <sense_of_directon>

		}
	}

	if(req_dir == 2)
     bbc:	c2 30       	cpi	r28, 0x02	; 2
     bbe:	d1 05       	cpc	r29, r1
     bc0:	81 f4       	brne	.+32     	; 0xbe2 <checkAndCorrectDirection+0x50>
	{
		switch(dir)
     bc2:	80 91 97 00 	lds	r24, 0x0097
     bc6:	90 91 98 00 	lds	r25, 0x0098
     bca:	2f ef       	ldi	r18, 0xFF	; 255
     bcc:	8f 3f       	cpi	r24, 0xFF	; 255
     bce:	92 07       	cpc	r25, r18
     bd0:	19 f0       	breq	.+6      	; 0xbd8 <checkAndCorrectDirection+0x46>
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	31 f4       	brne	.+12     	; 0xbe2 <checkAndCorrectDirection+0x50>
     bd6:	23 c0       	rjmp	.+70     	; 0xc1e <checkAndCorrectDirection+0x8c>
		{	lcd_clear();
			lcd_write_int_xy(0,0,dir,3);
			bot_stop();
			delay_sec(1);
			case +1: turn_left();sense_of_directon();break;
			case -1:turn_right();sense_of_directon();break;
     bd8:	0e 94 24 05 	call	0xa48	; 0xa48 <turn_right>
     bdc:	0e 94 62 05 	call	0xac4	; 0xac4 <sense_of_directon>
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <checkAndCorrectDirection+0x6c>

		}
	}

	if(req_dir == -1)
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	cf 3f       	cpi	r28, 0xFF	; 255
     be6:	d8 07       	cpc	r29, r24
     be8:	51 f4       	brne	.+20     	; 0xbfe <checkAndCorrectDirection+0x6c>
	{
		switch(dir)
     bea:	80 91 97 00 	lds	r24, 0x0097
     bee:	90 91 98 00 	lds	r25, 0x0098
     bf2:	2f ef       	ldi	r18, 0xFF	; 255
     bf4:	8e 3f       	cpi	r24, 0xFE	; 254
     bf6:	92 07       	cpc	r25, r18
     bf8:	79 f0       	breq	.+30     	; 0xc18 <checkAndCorrectDirection+0x86>
     bfa:	02 97       	sbiw	r24, 0x02	; 2
     bfc:	81 f0       	breq	.+32     	; 0xc1e <checkAndCorrectDirection+0x8c>

		}
	}


	if(req_dir == -2)
     bfe:	ce 5f       	subi	r28, 0xFE	; 254
     c00:	df 4f       	sbci	r29, 0xFF	; 255
     c02:	89 f4       	brne	.+34     	; 0xc26 <checkAndCorrectDirection+0x94>
	{
		switch(dir)
     c04:	80 91 97 00 	lds	r24, 0x0097
     c08:	90 91 98 00 	lds	r25, 0x0098
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	8f 3f       	cpi	r24, 0xFF	; 255
     c10:	92 07       	cpc	r25, r18
     c12:	29 f0       	breq	.+10     	; 0xc1e <checkAndCorrectDirection+0x8c>
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	39 f4       	brne	.+14     	; 0xc26 <checkAndCorrectDirection+0x94>
		{	
			case +1:turn_right();sense_of_directon();break; 
     c18:	0e 94 24 05 	call	0xa48	; 0xa48 <turn_right>
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <checkAndCorrectDirection+0x90>
				
			case -1: turn_left();sense_of_directon();break;
     c1e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <turn_left>
     c22:	0e 94 62 05 	call	0xac4	; 0xac4 <sense_of_directon>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     c26:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     c28:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     c2a:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     c2c:	af 9a       	sbi	0x15, 7	; 21
			

		}
	}
	bot_brake();
	delay_sec(1);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>

}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <go_to_coordinate>:
	
}


void go_to_coordinate(int next_x , int next_y )
{
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	ec 01       	movw	r28, r24
     c46:	8b 01       	movw	r16, r22
	if (next_x-x_coordinate>0)
     c48:	80 91 99 00 	lds	r24, 0x0099
     c4c:	90 91 9a 00 	lds	r25, 0x009A
     c50:	9e 01       	movw	r18, r28
     c52:	28 1b       	sub	r18, r24
     c54:	39 0b       	sbc	r19, r25
     c56:	12 16       	cp	r1, r18
     c58:	13 06       	cpc	r1, r19
     c5a:	cc f4       	brge	.+50     	; 0xc8e <go_to_coordinate+0x52>
	{	
		checkAndCorrectDirection(1);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 c9 05 	call	0xb92	; 0xb92 <checkAndCorrectDirection>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <go_to_coordinate+0x2e>
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
		line_track_new();
     c66:	0e 94 b3 04 	call	0x966	; 0x966 <line_track_new>
void go_to_coordinate(int next_x , int next_y )
{
	if (next_x-x_coordinate>0)
	{	
		checkAndCorrectDirection(1);
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
     c6a:	cc 9b       	sbis	0x19, 4	; 25
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <go_to_coordinate+0x36>
     c6e:	87 99       	sbic	0x10, 7	; 16
     c70:	fa cf       	rjmp	.-12     	; 0xc66 <go_to_coordinate+0x2a>
}

//SET PWM1B
void set_pwm1b(int b)
{
OCR1B=b;
     c72:	8f e8       	ldi	r24, 0x8F	; 143
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	99 bd       	out	0x29, r25	; 41
     c78:	88 bd       	out	0x28, r24	; 40
}

//SET PWM1A
void set_pwm1a(int a)
{
OCR1A=a;
     c7a:	9b bd       	out	0x2b, r25	; 43
     c7c:	8a bd       	out	0x2a, r24	; 42
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     c7e:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     c80:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     c82:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     c84:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
		}
		set_pwm1b(399);
		set_pwm1a(399);
		bot_brake();
		delay_millisec(500);
     c86:	84 ef       	ldi	r24, 0xF4	; 244
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
	}
	if(next_x-x_coordinate<0)
     c8e:	80 91 99 00 	lds	r24, 0x0099
     c92:	90 91 9a 00 	lds	r25, 0x009A
     c96:	9e 01       	movw	r18, r28
     c98:	28 1b       	sub	r18, r24
     c9a:	39 0b       	sbc	r19, r25
     c9c:	37 ff       	sbrs	r19, 7
     c9e:	0f c0       	rjmp	.+30     	; 0xcbe <go_to_coordinate+0x82>
	{
		checkAndCorrectDirection(-1);
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	9f ef       	ldi	r25, 0xFF	; 255
     ca4:	0e 94 c9 05 	call	0xb92	; 0xb92 <checkAndCorrectDirection>
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <go_to_coordinate+0x72>
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
		line_track_new();
     caa:	0e 94 b3 04 	call	0x966	; 0x966 <line_track_new>
		delay_millisec(500);
	}
	if(next_x-x_coordinate<0)
	{
		checkAndCorrectDirection(-1);
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
     cae:	cc 9b       	sbis	0x19, 4	; 25
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <go_to_coordinate+0x7a>
     cb2:	87 99       	sbic	0x10, 7	; 16
     cb4:	fa cf       	rjmp	.-12     	; 0xcaa <go_to_coordinate+0x6e>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     cb6:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     cb8:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     cba:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     cbc:	af 9a       	sbi	0x15, 7	; 21
		line_track_new();
		}
		bot_brake();
	}

	if (next_y-y_coordinate>0)
     cbe:	80 91 9b 00 	lds	r24, 0x009B
     cc2:	90 91 9c 00 	lds	r25, 0x009C
     cc6:	98 01       	movw	r18, r16
     cc8:	28 1b       	sub	r18, r24
     cca:	39 0b       	sbc	r19, r25
     ccc:	12 16       	cp	r1, r18
     cce:	13 06       	cpc	r1, r19
     cd0:	7c f4       	brge	.+30     	; 0xcf0 <go_to_coordinate+0xb4>
	{	
		checkAndCorrectDirection(2);
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 c9 05 	call	0xb92	; 0xb92 <checkAndCorrectDirection>
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <go_to_coordinate+0xa4>
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
		line_track_new();
     cdc:	0e 94 b3 04 	call	0x966	; 0x966 <line_track_new>
	}

	if (next_y-y_coordinate>0)
	{	
		checkAndCorrectDirection(2);
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
     ce0:	cc 9b       	sbis	0x19, 4	; 25
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <go_to_coordinate+0xac>
     ce4:	87 99       	sbic	0x10, 7	; 16
     ce6:	fa cf       	rjmp	.-12     	; 0xcdc <go_to_coordinate+0xa0>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     ce8:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     cea:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     cec:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     cee:	af 9a       	sbi	0x15, 7	; 21
		{
		line_track_new();
		}
		bot_brake();
	}
	if(next_y-y_coordinate<0)
     cf0:	80 91 9b 00 	lds	r24, 0x009B
     cf4:	90 91 9c 00 	lds	r25, 0x009C
     cf8:	98 01       	movw	r18, r16
     cfa:	28 1b       	sub	r18, r24
     cfc:	39 0b       	sbc	r19, r25
     cfe:	37 ff       	sbrs	r19, 7
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <go_to_coordinate+0xe4>
	{
		checkAndCorrectDirection(-2);
     d02:	8e ef       	ldi	r24, 0xFE	; 254
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	0e 94 c9 05 	call	0xb92	; 0xb92 <checkAndCorrectDirection>
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <go_to_coordinate+0xd4>
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
		{
		line_track_new();
     d0c:	0e 94 b3 04 	call	0x966	; 0x966 <line_track_new>
		bot_brake();
	}
	if(next_y-y_coordinate<0)
	{
		checkAndCorrectDirection(-2);
		while(bit_is_set(PINA,4) && bit_is_set(PIND,7))
     d10:	cc 9b       	sbis	0x19, 4	; 25
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <go_to_coordinate+0xdc>
     d14:	87 99       	sbic	0x10, 7	; 16
     d16:	fa cf       	rjmp	.-12     	; 0xd0c <go_to_coordinate+0xd0>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     d18:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     d1a:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     d1c:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     d1e:	af 9a       	sbi	0x15, 7	; 21
		{
		line_track_new();
		}
		bot_brake();
	}	
	x_coordinate = next_x;
     d20:	d0 93 9a 00 	sts	0x009A, r29
     d24:	c0 93 99 00 	sts	0x0099, r28
	y_coordinate = next_y;
     d28:	10 93 9c 00 	sts	0x009C, r17
     d2c:	00 93 9b 00 	sts	0x009B, r16
	lcd_clear();
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_int_xy(0,1,x_coordinate,2);
     d38:	40 91 99 00 	lds	r20, 0x0099
     d3c:	50 91 9a 00 	lds	r21, 0x009A
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 e0       	ldi	r18, 0x02	; 2
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(5,1,y_coordinate,2);
     d50:	40 91 9b 00 	lds	r20, 0x009B
     d54:	50 91 9c 00 	lds	r21, 0x009C
     d58:	85 e0       	ldi	r24, 0x05	; 5
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	22 e0       	ldi	r18, 0x02	; 2
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
	lcd_write_int_xy(3,0,irc,5);
     d68:	40 91 d1 00 	lds	r20, 0x00D1
     d6c:	50 91 d2 00 	lds	r21, 0x00D2
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	25 e0       	ldi	r18, 0x05	; 5
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
 MOTOR2A=0;
 MOTOR2B=0;
}
void bot_brake(void)
{
MOTOR1A=1;
     d80:	ac 9a       	sbi	0x15, 4	; 21
 MOTOR1B=1;
     d82:	ad 9a       	sbi	0x15, 5	; 21
 MOTOR2A=1;
     d84:	ae 9a       	sbi	0x15, 6	; 21
 MOTOR2B=1;
     d86:	af 9a       	sbi	0x15, 7	; 21
	bot_brake();
	delay_millisec(500);
     d88:	84 ef       	ldi	r24, 0xF4	; 244
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 90 00 	call	0x120	; 0x120 <delay_millisec>
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <main>:

}


int main(void)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
	init_devices();
     da2:	0e 94 4f 04 	call	0x89e	; 0x89e <init_devices>
	lcd_clear();
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("LCD Working");
     dae:	80 e6       	ldi	r24, 0x60	; 96
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			//{
				//dir_array[i][j][k] = 0;
			//}
		//}
	//}
	lcd_clear();
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
	lcd_write_string("Press Any Key");
     dbe:	8c e6       	ldi	r24, 0x6C	; 108
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
return 0;
}

int pressed_switch2(void)
{
if(bit_is_clear(PIND,2))
     dc6:	82 99       	sbic	0x10, 2	; 16
     dc8:	51 c0       	rjmp	.+162    	; 0xe6c <main+0xd2>
	//update_array(1,0,0,0);
	while(1)
	{	
		if(pressed_switch2() || pressed_switch0() || pressed_switch1() || pressed_switch3())
		{
			lcd_clear();
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("pressed");
     dd2:	8a e7       	ldi	r24, 0x7A	; 122
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			while(1)
			{
				// line_track_new();	
				LED&=0b11110000;
     dda:	85 b3       	in	r24, 0x15	; 21
     ddc:	80 7f       	andi	r24, 0xF0	; 240
     dde:	85 bb       	out	0x15, r24	; 21
				LED|=sensorbyte;
     de0:	85 b3       	in	r24, 0x15	; 21
     de2:	90 91 c2 00 	lds	r25, 0x00C2
     de6:	89 2b       	or	r24, r25
     de8:	85 bb       	out	0x15, r24	; 21
				// right_junc_check();
				// left_junc_check();
				// frSensorCheck();
				// irc++;
			lcd_clear();
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
			lcd_write_string("while");
     df2:	82 e8       	ldi	r24, 0x82	; 130
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
			delay_sec(2);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 77 00 	call	0xee	; 0xee <delay_sec>
     e02:	01 ea       	ldi	r16, 0xA1	; 161
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	c1 e0       	ldi	r28, 0x01	; 1
     e08:	d0 e0       	ldi	r29, 0x00	; 0
			
				for (int p = 1; p <= 8; p++)
				{
					
						lcd_clear();
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
						lcd_write_string("for");
     e12:	88 e8       	ldi	r24, 0x88	; 136
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_write_string>
						if(!((p==1 ) || (p==6 )))
     e1a:	c1 30       	cpi	r28, 0x01	; 1
     e1c:	d1 05       	cpc	r29, r1
     e1e:	f9 f0       	breq	.+62     	; 0xe5e <main+0xc4>
     e20:	c6 30       	cpi	r28, 0x06	; 6
     e22:	d1 05       	cpc	r29, r1
     e24:	e1 f0       	breq	.+56     	; 0xe5e <main+0xc4>
						{	
							lcd_clear();
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_byte>
							lcd_write_int_xy(0,0,p,2);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	ae 01       	movw	r20, r28
     e38:	22 e0       	ldi	r18, 0x02	; 2
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_write_int_xy>
							go_to_coordinate(new_array[p][0],new_array[p][1]);
     e40:	f8 01       	movw	r30, r16
     e42:	62 81       	ldd	r22, Z+2	; 0x02
     e44:	73 81       	ldd	r23, Z+3	; 0x03
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <go_to_coordinate>
							LED&=0b11110000;
     e4e:	85 b3       	in	r24, 0x15	; 21
     e50:	80 7f       	andi	r24, 0xF0	; 240
     e52:	85 bb       	out	0x15, r24	; 21
							LED|=sensorbyte;
     e54:	85 b3       	in	r24, 0x15	; 21
     e56:	90 91 c2 00 	lds	r25, 0x00C2
     e5a:	89 2b       	or	r24, r25
     e5c:	85 bb       	out	0x15, r24	; 21
				// irc++;
			lcd_clear();
			lcd_write_string("while");
			delay_sec(2);
			
				for (int p = 1; p <= 8; p++)
     e5e:	21 96       	adiw	r28, 0x01	; 1
     e60:	0c 5f       	subi	r16, 0xFC	; 252
     e62:	1f 4f       	sbci	r17, 0xFF	; 255
     e64:	c9 30       	cpi	r28, 0x09	; 9
     e66:	d1 05       	cpc	r29, r1
     e68:	81 f6       	brne	.-96     	; 0xe0a <main+0x70>
     e6a:	b7 cf       	rjmp	.-146    	; 0xdda <main+0x40>
DDRD&=0xF0;
}

int pressed_switch0(void)
{
if(bit_is_clear(PIND,0))
     e6c:	80 9b       	sbis	0x10, 0	; 16
     e6e:	ad cf       	rjmp	.-166    	; 0xdca <main+0x30>
return 0;
}

int pressed_switch1(void)
{
if(bit_is_clear(PIND,1))
     e70:	81 9b       	sbis	0x10, 1	; 16
     e72:	ab cf       	rjmp	.-170    	; 0xdca <main+0x30>
return 0;
}

int pressed_switch3(void)
{
if(bit_is_clear(PIND,3))
     e74:	83 9b       	sbis	0x10, 3	; 16
     e76:	a9 cf       	rjmp	.-174    	; 0xdca <main+0x30>
     e78:	a6 cf       	rjmp	.-180    	; 0xdc6 <main+0x2c>

00000e7a <retrieve_threshold>:
void retrieve_threshold(void)
{
	unsigned char eeprom_addr=0x0000;
	for(int i=0;i<sensor_num;i++)
	{
		threshold1[i]=eeprom_read_byte(eeprom_addr);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__eerd_byte_m16>
     e82:	80 93 87 01 	sts	0x0187, r24
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__eerd_byte_m16>
     e8e:	80 93 88 01 	sts	0x0188, r24
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__eerd_byte_m16>
     e9a:	80 93 89 01 	sts	0x0189, r24
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__eerd_byte_m16>
     ea6:	80 93 8a 01 	sts	0x018A, r24
		eeprom_addr++;
	}
}
     eaa:	08 95       	ret

00000eac <set_threshold>:
		
}

//SET THRESHOLD VALUE
void set_threshold(void)
{
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
	
	
	 for(i=0;i<sensor_num;i++)
	 {
	 
		 threshold1[i]=((max[i]+min[i])>>1);
     eb0:	20 91 8b 01 	lds	r18, 0x018B
     eb4:	80 91 83 01 	lds	r24, 0x0183
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	82 0f       	add	r24, r18
     ebc:	91 1d       	adc	r25, r1
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	80 93 87 01 	sts	0x0187, r24
     ec6:	20 91 8c 01 	lds	r18, 0x018C
     eca:	80 91 84 01 	lds	r24, 0x0184
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	82 0f       	add	r24, r18
     ed2:	91 1d       	adc	r25, r1
     ed4:	95 95       	asr	r25
     ed6:	87 95       	ror	r24
     ed8:	80 93 88 01 	sts	0x0188, r24
     edc:	20 91 8d 01 	lds	r18, 0x018D
     ee0:	80 91 85 01 	lds	r24, 0x0185
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	82 0f       	add	r24, r18
     ee8:	91 1d       	adc	r25, r1
     eea:	95 95       	asr	r25
     eec:	87 95       	ror	r24
     eee:	80 93 89 01 	sts	0x0189, r24
     ef2:	20 91 8e 01 	lds	r18, 0x018E
     ef6:	80 91 86 01 	lds	r24, 0x0186
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	82 0f       	add	r24, r18
     efe:	91 1d       	adc	r25, r1
     f00:	95 95       	asr	r25
     f02:	87 95       	ror	r24
     f04:	80 93 8a 01 	sts	0x018A, r24
     f08:	c0 e0       	ldi	r28, 0x00	; 0
     f0a:	d0 e0       	ldi	r29, 0x00	; 0
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
     f0c:	fe 01       	movw	r30, r28
     f0e:	e9 57       	subi	r30, 0x79	; 121
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	ce 01       	movw	r24, r28
     f14:	60 81       	ld	r22, Z
     f16:	0e 94 de 09 	call	0x13bc	; 0x13bc <__eewr_byte_m16>
	 
		 threshold1[i]=((max[i]+min[i])>>1);
		  
	 }
	 
	 for(int i=0;i<sensor_num;i++)
     f1a:	21 96       	adiw	r28, 0x01	; 1
     f1c:	c4 30       	cpi	r28, 0x04	; 4
     f1e:	d1 05       	cpc	r29, r1
     f20:	a9 f7       	brne	.-22     	; 0xf0c <set_threshold+0x60>
	{
		eeprom_write_byte(eeprom_addr,threshold1[i]);
		eeprom_addr++;
	}
	 
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <__subsf3>:
     f28:	50 58       	subi	r21, 0x80	; 128

00000f2a <__addsf3>:
     f2a:	bb 27       	eor	r27, r27
     f2c:	aa 27       	eor	r26, r26
     f2e:	0e d0       	rcall	.+28     	; 0xf4c <__addsf3x>
     f30:	75 c1       	rjmp	.+746    	; 0x121c <__fp_round>
     f32:	66 d1       	rcall	.+716    	; 0x1200 <__fp_pscA>
     f34:	30 f0       	brcs	.+12     	; 0xf42 <__addsf3+0x18>
     f36:	6b d1       	rcall	.+726    	; 0x120e <__fp_pscB>
     f38:	20 f0       	brcs	.+8      	; 0xf42 <__addsf3+0x18>
     f3a:	31 f4       	brne	.+12     	; 0xf48 <__addsf3+0x1e>
     f3c:	9f 3f       	cpi	r25, 0xFF	; 255
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__addsf3+0x1a>
     f40:	1e f4       	brtc	.+6      	; 0xf48 <__addsf3+0x1e>
     f42:	5b c1       	rjmp	.+694    	; 0x11fa <__fp_nan>
     f44:	0e f4       	brtc	.+2      	; 0xf48 <__addsf3+0x1e>
     f46:	e0 95       	com	r30
     f48:	e7 fb       	bst	r30, 7
     f4a:	51 c1       	rjmp	.+674    	; 0x11ee <__fp_inf>

00000f4c <__addsf3x>:
     f4c:	e9 2f       	mov	r30, r25
     f4e:	77 d1       	rcall	.+750    	; 0x123e <__fp_split3>
     f50:	80 f3       	brcs	.-32     	; 0xf32 <__addsf3+0x8>
     f52:	ba 17       	cp	r27, r26
     f54:	62 07       	cpc	r22, r18
     f56:	73 07       	cpc	r23, r19
     f58:	84 07       	cpc	r24, r20
     f5a:	95 07       	cpc	r25, r21
     f5c:	18 f0       	brcs	.+6      	; 0xf64 <__addsf3x+0x18>
     f5e:	71 f4       	brne	.+28     	; 0xf7c <__addsf3x+0x30>
     f60:	9e f5       	brtc	.+102    	; 0xfc8 <__addsf3x+0x7c>
     f62:	8f c1       	rjmp	.+798    	; 0x1282 <__fp_zero>
     f64:	0e f4       	brtc	.+2      	; 0xf68 <__addsf3x+0x1c>
     f66:	e0 95       	com	r30
     f68:	0b 2e       	mov	r0, r27
     f6a:	ba 2f       	mov	r27, r26
     f6c:	a0 2d       	mov	r26, r0
     f6e:	0b 01       	movw	r0, r22
     f70:	b9 01       	movw	r22, r18
     f72:	90 01       	movw	r18, r0
     f74:	0c 01       	movw	r0, r24
     f76:	ca 01       	movw	r24, r20
     f78:	a0 01       	movw	r20, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	ff 27       	eor	r31, r31
     f7e:	59 1b       	sub	r21, r25
     f80:	99 f0       	breq	.+38     	; 0xfa8 <__addsf3x+0x5c>
     f82:	59 3f       	cpi	r21, 0xF9	; 249
     f84:	50 f4       	brcc	.+20     	; 0xf9a <__addsf3x+0x4e>
     f86:	50 3e       	cpi	r21, 0xE0	; 224
     f88:	68 f1       	brcs	.+90     	; 0xfe4 <__addsf3x+0x98>
     f8a:	1a 16       	cp	r1, r26
     f8c:	f0 40       	sbci	r31, 0x00	; 0
     f8e:	a2 2f       	mov	r26, r18
     f90:	23 2f       	mov	r18, r19
     f92:	34 2f       	mov	r19, r20
     f94:	44 27       	eor	r20, r20
     f96:	58 5f       	subi	r21, 0xF8	; 248
     f98:	f3 cf       	rjmp	.-26     	; 0xf80 <__addsf3x+0x34>
     f9a:	46 95       	lsr	r20
     f9c:	37 95       	ror	r19
     f9e:	27 95       	ror	r18
     fa0:	a7 95       	ror	r26
     fa2:	f0 40       	sbci	r31, 0x00	; 0
     fa4:	53 95       	inc	r21
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <__addsf3x+0x4e>
     fa8:	7e f4       	brtc	.+30     	; 0xfc8 <__addsf3x+0x7c>
     faa:	1f 16       	cp	r1, r31
     fac:	ba 0b       	sbc	r27, r26
     fae:	62 0b       	sbc	r22, r18
     fb0:	73 0b       	sbc	r23, r19
     fb2:	84 0b       	sbc	r24, r20
     fb4:	ba f0       	brmi	.+46     	; 0xfe4 <__addsf3x+0x98>
     fb6:	91 50       	subi	r25, 0x01	; 1
     fb8:	a1 f0       	breq	.+40     	; 0xfe2 <__addsf3x+0x96>
     fba:	ff 0f       	add	r31, r31
     fbc:	bb 1f       	adc	r27, r27
     fbe:	66 1f       	adc	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	c2 f7       	brpl	.-16     	; 0xfb6 <__addsf3x+0x6a>
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <__addsf3x+0x98>
     fc8:	ba 0f       	add	r27, r26
     fca:	62 1f       	adc	r22, r18
     fcc:	73 1f       	adc	r23, r19
     fce:	84 1f       	adc	r24, r20
     fd0:	48 f4       	brcc	.+18     	; 0xfe4 <__addsf3x+0x98>
     fd2:	87 95       	ror	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	b7 95       	ror	r27
     fda:	f7 95       	ror	r31
     fdc:	9e 3f       	cpi	r25, 0xFE	; 254
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <__addsf3x+0x96>
     fe0:	b3 cf       	rjmp	.-154    	; 0xf48 <__addsf3+0x1e>
     fe2:	93 95       	inc	r25
     fe4:	88 0f       	add	r24, r24
     fe6:	08 f0       	brcs	.+2      	; 0xfea <__addsf3x+0x9e>
     fe8:	99 27       	eor	r25, r25
     fea:	ee 0f       	add	r30, r30
     fec:	97 95       	ror	r25
     fee:	87 95       	ror	r24
     ff0:	08 95       	ret

00000ff2 <__cmpsf2>:
     ff2:	d9 d0       	rcall	.+434    	; 0x11a6 <__fp_cmp>
     ff4:	08 f4       	brcc	.+2      	; 0xff8 <__cmpsf2+0x6>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	08 95       	ret

00000ffa <__divsf3>:
     ffa:	0c d0       	rcall	.+24     	; 0x1014 <__divsf3x>
     ffc:	0f c1       	rjmp	.+542    	; 0x121c <__fp_round>
     ffe:	07 d1       	rcall	.+526    	; 0x120e <__fp_pscB>
    1000:	40 f0       	brcs	.+16     	; 0x1012 <__divsf3+0x18>
    1002:	fe d0       	rcall	.+508    	; 0x1200 <__fp_pscA>
    1004:	30 f0       	brcs	.+12     	; 0x1012 <__divsf3+0x18>
    1006:	21 f4       	brne	.+8      	; 0x1010 <__divsf3+0x16>
    1008:	5f 3f       	cpi	r21, 0xFF	; 255
    100a:	19 f0       	breq	.+6      	; 0x1012 <__divsf3+0x18>
    100c:	f0 c0       	rjmp	.+480    	; 0x11ee <__fp_inf>
    100e:	51 11       	cpse	r21, r1
    1010:	39 c1       	rjmp	.+626    	; 0x1284 <__fp_szero>
    1012:	f3 c0       	rjmp	.+486    	; 0x11fa <__fp_nan>

00001014 <__divsf3x>:
    1014:	14 d1       	rcall	.+552    	; 0x123e <__fp_split3>
    1016:	98 f3       	brcs	.-26     	; 0xffe <__divsf3+0x4>

00001018 <__divsf3_pse>:
    1018:	99 23       	and	r25, r25
    101a:	c9 f3       	breq	.-14     	; 0x100e <__divsf3+0x14>
    101c:	55 23       	and	r21, r21
    101e:	b1 f3       	breq	.-20     	; 0x100c <__divsf3+0x12>
    1020:	95 1b       	sub	r25, r21
    1022:	55 0b       	sbc	r21, r21
    1024:	bb 27       	eor	r27, r27
    1026:	aa 27       	eor	r26, r26
    1028:	62 17       	cp	r22, r18
    102a:	73 07       	cpc	r23, r19
    102c:	84 07       	cpc	r24, r20
    102e:	38 f0       	brcs	.+14     	; 0x103e <__divsf3_pse+0x26>
    1030:	9f 5f       	subi	r25, 0xFF	; 255
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	44 1f       	adc	r20, r20
    103a:	aa 1f       	adc	r26, r26
    103c:	a9 f3       	breq	.-22     	; 0x1028 <__divsf3_pse+0x10>
    103e:	33 d0       	rcall	.+102    	; 0x10a6 <__divsf3_pse+0x8e>
    1040:	0e 2e       	mov	r0, r30
    1042:	3a f0       	brmi	.+14     	; 0x1052 <__divsf3_pse+0x3a>
    1044:	e0 e8       	ldi	r30, 0x80	; 128
    1046:	30 d0       	rcall	.+96     	; 0x10a8 <__divsf3_pse+0x90>
    1048:	91 50       	subi	r25, 0x01	; 1
    104a:	50 40       	sbci	r21, 0x00	; 0
    104c:	e6 95       	lsr	r30
    104e:	00 1c       	adc	r0, r0
    1050:	ca f7       	brpl	.-14     	; 0x1044 <__divsf3_pse+0x2c>
    1052:	29 d0       	rcall	.+82     	; 0x10a6 <__divsf3_pse+0x8e>
    1054:	fe 2f       	mov	r31, r30
    1056:	27 d0       	rcall	.+78     	; 0x10a6 <__divsf3_pse+0x8e>
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	bb 1f       	adc	r27, r27
    1060:	26 17       	cp	r18, r22
    1062:	37 07       	cpc	r19, r23
    1064:	48 07       	cpc	r20, r24
    1066:	ab 07       	cpc	r26, r27
    1068:	b0 e8       	ldi	r27, 0x80	; 128
    106a:	09 f0       	breq	.+2      	; 0x106e <__divsf3_pse+0x56>
    106c:	bb 0b       	sbc	r27, r27
    106e:	80 2d       	mov	r24, r0
    1070:	bf 01       	movw	r22, r30
    1072:	ff 27       	eor	r31, r31
    1074:	93 58       	subi	r25, 0x83	; 131
    1076:	5f 4f       	sbci	r21, 0xFF	; 255
    1078:	2a f0       	brmi	.+10     	; 0x1084 <__divsf3_pse+0x6c>
    107a:	9e 3f       	cpi	r25, 0xFE	; 254
    107c:	51 05       	cpc	r21, r1
    107e:	68 f0       	brcs	.+26     	; 0x109a <__divsf3_pse+0x82>
    1080:	b6 c0       	rjmp	.+364    	; 0x11ee <__fp_inf>
    1082:	00 c1       	rjmp	.+512    	; 0x1284 <__fp_szero>
    1084:	5f 3f       	cpi	r21, 0xFF	; 255
    1086:	ec f3       	brlt	.-6      	; 0x1082 <__divsf3_pse+0x6a>
    1088:	98 3e       	cpi	r25, 0xE8	; 232
    108a:	dc f3       	brlt	.-10     	; 0x1082 <__divsf3_pse+0x6a>
    108c:	86 95       	lsr	r24
    108e:	77 95       	ror	r23
    1090:	67 95       	ror	r22
    1092:	b7 95       	ror	r27
    1094:	f7 95       	ror	r31
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	c9 f7       	brne	.-14     	; 0x108c <__divsf3_pse+0x74>
    109a:	88 0f       	add	r24, r24
    109c:	91 1d       	adc	r25, r1
    109e:	96 95       	lsr	r25
    10a0:	87 95       	ror	r24
    10a2:	97 f9       	bld	r25, 7
    10a4:	08 95       	ret
    10a6:	e1 e0       	ldi	r30, 0x01	; 1
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	bb 1f       	adc	r27, r27
    10b0:	62 17       	cp	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	ba 07       	cpc	r27, r26
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__divsf3_pse+0xaa>
    10ba:	62 1b       	sub	r22, r18
    10bc:	73 0b       	sbc	r23, r19
    10be:	84 0b       	sbc	r24, r20
    10c0:	ba 0b       	sbc	r27, r26
    10c2:	ee 1f       	adc	r30, r30
    10c4:	88 f7       	brcc	.-30     	; 0x10a8 <__divsf3_pse+0x90>
    10c6:	e0 95       	com	r30
    10c8:	08 95       	ret

000010ca <__fixsfsi>:
    10ca:	04 d0       	rcall	.+8      	; 0x10d4 <__fixunssfsi>
    10cc:	68 94       	set
    10ce:	b1 11       	cpse	r27, r1
    10d0:	d9 c0       	rjmp	.+434    	; 0x1284 <__fp_szero>
    10d2:	08 95       	ret

000010d4 <__fixunssfsi>:
    10d4:	bc d0       	rcall	.+376    	; 0x124e <__fp_splitA>
    10d6:	88 f0       	brcs	.+34     	; 0x10fa <__fixunssfsi+0x26>
    10d8:	9f 57       	subi	r25, 0x7F	; 127
    10da:	90 f0       	brcs	.+36     	; 0x1100 <__fixunssfsi+0x2c>
    10dc:	b9 2f       	mov	r27, r25
    10de:	99 27       	eor	r25, r25
    10e0:	b7 51       	subi	r27, 0x17	; 23
    10e2:	a0 f0       	brcs	.+40     	; 0x110c <__fixunssfsi+0x38>
    10e4:	d1 f0       	breq	.+52     	; 0x111a <__fixunssfsi+0x46>
    10e6:	66 0f       	add	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	1a f0       	brmi	.+6      	; 0x10f6 <__fixunssfsi+0x22>
    10f0:	ba 95       	dec	r27
    10f2:	c9 f7       	brne	.-14     	; 0x10e6 <__fixunssfsi+0x12>
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <__fixunssfsi+0x46>
    10f6:	b1 30       	cpi	r27, 0x01	; 1
    10f8:	81 f0       	breq	.+32     	; 0x111a <__fixunssfsi+0x46>
    10fa:	c3 d0       	rcall	.+390    	; 0x1282 <__fp_zero>
    10fc:	b1 e0       	ldi	r27, 0x01	; 1
    10fe:	08 95       	ret
    1100:	c0 c0       	rjmp	.+384    	; 0x1282 <__fp_zero>
    1102:	67 2f       	mov	r22, r23
    1104:	78 2f       	mov	r23, r24
    1106:	88 27       	eor	r24, r24
    1108:	b8 5f       	subi	r27, 0xF8	; 248
    110a:	39 f0       	breq	.+14     	; 0x111a <__fixunssfsi+0x46>
    110c:	b9 3f       	cpi	r27, 0xF9	; 249
    110e:	cc f3       	brlt	.-14     	; 0x1102 <__fixunssfsi+0x2e>
    1110:	86 95       	lsr	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	b3 95       	inc	r27
    1118:	d9 f7       	brne	.-10     	; 0x1110 <__fixunssfsi+0x3c>
    111a:	3e f4       	brtc	.+14     	; 0x112a <__fixunssfsi+0x56>
    111c:	90 95       	com	r25
    111e:	80 95       	com	r24
    1120:	70 95       	com	r23
    1122:	61 95       	neg	r22
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	08 95       	ret

0000112c <__floatunsisf>:
    112c:	e8 94       	clt
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <__floatsisf+0x12>

00001130 <__floatsisf>:
    1130:	97 fb       	bst	r25, 7
    1132:	3e f4       	brtc	.+14     	; 0x1142 <__floatsisf+0x12>
    1134:	90 95       	com	r25
    1136:	80 95       	com	r24
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	99 23       	and	r25, r25
    1144:	a9 f0       	breq	.+42     	; 0x1170 <__floatsisf+0x40>
    1146:	f9 2f       	mov	r31, r25
    1148:	96 e9       	ldi	r25, 0x96	; 150
    114a:	bb 27       	eor	r27, r27
    114c:	93 95       	inc	r25
    114e:	f6 95       	lsr	r31
    1150:	87 95       	ror	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b7 95       	ror	r27
    1158:	f1 11       	cpse	r31, r1
    115a:	f8 cf       	rjmp	.-16     	; 0x114c <__floatsisf+0x1c>
    115c:	fa f4       	brpl	.+62     	; 0x119c <__floatsisf+0x6c>
    115e:	bb 0f       	add	r27, r27
    1160:	11 f4       	brne	.+4      	; 0x1166 <__floatsisf+0x36>
    1162:	60 ff       	sbrs	r22, 0
    1164:	1b c0       	rjmp	.+54     	; 0x119c <__floatsisf+0x6c>
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	16 c0       	rjmp	.+44     	; 0x119c <__floatsisf+0x6c>
    1170:	88 23       	and	r24, r24
    1172:	11 f0       	breq	.+4      	; 0x1178 <__floatsisf+0x48>
    1174:	96 e9       	ldi	r25, 0x96	; 150
    1176:	11 c0       	rjmp	.+34     	; 0x119a <__floatsisf+0x6a>
    1178:	77 23       	and	r23, r23
    117a:	21 f0       	breq	.+8      	; 0x1184 <__floatsisf+0x54>
    117c:	9e e8       	ldi	r25, 0x8E	; 142
    117e:	87 2f       	mov	r24, r23
    1180:	76 2f       	mov	r23, r22
    1182:	05 c0       	rjmp	.+10     	; 0x118e <__floatsisf+0x5e>
    1184:	66 23       	and	r22, r22
    1186:	71 f0       	breq	.+28     	; 0x11a4 <__floatsisf+0x74>
    1188:	96 e8       	ldi	r25, 0x86	; 134
    118a:	86 2f       	mov	r24, r22
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	2a f0       	brmi	.+10     	; 0x119c <__floatsisf+0x6c>
    1192:	9a 95       	dec	r25
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	da f7       	brpl	.-10     	; 0x1192 <__floatsisf+0x62>
    119c:	88 0f       	add	r24, r24
    119e:	96 95       	lsr	r25
    11a0:	87 95       	ror	r24
    11a2:	97 f9       	bld	r25, 7
    11a4:	08 95       	ret

000011a6 <__fp_cmp>:
    11a6:	99 0f       	add	r25, r25
    11a8:	00 08       	sbc	r0, r0
    11aa:	55 0f       	add	r21, r21
    11ac:	aa 0b       	sbc	r26, r26
    11ae:	e0 e8       	ldi	r30, 0x80	; 128
    11b0:	fe ef       	ldi	r31, 0xFE	; 254
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	e8 07       	cpc	r30, r24
    11b8:	f9 07       	cpc	r31, r25
    11ba:	c0 f0       	brcs	.+48     	; 0x11ec <__fp_cmp+0x46>
    11bc:	12 16       	cp	r1, r18
    11be:	13 06       	cpc	r1, r19
    11c0:	e4 07       	cpc	r30, r20
    11c2:	f5 07       	cpc	r31, r21
    11c4:	98 f0       	brcs	.+38     	; 0x11ec <__fp_cmp+0x46>
    11c6:	62 1b       	sub	r22, r18
    11c8:	73 0b       	sbc	r23, r19
    11ca:	84 0b       	sbc	r24, r20
    11cc:	95 0b       	sbc	r25, r21
    11ce:	39 f4       	brne	.+14     	; 0x11de <__fp_cmp+0x38>
    11d0:	0a 26       	eor	r0, r26
    11d2:	61 f0       	breq	.+24     	; 0x11ec <__fp_cmp+0x46>
    11d4:	23 2b       	or	r18, r19
    11d6:	24 2b       	or	r18, r20
    11d8:	25 2b       	or	r18, r21
    11da:	21 f4       	brne	.+8      	; 0x11e4 <__fp_cmp+0x3e>
    11dc:	08 95       	ret
    11de:	0a 26       	eor	r0, r26
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <__fp_cmp+0x3e>
    11e2:	a1 40       	sbci	r26, 0x01	; 1
    11e4:	a6 95       	lsr	r26
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	81 1d       	adc	r24, r1
    11ea:	81 1d       	adc	r24, r1
    11ec:	08 95       	ret

000011ee <__fp_inf>:
    11ee:	97 f9       	bld	r25, 7
    11f0:	9f 67       	ori	r25, 0x7F	; 127
    11f2:	80 e8       	ldi	r24, 0x80	; 128
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	08 95       	ret

000011fa <__fp_nan>:
    11fa:	9f ef       	ldi	r25, 0xFF	; 255
    11fc:	80 ec       	ldi	r24, 0xC0	; 192
    11fe:	08 95       	ret

00001200 <__fp_pscA>:
    1200:	00 24       	eor	r0, r0
    1202:	0a 94       	dec	r0
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	18 06       	cpc	r1, r24
    120a:	09 06       	cpc	r0, r25
    120c:	08 95       	ret

0000120e <__fp_pscB>:
    120e:	00 24       	eor	r0, r0
    1210:	0a 94       	dec	r0
    1212:	12 16       	cp	r1, r18
    1214:	13 06       	cpc	r1, r19
    1216:	14 06       	cpc	r1, r20
    1218:	05 06       	cpc	r0, r21
    121a:	08 95       	ret

0000121c <__fp_round>:
    121c:	09 2e       	mov	r0, r25
    121e:	03 94       	inc	r0
    1220:	00 0c       	add	r0, r0
    1222:	11 f4       	brne	.+4      	; 0x1228 <__fp_round+0xc>
    1224:	88 23       	and	r24, r24
    1226:	52 f0       	brmi	.+20     	; 0x123c <__fp_round+0x20>
    1228:	bb 0f       	add	r27, r27
    122a:	40 f4       	brcc	.+16     	; 0x123c <__fp_round+0x20>
    122c:	bf 2b       	or	r27, r31
    122e:	11 f4       	brne	.+4      	; 0x1234 <__fp_round+0x18>
    1230:	60 ff       	sbrs	r22, 0
    1232:	04 c0       	rjmp	.+8      	; 0x123c <__fp_round+0x20>
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__fp_split3>:
    123e:	57 fd       	sbrc	r21, 7
    1240:	90 58       	subi	r25, 0x80	; 128
    1242:	44 0f       	add	r20, r20
    1244:	55 1f       	adc	r21, r21
    1246:	59 f0       	breq	.+22     	; 0x125e <__fp_splitA+0x10>
    1248:	5f 3f       	cpi	r21, 0xFF	; 255
    124a:	71 f0       	breq	.+28     	; 0x1268 <__fp_splitA+0x1a>
    124c:	47 95       	ror	r20

0000124e <__fp_splitA>:
    124e:	88 0f       	add	r24, r24
    1250:	97 fb       	bst	r25, 7
    1252:	99 1f       	adc	r25, r25
    1254:	61 f0       	breq	.+24     	; 0x126e <__fp_splitA+0x20>
    1256:	9f 3f       	cpi	r25, 0xFF	; 255
    1258:	79 f0       	breq	.+30     	; 0x1278 <__fp_splitA+0x2a>
    125a:	87 95       	ror	r24
    125c:	08 95       	ret
    125e:	12 16       	cp	r1, r18
    1260:	13 06       	cpc	r1, r19
    1262:	14 06       	cpc	r1, r20
    1264:	55 1f       	adc	r21, r21
    1266:	f2 cf       	rjmp	.-28     	; 0x124c <__fp_split3+0xe>
    1268:	46 95       	lsr	r20
    126a:	f1 df       	rcall	.-30     	; 0x124e <__fp_splitA>
    126c:	08 c0       	rjmp	.+16     	; 0x127e <__fp_splitA+0x30>
    126e:	16 16       	cp	r1, r22
    1270:	17 06       	cpc	r1, r23
    1272:	18 06       	cpc	r1, r24
    1274:	99 1f       	adc	r25, r25
    1276:	f1 cf       	rjmp	.-30     	; 0x125a <__fp_splitA+0xc>
    1278:	86 95       	lsr	r24
    127a:	71 05       	cpc	r23, r1
    127c:	61 05       	cpc	r22, r1
    127e:	08 94       	sec
    1280:	08 95       	ret

00001282 <__fp_zero>:
    1282:	e8 94       	clt

00001284 <__fp_szero>:
    1284:	bb 27       	eor	r27, r27
    1286:	66 27       	eor	r22, r22
    1288:	77 27       	eor	r23, r23
    128a:	cb 01       	movw	r24, r22
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret

00001290 <__gesf2>:
    1290:	8a df       	rcall	.-236    	; 0x11a6 <__fp_cmp>
    1292:	08 f4       	brcc	.+2      	; 0x1296 <__gesf2+0x6>
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	08 95       	ret

00001298 <__mulsf3>:
    1298:	0b d0       	rcall	.+22     	; 0x12b0 <__mulsf3x>
    129a:	c0 cf       	rjmp	.-128    	; 0x121c <__fp_round>
    129c:	b1 df       	rcall	.-158    	; 0x1200 <__fp_pscA>
    129e:	28 f0       	brcs	.+10     	; 0x12aa <__mulsf3+0x12>
    12a0:	b6 df       	rcall	.-148    	; 0x120e <__fp_pscB>
    12a2:	18 f0       	brcs	.+6      	; 0x12aa <__mulsf3+0x12>
    12a4:	95 23       	and	r25, r21
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__mulsf3+0x12>
    12a8:	a2 cf       	rjmp	.-188    	; 0x11ee <__fp_inf>
    12aa:	a7 cf       	rjmp	.-178    	; 0x11fa <__fp_nan>
    12ac:	11 24       	eor	r1, r1
    12ae:	ea cf       	rjmp	.-44     	; 0x1284 <__fp_szero>

000012b0 <__mulsf3x>:
    12b0:	c6 df       	rcall	.-116    	; 0x123e <__fp_split3>
    12b2:	a0 f3       	brcs	.-24     	; 0x129c <__mulsf3+0x4>

000012b4 <__mulsf3_pse>:
    12b4:	95 9f       	mul	r25, r21
    12b6:	d1 f3       	breq	.-12     	; 0x12ac <__mulsf3+0x14>
    12b8:	95 0f       	add	r25, r21
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	55 1f       	adc	r21, r21
    12be:	62 9f       	mul	r22, r18
    12c0:	f0 01       	movw	r30, r0
    12c2:	72 9f       	mul	r23, r18
    12c4:	bb 27       	eor	r27, r27
    12c6:	f0 0d       	add	r31, r0
    12c8:	b1 1d       	adc	r27, r1
    12ca:	63 9f       	mul	r22, r19
    12cc:	aa 27       	eor	r26, r26
    12ce:	f0 0d       	add	r31, r0
    12d0:	b1 1d       	adc	r27, r1
    12d2:	aa 1f       	adc	r26, r26
    12d4:	64 9f       	mul	r22, r20
    12d6:	66 27       	eor	r22, r22
    12d8:	b0 0d       	add	r27, r0
    12da:	a1 1d       	adc	r26, r1
    12dc:	66 1f       	adc	r22, r22
    12de:	82 9f       	mul	r24, r18
    12e0:	22 27       	eor	r18, r18
    12e2:	b0 0d       	add	r27, r0
    12e4:	a1 1d       	adc	r26, r1
    12e6:	62 1f       	adc	r22, r18
    12e8:	73 9f       	mul	r23, r19
    12ea:	b0 0d       	add	r27, r0
    12ec:	a1 1d       	adc	r26, r1
    12ee:	62 1f       	adc	r22, r18
    12f0:	83 9f       	mul	r24, r19
    12f2:	a0 0d       	add	r26, r0
    12f4:	61 1d       	adc	r22, r1
    12f6:	22 1f       	adc	r18, r18
    12f8:	74 9f       	mul	r23, r20
    12fa:	33 27       	eor	r19, r19
    12fc:	a0 0d       	add	r26, r0
    12fe:	61 1d       	adc	r22, r1
    1300:	23 1f       	adc	r18, r19
    1302:	84 9f       	mul	r24, r20
    1304:	60 0d       	add	r22, r0
    1306:	21 1d       	adc	r18, r1
    1308:	82 2f       	mov	r24, r18
    130a:	76 2f       	mov	r23, r22
    130c:	6a 2f       	mov	r22, r26
    130e:	11 24       	eor	r1, r1
    1310:	9f 57       	subi	r25, 0x7F	; 127
    1312:	50 40       	sbci	r21, 0x00	; 0
    1314:	8a f0       	brmi	.+34     	; 0x1338 <__mulsf3_pse+0x84>
    1316:	e1 f0       	breq	.+56     	; 0x1350 <__mulsf3_pse+0x9c>
    1318:	88 23       	and	r24, r24
    131a:	4a f0       	brmi	.+18     	; 0x132e <__mulsf3_pse+0x7a>
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	bb 1f       	adc	r27, r27
    1322:	66 1f       	adc	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	91 50       	subi	r25, 0x01	; 1
    132a:	50 40       	sbci	r21, 0x00	; 0
    132c:	a9 f7       	brne	.-22     	; 0x1318 <__mulsf3_pse+0x64>
    132e:	9e 3f       	cpi	r25, 0xFE	; 254
    1330:	51 05       	cpc	r21, r1
    1332:	70 f0       	brcs	.+28     	; 0x1350 <__mulsf3_pse+0x9c>
    1334:	5c cf       	rjmp	.-328    	; 0x11ee <__fp_inf>
    1336:	a6 cf       	rjmp	.-180    	; 0x1284 <__fp_szero>
    1338:	5f 3f       	cpi	r21, 0xFF	; 255
    133a:	ec f3       	brlt	.-6      	; 0x1336 <__mulsf3_pse+0x82>
    133c:	98 3e       	cpi	r25, 0xE8	; 232
    133e:	dc f3       	brlt	.-10     	; 0x1336 <__mulsf3_pse+0x82>
    1340:	86 95       	lsr	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	b7 95       	ror	r27
    1348:	f7 95       	ror	r31
    134a:	e7 95       	ror	r30
    134c:	9f 5f       	subi	r25, 0xFF	; 255
    134e:	c1 f7       	brne	.-16     	; 0x1340 <__mulsf3_pse+0x8c>
    1350:	fe 2b       	or	r31, r30
    1352:	88 0f       	add	r24, r24
    1354:	91 1d       	adc	r25, r1
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__divmodhi4>:
    135e:	97 fb       	bst	r25, 7
    1360:	09 2e       	mov	r0, r25
    1362:	07 26       	eor	r0, r23
    1364:	0a d0       	rcall	.+20     	; 0x137a <__divmodhi4_neg1>
    1366:	77 fd       	sbrc	r23, 7
    1368:	04 d0       	rcall	.+8      	; 0x1372 <__divmodhi4_neg2>
    136a:	0c d0       	rcall	.+24     	; 0x1384 <__udivmodhi4>
    136c:	06 d0       	rcall	.+12     	; 0x137a <__divmodhi4_neg1>
    136e:	00 20       	and	r0, r0
    1370:	1a f4       	brpl	.+6      	; 0x1378 <__divmodhi4_exit>

00001372 <__divmodhi4_neg2>:
    1372:	70 95       	com	r23
    1374:	61 95       	neg	r22
    1376:	7f 4f       	sbci	r23, 0xFF	; 255

00001378 <__divmodhi4_exit>:
    1378:	08 95       	ret

0000137a <__divmodhi4_neg1>:
    137a:	f6 f7       	brtc	.-4      	; 0x1378 <__divmodhi4_exit>
    137c:	90 95       	com	r25
    137e:	81 95       	neg	r24
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__udivmodhi4>:
    1384:	aa 1b       	sub	r26, r26
    1386:	bb 1b       	sub	r27, r27
    1388:	51 e1       	ldi	r21, 0x11	; 17
    138a:	07 c0       	rjmp	.+14     	; 0x139a <__udivmodhi4_ep>

0000138c <__udivmodhi4_loop>:
    138c:	aa 1f       	adc	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	a6 17       	cp	r26, r22
    1392:	b7 07       	cpc	r27, r23
    1394:	10 f0       	brcs	.+4      	; 0x139a <__udivmodhi4_ep>
    1396:	a6 1b       	sub	r26, r22
    1398:	b7 0b       	sbc	r27, r23

0000139a <__udivmodhi4_ep>:
    139a:	88 1f       	adc	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	5a 95       	dec	r21
    13a0:	a9 f7       	brne	.-22     	; 0x138c <__udivmodhi4_loop>
    13a2:	80 95       	com	r24
    13a4:	90 95       	com	r25
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	08 95       	ret

000013ac <__eerd_byte_m16>:
    13ac:	e1 99       	sbic	0x1c, 1	; 28
    13ae:	fe cf       	rjmp	.-4      	; 0x13ac <__eerd_byte_m16>
    13b0:	9f bb       	out	0x1f, r25	; 31
    13b2:	8e bb       	out	0x1e, r24	; 30
    13b4:	e0 9a       	sbi	0x1c, 0	; 28
    13b6:	99 27       	eor	r25, r25
    13b8:	8d b3       	in	r24, 0x1d	; 29
    13ba:	08 95       	ret

000013bc <__eewr_byte_m16>:
    13bc:	26 2f       	mov	r18, r22

000013be <__eewr_r18_m16>:
    13be:	e1 99       	sbic	0x1c, 1	; 28
    13c0:	fe cf       	rjmp	.-4      	; 0x13be <__eewr_r18_m16>
    13c2:	9f bb       	out	0x1f, r25	; 31
    13c4:	8e bb       	out	0x1e, r24	; 30
    13c6:	2d bb       	out	0x1d, r18	; 29
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	e2 9a       	sbi	0x1c, 2	; 28
    13ce:	e1 9a       	sbi	0x1c, 1	; 28
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	08 95       	ret

000013d6 <_exit>:
    13d6:	f8 94       	cli

000013d8 <__stop_program>:
    13d8:	ff cf       	rjmp	.-2      	; 0x13d8 <__stop_program>
